;
; ЩЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЛ
; К	This file is generated by The Interactive Disassembler (IDA)	    К
; К	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    К
; К			 Licensed to: Freeware version			    К
; ШЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭМ
;
;
; ЩЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЛ
; К	This file is generated by The Interactive Disassembler (IDA)	    К
; К	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    К
; К			 Licensed to: Freeware version			    К
; ШЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭМ
;
; Input	MD5   :	6993E8C780A09E2926FF1516AD47E462

; File Name   :	C:\Users\Administrateur\Documents\M1\s2\IR\DAA-2021\DAA-2021\DAA2021\malware.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 0001B60C ( 112140.)
; Section size in file		: 0001B800 ( 112640.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default


unicode		macro page,string,zero
		irpc c,<string>
		db '&c', page
		endm
		ifnb <zero>
		dw zero
		endif
endm

		.686p
		.mmx
		.model flat

; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_401000	proc near		; DATA XREF: .rdata:0041D138o
		mov	ecx, offset dword_42CE18
		call	sub_402EBC
		push	offset byte_41C5BC
		call	sub_40589A
		pop	ecx
		retn
sub_401000	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_401016	proc near		; DATA XREF: .rdata:0041D154o
		push	offset loc_41C5C6
		call	sub_40589A
		pop	ecx
		retn
sub_401016	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_401022	proc near		; DATA XREF: .rdata:0041D158o
		push	offset loc_41C5D0
		call	sub_40589A
		pop	ecx
		retn
sub_401022	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40102E	proc near		; DATA XREF: .rdata:0041D144o
		push	1
		push	0
		push	offset dword_42CF70
		mov	ecx, offset dword_42CF20
		call	loc_403751
		push	offset loc_41C5DA
		call	sub_40589A
		pop	ecx
		retn
sub_40102E	endp ; sp = -0Ch


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40104D	proc near		; DATA XREF: .rdata:0041D140o
		push	esi
		push	edi
		push	1
		call	sub_40A9AD
		pop	ecx
		mov	edi, offset dword_42CF70
		mov	esi, eax
		mov	ecx, edi
		call	sub_4037B8
		push	0
		push	esi
		mov	ecx, edi
		mov	dword_42CF70, offset off_41DDB4
		call	sub_403BF3
		push	offset loc_41C5E4
		call	sub_40589A
		pop	ecx
		pop	edi
		pop	esi
		retn
sub_40104D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_401087	proc near		; DATA XREF: .rdata:0041D148o

; FUNCTION CHUNK AT 00403827 SIZE 00000059 BYTES

		mov	ecx, offset byte_42CF19
		jmp	loc_403827
sub_401087	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_401091	proc near		; DATA XREF: .rdata:0041D13Co
		mov	ecx, offset byte_42CF18
		call	sub_402EBC
		push	offset byte_41C5EE
		call	sub_40589A
		pop	ecx
		retn
sub_401091	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4010A7	proc near		; DATA XREF: .rdata:0041D150o
		push	offset loc_41C5F8
		call	sub_40589A
		pop	ecx
		retn
sub_4010A7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4010B3	proc near		; DATA XREF: .rdata:0041D14Co
		mov	ecx, offset byte_42D00C
		call	sub_402EBC
		push	offset byte_41C602
		call	sub_40589A
		pop	ecx
		retn
sub_4010B3	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4010D0	proc near		; CODE XREF: sub_4048F2+Dp
					; sub_404947+Dp

var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	edx, [ebp+arg_0]
		lea	eax, [ebp+var_C]
		push	esi
		mov	esi, ecx
		mov	[ebp+var_C], edx
		lea	ecx, [esi+4]
		mov	[ebp+var_8], 1
		push	ecx
		xorps	xmm0, xmm0
		mov	dword ptr [esi], offset	off_41DCD8
		push	eax
		movq	qword ptr [ecx], xmm0
		call	sub_40670A
		mov	ecx, [ebp+var_4]
		add	esp, 8
		mov	eax, esi
		xor	ecx, ebp
		pop	esi
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn	4
sub_4010D0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401120	proc near		; CODE XREF: sub_4048A4+9p
					; sub_4048D7+9p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		xorps	xmm0, xmm0
		lea	eax, [esi+4]
		push	eax
		mov	dword ptr [esi], offset	off_41DCD8
		movq	qword ptr [eax], xmm0
		mov	eax, [ebp+arg_0]
		add	eax, 4
		push	eax
		call	sub_40670A
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_401120	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_401150	proc near		; DATA XREF: .rdata:0041DCDCo
					; .rdata:0041DCE8o ...
		mov	ecx, [ecx+4]
		mov	eax, offset aUnknownExcepti ; "Unknown exception"
		test	ecx, ecx
		cmovnz	eax, ecx
		retn
sub_401150	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401160	proc near		; DATA XREF: .rdata:off_41DCD8o
					; .rdata:off_41DCE4o ...

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		lea	eax, [esi+4]
		mov	dword ptr [esi], offset	off_41DCD8
		push	eax
		call	sub_40676D
		add	esp, 4
		test	[ebp+arg_0], 1
		jz	short loc_401189
		push	0Ch
		push	esi
		call	sub_40535E
		add	esp, 8

loc_401189:				; CODE XREF: sub_401160+1Cj
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_401160	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401190	proc near		; CODE XREF: .text:004012D0p
					; .text:0040171Fp

var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	edx, [ebp+arg_0]
		lea	eax, [ebp+var_C]
		push	esi
		mov	esi, ecx
		mov	[ebp+var_C], edx
		lea	ecx, [esi+4]
		mov	[ebp+var_8], 1
		push	ecx
		xorps	xmm0, xmm0
		mov	dword ptr [esi], offset	off_41DCD8
		push	eax
		movq	qword ptr [ecx], xmm0
		call	sub_40670A
		mov	ecx, [ebp+var_4]
		add	esp, 8
		mov	dword ptr [esi], offset	off_41DCE4
		mov	eax, esi
		xor	ecx, ebp
		pop	esi
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn	4
sub_401190	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4011F0	proc near		; DATA XREF: .rdata:0042ACF8o
					; .rdata:0042AD4Co ...
		lea	eax, [ecx+4]
		mov	dword ptr [ecx], offset	off_41DCD8
		push	eax
		call	sub_40676D
		pop	ecx
		retn
sub_4011F0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_401210	proc near		; CODE XREF: .text:00402614p
					; .text:00402D6Dp ...
		xorps	xmm0, xmm0
		mov	eax, ecx
		movq	qword ptr [ecx+4], xmm0
		mov	dword ptr [ecx+4], offset aBadCast ; "bad cast"
		mov	dword ptr [ecx], offset	off_41DCF0
		retn
sub_401210	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_401230:				; CODE XREF: sub_403B8B+3Cp
		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C14A
		mov	eax, large fs:0
		push	eax
		sub	esp, 10h
		push	esi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp-0Ch]
		mov	large fs:0, eax
		mov	esi, ecx
		mov	[ebp-10h], esi
		push	0
		call	sub_402EE9
		mov	dword ptr [ebp-4], 0
		mov	dword ptr [esi+4], 0
		mov	byte ptr [esi+8], 0
		mov	dword ptr [esi+0Ch], 0
		mov	byte ptr [esi+10h], 0
		xor	eax, eax
		mov	dword ptr [esi+14h], 0
		mov	[esi+18h], ax
		mov	[esi+1Ch], eax
		mov	[esi+20h], ax
		mov	[esi+24h], eax
		mov	[esi+28h], al
		mov	[esi+2Ch], eax
		mov	[esi+30h], al
		mov	eax, [ebp+8]
		mov	byte ptr [ebp-4], 6
		test	eax, eax
		jz	short loc_4012C8
		push	eax
		push	esi
		call	sub_40322F
		add	esp, 8
		mov	eax, esi
		mov	ecx, [ebp-0Ch]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4012C8:				; CODE XREF: .text:004012A8j
		push	offset aBadLocaleName ;	"bad locale name"
		lea	ecx, [ebp-1Ch]
		call	sub_401190
		push	offset dword_42B5D4
		lea	eax, [ebp-1Ch]
		push	eax
		call	sub_406D34
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 0CCh
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4012F0	proc near		; CODE XREF: sub_403B8B+5Ap

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C170
		mov	eax, large fs:0
		push	eax
		push	esi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	esi, ecx
		push	esi
		call	sub_40327A
		mov	eax, [esi+2Ch]
		add	esp, 4
		test	eax, eax
		jz	short loc_40132E
		push	eax
		call	sub_409C2E
		add	esp, 4

loc_40132E:				; CODE XREF: sub_4012F0+33j
		mov	dword ptr [esi+2Ch], 0
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_401345
		push	eax
		call	sub_409C2E
		add	esp, 4

loc_401345:				; CODE XREF: sub_4012F0+4Aj
		mov	dword ptr [esi+24h], 0
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_40135C
		push	eax
		call	sub_409C2E
		add	esp, 4

loc_40135C:				; CODE XREF: sub_4012F0+61j
		mov	dword ptr [esi+1Ch], 0
		mov	eax, [esi+14h]
		test	eax, eax
		jz	short loc_401373
		push	eax
		call	sub_409C2E
		add	esp, 4

loc_401373:				; CODE XREF: sub_4012F0+78j
		mov	dword ptr [esi+14h], 0
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_40138A
		push	eax
		call	sub_409C2E
		add	esp, 4

loc_40138A:				; CODE XREF: sub_4012F0+8Fj
		mov	dword ptr [esi+0Ch], 0
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_4013A1
		push	eax
		call	sub_409C2E
		add	esp, 4

loc_4013A1:				; CODE XREF: sub_4012F0+A6j
		mov	ecx, esi
		mov	dword ptr [esi+4], 0
		call	sub_402F41
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_4012F0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4013C0	proc near		; DATA XREF: .rdata:0042B5D0o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		xorps	xmm0, xmm0
		lea	eax, [esi+4]
		push	eax
		mov	dword ptr [esi], offset	off_41DCD8
		movq	qword ptr [eax], xmm0
		mov	eax, [ebp+arg_0]
		add	eax, 4
		push	eax
		call	sub_40670A
		add	esp, 8
		mov	dword ptr [esi], offset	off_41DCE4
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_4013C0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401400	proc near		; DATA XREF: .rdata:off_41D1A4o

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		test	[ebp+arg_0], 1
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_41D1A4
		jz	short loc_40141D
		push	4
		push	esi
		call	sub_40535E
		add	esp, 8

loc_40141D:				; CODE XREF: sub_401400+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_401400	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401430	proc near		; CODE XREF: sub_4036AB+28p

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi], 0
		jnz	short loc_40146E
		push	0
		lea	ecx, [ebp+var_8]
		call	sub_402EE9
		cmp	dword ptr [esi], 0
		jnz	short loc_401466
		mov	ecx, dword_42CEE0
		inc	ecx
		mov	dword_42CEE0, ecx
		mov	[esi], ecx

loc_401466:				; CODE XREF: sub_401430+25j
		lea	ecx, [ebp+var_8]
		call	sub_402F41

loc_40146E:				; CODE XREF: sub_401430+16j
		mov	ecx, [ebp+var_4]
		mov	eax, [esi]
		xor	ecx, ebp
		pop	esi
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_401430	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
dword_401480	dd 441FFF0h, 0CCCCCCC3h, 2 dup(0CCCCCCCCh), 0F0FFC883h
					; DATA XREF: .rdata:0041D1B8o
					; .rdata:0041DD00o ...
		dd 441C10Fh, 0B8h, 0C1440F00h, 0CCCCCCC3h, 3 dup(0CCCCCCCCh)

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4014B0	proc near		; CODE XREF: sub_403918+10p
					; sub_404D1D+2Ep ...

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C190
		mov	eax, large fs:0
		push	eax
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jz	short loc_4014EA
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_4014EA
		mov	edx, [eax]
		mov	ecx, eax
		push	1
		call	dword ptr [edx]

loc_4014EA:				; CODE XREF: sub_4014B0+27j
					; sub_4014B0+30j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		mov	esp, ebp
		pop	ebp
		retn
sub_4014B0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_401500	proc near		; CODE XREF: sub_403B8B+33p
		mov	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_40150D
		mov	eax, offset dword_4298B0
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40150D:				; CODE XREF: sub_401500+5j
		mov	ecx, [eax+18h]
		test	ecx, ecx
		jz	short loc_401517
		mov	eax, ecx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401517:				; CODE XREF: sub_401500+12j
		add	eax, 1Ch
		retn
sub_401500	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401520	proc near		; CODE XREF: sub_4036AB+31p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ecx+4]
		push	esi
		mov	esi, [ebp+arg_0]
		cmp	esi, [ecx+0Ch]
		jnb	short loc_40153B
		mov	eax, [ecx+8]
		mov	eax, [eax+esi*4]
		test	eax, eax
		jnz	short loc_40155A
		jmp	short loc_40153D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40153B:				; CODE XREF: sub_401520+Dj
		xor	eax, eax

loc_40153D:				; CODE XREF: sub_401520+19j
		cmp	byte ptr [ecx+14h], 0
		jz	short loc_40155A
		call	sub_403122
		cmp	esi, [eax+0Ch]
		jnb	short loc_401558
		mov	eax, [eax+8]
		mov	eax, [eax+esi*4]
		pop	esi
		pop	ebp
		retn	4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401558:				; CODE XREF: sub_401520+2Bj
		xor	eax, eax

loc_40155A:				; CODE XREF: sub_401520+17j
					; sub_401520+21j
		pop	esi
		pop	ebp
		retn	4
sub_401520	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_401560:				; CODE XREF: .text:00402573p
					; .text:00402CE7p
		push	ebx
		mov	ebx, esp
		sub	esp, 8
		and	esp, 0FFFFFFF8h
		add	esp, 4
		push	ebp
		mov	ebp, [ebx+4]
		mov	[esp+4], ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C1F7
		mov	eax, large fs:0
		push	eax
		push	ebx
		sub	esp, 50h
		push	esi
		push	edi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp-0Ch]
		mov	large fs:0, eax
		mov	edi, [ebx+8]
		test	edi, edi
		jz	loc_4016FE
		cmp	dword ptr [edi], 0
		jnz	loc_4016FE
		push	18h
		call	sub_40536C
		add	esp, 4
		mov	[ebp-14h], eax
		mov	ecx, [ebx+0Ch]
		mov	dword ptr [ebp-4], 0
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jnz	short loc_4015D4
		mov	esi, offset dword_4298B0
		jmp	short loc_4015DE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4015D4:				; CODE XREF: .text:004015CBj
		mov	esi, [ecx+18h]
		test	esi, esi
		jnz	short loc_4015DE
		lea	esi, [ecx+1Ch]

loc_4015DE:				; CODE XREF: .text:004015D2j
					; .text:004015D9j
		push	0
		lea	ecx, [ebp-5Ch]
		call	sub_402EE9
		mov	dword ptr [ebp-58h], 0
		mov	byte ptr [ebp-54h], 0
		mov	dword ptr [ebp-50h], 0
		mov	byte ptr [ebp-4Ch], 0
		xor	eax, eax
		mov	dword ptr [ebp-48h], 0
		mov	[ebp-44h], ax
		mov	[ebp-40h], eax
		mov	[ebp-3Ch], ax
		mov	[ebp-38h], eax
		mov	[ebp-34h], al
		mov	[ebp-30h], eax
		mov	[ebp-2Ch], al
		mov	byte ptr [ebp-4], 7
		test	esi, esi
		jz	loc_401717
		lea	eax, [ebp-5Ch]
		push	esi
		push	eax
		call	sub_40322F
		mov	esi, [ebp-14h]
		lea	eax, [ebp-28h]
		push	eax
		mov	dword ptr [esi+4], 0
		mov	dword ptr [esi], offset	off_41DCFC
		call	sub_403344
		add	esp, 0Ch
		movups	xmm0, oword ptr	[eax]
		movups	oword ptr [esi+8], xmm0
		mov	[edi], esi
		lea	eax, [ebp-5Ch]
		mov	dword ptr [ebp-4], 8
		push	eax
		call	sub_40327A
		mov	eax, [ebp-30h]
		add	esp, 4
		test	eax, eax
		jz	short loc_40167C
		push	eax
		call	sub_409C2E
		add	esp, 4

loc_40167C:				; CODE XREF: .text:00401671j
		mov	eax, [ebp-38h]
		mov	dword ptr [ebp-30h], 0
		test	eax, eax
		jz	short loc_401693
		push	eax
		call	sub_409C2E
		add	esp, 4

loc_401693:				; CODE XREF: .text:00401688j
		mov	eax, [ebp-40h]
		mov	dword ptr [ebp-38h], 0
		test	eax, eax
		jz	short loc_4016AA
		push	eax
		call	sub_409C2E
		add	esp, 4

loc_4016AA:				; CODE XREF: .text:0040169Fj
		mov	eax, [ebp-48h]
		mov	dword ptr [ebp-40h], 0
		test	eax, eax
		jz	short loc_4016C1
		push	eax
		call	sub_409C2E
		add	esp, 4

loc_4016C1:				; CODE XREF: .text:004016B6j
		mov	eax, [ebp-50h]
		mov	dword ptr [ebp-48h], 0
		test	eax, eax
		jz	short loc_4016D8
		push	eax
		call	sub_409C2E
		add	esp, 4

loc_4016D8:				; CODE XREF: .text:004016CDj
		mov	eax, [ebp-58h]
		mov	dword ptr [ebp-50h], 0
		test	eax, eax
		jz	short loc_4016EF
		push	eax
		call	sub_409C2E
		add	esp, 4

loc_4016EF:				; CODE XREF: .text:004016E4j
		lea	ecx, [ebp-5Ch]
		mov	dword ptr [ebp-58h], 0
		call	sub_402F41

loc_4016FE:				; CODE XREF: .text:004015A0j
					; .text:004015A9j
		mov	eax, 2
		mov	ecx, [ebp-0Ch]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		mov	esp, ebx
		pop	ebx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401717:				; CODE XREF: .text:00401624j
		push	offset aBadLocaleName ;	"bad locale name"
		lea	ecx, [ebp-24h]
		call	sub_401190
		push	offset dword_42B5D4
		lea	eax, [ebp-24h]
		push	eax
		call	sub_406D34
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dw 0CCCCh
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401740	proc near		; DATA XREF: .rdata:0041DD0Co

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		lea	eax, [ecx+8]
		push	eax
		movzx	eax, [ebp+arg_0]
		push	eax
		call	sub_4033AC
		add	esp, 8
		pop	ebp
		retn	4
sub_401740	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401760	proc near		; DATA XREF: .rdata:0041DD08o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_4]
		xor	edx, edx
		push	esi
		mov	esi, [ebp+arg_0]
		sub	ebx, esi
		push	edi
		xor	edi, edi
		cmp	esi, [ebp+arg_4]
		cmova	ebx, edx
		test	ebx, ebx
		jz	short loc_40179B
		lea	eax, [ecx+8]
		mov	[ebp+var_4], eax

loc_401783:				; CODE XREF: sub_401760+39j
		push	eax
		movzx	eax, byte ptr [esi]
		push	eax
		call	sub_4033AC
		mov	[esi], al
		inc	edi
		mov	eax, [ebp+var_4]
		add	esp, 8
		inc	esi
		cmp	edi, ebx
		jnz	short loc_401783

loc_40179B:				; CODE XREF: sub_401760+1Bj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	8
sub_401760	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4017B0	proc near		; DATA XREF: .rdata:0041DD14o

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		lea	eax, [ecx+8]
		push	eax
		movzx	eax, [ebp+arg_0]
		push	eax
		call	sub_4034AA
		add	esp, 8
		pop	ebp
		retn	4
sub_4017B0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4017D0	proc near		; DATA XREF: .rdata:0041DD10o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_4]
		xor	edx, edx
		push	esi
		mov	esi, [ebp+arg_0]
		sub	ebx, esi
		push	edi
		xor	edi, edi
		cmp	esi, [ebp+arg_4]
		cmova	ebx, edx
		test	ebx, ebx
		jz	short loc_40180B
		lea	eax, [ecx+8]
		mov	[ebp+var_4], eax

loc_4017F3:				; CODE XREF: sub_4017D0+39j
		push	eax
		movzx	eax, byte ptr [esi]
		push	eax
		call	sub_4034AA
		mov	[esi], al
		inc	edi
		mov	eax, [ebp+var_4]
		add	esp, 8
		inc	esi
		cmp	edi, ebx
		jnz	short loc_4017F3

loc_40180B:				; CODE XREF: sub_4017D0+1Bj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	8
sub_4017D0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401820	proc near		; DATA XREF: .rdata:0041DD1Co

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		mov	al, [ebp+arg_0]
		pop	ebp
		retn	4
sub_401820	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401830	proc near		; DATA XREF: .rdata:0041DD18o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_8]
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	edi, [ebp+arg_4]
		mov	ecx, edi
		sub	ecx, esi
		push	ecx
		push	esi
		push	edx
		call	loc_4067C0
		add	esp, 0Ch
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		retn	0Ch
sub_401830	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401860	proc near		; DATA XREF: .rdata:0041DD24o

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		mov	al, [ebp+arg_0]
		pop	ebp
		retn	8
sub_401860	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401870	proc near		; DATA XREF: .rdata:0041DD20o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_C]
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	edi, [ebp+arg_4]
		mov	ecx, edi
		sub	ecx, esi
		push	ecx
		push	esi
		push	edx
		call	loc_4067C0
		add	esp, 0Ch
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		retn	10h
sub_401870	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4018A0	proc near		; DATA XREF: .rdata:off_41DCFCo

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		mov	eax, [esi+10h]
		mov	dword ptr [esi], offset	off_41DCFC
		test	eax, eax
		jle	short loc_4018BD
		push	dword ptr [esi+0Ch]
		call	sub_409C2E
		jmp	short loc_4018C7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4018BD:				; CODE XREF: sub_4018A0+11j
		jns	short loc_4018CA
		push	dword ptr [esi+0Ch]
		call	sub_4053BF

loc_4018C7:				; CODE XREF: sub_4018A0+1Bj
		add	esp, 4

loc_4018CA:				; CODE XREF: sub_4018A0:loc_4018BDj
		push	dword ptr [esi+14h]
		call	sub_409C2E
		add	esp, 4
		mov	dword ptr [esi], offset	off_41D1A4
		test	[ebp+arg_0], 1
		jz	short loc_4018EC
		push	18h
		push	esi
		call	sub_40535E
		add	esp, 8

loc_4018EC:				; CODE XREF: sub_4018A0+3Fj
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_4018A0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401900	proc near		; DATA XREF: .rdata:0041DD50o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[eax], edx
		mov	[eax+4], ecx
		pop	ebp
		retn	8
sub_401900	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401920	proc near		; DATA XREF: .rdata:0041DD58o

var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ecx]
		lea	edx, [ebp+var_8]
		sub	esp, 8
		push	esi
		push	[ebp+arg_0]
		push	edx
		call	dword ptr [eax+0Ch]
		mov	esi, [ebp+arg_4]
		mov	ecx, [eax+4]
		mov	edx, [esi+4]
		mov	ecx, [ecx+4]
		cmp	ecx, [edx+4]
		jnz	short loc_401953
		mov	eax, [eax]
		cmp	eax, [esi]
		jnz	short loc_401953
		mov	al, 1
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401953:				; CODE XREF: sub_401920+22j
					; sub_401920+28j
		xor	al, al
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	8
sub_401920	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401960	proc near		; DATA XREF: .rdata:0041DD54o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ecx+4]
		push	esi
		mov	esi, [ebp+arg_0]
		mov	edx, [esi+4]
		cmp	eax, [edx+4]
		jnz	short loc_401980
		mov	eax, [esi]
		cmp	eax, [ebp+arg_4]
		jnz	short loc_401980
		mov	al, 1
		pop	esi
		pop	ebp
		retn	8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401980:				; CODE XREF: sub_401960+10j
					; sub_401960+17j
		xor	al, al
		pop	esi
		pop	ebp
		retn	8
sub_401960	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401990	proc near		; CODE XREF: .text:00401E85p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	offset dword_42DC78
		push	offset sub_402EA0
		push	offset dword_42DC6C
		call	sub_404887
		add	esp, 0Ch
		test	eax, eax
		jz	sub_409C4B
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax], ecx
		mov	dword ptr [eax+4], offset dword_42DC78
		pop	ebp
		retn
sub_401990	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_4019D0:				; CODE XREF: .text:00401DD8p
		push	ebx
		mov	ebx, esp
		sub	esp, 8
		and	esp, 0FFFFFFF8h
		add	esp, 4
		push	ebp
		mov	ebp, [ebx+4]
		mov	[esp+4], ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C230
		mov	eax, large fs:0
		push	eax
		push	ebx
		sub	esp, 68h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp-14h], eax
		push	esi
		push	edi
		push	eax
		lea	eax, [ebp-0Ch]
		mov	large fs:0, eax
		mov	[ebp-18h], ecx
		mov	[ebp-24h], ecx
		mov	eax, [ebx+10h]
		mov	[ebp-24h], ecx
		mov	[ebp-20h], eax
		mov	dword ptr [ebp-30h], 0
		cmp	dword ptr [eax+14h], 10h
		mov	esi, [eax+10h]
		mov	dword ptr [ebp-2Ch], 0
		jb	short loc_401A39
		mov	eax, [eax]
		mov	[ebp-20h], eax

loc_401A39:				; CODE XREF: .text:00401A32j
		cmp	esi, 10h
		jnb	short loc_401A53
		movups	xmm0, oword ptr	[eax]
		mov	dword ptr [ebp-2Ch], 0Fh
		mov	edi, 0Fh
		movups	oword ptr [ebp-40h], xmm0
		jmp	short loc_401ABD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401A53:				; CODE XREF: .text:00401A3Cj
		mov	edi, esi
		mov	eax, 7FFFFFFFh
		or	edi, 0Fh
		cmp	edi, eax
		cmova	edi, eax
		lea	ecx, [edi+1]
		cmp	ecx, 1000h
		jb	short loc_401A94
		lea	eax, [ecx+23h]
		or	edx, 0FFFFFFFFh
		cmp	eax, ecx
		cmovbe	eax, edx
		push	eax
		call	sub_40536C
		add	esp, 4
		test	eax, eax
		jz	loc_401C74
		lea	ecx, [eax+23h]
		and	ecx, 0FFFFFFE0h
		mov	[ecx-4], eax
		jmp	short loc_401AA7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401A94:				; CODE XREF: .text:00401A6Bj
		test	ecx, ecx
		jz	short loc_401AA5
		push	ecx
		call	sub_40536C
		add	esp, 4
		mov	ecx, eax
		jmp	short loc_401AA7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401AA5:				; CODE XREF: .text:00401A96j
		xor	ecx, ecx

loc_401AA7:				; CODE XREF: .text:00401A92j
					; .text:00401AA3j
		lea	eax, [esi+1]
		mov	[ebp-40h], ecx
		push	eax
		push	dword ptr [ebp-20h]
		push	ecx
		call	loc_4067C0
		add	esp, 0Ch
		mov	[ebp-2Ch], edi

loc_401ABD:				; CODE XREF: .text:00401A51j
		mov	eax, [ebx+8]
		mov	ecx, [ebx+0Ch]
		mov	[ebp-30h], esi
		mov	[ebp-24h], eax
		mov	[ebp-20h], ecx
		mov	dword ptr [ebp-4], 0
		test	esi, esi
		jz	short loc_401B1C
		mov	eax, edi
		sub	eax, esi
		push	2
		push	offset asc_4298B4 ; ": "
		cmp	eax, 2
		jb	short loc_401B08
		lea	eax, [esi+2]
		cmp	edi, 10h
		mov	[ebp-30h], eax
		lea	eax, [ebp-40h]
		cmovnb	eax, [ebp-40h]
		add	esi, eax
		push	esi
		call	loc_406DB0
		add	esp, 0Ch
		mov	byte ptr [esi+2], 0
		jmp	short loc_401B19
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401B08:				; CODE XREF: .text:00401AE5j
		mov	byte ptr [ebp-44h], 0
		lea	ecx, [ebp-40h]
		push	dword ptr [ebp-44h]
		push	2
		call	loc_402630

loc_401B19:				; CODE XREF: .text:00401B06j
		mov	ecx, [ebp-20h]

loc_401B1C:				; CODE XREF: .text:00401AD5j
		push	dword ptr [ebp-24h]
		mov	eax, [ecx]
		lea	edx, [ebp-5Ch]
		push	edx
		call	dword ptr [eax+8]
		mov	byte ptr [ebp-4], 1
		lea	ecx, [ebp-5Ch]
		cmp	dword ptr [ebp-48h], 10h
		mov	esi, [ebp-2Ch]
		mov	eax, esi
		cmovnb	ecx, [ebp-5Ch]
		mov	edi, [ebp-4Ch]
		mov	edx, [ebp-30h]
		sub	eax, edx
		push	edi
		push	ecx
		cmp	edi, eax
		ja	short loc_401B6C
		lea	eax, [edx+edi]
		cmp	esi, 10h
		mov	[ebp-30h], eax
		lea	eax, [ebp-40h]
		cmovnb	eax, [ebp-40h]
		lea	esi, [eax+edx]
		push	esi
		call	loc_406DB0
		add	esp, 0Ch
		mov	byte ptr [esi+edi], 0
		jmp	short loc_401B7C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401B6C:				; CODE XREF: .text:00401B48j
		mov	byte ptr [ebp-24h], 0
		lea	ecx, [ebp-40h]
		push	dword ptr [ebp-24h]
		push	edi
		call	loc_402630

loc_401B7C:				; CODE XREF: .text:00401B6Aj
		mov	edx, [ebp-48h]
		cmp	edx, 10h
		jb	short loc_401BB0
		mov	ecx, [ebp-5Ch]
		inc	edx
		mov	eax, ecx
		cmp	edx, 1000h
		jb	short loc_401BA6
		mov	ecx, [ecx-4]
		add	edx, 23h
		sub	eax, ecx
		add	eax, 0FFFFFFFCh
		cmp	eax, 1Fh
		ja	loc_401C74

loc_401BA6:				; CODE XREF: .text:00401B90j
		push	edx
		push	ecx
		call	sub_40535E
		add	esp, 8

loc_401BB0:				; CODE XREF: .text:00401B82j
		movups	xmm1, oword ptr	[ebp-40h]
		lea	ecx, [ebp-74h]
		mov	esi, [ebp-18h]
		movq	xmm0, qword ptr	[ebp-30h]
		movq	qword ptr [ebp-64h], xmm0
		xorps	xmm0, xmm0
		cmp	dword ptr [ebp-60h], 10h
		movd	eax, xmm1
		mov	dword ptr [esi], offset	off_41DCD8
		movq	qword ptr [esi+4], xmm0
		cmovnb	ecx, eax
		mov	dword ptr [ebp-30h], 0
		lea	eax, [esi+4]
		mov	dword ptr [ebp-2Ch], 0Fh
		push	eax
		lea	eax, [ebp-1Ch]
		mov	byte ptr [ebp-40h], 0
		push	eax
		movups	oword ptr [ebp-74h], xmm1
		mov	[ebp-1Ch], ecx
		mov	byte ptr [ebp-18h], 1
		call	sub_40670A
		mov	edx, [ebp-60h]
		add	esp, 8
		mov	dword ptr [esi], offset	off_41DCE4
		cmp	edx, 10h
		jb	short loc_401C40
		mov	ecx, [ebp-74h]
		inc	edx
		mov	eax, ecx
		cmp	edx, 1000h
		jb	short loc_401C36
		mov	ecx, [ecx-4]
		add	edx, 23h
		sub	eax, ecx
		add	eax, 0FFFFFFFCh
		cmp	eax, 1Fh
		ja	short loc_401C79

loc_401C36:				; CODE XREF: .text:00401C24j
		push	edx
		push	ecx
		call	sub_40535E
		add	esp, 8

loc_401C40:				; CODE XREF: .text:00401C16j
		mov	ecx, [ebx+8]
		mov	eax, esi
		mov	[esi+0Ch], ecx
		mov	ecx, [ebx+0Ch]
		mov	dword ptr [esi], offset	off_41DD2C
		mov	[esi+10h], ecx
		mov	ecx, [ebp-0Ch]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		mov	ecx, [ebp-14h]
		xor	ecx, ebp
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		mov	esp, ebx
		pop	ebx
		retn	0Ch
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401C74:				; CODE XREF: .text:00401A83j
					; .text:00401BA0j
		call	sub_409E45

loc_401C79:				; CODE XREF: .text:00401C34j
		call	sub_409E45
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dw 0CCCCh

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401C80	proc near		; DATA XREF: .rdata:off_41DD2Co
					; .rdata:off_41DD38o ...

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		lea	eax, [esi+4]
		mov	dword ptr [esi], offset	off_41DCD8
		push	eax
		call	sub_40676D
		add	esp, 4
		test	[ebp+arg_0], 1
		jz	short loc_401CA9
		push	14h
		push	esi
		call	sub_40535E
		add	esp, 8

loc_401CA9:				; CODE XREF: sub_401C80+1Cj
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_401C80	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_401CB0	proc near		; DATA XREF: .rdata:0041DD48o
		mov	eax, offset aIostream ;	"iostream"
		retn
sub_401CB0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_401CC0:				; DATA XREF: .rdata:0041DD4Co
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+0Ch]
		push	esi
		cmp	eax, 1
		jnz	short loc_401CF5
		mov	esi, [ebp+8]
		mov	ecx, esi
		push	15h
		push	offset aIostreamStream ; "iostream stream error"
		mov	dword ptr [esi+10h], 0
		mov	dword ptr [esi+14h], 0Fh
		mov	byte ptr [esi],	0
		call	loc_4020A0
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401CF5:				; CODE XREF: .text:00401CCAj
		push	edi
		push	eax
		call	sub_4035A8
		mov	esi, [ebp+8]
		mov	edx, eax
		mov	ecx, edx
		add	esp, 4
		mov	dword ptr [esi+10h], 0
		mov	dword ptr [esi+14h], 0Fh
		lea	edi, [ecx+1]
		mov	byte ptr [esi],	0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dw 0F66h
		dd 441Fh, 8441018Ah, 2BF975C0h,	8B5251CFh, 36EE8CEh, 8B5F0000h
		dd 0C25D5EC6h, 0CCCC0008h, 0CCCCCCCCh

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401D40	proc near		; DATA XREF: .rdata:off_41DD44o

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		test	[ebp+arg_0], 1
		push	esi
		mov	esi, ecx
		jz	short loc_401D57
		push	8
		push	esi
		call	sub_40535E
		add	esp, 8

loc_401D57:				; CODE XREF: sub_401D40+Aj
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_401D40	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_401D60:				; CODE XREF: .text:00401E93p
		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C268
		mov	eax, large fs:0
		push	eax
		sub	esp, 1Ch
		push	ebx
		push	esi
		push	edi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp-0Ch]
		mov	large fs:0, eax
		mov	esi, ecx
		mov	[ebp-10h], esi
		mov	eax, [ebp+0Ch]
		mov	edx, [ebp+8]
		mov	ecx, edx
		mov	[ebp-10h], esi
		mov	dword ptr [ebp-18h], 0
		mov	edi, [eax]
		mov	ebx, [eax+4]
		lea	eax, [ecx+1]
		mov	dword ptr [ebp-14h], 0Fh
		mov	byte ptr [ebp-28h], 0
		mov	[ebp-10h], eax

loc_401DB5:				; CODE XREF: .text:00401DBAj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_401DB5
		sub	ecx, [ebp-10h]
		push	ecx
		push	edx
		lea	ecx, [ebp-28h]
		call	loc_4020A0
		lea	eax, [ebp-28h]
		mov	dword ptr [ebp-4], 0
		push	eax
		push	ebx
		push	edi
		mov	ecx, esi
		call	loc_4019D0
		mov	edx, [ebp-14h]
		cmp	edx, 10h
		jb	short loc_401E0D
		mov	ecx, [ebp-28h]
		inc	edx
		mov	eax, ecx
		cmp	edx, 1000h
		jb	short loc_401E03
		mov	ecx, [ecx-4]
		add	edx, 23h
		sub	eax, ecx
		add	eax, 0FFFFFFFCh
		cmp	eax, 1Fh
		ja	short loc_401E29

loc_401E03:				; CODE XREF: .text:00401DF1j
		push	edx
		push	ecx
		call	sub_40535E
		add	esp, 8

loc_401E0D:				; CODE XREF: .text:00401DE3j
		mov	dword ptr [esi], offset	off_41DD60
		mov	eax, esi
		mov	ecx, [ebp-0Ch]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401E29:				; CODE XREF: .text:00401E01j
		call	sub_409E45
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dw 0CCCCh
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401E30:				; CODE XREF: sub_4023FD+41p
					; sub_4029C0+71p ...
		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		mov	eax, [ebp+8]
		sub	esp, 1Ch
		and	eax, 17h
		mov	[ecx+0Ch], eax
		mov	ecx, [ecx+10h]
		push	esi
		and	ecx, eax
		jz	short loc_401E52
		cmp	byte ptr [ebp+0Ch], 0
		jz	short loc_401E62
		jmp	short loc_401E59
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401E52:				; CODE XREF: .text:00401E48j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401E59:				; CODE XREF: .text:00401E50j
		push	0
		push	0
		call	sub_406D34

loc_401E62:				; CODE XREF: .text:00401E4Ej
		test	cl, 4
		jz	short loc_401E6E
		mov	esi, offset aIos_baseBadbit ; "ios_base::badbit	set"
		jmp	short loc_401E7E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_401E6E:				; CODE XREF: .text:00401E65j
		test	cl, 2
		mov	esi, offset aIos_baseFailbi ; "ios_base::failbit set"
		mov	eax, offset aIos_baseEofbit ; "ios_base::eofbit	set"
		cmovz	esi, eax

loc_401E7E:				; CODE XREF: .text:00401E6Cj
		lea	eax, [esp+4]
		push	1
		push	eax
		call	sub_401990
		add	esp, 8
		lea	ecx, [esp+0Ch]
		push	eax
		push	esi
		call	loc_401D60
		push	offset dword_42B580
		lea	eax, [esp+10h]
		push	eax
		call	sub_406D34
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 0CCh
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401EB0	proc near		; DATA XREF: .rdata:0042B57Co

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		xorps	xmm0, xmm0
		push	edi
		mov	edi, ecx
		lea	eax, [edi+4]
		push	eax
		mov	dword ptr [edi], offset	off_41DCD8
		movq	qword ptr [eax], xmm0
		lea	eax, [esi+4]
		push	eax
		call	sub_40670A
		mov	dword ptr [edi], offset	off_41DD2C
		add	esp, 8
		mov	eax, [esi+0Ch]
		mov	[edi+0Ch], eax
		mov	eax, [esi+10h]
		mov	[edi+10h], eax
		mov	eax, edi
		mov	dword ptr [edi], offset	off_41DD60
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_401EB0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401F00	proc near		; DATA XREF: .rdata:0042B560o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		xorps	xmm0, xmm0
		push	edi
		mov	edi, ecx
		lea	eax, [edi+4]
		push	eax
		mov	dword ptr [edi], offset	off_41DCD8
		movq	qword ptr [eax], xmm0
		lea	eax, [esi+4]
		push	eax
		call	sub_40670A
		mov	dword ptr [edi], offset	off_41DD2C
		add	esp, 8
		mov	eax, [esi+0Ch]
		mov	[edi+0Ch], eax
		mov	eax, [esi+10h]
		mov	[edi+10h], eax
		mov	eax, edi
		mov	dword ptr [edi], offset	off_41DD38
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_401F00	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401F50	proc near		; DATA XREF: .rdata:0042B544o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		xorps	xmm0, xmm0
		push	edi
		mov	edi, ecx
		lea	eax, [edi+4]
		push	eax
		mov	dword ptr [edi], offset	off_41DCD8
		movq	qword ptr [eax], xmm0
		lea	eax, [esi+4]
		push	eax
		call	sub_40670A
		mov	dword ptr [edi], offset	off_41DD2C
		add	esp, 8
		mov	eax, [esi+0Ch]
		mov	[edi+0Ch], eax
		mov	eax, [esi+10h]
		mov	[edi+10h], eax
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_401F50	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_401FA0	proc near		; CODE XREF: start-8Dp

var_10		= dword	ptr -10h
var_C		= qword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 14h
		push	ebx
		push	esi
		push	edi
		mov	eax, 1
		mov	[esp+20h+var_4], 0
		xor	ecx, ecx
		lea	edi, [esp+20h+var_10]
		push	ebx
		cpuid
		xorps	xmm0, xmm0
		mov	esi, ebx
		movq	[esp+24h+var_C], xmm0
		pop	ebx
		mov	[edi], eax
		mov	[edi+4], esi
		mov	esi, offset aTrue ; "TRUE"
		mov	[edi+8], ecx
		mov	ecx, offset dword_42CF20
		mov	[edi+0Ch], edx
		mov	edx, offset aVmDetected	; "VM detected : "
		mov	eax, dword ptr [esp+20h+var_C+4]
		sar	eax, 1Fh
		test	al, 1
		mov	eax, offset aFalse ; "FALSE"
		cmovz	esi, eax
		call	loc_4021E0
		mov	edx, esi
		mov	ecx, eax
		call	loc_4021E0
		push	eax
		call	loc_402490
		add	esp, 4
		push	offset dword_42CF20
		call	loc_402490
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_401FA0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
; START	OF FUNCTION CHUNK FOR sub_41C108

loc_402030:				; CODE XREF: sub_41C108+6j
					; sub_41C113+6j ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_402042
		push	eax
		call	sub_409C2E
		add	esp, 4

loc_402042:				; CODE XREF: sub_41C108-1A0D1j
		mov	dword ptr [esi], 0
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_41C108
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_402050:				; CODE XREF: sub_404313+171p
					; sub_41C220+3j ...
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+14h]
		cmp	ecx, 10h
		jb	short loc_402082
		mov	eax, [esi]
		inc	ecx
		cmp	ecx, 1000h
		jb	short loc_402078
		mov	edx, [eax-4]
		add	ecx, 23h
		sub	eax, edx
		add	eax, 0FFFFFFFCh
		cmp	eax, 1Fh
		ja	short loc_402095
		mov	eax, edx

loc_402078:				; CODE XREF: .text:00402064j
		push	ecx
		push	eax
		call	sub_40535E
		add	esp, 8

loc_402082:				; CODE XREF: .text:00402059j
		mov	dword ptr [esi+10h], 0
		mov	dword ptr [esi+14h], 0Fh
		mov	byte ptr [esi],	0
		pop	esi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402095:				; CODE XREF: .text:00402074j
		call	sub_409E45
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dw 0CCCCh
		align 10h

loc_4020A0:				; CODE XREF: .text:00401CE9p
					; .text:00401DC4p
		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	eax, [ebp+8]
		push	ebx
		push	esi
		mov	esi, ecx
		mov	[ebp-8], eax
		push	edi
		mov	edi, [ebp+0Ch]
		mov	ecx, [esi+14h]
		mov	[ebp-0Ch], ecx
		cmp	edi, ecx
		ja	short loc_4020E4
		mov	ebx, esi
		cmp	ecx, 10h
		jb	short loc_4020C7
		mov	ebx, [esi]

loc_4020C7:				; CODE XREF: .text:004020C3j
		push	edi
		push	eax
		push	ebx
		mov	[esi+10h], edi
		call	loc_406DB0
		add	esp, 0Ch
		mov	byte ptr [edi+ebx], 0
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4020E4:				; CODE XREF: .text:004020BCj
		cmp	edi, 7FFFFFFFh
		ja	loc_4021CE
		mov	ebx, edi
		or	ebx, 0Fh
		cmp	ebx, 7FFFFFFFh
		jbe	short loc_402104
		mov	ebx, 7FFFFFFFh
		jmp	short loc_402122
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402104:				; CODE XREF: .text:004020FBj
		mov	edx, ecx
		mov	eax, 7FFFFFFFh
		shr	edx, 1
		sub	eax, edx
		cmp	ecx, eax
		jbe	short loc_40211A
		mov	ebx, 7FFFFFFFh
		jmp	short loc_402122
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40211A:				; CODE XREF: .text:00402111j
		lea	eax, [edx+ecx]
		cmp	ebx, eax
		cmovb	ebx, eax

loc_402122:				; CODE XREF: .text:00402102j
					; .text:00402118j
		xor	ecx, ecx
		mov	eax, ebx
		add	eax, 1
		setb	cl
		neg	ecx
		or	ecx, eax
		cmp	ecx, 1000h
		jb	short loc_40215D
		lea	eax, [ecx+23h]
		or	edx, 0FFFFFFFFh
		cmp	eax, ecx
		cmovbe	eax, edx
		push	eax
		call	sub_40536C
		mov	ecx, eax
		add	esp, 4
		test	ecx, ecx
		jz	short loc_4021C9
		lea	eax, [ecx+23h]
		and	eax, 0FFFFFFE0h
		mov	[eax-4], ecx
		jmp	short loc_40216E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40215D:				; CODE XREF: .text:00402136j
		test	ecx, ecx
		jz	short loc_40216C
		push	ecx
		call	sub_40536C
		add	esp, 4
		jmp	short loc_40216E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40216C:				; CODE XREF: .text:0040215Fj
		xor	eax, eax

loc_40216E:				; CODE XREF: .text:0040215Bj
					; .text:0040216Aj
		push	edi
		push	dword ptr [ebp-8]
		mov	[ebp-4], eax
		push	eax
		mov	[esi+10h], edi
		mov	[esi+14h], ebx
		call	loc_4067C0
		mov	ebx, [ebp-4]
		add	esp, 0Ch
		mov	eax, [ebp-0Ch]
		mov	byte ptr [edi+ebx], 0
		cmp	eax, 10h
		jb	short loc_4021BC
		lea	ecx, [eax+1]
		mov	eax, [esi]
		cmp	ecx, 1000h
		jb	short loc_4021B2
		mov	edx, [eax-4]
		add	ecx, 23h
		sub	eax, edx
		add	eax, 0FFFFFFFCh
		cmp	eax, 1Fh
		ja	short loc_4021C9
		mov	eax, edx

loc_4021B2:				; CODE XREF: .text:0040219Ej
		push	ecx
		push	eax
		call	sub_40535E
		add	esp, 8

loc_4021BC:				; CODE XREF: .text:00402191j
		pop	edi
		mov	[esi], ebx
		mov	eax, esi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4021C9:				; CODE XREF: .text:00402150j
					; .text:004021AEj
		call	sub_409E45

loc_4021CE:				; CODE XREF: .text:004020EAj
		call	loc_402970
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 0CCh
		align 10h

loc_4021E0:				; CODE XREF: sub_401FA0+59p
					; sub_401FA0+62p
		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C2A0
		mov	eax, large fs:0
		push	eax
		sub	esp, 34h
		push	ebx
		push	esi
		push	edi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp-0Ch]
		mov	large fs:0, eax
		mov	[ebp-10h], esp
		mov	eax, edx
		mov	[ebp-1Ch], eax
		mov	ebx, ecx
		mov	[ebp-2Ch], ebx
		mov	ecx, eax
		mov	[ebp-38h], ebx
		mov	dword ptr [ebp-3Ch], 0
		lea	edx, [ecx+1]

loc_402224:				; CODE XREF: .text:00402229j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_402224
		sub	ecx, edx
		mov	edx, [ebx]
		mov	[ebp-34h], ecx
		mov	eax, [edx+4]
		mov	edi, [eax+ebx+24h]
		mov	esi, [eax+ebx+20h]
		test	edi, edi
		jl	short loc_402258
		jg	short loc_402251
		test	esi, esi
		jz	short loc_402258
		test	edi, edi
		jl	short loc_402258
		jg	short loc_402251
		cmp	esi, ecx
		jbe	short loc_402258

loc_402251:				; CODE XREF: .text:00402241j
					; .text:0040224Bj
		sub	esi, ecx
		sbb	edi, 0
		jmp	short loc_402266
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402258:				; CODE XREF: .text:0040223Fj
					; .text:00402245j ...
		xorps	xmm0, xmm0
		movlpd	oword ptr [ebp-28h], xmm0
		mov	edi, [ebp-24h]
		mov	esi, [ebp-28h]

loc_402266:				; CODE XREF: .text:00402256j
		mov	eax, [eax+ebx+38h]
		mov	ecx, edx
		mov	[ebp-30h], edi
		mov	[ebp-28h], ebx
		test	eax, eax
		jz	short loc_402286
		mov	ecx, [edx+4]
		mov	eax, [eax]
		mov	ecx, [ecx+ebx+38h]
		call	dword ptr [eax+4]
		mov	edx, [ebx]
		mov	ecx, edx

loc_402286:				; CODE XREF: .text:00402274j
		mov	dword ptr [ebp-4], 0
		mov	eax, [edx+4]
		add	eax, ebx
		mov	[ebp-18h], eax
		mov	eax, edx
		mov	ebx, [ebp-18h]
		cmp	dword ptr [ebx+0Ch], 0
		mov	ebx, [ebp-2Ch]
		jnz	short loc_4022C9
		mov	ebx, [ebp-18h]
		mov	ecx, edx
		cmp	dword ptr [ebx+3Ch], 0
		mov	ebx, [ebp-2Ch]
		jz	short loc_4022C9
		mov	edi, [ebp-18h]
		mov	edx, [edi+3Ch]
		mov	edi, [ebp-30h]
		cmp	edx, ebx
		jz	short loc_4022C9
		mov	ecx, edx
		call	sub_4029C0
		mov	eax, [ebx]
		mov	ecx, eax

loc_4022C9:				; CODE XREF: .text:004022A1j
					; .text:004022AFj ...
		mov	edx, [eax+4]
		mov	eax, [edx+ebx+0Ch]
		test	eax, eax
		setz	byte ptr [ebp-24h]
		mov	dword ptr [ebp-4], 1
		test	eax, eax
		jz	short loc_4022EB
		mov	esi, 4
		jmp	loc_402423
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4022EB:				; CODE XREF: .text:004022DFj
		mov	byte ptr [ebp-4], 2
		mov	eax, [edx+ebx+14h]
		and	eax, 1C0h
		cmp	eax, 40h
		jz	short loc_402363
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 0Fh,	1Fh, 0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402300:				; CODE XREF: .text:0040235Fj
		test	edi, edi
		jl	short loc_402361
		jg	short loc_40230A
		test	esi, esi
		jz	short loc_402361

loc_40230A:				; CODE XREF: .text:00402304j
		mov	eax, [ebx]
		mov	eax, [eax+4]
		mov	cl, [eax+ebx+40h]
		mov	[ebp-11h], cl
		mov	ecx, [eax+ebx+38h]
		mov	eax, [ecx+20h]
		cmp	dword ptr [eax], 0
		jz	short loc_402342
		mov	edx, [ecx+30h]
		mov	eax, [edx]
		test	eax, eax
		jle	short loc_402342
		dec	eax
		mov	[edx], eax
		mov	ecx, [ecx+20h]
		mov	edx, [ecx]
		lea	eax, [edx+1]
		mov	[ecx], eax
		mov	al, [ebp-11h]
		mov	[edx], al
		movzx	eax, al
		jmp	short loc_40234C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402342:				; CODE XREF: .text:00402320j
					; .text:00402329j
		movzx	eax, byte ptr [ebp-11h]
		mov	edx, [ecx]
		push	eax
		call	dword ptr [edx+0Ch]

loc_40234C:				; CODE XREF: .text:00402340j
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_402359
		lea	esi, [eax+5]
		jmp	loc_4023E6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402359:				; CODE XREF: .text:0040234Fj
		add	esi, 0FFFFFFFFh
		adc	edi, 0FFFFFFFFh
		jmp	short loc_402300
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402361:				; CODE XREF: .text:00402302j
					; .text:00402308j
		mov	ecx, [ebx]

loc_402363:				; CODE XREF: .text:004022FBj
		mov	eax, [ecx+4]
		push	0
		push	dword ptr [ebp-34h]
		mov	ecx, [eax+ebx+38h]
		push	dword ptr [ebp-1Ch]
		mov	eax, [ecx]
		mov	eax, [eax+24h]
		call	eax
		cmp	eax, [ebp-34h]
		jnz	short loc_4023D5
		test	edx, edx
		jnz	short loc_4023D5

loc_402382:				; CODE XREF: .text:004023E2j
		test	edi, edi
		jl	short loc_4023E4
		jg	short loc_40238C
		test	esi, esi
		jz	short loc_4023E4

loc_40238C:				; CODE XREF: .text:00402386j
		mov	eax, [ebx]
		mov	eax, [eax+4]
		mov	ecx, [eax+ebx+38h]
		mov	dl, [eax+ebx+40h]
		mov	[ebp-11h], dl
		mov	eax, [ecx+20h]
		cmp	dword ptr [eax], 0
		jz	short loc_4023C7
		mov	eax, [ecx+30h]
		mov	eax, [eax]
		test	eax, eax
		jle	short loc_4023C7
		mov	edx, [ecx+30h]
		dec	eax
		mov	[edx], eax
		mov	ecx, [ecx+20h]
		mov	edx, [ecx]
		lea	eax, [edx+1]
		mov	[ecx], eax
		mov	al, [ebp-11h]
		mov	[edx], al
		movzx	eax, al
		jmp	short loc_4023D0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4023C7:				; CODE XREF: .text:004023A2j
					; .text:004023ABj
		movzx	eax, dl
		mov	edx, [ecx]
		push	eax
		call	dword ptr [edx+0Ch]

loc_4023D0:				; CODE XREF: .text:004023C5j
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_4023DC

loc_4023D5:				; CODE XREF: .text:0040237Cj
					; .text:00402380j
		mov	esi, 4
		jmp	short loc_4023E6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4023DC:				; CODE XREF: .text:004023D3j
		add	esi, 0FFFFFFFFh
		adc	edi, 0FFFFFFFFh
		jmp	short loc_402382
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4023E4:				; CODE XREF: .text:00402384j
					; .text:0040238Aj
		xor	esi, esi

loc_4023E6:				; CODE XREF: .text:00402354j
					; .text:004023DAj
		mov	eax, [ebx]
		mov	eax, [eax+4]
		mov	dword ptr [eax+ebx+20h], 0
		mov	dword ptr [eax+ebx+24h], 0
		jmp	short loc_40241C

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4023FD	proc near		; DATA XREF: .rdata:0042A98Co
		mov	edx, [ebp-38h]
		push	1
		push	4
		mov	eax, [edx]
		mov	ecx, [eax+4]
		add	ecx, edx
		call	sub_402D90
		mov	eax, offset loc_402416
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402416:				; DATA XREF: sub_4023FD+13o
		mov	esi, [ebp-3Ch]
		mov	ebx, [ebp-38h]

loc_40241C:				; CODE XREF: .text:004023FBj
		mov	dword ptr [ebp-4], 1

loc_402423:				; CODE XREF: .text:004022E6j
		mov	eax, [ebx]
		push	0
		mov	ecx, [eax+4]
		add	ecx, ebx
		mov	edx, [ecx+0Ch]
		or	edx, esi
		mov	eax, edx
		or	eax, 4
		cmp	dword ptr [ecx+38h], 0
		cmovnz	eax, edx
		push	eax
		call	loc_401E30
		mov	dword ptr [ebp-4], 4
		call	sub_40489F
		mov	esi, [ebp-28h]
		test	al, al
		jnz	short loc_40245D
		mov	ecx, esi
		call	sub_402E10

loc_40245D:				; CODE XREF: sub_4023FD+57j
		mov	byte ptr [ebp-4], 5
		mov	ecx, [esi]
		mov	ecx, [ecx+4]
		mov	ecx, [ecx+esi+38h]
		test	ecx, ecx
		jz	short loc_402473
		mov	edx, [ecx]
		call	dword ptr [edx+8]

loc_402473:				; CODE XREF: sub_4023FD+6Fj
		mov	eax, ebx
		mov	ecx, [ebp-0Ch]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_4023FD	endp ; sp =  4

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_402490:				; CODE XREF: sub_401FA0+68p
					; sub_401FA0+75p
		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C2D8
		mov	eax, large fs:0
		push	eax
		sub	esp, 2Ch
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp-10h], eax
		push	ebx
		push	esi
		push	edi
		push	eax
		lea	eax, [ebp-0Ch]
		mov	large fs:0, eax
		mov	ecx, [ebp+8]
		mov	[ebp-24h], ecx
		mov	eax, [ecx]
		mov	eax, [eax+4]
		mov	eax, [eax+ecx+30h]
		mov	dword ptr [ebp-4], 0
		mov	ebx, [eax+4]
		mov	ecx, ebx
		mov	[ebp-28h], ebx
		mov	eax, [ebx]
		call	dword ptr [eax+4]
		push	0
		lea	ecx, [ebp-1Ch]
		mov	dword ptr [ebp-4], 1
		call	sub_402EE9
		mov	byte ptr [ebp-4], 2
		mov	eax, dword_42DC70
		mov	edi, dword_42CEF8
		mov	[ebp-14h], eax
		mov	[ebp-20h], eax
		test	edi, edi
		jnz	short loc_402537
		push	edi
		lea	ecx, [ebp-18h]
		call	sub_402EE9
		cmp	dword_42CEF8, edi
		jnz	short loc_402529
		mov	eax, dword_42CEE0
		inc	eax
		mov	dword_42CEE0, eax
		mov	dword_42CEF8, eax

loc_402529:				; CODE XREF: .text:00402517j
		lea	ecx, [ebp-18h]
		call	sub_402F41
		mov	edi, dword_42CEF8

loc_402537:				; CODE XREF: .text:00402506j
		cmp	edi, [ebx+0Ch]
		jnb	short loc_402548
		mov	eax, [ebx+8]
		mov	esi, [eax+edi*4]
		test	esi, esi
		jnz	short loc_4025A4
		jmp	short loc_40254A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402548:				; CODE XREF: .text:0040253Aj
		xor	esi, esi

loc_40254A:				; CODE XREF: .text:00402546j
		cmp	byte ptr [ebx+14h], 0
		jz	short loc_402560
		call	sub_403122
		cmp	edi, [eax+0Ch]
		jnb	short loc_402564
		mov	eax, [eax+8]
		mov	esi, [eax+edi*4]

loc_402560:				; CODE XREF: .text:0040254Ej
		test	esi, esi
		jnz	short loc_4025A4

loc_402564:				; CODE XREF: .text:00402558j
		mov	esi, [ebp-14h]
		test	esi, esi
		jnz	short loc_4025A4
		lea	eax, [ebp-2Ch]
		push	eax
		lea	eax, [ebp-20h]
		push	eax
		call	loc_401560
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_402611
		mov	esi, [ebp-20h]
		mov	[ebp-14h], esi
		push	esi
		mov	byte ptr [ebp-4], 3
		call	sub_4030F6
		mov	eax, [esi]
		add	esp, 4
		mov	ecx, esi
		call	dword ptr [eax+4]
		mov	dword_42DC70, esi

loc_4025A4:				; CODE XREF: .text:00402544j
					; .text:00402562j ...
		lea	ecx, [ebp-1Ch]
		mov	byte ptr [ebp-4], 1
		call	sub_402F41
		mov	eax, [esi]
		mov	ecx, esi
		push	0Ah
		mov	eax, [eax+20h]
		call	eax
		mov	[ebp-14h], al
		mov	dword ptr [ebp-4], 4
		mov	ecx, ebx
		mov	eax, [ebx]
		call	dword ptr [eax+8]
		mov	ecx, eax
		test	ecx, ecx
		jz	short loc_4025D8
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]

loc_4025D8:				; CODE XREF: .text:004025D0j
		mov	esi, [ebp-24h]
		mov	ecx, esi
		mov	dword ptr [ebp-4], 0FFFFFFFFh
		push	dword ptr [ebp-14h]
		call	sub_402A90
		mov	ecx, esi
		call	sub_4029C0
		mov	eax, esi
		mov	ecx, [ebp-0Ch]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp-10h]
		xor	ecx, ebp
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402611:				; CODE XREF: .text:0040257Ej
		lea	ecx, [ebp-38h]
		call	sub_401210
		push	offset dword_42B504
		lea	eax, [ebp-38h]
		push	eax
		call	sub_406D34
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 0CCh
		align 10h

loc_402630:				; CODE XREF: .text:00401B14p
					; .text:00401B77p
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+10h]
		push	ebx
		mov	ebx, ecx
		mov	[ebp-10h], eax
		mov	ecx, 7FFFFFFFh
		mov	eax, ecx
		push	esi
		mov	edx, [ebx+10h]
		sub	eax, edx
		mov	esi, [ebp+8]
		mov	[ebp-4], edx
		push	edi
		cmp	eax, esi
		jb	loc_40277E
		mov	edi, [ebx+14h]
		lea	eax, [edx+esi]
		mov	esi, eax
		mov	[ebp-8], eax
		or	esi, 0Fh
		mov	[ebp-0Ch], edi
		cmp	esi, ecx
		jbe	short loc_402674
		mov	esi, ecx
		jmp	short loc_40268C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402674:				; CODE XREF: .text:0040266Ej
		mov	eax, edi
		shr	eax, 1
		sub	ecx, eax
		cmp	edi, ecx
		jbe	short loc_402685
		mov	esi, 7FFFFFFFh
		jmp	short loc_40268C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402685:				; CODE XREF: .text:0040267Cj
		add	eax, edi
		cmp	esi, eax
		cmovb	esi, eax

loc_40268C:				; CODE XREF: .text:00402672j
					; .text:00402683j
		xor	ecx, ecx
		mov	eax, esi
		add	eax, 1
		setb	cl
		neg	ecx
		or	ecx, eax
		cmp	ecx, 1000h
		jb	short loc_4026CC
		lea	eax, [ecx+23h]
		or	edx, 0FFFFFFFFh
		cmp	eax, ecx
		cmovbe	eax, edx
		push	eax
		call	sub_40536C
		add	esp, 4
		test	eax, eax
		jz	loc_402783
		mov	edx, [ebp-4]
		lea	edi, [eax+23h]
		and	edi, 0FFFFFFE0h
		mov	[edi-4], eax
		jmp	short loc_4026E2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4026CC:				; CODE XREF: .text:004026A0j
		test	ecx, ecx
		jz	short loc_4026E0
		push	ecx
		call	sub_40536C
		mov	edx, [ebp-4]
		add	esp, 4
		mov	edi, eax
		jmp	short loc_4026E2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4026E0:				; CODE XREF: .text:004026CEj
		xor	edi, edi

loc_4026E2:				; CODE XREF: .text:004026CAj
					; .text:004026DEj
		mov	eax, [ebp-8]
		mov	[ebx+10h], eax
		mov	eax, [ebp+14h]
		mov	[ebx+14h], esi
		lea	esi, [edi+edx]
		add	eax, esi
		mov	[ebp-8], esi
		cmp	dword ptr [ebp-0Ch], 10h
		mov	[ebp-4], eax
		push	edx
		jb	short loc_402755
		mov	esi, [ebx]
		push	esi
		push	edi
		call	loc_4067C0
		push	dword ptr [ebp+14h]
		push	dword ptr [ebp-10h]
		push	dword ptr [ebp-8]
		call	loc_4067C0
		mov	eax, [ebp-4]
		add	esp, 18h
		mov	ecx, [ebp-0Ch]
		inc	ecx
		mov	byte ptr [eax],	0
		cmp	ecx, 1000h
		jb	short loc_40273E
		mov	edx, [esi-4]
		add	ecx, 23h
		sub	esi, edx
		lea	eax, [esi-4]
		cmp	eax, 1Fh
		ja	short loc_402783
		mov	esi, edx

loc_40273E:				; CODE XREF: .text:0040272Aj
		push	ecx
		push	esi
		call	sub_40535E
		add	esp, 8
		mov	[ebx], edi
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	10h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402755:				; CODE XREF: .text:004026FEj
		push	ebx
		push	edi
		call	loc_4067C0
		push	dword ptr [ebp+14h]
		push	dword ptr [ebp-10h]
		push	esi
		call	loc_4067C0
		mov	eax, [ebp-4]
		add	esp, 18h
		mov	byte ptr [eax],	0
		mov	eax, ebx
		mov	[ebx], edi
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	10h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40277E:				; CODE XREF: .text:00402655j
		call	loc_402970

loc_402783:				; CODE XREF: .text:004026B8j
					; .text:0040273Aj
		call	sub_409E45
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dd 2 dup(0CCCCCCCCh)

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_402790	proc near		; CODE XREF: sub_403607+36p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		cmp	ecx, 1000h
		jb	short loc_4027C8
		lea	eax, [ecx+23h]
		or	edx, 0FFFFFFFFh
		cmp	eax, ecx
		cmovbe	eax, edx
		push	eax
		call	sub_40536C
		mov	ecx, eax
		add	esp, 4
		test	ecx, ecx
		jz	short loc_4027C3
		lea	eax, [ecx+23h]
		and	eax, 0FFFFFFE0h
		mov	[eax-4], ecx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4027C3:				; CODE XREF: sub_402790+26j
		jmp	sub_409E45
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4027C8:				; CODE XREF: sub_402790+Cj
		test	ecx, ecx
		jz	short loc_4027D5
		mov	[ebp+arg_0], ecx
		pop	ebp
		jmp	sub_40536C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4027D5:				; CODE XREF: sub_402790+3Aj
		xor	eax, eax
		pop	ebp
		retn
sub_402790	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4027E0	proc near		; CODE XREF: sub_403607+6Cp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		cmp	ecx, 1000h
		jb	short loc_402803
		mov	edx, [eax-4]
		add	ecx, 23h
		sub	eax, edx
		add	eax, 0FFFFFFFCh
		cmp	eax, 1Fh
		ja	short loc_40280F
		mov	eax, edx

loc_402803:				; CODE XREF: sub_4027E0+Fj
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_0], eax
		pop	ebp
		jmp	sub_40535E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40280F:				; CODE XREF: sub_4027E0+1Fj
		jmp	sub_409E45
sub_4027E0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_402820	proc near		; DATA XREF: .rdata:0042B500o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		xorps	xmm0, xmm0
		lea	eax, [esi+4]
		push	eax
		mov	dword ptr [esi], offset	off_41DCD8
		movq	qword ptr [eax], xmm0
		mov	eax, [ebp+arg_0]
		add	eax, 4
		push	eax
		call	sub_40670A
		add	esp, 8
		mov	dword ptr [esi], offset	off_41DCF0
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_402820	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
; START	OF FUNCTION CHUNK FOR sub_41C2D0

loc_402860:				; CODE XREF: sub_41C2D0+3j
					; sub_41C3C0+3j ...
		mov	ecx, [ecx]
		test	ecx, ecx
		jz	short locret_40286C
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]

locret_40286C:				; CODE XREF: sub_41C2D0-19A6Cj
		retn
; END OF FUNCTION CHUNK	FOR sub_41C2D0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_402870	proc near		; CODE XREF: sub_41C298+3j
					; sub_41C350+3j ...

var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C300
		mov	eax, large fs:0
		push	eax
		push	ecx
		push	esi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	esi, ecx
		call	sub_40489F
		test	al, al
		jnz	short loc_4028A6
		mov	ecx, [esi]
		call	sub_402E10

loc_4028A6:				; CODE XREF: sub_402870+2Dj
		mov	[ebp+var_4], 0
		mov	ecx, [esi]
		mov	eax, [ecx]
		mov	eax, [eax+4]
		mov	ecx, [eax+ecx+38h]
		test	ecx, ecx
		jz	short loc_4028C1
		mov	eax, [ecx]
		call	dword ptr [eax+8]

loc_4028C1:				; CODE XREF: sub_402870+4Aj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_402870	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4028E0	proc near		; CODE XREF: sub_4029C0+3Bp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C328
		mov	eax, large fs:0
		push	eax
		push	ecx
		push	esi
		push	edi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	edi, ecx
		mov	[ebp+var_10], edi
		mov	esi, [ebp+arg_0]
		mov	[edi], esi
		mov	edx, [esi]
		mov	eax, [edx+4]
		mov	ecx, [eax+esi+38h]
		test	ecx, ecx
		jz	short loc_402923
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		mov	edx, [esi]

loc_402923:				; CODE XREF: sub_4028E0+3Aj
		mov	[ebp+var_4], 0
		mov	eax, edx
		mov	ecx, [edx+4]
		cmp	dword ptr [ecx+esi+0Ch], 0
		jnz	short loc_402949
		mov	ecx, [ecx+esi+3Ch]
		test	ecx, ecx
		jz	short loc_402949
		cmp	ecx, esi
		jz	short loc_402949
		call	sub_4029C0
		mov	eax, [esi]

loc_402949:				; CODE XREF: sub_4028E0+54j
					; sub_4028E0+5Cj ...
		mov	eax, [eax+4]
		cmp	dword ptr [eax+esi+0Ch], 0
		setz	al
		mov	[edi+4], al
		mov	eax, edi
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	4
sub_4028E0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_402970:				; CODE XREF: .text:loc_4021CEp
					; .text:loc_40277Ep ...
		push	offset aStringTooLong ;	"string	too long"
		call	sub_404993
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dw 0CCCCh
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_402980	proc near		; CODE XREF: sub_403607+2Bp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		or	edx, 0Fh
		push	esi
		cmp	edx, 7FFFFFFFh
		ja	short loc_4029B3
		mov	esi, [ecx+14h]
		mov	eax, 7FFFFFFFh
		mov	ecx, esi
		shr	ecx, 1
		sub	eax, ecx
		cmp	esi, eax
		ja	short loc_4029B3
		lea	eax, [ecx+esi]
		cmp	edx, eax
		pop	esi
		cmovb	edx, eax
		mov	eax, edx
		pop	ebp
		retn	4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4029B3:				; CODE XREF: sub_402980+10j
					; sub_402980+22j
		mov	eax, 7FFFFFFFh
		pop	esi
		pop	ebp
		retn	4
sub_402980	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4029C0	proc near		; CODE XREF: .text:004022C0p
					; .text:004025EEp ...

var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C358
		mov	eax, large fs:0
		push	eax
		sub	esp, 0Ch
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	esi
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	esi, ecx
		mov	eax, [esi]
		mov	eax, [eax+4]
		cmp	dword ptr [eax+esi+38h], 0
		jz	short loc_402A67
		push	esi
		lea	ecx, [ebp+var_18]
		call	sub_4028E0
		mov	[ebp+var_4], 0
		cmp	[ebp+var_14], 0
		jz	short loc_402A36
		mov	eax, [esi]
		mov	eax, [eax+4]
		mov	ecx, [eax+esi+38h]
		mov	eax, [ecx]
		call	dword ptr [eax+34h]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_402A36
		mov	eax, [esi]
		push	0
		mov	ecx, [eax+4]
		mov	eax, [ecx+esi+0Ch]
		add	ecx, esi
		or	eax, 4
		push	eax
		call	loc_401E30

loc_402A36:				; CODE XREF: sub_4029C0+4Bj
					; sub_4029C0+5Ej
		mov	[ebp+var_4], 1
		call	sub_40489F
		test	al, al
		jnz	short loc_402A4E
		mov	ecx, [ebp+var_18]
		call	sub_402E10

loc_402A4E:				; CODE XREF: sub_4029C0+84j
		mov	byte ptr [ebp+var_4], 2
		mov	edx, [ebp+var_18]
		mov	ecx, [edx]
		mov	ecx, [ecx+4]
		mov	ecx, [ecx+edx+38h]
		test	ecx, ecx
		jz	short loc_402A67
		mov	edx, [ecx]
		call	dword ptr [edx+8]

loc_402A67:				; CODE XREF: sub_4029C0+35j
					; sub_4029C0+A0j
		mov	eax, esi
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_4029C0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_402A90	proc near		; CODE XREF: .text:004025E7p

var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C390
		mov	eax, large fs:0
		push	eax
		sub	esp, 18h
		push	ebx
		push	esi
		push	edi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], esp
		mov	esi, ecx
		mov	edx, [esi]
		mov	[ebp+var_14], esi
		mov	[ebp+var_18], 0
		mov	[ebp+var_20], esi
		mov	eax, [edx+4]
		mov	ecx, [eax+esi+38h]
		test	ecx, ecx
		jz	short loc_402ADE
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		mov	edx, [esi]

loc_402ADE:				; CODE XREF: sub_402A90+45j
		mov	[ebp+var_4], 0
		mov	eax, edx
		mov	ecx, [edx+4]
		cmp	dword ptr [ecx+esi+0Ch], 0
		jnz	short loc_402B04
		mov	ecx, [ecx+esi+3Ch]
		test	ecx, ecx
		jz	short loc_402B04
		cmp	ecx, esi
		jz	short loc_402B04
		call	sub_4029C0
		mov	eax, [esi]

loc_402B04:				; CODE XREF: sub_402A90+5Fj
					; sub_402A90+67j ...
		mov	ecx, [eax+4]
		mov	eax, [ecx+esi+0Ch]
		test	eax, eax
		setz	[ebp+var_1C]
		mov	[ebp+var_4], 1
		test	eax, eax
		jz	short loc_402B28
		mov	edx, 4
		mov	edi, edx
		jmp	loc_402BAD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402B28:				; CODE XREF: sub_402A90+8Aj
		mov	byte ptr [ebp+var_4], 2
		mov	ecx, [ecx+esi+38h]
		mov	eax, [ecx+20h]
		cmp	dword ptr [eax], 0
		jz	short loc_402B67
		mov	edx, [ecx+30h]
		mov	eax, [edx]
		test	eax, eax
		jle	short loc_402B67
		dec	eax
		mov	edi, 4
		mov	[edx], eax
		mov	ecx, [ecx+20h]
		mov	edx, [ecx]
		lea	eax, [edx+1]
		mov	[ecx], eax
		xor	ecx, ecx
		mov	al, [ebp+arg_0]
		mov	[edx], al
		mov	edx, edi
		movzx	eax, al
		cmp	eax, 0FFFFFFFFh
		cmovnz	edx, ecx
		jmp	short loc_402BA6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402B67:				; CODE XREF: sub_402A90+A6j
					; sub_402A90+AFj
		movzx	eax, [ebp+arg_0]
		mov	edx, [ecx]
		push	eax
		call	dword ptr [edx+0Ch]
		xor	ecx, ecx
		mov	edi, 4
		cmp	eax, 0FFFFFFFFh
		mov	edx, edi
		cmovnz	edx, ecx
		jmp	short loc_402BA6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402B82:				; DATA XREF: .rdata:0042AAE4o
		mov	edx, [ebp-14h]
		push	1
		push	4
		mov	eax, [edx]
		mov	ecx, [eax+4]
		add	ecx, edx
		call	sub_402D90
		mov	eax, offset loc_402B9B
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402B9B:				; DATA XREF: sub_402A90+105o
		mov	edx, [ebp-18h]
		mov	edi, 4
		mov	esi, [ebp-14h]

loc_402BA6:				; CODE XREF: sub_402A90+D5j
					; sub_402A90+F0j
		mov	[ebp+var_4], 1

loc_402BAD:				; CODE XREF: sub_402A90+93j
		mov	eax, [esi]
		push	0
		mov	ecx, [eax+4]
		mov	eax, [ecx+esi+0Ch]
		add	ecx, esi
		cmp	dword ptr [ecx+38h], 0
		cmovz	edx, edi
		or	eax, edx
		push	eax
		call	loc_401E30
		mov	[ebp+var_4], 4
		call	sub_40489F
		test	al, al
		jnz	short loc_402BE0
		mov	ecx, esi
		call	sub_402E10

loc_402BE0:				; CODE XREF: sub_402A90+147j
		mov	byte ptr [ebp+var_4], 5
		mov	ecx, [esi]
		mov	ecx, [ecx+4]
		mov	ecx, [ecx+esi+38h]
		test	ecx, ecx
		jz	short loc_402BF6
		mov	edx, [ecx]
		call	dword ptr [edx+8]

loc_402BF6:				; CODE XREF: sub_402A90+15Fj
		mov	eax, esi
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
sub_402A90	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_402C10:				; CODE XREF: sub_403EF1+19p
		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C3C8
		mov	eax, large fs:0
		push	eax
		sub	esp, 30h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp-14h], eax
		push	ebx
		push	esi
		push	edi
		push	eax
		lea	eax, [ebp-0Ch]
		mov	large fs:0, eax
		mov	eax, [ecx+30h]
		mov	dword ptr [ebp-4], 0
		mov	ebx, [eax+4]
		mov	ecx, ebx
		mov	[ebp-2Ch], ebx
		mov	eax, [ebx]
		call	dword ptr [eax+4]
		push	0
		lea	ecx, [ebp-20h]
		mov	dword ptr [ebp-4], 1
		call	sub_402EE9
		mov	byte ptr [ebp-4], 2
		mov	eax, dword_42DC70
		mov	edi, dword_42CEF8
		mov	[ebp-18h], eax
		mov	[ebp-28h], eax
		test	edi, edi
		jnz	short loc_402CAB
		push	edi
		lea	ecx, [ebp-1Ch]
		call	sub_402EE9
		cmp	dword_42CEF8, edi
		jnz	short loc_402C9D
		mov	eax, dword_42CEE0
		inc	eax
		mov	dword_42CEE0, eax
		mov	dword_42CEF8, eax

loc_402C9D:				; CODE XREF: .text:00402C8Bj
		lea	ecx, [ebp-1Ch]
		call	sub_402F41
		mov	edi, dword_42CEF8

loc_402CAB:				; CODE XREF: .text:00402C7Aj
		cmp	edi, [ebx+0Ch]
		jnb	short loc_402CBC
		mov	eax, [ebx+8]
		mov	esi, [eax+edi*4]
		test	esi, esi
		jnz	short loc_402D14
		jmp	short loc_402CBE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402CBC:				; CODE XREF: .text:00402CAEj
		xor	esi, esi

loc_402CBE:				; CODE XREF: .text:00402CBAj
		cmp	byte ptr [ebx+14h], 0
		jz	short loc_402CD4
		call	sub_403122
		cmp	edi, [eax+0Ch]
		jnb	short loc_402CD8
		mov	eax, [eax+8]
		mov	esi, [eax+edi*4]

loc_402CD4:				; CODE XREF: .text:00402CC2j
		test	esi, esi
		jnz	short loc_402D14

loc_402CD8:				; CODE XREF: .text:00402CCCj
		mov	esi, [ebp-18h]
		test	esi, esi
		jnz	short loc_402D14
		lea	eax, [ebp-30h]
		push	eax
		lea	eax, [ebp-28h]
		push	eax
		call	loc_401560
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_402D6A
		mov	esi, [ebp-28h]
		mov	[ebp-18h], esi
		push	esi
		mov	byte ptr [ebp-4], 3
		call	sub_4030F6
		mov	eax, [esi]
		add	esp, 4
		mov	ecx, esi
		call	dword ptr [eax+4]
		mov	dword_42DC70, esi

loc_402D14:				; CODE XREF: .text:00402CB8j
					; .text:00402CD6j ...
		lea	ecx, [ebp-20h]
		mov	byte ptr [ebp-4], 1
		call	sub_402F41
		mov	eax, [esi]
		mov	ecx, esi
		push	dword ptr [ebp+8]
		mov	eax, [eax+20h]
		call	eax
		mov	[ebp-21h], al
		mov	dword ptr [ebp-4], 4
		mov	ecx, ebx
		mov	edx, [ebx]
		call	dword ptr [edx+8]
		test	eax, eax
		jz	short loc_402D49
		mov	edx, [eax]
		mov	ecx, eax
		push	1
		call	dword ptr [edx]

loc_402D49:				; CODE XREF: .text:00402D3Fj
		mov	al, [ebp-21h]
		mov	ecx, [ebp-0Ch]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp-14h]
		xor	ecx, ebp
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn	4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402D6A:				; CODE XREF: .text:00402CF2j
		lea	ecx, [ebp-3Ch]
		call	sub_401210
		push	offset dword_42B504
		lea	eax, [ebp-3Ch]
		push	eax
		call	sub_406D34
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dd 4 dup(0CCCCCCCCh)

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_402D90	proc near		; CODE XREF: sub_4023FD+Ep
					; sub_402A90+100p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ecx+0Ch]
		or	edx, [ebp+arg_0]
		push	[ebp+arg_4]
		mov	eax, edx
		or	eax, 4
		cmp	dword ptr [ecx+38h], 0
		cmovnz	eax, edx
		push	eax
		call	loc_401E30
		pop	ebp
		retn	8
sub_402D90	endp ; sp = -8

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_402DC0	proc near		; CODE XREF: sub_41C290+3j
					; sub_41C320+3j ...

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C190
		mov	eax, large fs:0
		push	eax
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	ecx, [ecx]
		mov	eax, [ecx]
		mov	eax, [eax+4]
		mov	ecx, [eax+ecx+38h]
		test	ecx, ecx
		jz	short loc_402DF6
		mov	eax, [ecx]
		call	dword ptr [eax+8]

loc_402DF6:				; CODE XREF: sub_402DC0+2Fj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		mov	esp, ebp
		pop	ebp
		retn
sub_402DC0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_402E10	proc near		; CODE XREF: sub_4023FD+5Bp
					; sub_402870+31p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C3F0
		mov	eax, large fs:0
		push	eax
		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], esp
		mov	esi, ecx
		mov	[ebp+var_4], 0
		mov	eax, [esi]
		mov	eax, [eax+4]
		cmp	dword ptr [eax+esi+0Ch], 0
		jnz	short loc_402E79
		test	byte ptr [eax+esi+14h],	2
		jz	short loc_402E79
		mov	ecx, [eax+esi+38h]
		mov	eax, [ecx]
		call	dword ptr [eax+34h]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_402E79
		mov	eax, [esi]
		push	0
		mov	ecx, [eax+4]
		mov	eax, [ecx+esi+0Ch]
		add	ecx, esi
		or	eax, 4
		push	eax
		call	loc_401E30

loc_402E79:				; CODE XREF: sub_402E10+3Cj
					; sub_402E10+43j ...
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_402E10	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_402E8B	proc near		; DATA XREF: .rdata:0042AB88o
		mov	eax, offset loc_402E79
		retn
sub_402E8B	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_402EA0	proc near		; DATA XREF: sub_401990+8o

arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], offset	off_41DD44
		mov	dword ptr [eax+4], 5
		mov	eax, 1
		pop	ebp
		retn	0Ch
sub_402EA0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_402EBC	proc near		; CODE XREF: sub_401000+5p
					; sub_401091+5p ...
		xor	eax, eax
		push	edi
		mov	edi, ecx
		inc	eax
		lock xadd dword_42C000,	eax
		jnz	short loc_402EE5
		push	esi
		mov	esi, offset CriticalSection

loc_402ED2:				; CODE XREF: sub_402EBC+26j
		push	esi		; lpCriticalSection
		call	sub_4049E1
		add	esi, 18h
		pop	ecx
		cmp	esi, offset dword_42CEE0
		jl	short loc_402ED2
		pop	esi

loc_402EE5:				; CODE XREF: sub_402EBC+Ej
		mov	eax, edi
		pop	edi
		retn
sub_402EBC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_402EE9	proc near		; CODE XREF: .text:0040125Dp
					; sub_401430+1Dp ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		mov	esi, ecx
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_402EFF
		call	sub_409F36
		jmp	short loc_402F13
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_402EFF:				; CODE XREF: sub_402EE9+Dj
		cmp	eax, 8
		jge	short loc_402F13
		imul	eax, 18h
		add	eax, offset CriticalSection
		push	eax		; lpCriticalSection
		call	sub_4049F8
		pop	ecx

loc_402F13:				; CODE XREF: sub_402EE9+14j
					; sub_402EE9+19j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_402EE9	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dw 0C883h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	eax
		xadd	dword_42C000, eax
		jns	short locret_402F40
		push	esi
		mov	esi, offset CriticalSection

loc_402F2D:				; CODE XREF: .text:00402F3Dj
		push	esi
		call	loc_4049D3
		add	esi, 18h
		pop	ecx
		cmp	esi, offset dword_42CEE0
		jl	short loc_402F2D
		pop	esi

locret_402F40:				; CODE XREF: .text:00402F25j
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_402F41	proc near		; CODE XREF: sub_4012F0+BAp
					; sub_401430+39p ...

; FUNCTION CHUNK AT 00409F44 SIZE 00000009 BYTES

		mov	eax, [ecx]
		test	eax, eax
		jz	loc_409F44
		cmp	eax, 8
		jge	short locret_402F5F
		imul	eax, 18h
		add	eax, offset CriticalSection
		push	eax		; lpCriticalSection
		call	sub_404A06
		pop	ecx

locret_402F5F:				; CODE XREF: sub_402F41+Dj
		retn
sub_402F41	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_402F60	proc near		; CODE XREF: sub_403294+18p

var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	al, [ebp+arg_0]
		xor	edx, edx
		push	esi
		mov	esi, ecx
		push	offset dword_41D1C0
		mov	[ebp+var_4], esi
		lea	ecx, [esi+18h]
		mov	dword ptr [esi+4], 1
		mov	dword ptr [esi], offset	off_41D1B4
		mov	[esi+8], edx
		mov	[esi+0Ch], edx
		mov	[esi+10h], edx
		mov	[esi+14h], al
		mov	[ecx], edx
		mov	[ecx+4], dl
		call	sub_403080
		mov	eax, esi
		pop	esi
		leave
		retn	4
sub_402F60	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_402FA1	proc near		; CODE XREF: .text:0040300Cp

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C40B
		mov	eax, large fs:0
		push	eax
		push	esi
		push	edi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	edi, [ecx+4]
		mov	eax, [edi]
		mov	esi, [eax+8]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, edi
		call	esi
		mov	edi, eax
		test	edi, edi
		jz	short loc_402FF1
		mov	ecx, [edi]
		push	1
		mov	esi, [ecx]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, edi
		call	esi

loc_402FF1:				; CODE XREF: sub_402FA1+3Cj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		leave
		retn
sub_402FA1	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403000:				; CODE XREF: .text:0041C5CBj
		push	esi
		jmp	short loc_40301B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403003:				; CODE XREF: .text:00403023j
		mov	eax, [esi]
		mov	ecx, esi
		mov	dword_42CF08, eax
		call	sub_402FA1
		push	8
		push	esi
		call	sub_40535E
		pop	ecx
		pop	ecx

loc_40301B:				; CODE XREF: .text:00403001j
		mov	esi, dword_42CF08
		test	esi, esi
		jnz	short loc_403003
		pop	esi
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403027	proc near		; CODE XREF: sub_4030D4+6p

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C170
		mov	eax, large fs:0
		push	eax
		push	esi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	esi, ecx
		push	esi
		mov	dword ptr [esi], offset	off_41D1B4
		call	sub_4031B8
		cmp	dword ptr [esi+18h], 0
		pop	ecx
		jz	short loc_403068
		push	dword ptr [esi+18h]
		call	sub_409C2E
		pop	ecx

loc_403068:				; CODE XREF: sub_403027+36j
		and	dword ptr [esi+18h], 0
		mov	dword ptr [esi], offset	off_41D1A4
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		leave
		retn
sub_403027	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403080	proc near		; CODE XREF: sub_402F60+35p
					; sub_403128+43p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, ecx
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	[ebx], edi
		jz	short loc_4030CC
		cmp	dword ptr [ebx], 0
		jz	short loc_40309B
		push	dword ptr [ebx]
		call	sub_409C2E
		pop	ecx

loc_40309B:				; CODE XREF: sub_403080+11j
		and	dword ptr [ebx], 0
		test	edi, edi
		jz	short loc_4030CC
		cmp	byte ptr [edi],	0
		push	esi
		mov	esi, edi
		jz	short loc_4030B0

loc_4030AA:				; CODE XREF: sub_403080+2Ej
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_4030AA

loc_4030B0:				; CODE XREF: sub_403080+28j
		sub	esi, edi
		inc	esi
		push	esi
		call	sub_409F4D
		mov	[ebx], eax
		pop	ecx
		test	eax, eax
		jz	short loc_4030CB
		push	esi
		push	edi
		push	eax
		call	loc_4067C0
		add	esp, 0Ch

loc_4030CB:				; CODE XREF: sub_403080+3Ej
		pop	esi

loc_4030CC:				; CODE XREF: sub_403080+Cj
					; sub_403080+20j
		pop	edi
		mov	eax, ebx
		pop	ebx
		pop	ebp
		retn	4
sub_403080	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4030D4	proc near		; DATA XREF: .rdata:off_41D1B4o

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		call	sub_403027
		test	[ebp+arg_0], 1
		jz	short loc_4030EF
		push	20h
		push	esi
		call	sub_40535E
		pop	ecx
		pop	ecx

loc_4030EF:				; CODE XREF: sub_4030D4+Fj
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_4030D4	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4030F6	proc near		; CODE XREF: .text:0040258Fp
					; .text:00402CFFp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	8
		call	sub_40536C
		mov	[ebp+var_4], eax
		pop	ecx
		test	eax, eax
		jz	short loc_403119
		mov	ecx, dword_42CF08
		mov	[eax], ecx
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		jmp	short loc_40311B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403119:				; CODE XREF: sub_4030F6+11j
		xor	eax, eax

loc_40311B:				; CODE XREF: sub_4030F6+21j
		mov	dword_42CF08, eax
		leave
		retn
sub_4030F6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403122	proc near		; CODE XREF: sub_401520+23p
					; .text:00402550p ...
		mov	eax, dword_42CF0C
		retn
sub_403122	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403128	proc near		; CODE XREF: sub_4037B8+28p
					; sub_403CB3+50p
		push	4
		mov	eax, offset loc_41C42E
		call	sub_4058D5
		xor	esi, esi
		lea	ecx, [ebp-10h]
		push	esi
		call	sub_402EE9
		mov	edi, dword_42CF0C
		mov	[ebp-4], esi
		test	edi, edi
		jnz	short loc_403191
		push	esi
		call	sub_403294
		mov	edi, eax
		push	edi
		call	sub_4032B7
		pop	ecx
		pop	ecx
		push	offset dword_41D1C4
		lea	ecx, [edi+18h]
		mov	dword ptr [edi+10h], 3Fh
		call	sub_403080
		mov	dword_42CEE4, edi
		mov	eax, [edi]
		mov	esi, [eax+4]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, edi
		call	esi
		mov	eax, dword_42CEE4
		mov	dword_42CF00, eax

loc_403191:				; CODE XREF: sub_403128+22j
		cmp	byte ptr [ebp+8], 0
		jz	short loc_4031A8
		mov	eax, [edi]
		mov	esi, [eax+4]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, edi
		call	esi

loc_4031A8:				; CODE XREF: sub_403128+6Dj
		lea	ecx, [ebp-10h]
		call	sub_402F41
		mov	eax, edi
		call	sub_4058AF
		retn
sub_403128	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4031B8	proc near		; CODE XREF: sub_403027+2Cp
		push	8
		mov	eax, offset loc_41C451
		call	sub_4058D5
		push	0
		lea	ecx, [ebp-14h]
		call	sub_402EE9
		mov	ebx, [ebp+8]
		and	dword ptr [ebp-4], 0
		mov	edi, [ebx+0Ch]
		jmp	short loc_403214
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4031DA:				; CODE XREF: sub_4031B8+5Ej
		mov	eax, [ebx+8]
		dec	edi
		mov	eax, [eax+edi*4]
		mov	[ebp-10h], eax
		test	eax, eax
		jz	short loc_403214
		mov	eax, [eax]
		mov	esi, [eax+8]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, [ebp-10h]
		call	esi
		mov	[ebp-10h], eax
		test	eax, eax
		jz	short loc_403214
		mov	ecx, [eax]
		push	1
		mov	esi, [ecx]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, [ebp-10h]
		call	esi

loc_403214:				; CODE XREF: sub_4031B8+20j
					; sub_4031B8+2Ej ...
		test	edi, edi
		jnz	short loc_4031DA
		push	dword ptr [ebx+8]
		call	sub_409C2E
		pop	ecx
		lea	ecx, [ebp-14h]
		call	sub_402F41
		call	sub_4058AF
		retn
sub_4031B8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40322F	proc near		; CODE XREF: .text:004012ACp
					; .text:0040162Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0
		push	0
		call	sub_40A1AC
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_403246
		mov	eax, offset dword_4298B0

loc_403246:				; CODE XREF: sub_40322F+10j
		push	esi
		mov	esi, [ebp+arg_0]
		push	eax
		lea	ecx, [esi+24h]
		call	sub_403080
		cmp	[ebp+arg_4], 0
		jz	short loc_403269
		push	[ebp+arg_4]
		push	0
		call	sub_40A1AC
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_40326E

loc_403269:				; CODE XREF: sub_40322F+28j
		mov	eax, offset dword_41D1C0

loc_40326E:				; CODE XREF: sub_40322F+38j
		push	eax
		lea	ecx, [esi+2Ch]
		call	sub_403080
		pop	esi
		pop	ebp
		retn
sub_40322F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40327A	proc near		; CODE XREF: sub_4012F0+26p
					; .text:00401664p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+24h], 0
		jz	short loc_403292
		push	dword ptr [eax+24h]
		push	0
		call	sub_40A1AC
		pop	ecx
		pop	ecx

loc_403292:				; CODE XREF: sub_40327A+Aj
		pop	ebp
		retn
sub_40327A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403294	proc near		; CODE XREF: sub_403128+25p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	20h
		call	sub_40536C
		mov	[ebp+var_4], eax
		pop	ecx
		test	eax, eax
		jz	short loc_4032B3
		push	[ebp+arg_0]
		mov	ecx, eax
		call	sub_402F60
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4032B3:				; CODE XREF: sub_403294+11j
		xor	eax, eax
		leave
		retn
sub_403294	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4032B7	proc near		; CODE XREF: sub_403128+2Dp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		cmp	byte_42CF10, 0
		jnz	short loc_4032D5
		push	offset sub_40331A
		mov	byte_42CF10, 1
		call	sub_404A7D
		pop	ecx

loc_4032D5:				; CODE XREF: sub_4032B7+Aj
		mov	eax, [ebp+arg_0]
		mov	dword_42CF0C, eax
		pop	ebp
		retn
sub_4032B7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4032DF	proc near		; CODE XREF: sub_40331A+13p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	edi
		mov	edi, [eax]
		test	edi, edi
		jz	short loc_403317
		mov	eax, [edi]
		push	esi
		mov	esi, [eax+8]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, edi
		call	esi
		mov	edi, eax
		test	edi, edi
		jz	short loc_403316
		mov	ecx, [edi]
		push	1
		mov	esi, [ecx]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, edi
		call	esi

loc_403316:				; CODE XREF: sub_4032DF+23j
		pop	esi

loc_403317:				; CODE XREF: sub_4032DF+Bj
		pop	edi
		pop	ebp
		retn
sub_4032DF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40331A	proc near		; DATA XREF: sub_4032B7+Co

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	0
		lea	ecx, [ebp+var_4]
		call	sub_402EE9
		push	offset dword_42CF0C
		call	sub_4032DF
		and	dword_42CF0C, 0
		pop	ecx
		lea	ecx, [ebp+var_4]
		call	sub_402F41
		leave
		retn
sub_40331A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403344	proc near		; CODE XREF: .text:00401648p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		call	sub_40A458
		mov	ebx, [ebp+arg_0]
		push	2
		push	100h
		mov	[ebx], eax
		call	sub_40A1E6
		pop	ecx
		mov	esi, eax
		pop	ecx
		mov	[ebx+4], esi
		call	sub_40A1F1
		test	esi, esi
		jz	short loc_403386
		push	edi
		mov	edi, [ebx+4]
		mov	ecx, 80h
		mov	esi, eax
		mov	dword ptr [ebx+8], 1
		rep movsd
		pop	edi
		jmp	short loc_40338D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403386:				; CODE XREF: sub_403344+29j
		and	dword ptr [ebx+8], 0
		mov	[ebx+4], eax

loc_40338D:				; CODE XREF: sub_403344+40j
		call	sub_40A47F
		mov	eax, [eax+4]
		mov	[ebx+0Ch], eax
		test	eax, eax
		jz	short loc_4033A6
		push	eax
		call	sub_40A3F9
		pop	ecx
		mov	[ebx+0Ch], eax

loc_4033A6:				; CODE XREF: sub_403344+56j
		pop	esi
		mov	eax, ebx
		pop	ebx
		pop	ebp
		retn
sub_403344	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4033AC	proc near		; CODE XREF: sub_401740+Cp
					; sub_401760+28p

var_10		= dword	ptr -10h
CodePage	= dword	ptr -0Ch
DestStr		= word ptr -8
MultiByteStr	= byte ptr -4
var_2		= byte ptr -2
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		test	esi, esi
		jnz	short loc_4033CA
		call	sub_40A47F
		mov	edi, [eax+8]
		call	sub_40A458
		jmp	short loc_4033CF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4033CA:				; CODE XREF: sub_4033AC+Dj
		mov	edi, [esi+0Ch]
		mov	eax, [esi]

loc_4033CF:				; CODE XREF: sub_4033AC+1Cj
		mov	[ebp+CodePage],	eax
		test	edi, edi
		jnz	short loc_4033F3
		mov	eax, [ebp+arg_0]
		cmp	eax, 41h
		jl	loc_4034A6
		cmp	eax, 5Ah
		jg	loc_4034A6
		add	eax, 20h
		jmp	loc_4034A6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4033F3:				; CODE XREF: sub_4033AC+28j
		push	ebx
		mov	ebx, [ebp+arg_0]
		cmp	ebx, 100h
		jnb	short loc_403419
		test	esi, esi
		jnz	short loc_403410
		push	ebx
		call	sub_40A3C8
		pop	ecx
		test	eax, eax
		jnz	short loc_40341D
		jmp	short loc_40348F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403410:				; CODE XREF: sub_4033AC+55j
		mov	eax, [esi+4]
		test	byte ptr [eax+ebx*2], 1
		jz	short loc_40348F

loc_403419:				; CODE XREF: sub_4033AC+51j
		test	esi, esi
		jnz	short loc_40343B

loc_40341D:				; CODE XREF: sub_4033AC+60j
		mov	eax, ebx
		sar	eax, 8
		mov	[ebp+var_10], eax
		call	sub_40A1F1
		mov	edx, [ebp+var_10]
		movzx	ecx, dl
		movzx	eax, word ptr [eax+ecx*2]
		and	eax, 8000h
		jmp	short loc_403450
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40343B:				; CODE XREF: sub_4033AC+6Fj
		mov	eax, [esi+4]
		mov	edx, ebx
		sar	edx, 8
		movzx	ecx, dl
		movsx	eax, word ptr [eax+ecx*2]
		shr	eax, 0Fh
		and	eax, 1

loc_403450:				; CODE XREF: sub_4033AC+8Dj
		test	eax, eax
		jz	short loc_403463
		push	2
		mov	[ebp+MultiByteStr], dl
		mov	[ebp-3], bl
		mov	[ebp+var_2], 0
		pop	eax
		jmp	short loc_40346D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403463:				; CODE XREF: sub_4033AC+A6j
		xor	eax, eax
		mov	[ebp+MultiByteStr], bl
		mov	byte ptr [ebp-3], 0
		inc	eax

loc_40346D:				; CODE XREF: sub_4033AC+B5j
		push	1		; int
		push	[ebp+CodePage]	; CodePage
		lea	ecx, [ebp+DestStr]
		push	3		; cchDest
		push	ecx		; lpDestStr
		push	eax		; int
		lea	eax, [ebp+MultiByteStr]
		push	eax		; lpMultiByteStr
		push	100h		; dwMapFlags
		push	edi		; int
		call	sub_404AAB
		add	esp, 20h
		test	eax, eax
		jnz	short loc_403493

loc_40348F:				; CODE XREF: sub_4033AC+62j
					; sub_4033AC+6Bj
		mov	eax, ebx
		jmp	short loc_4034A5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403493:				; CODE XREF: sub_4033AC+E1j
		cmp	eax, 1
		movzx	eax, byte ptr [ebp+DestStr]
		jz	short loc_4034A5
		movzx	ecx, byte ptr [ebp+DestStr+1]
		shl	eax, 8
		or	eax, ecx

loc_4034A5:				; CODE XREF: sub_4033AC+E5j
					; sub_4033AC+EEj
		pop	ebx

loc_4034A6:				; CODE XREF: sub_4033AC+30j
					; sub_4033AC+39j ...
		pop	edi
		pop	esi
		leave
		retn
sub_4033AC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4034AA	proc near		; CODE XREF: sub_4017B0+Cp
					; sub_4017D0+28p

var_10		= dword	ptr -10h
CodePage	= dword	ptr -0Ch
DestStr		= word ptr -8
MultiByteStr	= byte ptr -4
var_2		= byte ptr -2
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		test	esi, esi
		jnz	short loc_4034C8
		call	sub_40A47F
		mov	edi, [eax+8]
		call	sub_40A458
		jmp	short loc_4034CD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4034C8:				; CODE XREF: sub_4034AA+Dj
		mov	edi, [esi+0Ch]
		mov	eax, [esi]

loc_4034CD:				; CODE XREF: sub_4034AA+1Cj
		mov	[ebp+CodePage],	eax
		test	edi, edi
		jnz	short loc_4034F1
		mov	eax, [ebp+arg_0]
		cmp	eax, 61h
		jl	loc_4035A4
		cmp	eax, 7Ah
		jg	loc_4035A4
		sub	eax, 20h
		jmp	loc_4035A4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4034F1:				; CODE XREF: sub_4034AA+28j
		push	ebx
		mov	ebx, [ebp+arg_0]
		cmp	ebx, 100h
		jnb	short loc_403517
		test	esi, esi
		jnz	short loc_40350E
		push	ebx
		call	sub_40A397
		pop	ecx
		test	eax, eax
		jnz	short loc_40351B
		jmp	short loc_40358D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40350E:				; CODE XREF: sub_4034AA+55j
		mov	eax, [esi+4]
		test	byte ptr [eax+ebx*2], 2
		jz	short loc_40358D

loc_403517:				; CODE XREF: sub_4034AA+51j
		test	esi, esi
		jnz	short loc_403539

loc_40351B:				; CODE XREF: sub_4034AA+60j
		mov	eax, ebx
		sar	eax, 8
		mov	[ebp+var_10], eax
		call	sub_40A1F1
		mov	edx, [ebp+var_10]
		movzx	ecx, dl
		movzx	eax, word ptr [eax+ecx*2]
		and	eax, 8000h
		jmp	short loc_40354E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403539:				; CODE XREF: sub_4034AA+6Fj
		mov	eax, [esi+4]
		mov	edx, ebx
		sar	edx, 8
		movzx	ecx, dl
		movsx	eax, word ptr [eax+ecx*2]
		shr	eax, 0Fh
		and	eax, 1

loc_40354E:				; CODE XREF: sub_4034AA+8Dj
		test	eax, eax
		jz	short loc_403561
		push	2
		mov	[ebp+MultiByteStr], dl
		mov	[ebp-3], bl
		mov	[ebp+var_2], 0
		pop	eax
		jmp	short loc_40356B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403561:				; CODE XREF: sub_4034AA+A6j
		xor	eax, eax
		mov	[ebp+MultiByteStr], bl
		mov	byte ptr [ebp-3], 0
		inc	eax

loc_40356B:				; CODE XREF: sub_4034AA+B5j
		push	1		; int
		push	[ebp+CodePage]	; CodePage
		lea	ecx, [ebp+DestStr]
		push	3		; cchDest
		push	ecx		; lpDestStr
		push	eax		; int
		lea	eax, [ebp+MultiByteStr]
		push	eax		; lpMultiByteStr
		push	200h		; dwMapFlags
		push	edi		; int
		call	sub_404AAB
		add	esp, 20h
		test	eax, eax
		jnz	short loc_403591

loc_40358D:				; CODE XREF: sub_4034AA+62j
					; sub_4034AA+6Bj
		mov	eax, ebx
		jmp	short loc_4035A3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403591:				; CODE XREF: sub_4034AA+E1j
		cmp	eax, 1
		movzx	eax, byte ptr [ebp+DestStr]
		jz	short loc_4035A3
		movzx	ecx, byte ptr [ebp+DestStr+1]
		shl	eax, 8
		or	eax, ecx

loc_4035A3:				; CODE XREF: sub_4034AA+E5j
					; sub_4034AA+EEj
		pop	ebx

loc_4035A4:				; CODE XREF: sub_4034AA+30j
					; sub_4034AA+39j ...
		pop	edi
		pop	esi
		leave
		retn
sub_4034AA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4035A8	proc near		; CODE XREF: .text:00401CF7p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		mov	eax, offset dword_41D1C8

loc_4035B3:				; CODE XREF: sub_4035A8+17j
		cmp	[eax], ecx
		jz	short loc_4035C8
		add	eax, 8
		cmp	eax, offset dword_41D438
		jnz	short loc_4035B3
		mov	eax, offset aUnknownError ; "unknown error"
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4035C8:				; CODE XREF: sub_4035A8+Dj
		mov	eax, [eax+4]
		pop	ebp
		retn
sub_4035A8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4035CD	proc near		; CODE XREF: sub_404313+5Cp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		call	sub_40AED2
		pop	ecx
		mov	ecx, eax
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_4035E4
		xor	al, al
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4035E4:				; CODE XREF: sub_4035CD+11j
		mov	eax, [ebp+arg_0]
		mov	[eax], cl
		mov	al, 1
		pop	ebp
		retn
sub_4035CD	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4035ED	proc near		; CODE XREF: sub_403F3A:loc_403FF1p

arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		movsx	eax, [ebp+arg_0]
		push	eax
		call	sub_40B054
		cmp	eax, 0FFFFFFFFh
		pop	ecx
		pop	ecx
		setnz	al
		pop	ebp
		retn
sub_4035ED	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403607	proc near		; CODE XREF: sub_4040CA+33p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	edx, [ebp+arg_0]
		mov	eax, 7FFFFFFFh
		push	ebx
		mov	ebx, ecx
		push	esi
		push	edi
		mov	ecx, [ebx+10h]
		sub	eax, ecx
		mov	[ebp+var_C], ecx
		cmp	eax, edx
		jb	short loc_4036A5
		mov	eax, [ebx+14h]
		lea	edi, [ecx+edx]
		push	edi
		mov	ecx, ebx
		mov	[ebp+var_8], eax
		call	sub_402980
		mov	esi, eax
		lea	ecx, [esi+1]
		push	ecx
		call	sub_402790
		cmp	[ebp+var_8], 10h
		pop	ecx
		mov	[ebx+10h], edi
		mov	edi, [ebp+var_C]
		mov	[ebp+var_4], eax
		mov	[ebx+14h], esi
		push	edi
		jb	short loc_403682
		mov	esi, [ebx]
		push	esi
		push	eax
		call	loc_4067C0
		mov	ecx, [ebp+var_4]
		mov	al, [ebp+arg_8]
		mov	[ecx+edi], al
		mov	eax, [ebp+var_8]
		inc	eax
		mov	byte ptr [ecx+edi+1], 0
		push	eax
		push	esi
		call	sub_4027E0
		mov	eax, [ebp+var_4]
		add	esp, 14h
		mov	[ebx], eax
		jmp	short loc_40369C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403682:				; CODE XREF: sub_403607+4Dj
		push	ebx
		push	eax
		call	loc_4067C0
		mov	ecx, [ebp+var_4]
		add	esp, 0Ch
		mov	al, [ebp+arg_8]
		mov	[ecx+edi], al
		mov	byte ptr [ecx+edi+1], 0
		mov	[ebx], ecx

loc_40369C:				; CODE XREF: sub_403607+79j
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	0Ch
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4036A5:				; CODE XREF: sub_403607+1Dj
		call	loc_402970
		int	3		; Trap to Debugger
sub_403607	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4036AB	proc near		; CODE XREF: sub_403E87+54p
		push	14h
		mov	eax, offset loc_41C47C
		call	sub_4058D5
		push	0
		lea	ecx, [ebp-14h]
		call	sub_402EE9
		mov	esi, dword_42CFD4
		mov	ecx, offset dword_42CFC8
		and	dword ptr [ebp-4], 0
		mov	[ebp-10h], esi
		call	sub_401430
		mov	ecx, [ebp+8]
		push	eax
		call	sub_401520
		mov	edi, eax
		test	edi, edi
		jnz	short loc_40372A
		test	esi, esi
		jz	short loc_4036EF
		mov	edi, esi
		jmp	short loc_40372A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4036EF:				; CODE XREF: sub_4036AB+3Ej
		push	dword ptr [ebp+8]
		lea	eax, [ebp-10h]
		push	eax
		call	sub_403B8B
		pop	ecx
		pop	ecx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40373A
		mov	edi, [ebp-10h]
		mov	[ebp-10h], edi
		push	edi
		mov	byte ptr [ebp-4], 1
		call	sub_4030F6
		mov	eax, [edi]
		pop	ecx
		mov	esi, [eax+4]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, edi
		call	esi
		mov	dword_42CFD4, edi

loc_40372A:				; CODE XREF: sub_4036AB+3Aj
					; sub_4036AB+42j
		lea	ecx, [ebp-14h]
		call	sub_402F41
		mov	eax, edi
		call	sub_4058AF
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40373A:				; CODE XREF: sub_4036AB+55j
		lea	ecx, [ebp-20h]
		call	sub_401210
		push	offset dword_42B504
		lea	eax, [ebp-20h]
		push	eax
		call	sub_406D34
		int	3		; Trap to Debugger

loc_403751:				; CODE XREF: sub_40102E+Ep
		push	8
		mov	eax, offset loc_41C4B3
		call	sub_4058D5
		mov	esi, ecx
		mov	[ebp-14h], esi
		and	dword ptr [ebp-10h], 0
		cmp	dword ptr [ebp+10h], 0
		jz	short loc_403784
		mov	dword ptr [esi], offset	dword_41DE00
		mov	dword ptr [esi+8], offset off_41DDF4
		and	dword ptr [ebp-4], 0
		mov	dword ptr [ebp-10h], 1

loc_403784:				; CODE XREF: sub_4036AB+BFj
		mov	eax, [esi]
		push	dword ptr [ebp+0Ch]
		push	dword ptr [ebp+8]
		mov	eax, [eax+4]
		mov	dword ptr [esi+eax], offset off_41DDFC
		mov	eax, [esi]
		mov	ecx, [eax+4]
		lea	eax, [ecx-8]
		mov	[ecx+esi-4], eax
		mov	eax, [esi]
		mov	ecx, [eax+4]
		add	ecx, esi
		call	sub_403EF1
		mov	eax, esi
		call	sub_4058AF
		retn	0Ch
sub_4036AB	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4037B8	proc near		; CODE XREF: sub_40104D+13p
		push	0
		mov	eax, offset loc_41C4CE
		call	sub_4058D5
		mov	edi, ecx
		push	8
		mov	dword ptr [edi], offset	off_41DD74
		call	sub_40536C
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_4037EB
		and	dword ptr [ebp-4], 0
		push	1
		call	sub_403128
		pop	ecx
		mov	[esi+4], eax
		jmp	short loc_4037ED
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4037EB:				; CODE XREF: sub_4037B8+20j
		xor	esi, esi

loc_4037ED:				; CODE XREF: sub_4037B8+31j
		mov	ecx, edi
		mov	[edi+34h], esi
		call	sub_403C6F
		mov	eax, edi
		call	sub_4058AF
		retn
sub_4037B8	endp ; sp = -4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4037FF	proc near		; CODE XREF: sub_404106+8Bp
					; sub_4041DB+5Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		and	dword ptr [ecx+8], 0
		and	dword ptr [ecx+0Ch], 0
		mov	[ecx], eax
		mov	eax, [ebp+arg_C]
		mov	[ecx+4], eax
		mov	eax, [ebp+arg_0]
		mov	[ecx+10h], eax
		mov	eax, [ebp+arg_4]
		mov	[ecx+14h], eax
		mov	eax, ecx
		pop	ebp
		retn	10h
sub_4037FF	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_401087

loc_403827:				; CODE XREF: sub_401087+5j
		push	esi
		mov	esi, dword_42CFEC
		mov	edx, offset dword_42CF20
		mov	dword_42CFF0, edx
		push	edi
		mov	edi, ecx
		test	esi, esi
		jz	short loc_40384F
		mov	eax, [esi]
		mov	eax, [eax+4]
		mov	[eax+esi+3Ch], edx
		mov	edx, dword_42CFF0

loc_40384F:				; CODE XREF: sub_401087+27B7j
		mov	ecx, dword_42CFF4
		test	ecx, ecx
		jz	short loc_403868
		mov	eax, [ecx]
		mov	eax, [eax+4]
		mov	[eax+ecx+3Ch], edx
		mov	edx, dword_42CFF0

loc_403868:				; CODE XREF: sub_401087+27D0j
		mov	ecx, dword_42CFF8
		test	ecx, ecx
		jz	short loc_40387B
		mov	eax, [ecx]
		mov	eax, [eax+4]
		mov	[eax+ecx+3Ch], edx

loc_40387B:				; CODE XREF: sub_401087+27E9j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_401087

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403880	proc near		; CODE XREF: sub_40399F+6p
					; .text:0041C5E9j

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C170
		mov	eax, large fs:0
		push	eax
		push	esi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	esi, ecx
		cmp	dword ptr [esi+4Ch], 0
		mov	dword ptr [esi], offset	off_41DDB4
		jz	short loc_4038B6
		call	sub_403D55

loc_4038B6:				; CODE XREF: sub_403880+2Fj
		cmp	byte ptr [esi+48h], 0
		jz	short loc_4038C3
		mov	ecx, esi
		call	sub_403DE1

loc_4038C3:				; CODE XREF: sub_403880+3Aj
		mov	ecx, esi
		call	sub_403918
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		leave
		retn
sub_403880	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4038D8	proc near		; CODE XREF: sub_41C497+16j

var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C4E9
		mov	eax, large fs:0
		push	eax
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		and	[ebp+var_4], 0
		push	ecx
		mov	dword ptr [ecx], offset	off_41DD6C
		call	sub_404D1D
		pop	ecx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		leave
		retn
sub_4038D8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403918	proc near		; CODE XREF: sub_403880+45p
					; sub_403A3E+6p
		push	esi
		mov	esi, [ecx+34h]
		mov	dword ptr [ecx], offset	off_41DD74
		test	esi, esi
		jz	short loc_403937
		mov	ecx, esi
		call	sub_4014B0
		push	8
		push	esi
		call	sub_40535E
		pop	ecx
		pop	ecx

loc_403937:				; CODE XREF: sub_403918+Cj
		pop	esi
		retn
sub_403918	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403939	proc near		; CODE XREF: sub_403A19+9p
					; .text:0041C5DFj

var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C4E9
		mov	eax, large fs:0
		push	eax
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		lea	edx, [ecx+8]
		mov	eax, [edx-8]
		mov	eax, [eax+4]
		mov	dword ptr [eax+edx-8], offset off_41DDFC
		mov	eax, [edx-8]
		mov	ecx, [eax+4]
		lea	eax, [ecx-8]
		mov	[ecx+edx-0Ch], eax
		and	[ebp+var_4], 0
		push	edx
		mov	dword ptr [edx], offset	off_41DD6C
		call	sub_404D1D
		pop	ecx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		leave
		retn
sub_403939	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403997	proc near		; DATA XREF: .rdata:off_41DDFCo
		sub	ecx, [ecx-4]
		jmp	sub_403A19
sub_403997	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40399F	proc near		; DATA XREF: .rdata:off_41DDB4o

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		call	sub_403880
		test	[ebp+arg_0], 1
		jz	short loc_4039BA
		push	58h
		push	esi
		call	sub_40535E
		pop	ecx
		pop	ecx

loc_4039BA:				; CODE XREF: sub_40399F+Fj
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_40399F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4039C1	proc near		; DATA XREF: .rdata:off_41DDF4o

var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C504
		mov	eax, large fs:0
		push	eax
		push	esi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	esi, ecx
		and	[ebp+var_4], 0
		push	esi
		mov	dword ptr [esi], offset	off_41DD6C
		call	sub_404D1D
		test	[ebp+arg_0], 1
		pop	ecx
		jz	short loc_403A07
		push	48h
		push	esi
		call	sub_40535E
		pop	ecx
		pop	ecx

loc_403A07:				; CODE XREF: sub_4039C1+3Aj
		mov	eax, esi
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		leave
		retn	4
sub_4039C1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403A19	proc near		; CODE XREF: sub_403997+3j

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		lea	esi, [ecx-8]
		mov	ecx, esi
		call	sub_403939
		test	[ebp+arg_0], 1
		jz	short loc_403A37
		push	50h
		push	esi
		call	sub_40535E
		pop	ecx
		pop	ecx

loc_403A37:				; CODE XREF: sub_403A19+12j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_403A19	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403A3E	proc near		; DATA XREF: .rdata:off_41DD74o

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		call	sub_403918
		test	[ebp+arg_0], 1
		jz	short loc_403A59
		push	38h
		push	esi
		call	sub_40535E
		pop	ecx
		pop	ecx

loc_403A59:				; CODE XREF: sub_403A3E+Fj
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_403A3E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403A60	proc near		; DATA XREF: .rdata:off_41DE0Co

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		test	[ebp+arg_0], 1
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_41D1A4
		jz	short loc_403A7C
		push	8
		push	esi
		call	sub_40535E
		pop	ecx
		pop	ecx

loc_403A7C:				; CODE XREF: sub_403A60+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_403A60	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403A83	proc near		; DATA XREF: .rdata:off_41DD6Co

var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C504
		mov	eax, large fs:0
		push	eax
		push	esi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	esi, ecx
		and	[ebp+var_4], 0
		push	esi
		mov	dword ptr [esi], offset	off_41DD6C
		call	sub_404D1D
		test	[ebp+arg_0], 1
		pop	ecx
		jz	short loc_403AC9
		push	38h
		push	esi
		call	sub_40535E
		pop	ecx
		pop	ecx

loc_403AC9:				; CODE XREF: sub_403A83+3Aj
		mov	eax, esi
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		leave
		retn	4
sub_403A83	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403ADB	proc near		; CODE XREF: sub_403DE1+Fp
					; sub_404106+3Ap ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		mov	ebx, ecx
		push	esi
		cmp	dword ptr [ebx+38h], 0
		jz	loc_403B7B
		cmp	byte ptr [ebx+3Dh], 0
		jz	short loc_403B7B
		mov	eax, [ebx]
		push	0FFFFFFFFh
		mov	esi, [eax+0Ch]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, ebx
		call	esi
		cmp	eax, 0FFFFFFFFh
		jz	short loc_403B4D
		push	edi
		mov	edi, [ebx+38h]
		mov	eax, [edi]
		mov	esi, [eax+20h]
		lea	eax, [ebp+var_28]
		push	eax
		lea	eax, [ebp+var_4]
		mov	ecx, esi
		push	eax
		lea	eax, [ebp+var_24]
		push	eax
		lea	eax, [ebx+40h]
		push	eax
		call	ds:off_41D12C
		mov	ecx, edi
		call	esi
		pop	edi
		sub	eax, 0
		jz	short loc_403B51
		sub	eax, 1
		jz	short loc_403B55
		dec	eax
		sub	eax, 1
		jz	short loc_403B7B

loc_403B4D:				; CODE XREF: sub_403ADB+3Aj
					; sub_403ADB+95j
		xor	al, al
		jmp	short loc_403B7D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403B51:				; CODE XREF: sub_403ADB+65j
		mov	byte ptr [ebx+3Dh], 0

loc_403B55:				; CODE XREF: sub_403ADB+6Aj
		mov	esi, [ebp+var_28]
		lea	eax, [ebp+var_24]
		sub	esi, eax
		jz	short loc_403B72
		push	dword ptr [ebx+4Ch]
		push	esi
		push	1
		push	eax
		call	sub_40B98E
		add	esp, 10h
		cmp	esi, eax
		jnz	short loc_403B4D

loc_403B72:				; CODE XREF: sub_403ADB+82j
		cmp	byte ptr [ebx+3Dh], 0
		setz	al
		jmp	short loc_403B7D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403B7B:				; CODE XREF: sub_403ADB+18j
					; sub_403ADB+22j ...
		mov	al, 1

loc_403B7D:				; CODE XREF: sub_403ADB+74j
					; sub_403ADB+9Ej
		mov	ecx, [ebp+var_4]
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		leave
		retn
sub_403ADB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403B8B	proc near		; CODE XREF: sub_4036AB+4Bp
		push	38h
		mov	eax, offset loc_41C52C
		call	sub_4058D5
		mov	edi, [ebp+8]
		xor	ebx, ebx
		mov	[ebp-10h], ebx
		test	edi, edi
		jz	short loc_403BEA
		cmp	[edi], ebx
		jnz	short loc_403BEA
		push	8
		call	sub_40536C
		mov	esi, eax
		pop	ecx
		mov	[ebp-10h], esi
		and	[ebp-4], ebx
		test	esi, esi
		jz	short loc_403BD9
		mov	ecx, [ebp+0Ch]
		call	sub_401500
		push	eax
		lea	ecx, [ebp-44h]
		call	loc_401230
		inc	ebx
		mov	dword ptr [esi], offset	off_41DE0C
		and	dword ptr [esi+4], 0
		jmp	short loc_403BDB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403BD9:				; CODE XREF: sub_403B8B+2Ej
		xor	esi, esi

loc_403BDB:				; CODE XREF: sub_403B8B+4Cj
		mov	[edi], esi
		test	bl, 1
		jz	short loc_403BEA
		lea	ecx, [ebp-44h]
		call	sub_4012F0

loc_403BEA:				; CODE XREF: sub_403B8B+16j
					; sub_403B8B+1Aj ...
		push	2
		pop	eax
		call	sub_4058AF
		retn
sub_403B8B	endp ; sp = -4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403BF3	proc near		; CODE XREF: sub_40104D+27p
					; sub_40427F+3Ep

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		cmp	[ebp+arg_4], 1
		setz	al
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	edi
		mov	[esi+48h], al
		mov	[esi+3Dh], bl
		call	sub_403C6F
		mov	edi, [ebp+arg_0]
		test	edi, edi
		jz	short loc_403C52
		lea	eax, [ebp+var_C]
		mov	[ebp+var_4], ebx
		push	eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_8], ebx
		push	eax
		lea	eax, [ebp+var_4]
		mov	[ebp+var_C], ebx
		push	eax
		push	edi
		call	sub_40AA09
		mov	eax, [ebp+var_4]
		add	esp, 10h
		mov	[esi+0Ch], eax
		mov	[esi+10h], eax
		mov	eax, [ebp+var_8]
		mov	[esi+1Ch], eax
		mov	[esi+20h], eax
		mov	eax, [ebp+var_C]
		mov	[esi+2Ch], eax
		mov	[esi+30h], eax

loc_403C52:				; CODE XREF: sub_403BF3+24j
		mov	[esi+4Ch], edi
		mov	eax, dword_42CFCC
		mov	[esi+40h], eax
		mov	eax, dword_42CFD0
		pop	edi
		mov	[esi+38h], ebx
		mov	[esi+44h], eax
		pop	esi
		pop	ebx
		leave
		retn	8
sub_403BF3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403C6F	proc near		; CODE XREF: sub_4037B8+3Ap
					; sub_403BF3+1Ap ...
		lea	eax, [ecx+4]
		mov	[ecx+0Ch], eax
		lea	edx, [ecx+8]
		lea	eax, [ecx+14h]
		mov	[ecx+10h], edx
		mov	[ecx+1Ch], eax
		lea	eax, [ecx+18h]
		mov	[ecx+20h], eax
		lea	eax, [ecx+24h]
		mov	[ecx+2Ch], eax
		lea	eax, [ecx+28h]
		mov	[ecx+30h], eax
		push	esi
		xor	esi, esi
		mov	[edx], esi
		mov	eax, [ecx+20h]
		mov	[eax], esi
		mov	eax, [ecx+30h]
		mov	[eax], esi
		mov	eax, [ecx+0Ch]
		mov	[eax], esi
		mov	eax, [ecx+1Ch]
		mov	[eax], esi
		mov	eax, [ecx+2Ch]
		mov	[eax], esi
		pop	esi
		retn
sub_403C6F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403CB3	proc near		; CODE XREF: sub_403EF1+6p
		push	0
		mov	eax, offset loc_41C4CE
		call	sub_4058D5
		mov	esi, ecx
		xor	ebx, ebx
		mov	dword ptr [esi+14h], 201h
		push	ebx
		push	ebx
		mov	[esi+30h], ebx
		mov	[esi+8], ebx
		mov	[esi+10h], ebx
		mov	dword ptr [esi+18h], 6
		mov	[esi+1Ch], ebx
		mov	[esi+20h], ebx
		mov	[esi+24h], ebx
		mov	[esi+28h], ebx
		mov	[esi+2Ch], ebx
		call	loc_401E30
		push	8
		call	sub_40536C
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_403D0E
		push	1
		mov	[ebp-4], ebx
		call	sub_403128
		pop	ecx
		mov	[edi+4], eax
		jmp	short loc_403D10
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403D0E:				; CODE XREF: sub_403CB3+49j
		mov	edi, ebx

loc_403D10:				; CODE XREF: sub_403CB3+59j
		mov	[esi+30h], edi
		call	sub_4058AF
		retn
sub_403CB3	endp ; sp = -0Ch


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403D19	proc near		; CODE XREF: sub_403E87+5Dp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		mov	ecx, edi
		call	sub_403DC9
		test	al, al
		jz	short loc_403D34
		and	dword ptr [esi+38h], 0
		jmp	short loc_403D3E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403D34:				; CODE XREF: sub_403D19+13j
		mov	ecx, esi
		mov	[esi+38h], edi
		call	sub_403C6F

loc_403D3E:				; CODE XREF: sub_403D19+19j
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_403D19	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403D44	proc near		; DATA XREF: .rdata:0041DDB8o
		cmp	dword ptr [ecx+4Ch], 0
		jz	short locret_403D53
		push	dword ptr [ecx+4Ch]
		call	sub_40AA4F
		pop	ecx

locret_403D53:				; CODE XREF: sub_403D44+4j
		retn
sub_403D44	endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS KEYPAD "+" TO EXPAND]

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403D55	proc near		; CODE XREF: sub_403880+31p
					; sub_403F3A+5Bp ...
		push	edi
		mov	edi, [ecx+0Ch]
		lea	eax, [ecx+3Ch]
		cmp	[edi], eax
		jnz	short loc_403D76
		mov	edx, [ecx+50h]
		push	esi
		mov	esi, [ecx+54h]
		mov	[edi], edx
		sub	esi, edx
		mov	eax, [ecx+1Ch]
		mov	[eax], edx
		mov	eax, [ecx+2Ch]
		mov	[eax], esi
		pop	esi

loc_403D76:				; CODE XREF: sub_403D55+9j
		pop	edi
		retn
sub_403D55	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403D78	proc near		; CODE XREF: sub_404048+72p
		mov	edx, ecx
		push	esi
		push	edi
		mov	edi, [edx+0Ch]
		lea	esi, [edx+3Ch]
		mov	eax, [edi]
		cmp	eax, esi
		jz	short loc_403D98
		mov	ecx, [edx+1Ch]
		mov	[edx+50h], eax
		mov	eax, [edx+2Ch]
		mov	eax, [eax]
		add	eax, [ecx]
		mov	[edx+54h], eax

loc_403D98:				; CODE XREF: sub_403D78+Ej
		mov	[edi], esi
		mov	ecx, edx
		mov	eax, [edx+1Ch]
		sub	ecx, esi
		add	ecx, 3Dh
		pop	edi
		mov	[eax], esi
		mov	eax, [edx+2Ch]
		pop	esi
		mov	[eax], ecx
		retn
sub_403D78	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403DAE	proc near		; DATA XREF: .rdata:0041DDBCo
		cmp	dword ptr [ecx+4Ch], 0
		jz	short locret_403DBD
		push	dword ptr [ecx+4Ch]
		call	sub_40AA63
		pop	ecx

locret_403DBD:				; CODE XREF: sub_403DAE+4j
		retn
sub_403DAE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403DBE	proc near		; CODE XREF: sub_403E87:loc_403ECCp
		push	offset stru_41DE34 ; lpCriticalSection
		call	sub_4049B3
		int	3		; Trap to Debugger
sub_403DBE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403DC9	proc near		; CODE XREF: sub_403D19+Cp
		push	esi
		push	edi
		mov	edi, ecx
		mov	eax, [edi]
		mov	esi, [eax+0Ch]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, edi
		call	esi
		pop	edi
		pop	esi
		retn
sub_403DC9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403DE1	proc near		; CODE XREF: sub_403880+3Ep
		push	ebx
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+4Ch], 0
		jnz	short loc_403DEF
		xor	ebx, ebx
		jmp	short loc_403E12
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403DEF:				; CODE XREF: sub_403DE1+8j
		push	esi
		call	sub_403ADB
		push	dword ptr [edi+4Ch]
		movzx	esi, al
		neg	esi
		sbb	esi, esi
		and	esi, edi
		call	sub_40AAEE
		mov	ebx, eax
		neg	ebx
		pop	ecx
		sbb	ebx, ebx
		not	ebx
		and	ebx, esi
		pop	esi

loc_403E12:				; CODE XREF: sub_403DE1+Cj
		mov	ecx, edi
		mov	byte ptr [edi+48h], 0
		mov	byte ptr [edi+3Dh], 0
		call	sub_403C6F
		and	dword ptr [edi+4Ch], 0
		mov	eax, ebx
		mov	ecx, dword_42CFCC
		mov	[edi+40h], ecx
		mov	ecx, dword_42CFD0
		and	dword ptr [edi+38h], 0
		mov	[edi+44h], ecx
		pop	edi
		pop	ebx
		retn
sub_403DE1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403E40	proc near		; CODE XREF: sub_4053C4+86p
					; DATA XREF: .rdata:0041DE18o ...
		mov	al, 1
		retn
sub_403E40	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_403E43	proc near		; CODE XREF: sub_4053C4+41p
					; DATA XREF: .rdata:0041DE1Co ...
		xor	eax, eax
		inc	eax
		retn
sub_403E43	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403E47	proc near		; DATA XREF: .rdata:0041DE24o
					; .rdata:0041DE28o

arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_C]
		mov	eax, [ebp+arg_4]
		push	3
		mov	[ecx], eax
		mov	ecx, [ebp+arg_18]
		mov	eax, [ebp+arg_10]
		mov	[ecx], eax
		pop	eax
		pop	ebp
		retn	1Ch
sub_403E47	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403E61	proc near		; DATA XREF: .rdata:0041DE30o

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_C]
		jb	short loc_403E72
		mov	eax, [ebp+arg_C]

loc_403E72:				; CODE XREF: sub_403E61+Cj
		pop	ebp
		retn	10h
sub_403E61	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403E76	proc near		; DATA XREF: .rdata:0041DE2Co

arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_C]
		mov	eax, [ebp+arg_4]
		mov	[ecx], eax
		xor	eax, eax
		pop	ebp
		retn	10h
sub_403E76	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403E87	proc near		; CODE XREF: sub_404313+10Cp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, [ebp+arg_0]
		mov	eax, [esi+10h]
		cmp	eax, edi
		jb	short loc_403ECC
		mov	edx, eax
		sub	edx, edi
		cmp	edx, [ebp+arg_4]
		jb	short loc_403EA4
		mov	edx, [ebp+arg_4]

loc_403EA4:				; CODE XREF: sub_403E87+18j
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_403EAC
		mov	ecx, [esi]

loc_403EAC:				; CODE XREF: sub_403E87+21j
		sub	eax, edx
		add	ecx, edi
		mov	[esi+10h], eax
		sub	eax, edi
		inc	eax
		push	eax
		lea	eax, [edx+ecx]
		push	eax
		push	ecx
		call	loc_406DB0
		add	esp, 0Ch
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		retn	8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403ECC:				; CODE XREF: sub_403E87+Fj
		call	sub_403DBE
		int	3		; Trap to Debugger

loc_403ED2:				; DATA XREF: .rdata:0041DDECo
		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	sub_4036AB
		pop	ecx
		push	eax
		mov	ecx, esi
		call	sub_403D19
		pop	esi
		pop	ebp
		retn	4
sub_403E87	endp ; sp = -0Ch

; [00000003 BYTES: COLLAPSED FUNCTION nullsub_2. PRESS KEYPAD "+" TO EXPAND]

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403EF1	proc near		; CODE XREF: sub_4036AB+FEp

arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		call	sub_403CB3
		mov	eax, [ebp+arg_0]
		mov	ecx, esi
		and	dword ptr [esi+3Ch], 0
		push	20h
		mov	[esi+38h], eax
		call	loc_402C10
		cmp	dword ptr [esi+38h], 0
		mov	[esi+40h], al
		jnz	short loc_403F28
		mov	eax, [esi+0Ch]
		mov	ecx, esi
		push	0
		or	eax, 4
		push	eax
		call	loc_401E30

loc_403F28:				; CODE XREF: sub_403EF1+25j
		cmp	[ebp+arg_4], 0
		jz	short loc_403F35
		push	esi
		call	sub_404C9E
		pop	ecx

loc_403F35:				; CODE XREF: sub_403EF1+3Bj
		pop	esi
		pop	ebp
		retn	8
sub_403EF1	endp ; sp = -0Ch


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_403F3A	proc near		; DATA XREF: .rdata:0041DDC0o

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	edi
		mov	edi, ecx
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_403F5D
		xor	eax, eax
		jmp	loc_404032
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403F5D:				; CODE XREF: sub_403F3A+1Aj
		mov	eax, [edi+20h]
		push	esi
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_403F89
		mov	edx, [edi+30h]
		mov	esi, [edx]
		lea	eax, [esi+ecx]
		cmp	ecx, eax
		jnb	short loc_403F89
		lea	ecx, [esi-1]
		mov	[edx], ecx
		mov	edx, [edi+20h]
		mov	esi, [edx]
		lea	ecx, [esi+1]
		mov	[edx], ecx
		mov	[esi], bl
		jmp	loc_40402A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403F89:				; CODE XREF: sub_403F3A+2Bj
					; sub_403F3A+37j
		cmp	dword ptr [edi+4Ch], 0
		jz	loc_40402E
		mov	ecx, edi
		call	sub_403D55
		mov	eax, [edi+38h]
		mov	cl, bl
		mov	[ebp+var_2C], eax
		test	eax, eax
		jnz	short loc_403FAC
		push	dword ptr [edi+4Ch]
		push	ecx
		jmp	short loc_403FF1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_403FAC:				; CODE XREF: sub_403F3A+6Aj
		mov	byte ptr [ebp+var_28], cl
		mov	eax, [eax]
		mov	esi, [eax+1Ch]
		lea	eax, [ebp+var_30]
		push	eax
		lea	eax, [ebp+var_4]
		mov	ecx, esi
		push	eax
		lea	eax, [ebp+var_24]
		push	eax
		lea	eax, [ebp+var_34]
		push	eax
		lea	eax, [ebp-27h]
		push	eax
		lea	eax, [ebp+var_28]
		push	eax
		lea	eax, [edi+40h]
		push	eax
		call	ds:off_41D12C
		mov	ecx, [ebp+var_2C]
		call	esi
		test	eax, eax
		js	short loc_40402E
		cmp	eax, 1
		jle	short loc_404001
		cmp	eax, 3
		jnz	short loc_40402E
		push	dword ptr [edi+4Ch]
		push	[ebp+var_28]

loc_403FF1:				; CODE XREF: sub_403F3A+70j
		call	sub_4035ED
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_40402A
		or	ebx, 0FFFFFFFFh
		jmp	short loc_40402A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404001:				; CODE XREF: sub_403F3A+AAj
		mov	esi, [ebp+var_30]
		lea	eax, [ebp+var_24]
		sub	esi, eax
		jz	short loc_40401E
		push	dword ptr [edi+4Ch]
		push	esi
		push	1
		push	eax
		call	sub_40B98E
		add	esp, 10h
		cmp	esi, eax
		jnz	short loc_40402E

loc_40401E:				; CODE XREF: sub_403F3A+CFj
		lea	eax, [ebp+var_28]
		mov	byte ptr [edi+3Dh], 1
		cmp	[ebp+var_34], eax
		jz	short loc_40402E

loc_40402A:				; CODE XREF: sub_403F3A+4Aj
					; sub_403F3A+C0j ...
		mov	eax, ebx
		jmp	short loc_404031
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40402E:				; CODE XREF: sub_403F3A+53j
					; sub_403F3A+A5j ...
		or	eax, 0FFFFFFFFh

loc_404031:				; CODE XREF: sub_403F3A+F2j
		pop	esi

loc_404032:				; CODE XREF: sub_403F3A+1Ej
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		leave
		retn	4
sub_403F3A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_404042	proc near		; DATA XREF: .rdata:0041DD80o
					; .rdata:0041DD84o
		or	eax, 0FFFFFFFFh
		retn	4
sub_404042	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404048	proc near		; DATA XREF: .rdata:0041DDC4o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		mov	esi, ecx
		mov	eax, [esi+1Ch]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_404084
		mov	eax, [esi+0Ch]
		cmp	[eax], ecx
		jnb	short loc_404084
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_40406F
		movzx	eax, byte ptr [ecx-1]
		cmp	eax, ebx
		jnz	short loc_404084

loc_40406F:				; CODE XREF: sub_404048+1Dj
		mov	eax, [esi+2Ch]
		inc	dword ptr [eax]
		mov	eax, [esi+1Ch]
		dec	dword ptr [eax]
		lea	eax, [ebx+1]
		neg	eax
		sbb	eax, eax
		and	eax, ebx
		jmp	short loc_4040C4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404084:				; CODE XREF: sub_404048+11j
					; sub_404048+18j ...
		cmp	dword ptr [esi+4Ch], 0
		jz	short loc_4040C1
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_4040C1
		cmp	dword ptr [esi+38h], 0
		jnz	short loc_4040AC
		push	dword ptr [esi+4Ch]
		movzx	eax, bl
		push	eax
		call	sub_40BC8F
		pop	ecx
		pop	ecx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_4040AC

loc_4040A8:				; CODE XREF: sub_404048+77j
		mov	eax, ebx
		jmp	short loc_4040C4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4040AC:				; CODE XREF: sub_404048+4Bj
					; sub_404048+5Ej
		mov	eax, [esi+1Ch]
		lea	ecx, [esi+3Ch]
		cmp	[eax], ecx
		jz	short loc_4040C1
		mov	[ecx], bl
		mov	ecx, esi
		call	sub_403D78
		jmp	short loc_4040A8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4040C1:				; CODE XREF: sub_404048+40j
					; sub_404048+45j ...
		or	eax, 0FFFFFFFFh

loc_4040C4:				; CODE XREF: sub_404048+3Aj
					; sub_404048+62j
		pop	esi
		pop	ebx
		pop	ebp
		retn	4
sub_404048	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4040CA	proc near		; CODE XREF: sub_404313+94p

var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	edx, [ecx+10h]
		cmp	edx, [ecx+14h]
		jnb	short loc_4040F1
		cmp	dword ptr [ecx+14h], 10h
		lea	eax, [edx+1]
		mov	[ecx+10h], eax
		jb	short loc_4040E4
		mov	ecx, [ecx]

loc_4040E4:				; CODE XREF: sub_4040CA+16j
		mov	al, [ebp+arg_0]
		mov	[ecx+edx], al
		mov	byte ptr [ecx+edx+1], 0
		jmp	short locret_404102
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4040F1:				; CODE XREF: sub_4040CA+Aj
		push	dword ptr [ebp+arg_0]
		mov	byte ptr [ebp+var_4], 0
		push	[ebp+var_4]
		push	1
		call	sub_403607

locret_404102:				; CODE XREF: sub_4040CA+25j
		leave
		retn	4
sub_4040CA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404106	proc near		; DATA XREF: .rdata:0041DDDCo

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		mov	edx, [esi+1Ch]
		lea	eax, [esi+3Ch]
		cmp	[edx], eax
		jnz	short loc_404134
		cmp	[ebp+arg_C], 1
		jnz	short loc_404134
		cmp	dword ptr [esi+38h], 0
		jnz	short loc_404134
		mov	edi, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		add	edi, 0FFFFFFFFh
		adc	ebx, 0FFFFFFFFh
		jmp	short loc_40413A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404134:				; CODE XREF: sub_404106+12j
					; sub_404106+18j ...
		mov	ebx, [ebp+arg_8]
		mov	edi, [ebp+arg_4]

loc_40413A:				; CODE XREF: sub_404106+2Cj
		cmp	dword ptr [esi+4Ch], 0
		jz	short loc_40419B
		call	sub_403ADB
		test	al, al
		jz	short loc_40419B
		mov	eax, edi
		or	eax, ebx
		jnz	short loc_404155
		cmp	[ebp+arg_C], 1
		jz	short loc_404169

loc_404155:				; CODE XREF: sub_404106+47j
		push	[ebp+arg_C]
		push	ebx
		push	edi
		push	dword ptr [esi+4Ch]
		call	sub_40B75A
		add	esp, 10h
		test	eax, eax
		jnz	short loc_40419B

loc_404169:				; CODE XREF: sub_404106+4Dj
		lea	eax, [ebp+var_8]
		push	eax
		push	dword ptr [esi+4Ch]
		call	sub_40AFD0
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_40419B
		mov	ecx, esi
		call	sub_403D55
		push	[ebp+var_4]
		mov	ecx, [ebp+arg_0]
		push	[ebp+var_8]
		push	dword ptr [esi+44h]
		push	dword ptr [esi+40h]
		call	sub_4037FF
		mov	eax, [ebp+arg_0]
		jmp	short loc_4041B5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40419B:				; CODE XREF: sub_404106+38j
					; sub_404106+41j ...
		mov	eax, [ebp+arg_0]
		or	dword ptr [eax], 0FFFFFFFFh
		or	dword ptr [eax+4], 0FFFFFFFFh
		and	dword ptr [eax+8], 0
		and	dword ptr [eax+0Ch], 0
		and	dword ptr [eax+10h], 0
		and	dword ptr [eax+14h], 0

loc_4041B5:				; CODE XREF: sub_404106+93j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	14h
sub_404106	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4041BC	proc near		; DATA XREF: .rdata:0041DD9Co

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		or	dword ptr [eax], 0FFFFFFFFh
		or	dword ptr [eax+4], 0FFFFFFFFh
		xor	ecx, ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		mov	[eax+14h], ecx
		pop	ebp
		retn	14h
sub_4041BC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4041DB	proc near		; DATA XREF: .rdata:0041DDE0o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	edx, [ebp+arg_4]
		add	edx, [ebp+arg_C]
		mov	eax, [ebp+arg_8]
		adc	eax, [ebp+arg_10]
		push	esi
		mov	esi, ecx
		mov	[ebp+var_8], edx
		push	edi
		xor	edi, edi
		mov	[ebp+var_4], eax
		cmp	[esi+4Ch], edi
		jz	short loc_404244
		call	sub_403ADB
		test	al, al
		jz	short loc_404244
		lea	eax, [ebp+var_8]
		push	eax
		push	dword ptr [esi+4Ch]
		call	sub_40B46D
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_404244
		mov	eax, [ebp+arg_14]
		mov	ecx, esi
		mov	[esi+40h], eax
		mov	eax, [ebp+arg_18]
		mov	[esi+44h], eax
		call	sub_403D55
		push	[ebp+var_4]
		mov	ecx, [ebp+arg_0]
		push	[ebp+var_8]
		push	dword ptr [esi+44h]
		push	dword ptr [esi+40h]
		call	sub_4037FF
		mov	eax, [ebp+arg_0]
		jmp	short loc_40425A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404244:				; CODE XREF: sub_4041DB+20j
					; sub_4041DB+29j ...
		mov	eax, [ebp+arg_0]
		or	dword ptr [eax], 0FFFFFFFFh
		or	dword ptr [eax+4], 0FFFFFFFFh
		mov	[eax+8], edi
		mov	[eax+0Ch], edi
		mov	[eax+10h], edi
		mov	[eax+14h], edi

loc_40425A:				; CODE XREF: sub_4041DB+67j
		pop	edi
		pop	esi
		leave
		retn	20h
sub_4041DB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404260	proc near		; DATA XREF: .rdata:0041DDA0o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		or	dword ptr [eax], 0FFFFFFFFh
		or	dword ptr [eax+4], 0FFFFFFFFh
		xor	ecx, ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		mov	[eax+14h], ecx
		pop	ebp
		retn	20h
sub_404260	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40427F	proc near		; DATA XREF: .rdata:0041DDE4o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+4Ch], 0
		jz	short loc_4042C6
		cmp	[ebp+arg_0], 0
		jnz	short loc_40429E
		mov	eax, [ebp+arg_4]
		or	eax, [ebp+arg_8]
		jnz	short loc_40429E
		push	4
		pop	eax
		jmp	short loc_4042A0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40429E:				; CODE XREF: sub_40427F+10j
					; sub_40427F+18j
		xor	eax, eax

loc_4042A0:				; CODE XREF: sub_40427F+1Dj
		push	[ebp+arg_4]
		push	eax
		push	[ebp+arg_0]
		push	dword ptr [esi+4Ch]
		call	sub_40BB11
		add	esp, 10h
		test	eax, eax
		jnz	short loc_4042C6
		push	1
		push	dword ptr [esi+4Ch]
		mov	ecx, esi
		call	sub_403BF3
		mov	eax, esi
		jmp	short loc_4042C8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4042C6:				; CODE XREF: sub_40427F+Aj
					; sub_40427F+35j
		xor	eax, eax

loc_4042C8:				; CODE XREF: sub_40427F+45j
		pop	esi
		pop	ebp
		retn	0Ch
sub_40427F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4042CD	proc near		; DATA XREF: .rdata:0041DDA4o
		mov	eax, ecx
		retn	0Ch
sub_4042CD	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4042D2	proc near		; DATA XREF: .rdata:0041DD88o
					; .rdata:0041DDC8o
		xor	eax, eax
		xor	edx, edx
		retn
sub_4042D2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4042D7	proc near		; DATA XREF: .rdata:0041DDE8o
		push	ebx
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+4Ch], 0
		jz	short loc_404309
		mov	eax, [edi]
		or	ebx, 0FFFFFFFFh
		push	esi
		push	ebx
		mov	esi, [eax+0Ch]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, edi
		call	esi
		pop	esi
		cmp	eax, ebx
		jz	short loc_404309
		push	dword ptr [edi+4Ch]
		call	sub_40AE3F
		pop	ecx
		test	eax, eax
		js	short loc_40430B

loc_404309:				; CODE XREF: sub_4042D7+8j
					; sub_4042D7+23j
		xor	ebx, ebx

loc_40430B:				; CODE XREF: sub_4042D7+30j
		pop	edi
		mov	eax, ebx
		pop	ebx
		retn
sub_4042D7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_404310	proc near		; CODE XREF: sub_4053C4+1Ap
					; sub_4053C4+7Ap ...
		xor	eax, eax
		retn
sub_404310	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_404313	proc near		; DATA XREF: .rdata:0041DDD0o
		push	2Ch
		mov	eax, offset loc_41C54F
		call	sub_405909
		mov	edi, ecx
		mov	eax, [edi+1Ch]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_40434D
		mov	edx, [edi+2Ch]
		mov	esi, [edx]
		lea	eax, [esi+ecx]
		cmp	ecx, eax
		jnb	short loc_40434D
		lea	eax, [esi-1]
		mov	[edx], eax
		mov	ecx, [edi+1Ch]
		mov	edx, [ecx]
		lea	eax, [edx+1]
		mov	[ecx], eax
		movzx	eax, byte ptr [edx]
		jmp	loc_40448B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40434D:				; CODE XREF: sub_404313+15j
					; sub_404313+21j
		xor	ebx, ebx
		cmp	[edi+4Ch], ebx
		jnz	short loc_40435C

loc_404354:				; CODE XREF: sub_404313+65j
		or	eax, 0FFFFFFFFh
		jmp	loc_40448B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40435C:				; CODE XREF: sub_404313+3Fj
		mov	ecx, edi
		call	sub_403D55
		cmp	[edi+38h], ebx
		jnz	short loc_404383
		push	dword ptr [edi+4Ch]
		lea	eax, [ebp-2Ah]
		push	eax
		call	sub_4035CD
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_404354
		movzx	eax, byte ptr [ebp-2Ah]
		jmp	loc_40448B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404383:				; CODE XREF: sub_404313+53j
		mov	[ebp-18h], ebx
		mov	dword ptr [ebp-14h], 0Fh
		mov	[ebp-28h], bl
		push	dword ptr [edi+4Ch]
		mov	[ebp-4], ebx
		call	sub_40AED2
		or	ebx, 0FFFFFFFFh
		jmp	loc_40442C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4043A3:				; CODE XREF: sub_404313+11Cj
		push	eax
		lea	ecx, [ebp-28h]
		call	sub_4040CA
		cmp	dword ptr [ebp-14h], 10h
		lea	edx, [ebp-28h]
		mov	eax, [edi+38h]
		mov	[ebp-34h], eax
		jb	short loc_4043BE
		mov	edx, [ebp-28h]

loc_4043BE:				; CODE XREF: sub_404313+A6j
		lea	ecx, [ebp-28h]
		jb	short loc_4043C6
		mov	ecx, [ebp-28h]

loc_4043C6:				; CODE XREF: sub_404313+AEj
		mov	eax, [eax]
		mov	esi, [eax+18h]
		lea	eax, [ebp-38h]
		push	eax
		lea	eax, [ebp-28h]
		push	eax
		lea	eax, [ebp-29h]
		push	eax
		lea	eax, [ebp-30h]
		push	eax
		mov	eax, [ebp-18h]
		add	eax, edx
		push	eax
		push	ecx
		lea	eax, [edi+40h]
		mov	ecx, esi
		push	eax
		call	ds:off_41D12C
		mov	ecx, [ebp-34h]
		call	esi
		test	eax, eax
		js	loc_404481
		cmp	eax, 1
		jg	short loc_40446D
		lea	eax, [ebp-29h]
		lea	ecx, [ebp-28h]
		cmp	[ebp-38h], eax
		jnz	short loc_404437
		cmp	dword ptr [ebp-14h], 10h
		jb	short loc_404414
		mov	ecx, [ebp-28h]

loc_404414:				; CODE XREF: sub_404313+FCj
		mov	eax, [ebp-30h]
		sub	eax, ecx
		lea	ecx, [ebp-28h]
		push	eax
		push	0
		call	sub_403E87
		push	dword ptr [edi+4Ch]
		call	sub_40AED2

loc_40442C:				; CODE XREF: sub_404313+8Bj
		pop	ecx
		cmp	eax, ebx
		jnz	loc_4043A3
		jmp	short loc_404481
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404437:				; CODE XREF: sub_404313+F6j
		cmp	dword ptr [ebp-14h], 10h
		jb	short loc_404440
		mov	ecx, [ebp-28h]

loc_404440:				; CODE XREF: sub_404313+128j
		mov	esi, [ebp-18h]
		mov	eax, [ebp-30h]
		sub	esi, eax
		add	esi, ecx
		test	esi, esi
		jle	short loc_404467

loc_40444E:				; CODE XREF: sub_404313+152j
		push	dword ptr [edi+4Ch]
		dec	esi
		movsx	eax, byte ptr [esi+eax]
		push	eax
		call	sub_40BC8F
		pop	ecx
		pop	ecx
		test	esi, esi
		jle	short loc_404467
		mov	eax, [ebp-30h]
		jmp	short loc_40444E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404467:				; CODE XREF: sub_404313+139j
					; sub_404313+14Dj
		movzx	ebx, byte ptr [ebp-29h]
		jmp	short loc_404481
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40446D:				; CODE XREF: sub_404313+EBj
		cmp	eax, 3
		jnz	short loc_404481
		cmp	dword ptr [ebp-14h], 10h
		lea	eax, [ebp-28h]
		jb	short loc_40447E
		mov	eax, [ebp-28h]

loc_40447E:				; CODE XREF: sub_404313+166j
		movsx	ebx, byte ptr [eax]

loc_404481:				; CODE XREF: sub_404313+E2j
					; sub_404313+122j ...
		lea	ecx, [ebp-28h]
		call	loc_402050
		mov	eax, ebx

loc_40448B:				; CODE XREF: sub_404313+35j
					; sub_404313+44j ...
		call	sub_4058C4
		retn
sub_404313	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_404491	proc near		; DATA XREF: .rdata:0041DD90o
		push	esi
		push	edi
		mov	edi, ecx
		mov	eax, [edi]
		mov	esi, [eax+18h]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, edi
		call	esi
		or	edx, 0FFFFFFFFh
		cmp	eax, edx
		jz	short loc_4044BF
		mov	eax, [edi+2Ch]
		dec	dword ptr [eax]
		mov	ecx, [edi+1Ch]
		mov	edx, [ecx]
		lea	eax, [edx+1]
		mov	[ecx], eax
		movzx	edx, byte ptr [edx]

loc_4044BF:				; CODE XREF: sub_404491+1Aj
		pop	edi
		mov	eax, edx
		pop	esi
		retn
sub_404491	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4044C4	proc near		; DATA XREF: .rdata:0041DDCCo
		push	edi
		mov	edi, ecx
		mov	eax, [edi+1Ch]
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_4044E0
		mov	eax, [edi+2Ch]
		mov	eax, [eax]
		add	eax, edx
		cmp	edx, eax
		jnb	short loc_4044E0
		movzx	eax, byte ptr [edx]
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4044E0:				; CODE XREF: sub_4044C4+Aj
					; sub_4044C4+15j
		mov	eax, [edi]
		push	ebx
		push	esi
		mov	esi, [eax+1Ch]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, edi
		call	esi
		mov	ebx, eax
		or	eax, 0FFFFFFFFh
		cmp	ebx, eax
		jz	short loc_404510
		mov	eax, [edi]
		push	ebx
		mov	esi, [eax+10h]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, edi
		call	esi
		mov	eax, ebx

loc_404510:				; CODE XREF: sub_4044C4+36j
		pop	esi
		pop	ebx
		pop	edi
		retn
sub_4044C4	endp ; sp = -4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_404514	proc near		; DATA XREF: .rdata:0041DD8Co
		or	eax, 0FFFFFFFFh
		retn
sub_404514	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404518	proc near		; DATA XREF: .rdata:0041DDD4o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+38h], 0
		jz	short loc_40453A
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_4045FF
		jmp	loc_4045FA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40453A:				; CODE XREF: sub_404518+Dj
		mov	eax, [edi+1Ch]
		push	ebx
		mov	ebx, [ebp+arg_8]
		push	esi
		mov	eax, [eax]
		mov	esi, [ebp+arg_4]
		mov	[ebp+var_10], esi
		mov	[ebp+var_14], ebx
		mov	[ebp+var_C], eax
		test	eax, eax
		jz	short loc_40455B
		mov	eax, [edi+2Ch]
		mov	eax, [eax]
		jmp	short loc_40455D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40455B:				; CODE XREF: sub_404518+3Aj
		xor	eax, eax

loc_40455D:				; CODE XREF: sub_404518+41j
		cdq
		mov	[ebp+var_4], eax
		mov	ecx, edx
		mov	[ebp+var_8], ecx
		test	ebx, ebx
		jl	loc_4045EE
		jg	short loc_404574
		test	esi, esi
		jz	short loc_4045EE

loc_404574:				; CODE XREF: sub_404518+56j
		test	ecx, ecx
		jl	short loc_4045BB
		jg	short loc_40457E
		test	eax, eax
		jz	short loc_4045BB

loc_40457E:				; CODE XREF: sub_404518+60j
		cmp	ebx, ecx
		jg	short loc_404590
		jl	short loc_404588
		cmp	esi, eax
		jnb	short loc_404590

loc_404588:				; CODE XREF: sub_404518+6Aj
		mov	eax, esi
		mov	[ebp+var_4], esi
		mov	[ebp+var_8], ebx

loc_404590:				; CODE XREF: sub_404518+68j
					; sub_404518+6Ej
		push	eax
		push	[ebp+var_C]
		push	[ebp+arg_0]
		call	loc_4067C0
		mov	ecx, [ebp+var_4]
		add	esp, 0Ch
		mov	edx, [ebp+arg_0]
		mov	eax, [edi+2Ch]
		add	edx, ecx
		sub	esi, ecx
		mov	[ebp+var_4], edx
		sbb	ebx, [ebp+var_8]
		sub	[eax], ecx
		mov	eax, [edi+1Ch]
		add	[eax], ecx
		jmp	short loc_4045C1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4045BB:				; CODE XREF: sub_404518+5Ej
					; sub_404518+64j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_4], eax

loc_4045C1:				; CODE XREF: sub_404518+A1j
		test	ebx, ebx
		jl	short loc_4045EE
		jg	short loc_4045CB
		test	esi, esi
		jz	short loc_4045EE

loc_4045CB:				; CODE XREF: sub_404518+ADj
		cmp	dword ptr [edi+4Ch], 0
		jz	short loc_4045EE
		mov	ecx, edi
		call	sub_403D55
		push	dword ptr [edi+4Ch]
		push	esi
		push	1
		push	[ebp+var_4]
		call	sub_40B33C
		add	esp, 10h
		sub	esi, eax
		sbb	ebx, 0

loc_4045EE:				; CODE XREF: sub_404518+50j
					; sub_404518+5Aj ...
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_14]
		sub	eax, esi
		pop	esi
		sbb	edx, ebx
		pop	ebx

loc_4045FA:				; CODE XREF: sub_404518+1Dj
		pop	edi
		leave
		retn	0Ch
sub_404518	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4045FF	proc near		; CODE XREF: sub_404518+18p
					; DATA XREF: .rdata:0041DD94o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		mov	ebx, [ebp+arg_8]
		mov	edx, ebx
		mov	[ebp+var_4], ecx
		mov	[ebp+var_14], edx
		push	edi
		mov	edi, [ebp+arg_4]
		mov	eax, edi
		mov	[ebp+var_10], eax
		test	ebx, ebx
		jl	loc_4046D1
		jg	short loc_40462C
		test	edi, edi
		jz	loc_4046D1

loc_40462C:				; CODE XREF: sub_4045FF+23j
		push	esi

loc_40462D:				; CODE XREF: sub_4045FF+BBj
					; sub_4045FF+C5j
		mov	eax, [ecx+1Ch]
		mov	eax, [eax]
		mov	[ebp+var_C], eax
		test	eax, eax
		jz	short loc_404640
		mov	eax, [ecx+2Ch]
		mov	eax, [eax]
		jmp	short loc_404642
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404640:				; CODE XREF: sub_4045FF+38j
		xor	eax, eax

loc_404642:				; CODE XREF: sub_4045FF+3Fj
		cdq
		mov	esi, eax
		mov	eax, edx
		mov	[ebp+var_8], eax
		test	eax, eax
		jl	short loc_404689
		jg	short loc_404654
		test	esi, esi
		jz	short loc_404689

loc_404654:				; CODE XREF: sub_4045FF+4Fj
		cmp	ebx, eax
		jg	short loc_404663
		jl	short loc_40465E
		cmp	edi, esi
		jnb	short loc_404663

loc_40465E:				; CODE XREF: sub_4045FF+59j
		mov	esi, edi
		mov	[ebp+var_8], ebx

loc_404663:				; CODE XREF: sub_4045FF+57j
					; sub_4045FF+5Dj
		push	esi
		push	[ebp+var_C]
		push	[ebp+arg_0]
		call	loc_4067C0
		mov	ecx, [ebp+var_4]
		add	esp, 0Ch
		sub	edi, esi
		sbb	ebx, [ebp+var_8]
		mov	eax, [ecx+2Ch]
		sub	[eax], esi
		mov	eax, [ecx+1Ch]
		add	[eax], esi
		mov	eax, [ebp+arg_0]
		jmp	short loc_4046B3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404689:				; CODE XREF: sub_4045FF+4Dj
					; sub_4045FF+53j
		mov	eax, [ecx]
		mov	esi, [eax+1Ch]
		mov	ecx, esi
		call	ds:off_41D12C
		mov	ecx, [ebp+var_4]
		call	esi
		mov	ecx, eax
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_4046CA
		mov	eax, [ebp+arg_0]
		add	edi, 0FFFFFFFFh
		adc	ebx, 0FFFFFFFFh
		xor	esi, esi
		inc	esi
		mov	[eax], cl
		mov	ecx, [ebp+var_4]

loc_4046B3:				; CODE XREF: sub_4045FF+88j
		add	eax, esi
		mov	[ebp+arg_0], eax
		test	ebx, ebx
		jg	loc_40462D
		jl	short loc_4046CA
		test	edi, edi
		jnz	loc_40462D

loc_4046CA:				; CODE XREF: sub_4045FF+A1j
					; sub_4045FF+C1j
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_14]
		pop	esi

loc_4046D1:				; CODE XREF: sub_4045FF+1Dj
					; sub_4045FF+27j
		sub	eax, edi
		pop	edi
		sbb	edx, ebx
		pop	ebx
		leave
		retn	0Ch
sub_4045FF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4046DB	proc near		; DATA XREF: .rdata:0041DDD8o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		mov	ebx, ecx
		cmp	dword ptr [ebx+38h], 0
		jz	short loc_4046FD
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_4047AF
		jmp	loc_4047AA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4046FD:				; CODE XREF: sub_4046DB+Dj
		mov	eax, [ebx+20h]
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		mov	eax, [eax]
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_10], esi
		mov	[ebp+var_14], edi
		mov	[ebp+var_C], eax
		test	eax, eax
		jz	short loc_40471E
		mov	eax, [ebx+30h]
		mov	eax, [eax]
		jmp	short loc_404720
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40471E:				; CODE XREF: sub_4046DB+3Aj
		xor	eax, eax

loc_404720:				; CODE XREF: sub_4046DB+41j
		cdq
		mov	[ebp+var_4], eax
		mov	ecx, edx
		mov	[ebp+var_8], ecx
		test	edi, edi
		jl	short loc_40479E
		jg	short loc_404733
		test	esi, esi
		jz	short loc_40479E

loc_404733:				; CODE XREF: sub_4046DB+52j
		test	ecx, ecx
		jl	short loc_404777
		jg	short loc_40473D
		test	eax, eax
		jz	short loc_404777

loc_40473D:				; CODE XREF: sub_4046DB+5Cj
		cmp	edi, ecx
		jg	short loc_40474F
		jl	short loc_404747
		cmp	esi, eax
		jnb	short loc_40474F

loc_404747:				; CODE XREF: sub_4046DB+66j
		mov	eax, esi
		mov	[ebp+var_4], esi
		mov	[ebp+var_8], edi

loc_40474F:				; CODE XREF: sub_4046DB+64j
					; sub_4046DB+6Aj
		push	eax
		push	[ebp+arg_0]
		push	[ebp+var_C]
		call	loc_4067C0
		mov	ecx, [ebp+var_4]
		add	esp, 0Ch
		mov	edx, [ebp+arg_0]
		mov	eax, [ebx+30h]
		add	edx, ecx
		sub	esi, ecx
		sbb	edi, [ebp+var_8]
		sub	[eax], ecx
		mov	eax, [ebx+20h]
		add	[eax], ecx
		jmp	short loc_40477A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404777:				; CODE XREF: sub_4046DB+5Aj
					; sub_4046DB+60j
		mov	edx, [ebp+arg_0]

loc_40477A:				; CODE XREF: sub_4046DB+9Aj
		test	edi, edi
		jl	short loc_40479E
		jg	short loc_404784
		test	esi, esi
		jz	short loc_40479E

loc_404784:				; CODE XREF: sub_4046DB+A3j
		cmp	dword ptr [ebx+4Ch], 0
		jz	short loc_40479E
		push	dword ptr [ebx+4Ch]
		push	esi
		push	1
		push	edx
		call	sub_40B98E
		add	esp, 10h
		sub	esi, eax
		sbb	edi, 0

loc_40479E:				; CODE XREF: sub_4046DB+50j
					; sub_4046DB+56j ...
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_14]
		sub	eax, esi
		sbb	edx, edi
		pop	edi
		pop	esi

loc_4047AA:				; CODE XREF: sub_4046DB+1Dj
		pop	ebx
		leave
		retn	0Ch
sub_4046DB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4047AF	proc near		; CODE XREF: sub_4046DB+18p
					; DATA XREF: .rdata:0041DD98o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		mov	ebx, [ebp+arg_8]
		mov	edx, ebx
		mov	[ebp+var_4], ecx
		mov	[ebp+var_14], edx
		push	edi
		mov	edi, [ebp+arg_4]
		mov	eax, edi
		mov	[ebp+var_10], eax
		test	ebx, ebx
		jl	loc_40487D
		jg	short loc_4047DC
		test	edi, edi
		jz	loc_40487D

loc_4047DC:				; CODE XREF: sub_4047AF+23j
		push	esi

loc_4047DD:				; CODE XREF: sub_4047AF+B7j
					; sub_4047AF+C1j
		mov	eax, [ecx+20h]
		mov	eax, [eax]
		mov	[ebp+var_C], eax
		test	eax, eax
		jz	short loc_4047F0
		mov	eax, [ecx+30h]
		mov	eax, [eax]
		jmp	short loc_4047F2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4047F0:				; CODE XREF: sub_4047AF+38j
		xor	eax, eax

loc_4047F2:				; CODE XREF: sub_4047AF+3Fj
		cdq
		mov	esi, eax
		mov	eax, edx
		mov	[ebp+var_8], eax
		test	eax, eax
		jl	short loc_404837
		jg	short loc_404804
		test	esi, esi
		jz	short loc_404837

loc_404804:				; CODE XREF: sub_4047AF+4Fj
		cmp	ebx, eax
		jg	short loc_404813
		jl	short loc_40480E
		cmp	edi, esi
		jnb	short loc_404813

loc_40480E:				; CODE XREF: sub_4047AF+59j
		mov	esi, edi
		mov	[ebp+var_8], ebx

loc_404813:				; CODE XREF: sub_4047AF+57j
					; sub_4047AF+5Dj
		mov	eax, [ebp+arg_0]
		push	esi
		push	eax
		push	[ebp+var_C]
		call	loc_4067C0
		mov	ecx, [ebp+var_4]
		add	esp, 0Ch
		sub	edi, esi
		sbb	ebx, [ebp+var_8]
		mov	eax, [ecx+30h]
		sub	[eax], esi
		mov	eax, [ecx+20h]
		add	[eax], esi
		jmp	short loc_404861
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404837:				; CODE XREF: sub_4047AF+4Dj
					; sub_4047AF+53j
		mov	eax, [ecx]
		mov	esi, [eax+0Ch]
		mov	ecx, esi
		mov	eax, [ebp+arg_0]
		movzx	eax, byte ptr [eax]
		push	eax
		call	ds:off_41D12C
		mov	ecx, [ebp+var_4]
		call	esi
		cmp	eax, 0FFFFFFFFh
		jz	short loc_404876
		mov	ecx, [ebp+var_4]
		add	edi, 0FFFFFFFFh
		adc	ebx, 0FFFFFFFFh
		xor	esi, esi
		inc	esi

loc_404861:				; CODE XREF: sub_4047AF+86j
		add	[ebp+arg_0], esi
		test	ebx, ebx
		jg	loc_4047DD
		jl	short loc_404876
		test	edi, edi
		jnz	loc_4047DD

loc_404876:				; CODE XREF: sub_4047AF+A4j
					; sub_4047AF+BDj
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_14]
		pop	esi

loc_40487D:				; CODE XREF: sub_4047AF+1Dj
					; sub_4047AF+27j
		sub	eax, edi
		pop	edi
		sbb	edx, ebx
		pop	ebx
		leave
		retn	0Ch
sub_4047AF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404887	proc near		; CODE XREF: sub_401990+12p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_40514F
		add	esp, 10h
		pop	ebp
		retn
sub_404887	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: thunk

sub_40489F	proc near		; CODE XREF: sub_4023FD+4Dp
					; sub_402870+26p ...
		jmp	sub_40748A
sub_40489F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4048A4	proc near		; DATA XREF: .rdata:0042AD28o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	sub_401120
		mov	dword ptr [esi], offset	off_41DE50
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_4048A4	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4048BF	proc near		; CODE XREF: sub_405C8B+9p
		and	dword ptr [ecx+4], 0
		mov	eax, ecx
		and	dword ptr [ecx+8], 0
		mov	dword ptr [ecx+4], offset aBadAllocation ; "bad	allocation"
		mov	dword ptr [ecx], offset	off_41DE50
		retn
sub_4048BF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4048D7	proc near		; DATA XREF: .rdata:0042AD80o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	sub_401120
		mov	dword ptr [esi], offset	off_41DE78
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_4048D7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4048F2	proc near		; CODE XREF: sub_404993+Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		mov	[ebp+var_4], esi
		call	sub_4010D0
		mov	dword ptr [esi], offset	off_41DE78
		mov	eax, esi
		pop	esi
		leave
		retn	4
sub_4048F2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404911	proc near		; DATA XREF: .rdata:0042AD44o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	sub_401120
		mov	dword ptr [esi], offset	off_41DE6C
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_404911	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40492C	proc near		; DATA XREF: .rdata:0042ADBCo

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	sub_401120
		mov	dword ptr [esi], offset	off_41DE84
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_40492C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404947	proc near		; CODE XREF: sub_4049B3+Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		mov	[ebp+var_4], esi
		call	sub_4010D0
		mov	dword ptr [esi], offset	off_41DE84
		mov	eax, esi
		pop	esi
		leave
		retn	4
sub_404947	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404966	proc near		; DATA XREF: .rdata:off_41DE50o
					; .rdata:off_41DE6Co ...

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		lea	eax, [esi+4]
		mov	dword ptr [esi], offset	off_41DCD8
		push	eax
		call	sub_40676D
		test	[ebp+arg_0], 1
		pop	ecx
		jz	short loc_40498C
		push	0Ch
		push	esi
		call	sub_40535E
		pop	ecx
		pop	ecx

loc_40498C:				; CODE XREF: sub_404966+1Aj
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_404966	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404993	proc near		; CODE XREF: .text:00402975p

var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		lea	ecx, [ebp+var_C]
		push	[ebp+arg_0]
		call	sub_4048F2
		push	offset dword_42AD48
		lea	eax, [ebp+var_C]
		push	eax
		call	sub_406D34
		int	3		; Trap to Debugger
sub_404993	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_4049B3(LPCRITICAL_SECTION lpCriticalSection)
sub_4049B3	proc near		; CODE XREF: sub_403DBE+5p

var_C		= dword	ptr -0Ch
lpCriticalSection= dword ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		lea	ecx, [ebp+var_C]
		push	[ebp+lpCriticalSection]
		call	sub_404947
		push	offset dword_42AD84
		lea	eax, [ebp+var_C]
		push	eax
		call	sub_406D34
		int	3		; Trap to Debugger

loc_4049D3:				; CODE XREF: .text:00402F2Ep
		push	ebp
		mov	ebp, esp
		push	[ebp+lpCriticalSection]	; lpCriticalSection
		call	ds:DeleteCriticalSection
		pop	ebp
		retn
sub_4049B3	endp ; sp = -10h


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_4049E1(LPCRITICAL_SECTION lpCriticalSection)
sub_4049E1	proc near		; CODE XREF: sub_402EBC+17p

lpCriticalSection= dword ptr  8

		push	ebp
		mov	ebp, esp
		push	0		; int
		push	0FA0h		; dwSpinCount
		push	[ebp+lpCriticalSection]	; lpCriticalSection
		call	sub_4051DD
		add	esp, 0Ch
		pop	ebp
		retn
sub_4049E1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_4049F8(LPCRITICAL_SECTION lpCriticalSection)
sub_4049F8	proc near		; CODE XREF: sub_402EE9+24p

lpCriticalSection= dword ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+lpCriticalSection]	; lpCriticalSection
		call	ds:EnterCriticalSection
		pop	ebp
		retn
sub_4049F8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_404A06(LPCRITICAL_SECTION lpCriticalSection)
sub_404A06	proc near		; CODE XREF: sub_402F41+18p

lpCriticalSection= dword ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+lpCriticalSection]	; lpCriticalSection
		call	ds:LeaveCriticalSection
		pop	ebp
		retn
sub_404A06	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_404A14	proc near		; CODE XREF: sub_405D96p
		mov	eax, offset dword_42CFD8
		retn
sub_404A14	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404A1A:				; CODE XREF: .text:0041C5FDj
		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset loc_41C170
		mov	eax, large fs:0
		push	eax
		push	esi
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		lea	eax, [ebp-0Ch]
		mov	large fs:0, eax
		jmp	short loc_404A64
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404A3F:				; CODE XREF: .text:00404A6Dj
		mov	eax, dword_42D010[ecx*4]
		inc	ecx
		push	eax
		mov	dword_42C05C, ecx
		call	ds:DecodePointer
		mov	esi, eax
		test	esi, esi
		jz	short loc_404A64
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi

loc_404A64:				; CODE XREF: .text:00404A3Dj
					; .text:00404A58j
		mov	ecx, dword_42C05C
		cmp	ecx, 0Ah
		jb	short loc_404A3F
		mov	ecx, [ebp-0Ch]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		leave
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404A7D	proc near		; CODE XREF: sub_4032B7+18p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, dword_42C05C
		test	eax, eax
		jz	sub_40C069
		push	[ebp+arg_0]
		dec	eax
		mov	dword_42C05C, eax
		call	ds:EncodePointer
		mov	ecx, dword_42C05C
		mov	dword_42D010[ecx*4], eax
		pop	ebp
		retn
sub_404A7D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_404AAB(int,DWORD dwMapFlags,LPCSTR lpMultiByteStr,int,LPWSTR lpDestStr,int cchDest,UINT CodePage,int)
sub_404AAB	proc near		; CODE XREF: sub_4033AC+D7p
					; sub_4034AA+D7p

var_18		= dword	ptr -18h
cchSrc		= dword	ptr -0Ch
lpSrcStr	= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
dwMapFlags	= dword	ptr  0Ch
lpMultiByteStr	= dword	ptr  10h
arg_C		= dword	ptr  14h
lpDestStr	= dword	ptr  18h
cchDest		= dword	ptr  1Ch
CodePage	= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		mov	esi, [ebp+arg_C]
		push	edi
		test	esi, esi
		jle	short loc_404AD9
		push	esi
		push	[ebp+lpMultiByteStr]
		call	sub_40C0AD
		pop	ecx
		cmp	eax, esi
		pop	ecx
		lea	esi, [eax+1]
		jl	short loc_404AD9
		mov	esi, eax

loc_404AD9:				; CODE XREF: sub_404AAB+18j
					; sub_404AAB+2Aj
		xor	eax, eax
		xor	edi, edi
		cmp	[ebp+arg_1C], eax
		push	edi		; cchWideChar
		push	edi		; lpWideCharStr
		push	esi		; cchMultiByte
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		setnz	al
		lea	eax, ds:1[eax*8]
		push	eax		; dwFlags
		push	[ebp+CodePage]	; CodePage
		call	ds:MultiByteToWideChar
		mov	edx, eax
		mov	[ebp+cchSrc], edx
		test	edx, edx
		jz	loc_404C6E
		lea	eax, [edx+edx]
		lea	ecx, [eax+8]
		cmp	eax, ecx
		sbb	eax, eax
		and	eax, ecx
		jz	short loc_404B53
		cmp	eax, 400h
		ja	short loc_404B32
		call	sub_405980
		mov	ebx, esp
		mov	[ebp+lpSrcStr],	esp
		test	ebx, ebx
		jz	short loc_404B4E
		mov	dword ptr [ebx], 0CCCCh
		jmp	short loc_404B48
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404B32:				; CODE XREF: sub_404AAB+6Fj
		push	eax
		call	sub_409F4D
		mov	ebx, eax
		mov	[ebp+lpSrcStr],	eax
		pop	ecx
		test	ebx, ebx
		jz	short loc_404B4E
		mov	dword ptr [ebx], 0DDDDh

loc_404B48:				; CODE XREF: sub_404AAB+85j
		add	ebx, 8
		mov	[ebp+lpSrcStr],	ebx

loc_404B4E:				; CODE XREF: sub_404AAB+7Dj
					; sub_404AAB+95j
		mov	edx, [ebp+cchSrc]
		jmp	short loc_404B58
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404B53:				; CODE XREF: sub_404AAB+68j
		mov	ebx, edi
		mov	[ebp+lpSrcStr],	ebx

loc_404B58:				; CODE XREF: sub_404AAB+A6j
		test	ebx, ebx
		jz	loc_404C61
		push	edx		; cchWideChar
		push	ebx		; lpWideCharStr
		push	esi		; cchMultiByte
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		push	1		; dwFlags
		push	[ebp+CodePage]	; CodePage
		call	ds:MultiByteToWideChar
		test	eax, eax
		jz	loc_404C61
		push	edi		; cchDest
		push	edi		; lpDestStr
		push	[ebp+cchSrc]	; cchSrc
		push	ebx		; lpSrcStr
		push	[ebp+dwMapFlags] ; dwMapFlags
		push	[ebp+arg_0]	; int
		call	sub_40528E
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jz	loc_404C61
		mov	edx, 400h
		test	[ebp+dwMapFlags], edx
		jz	short loc_404BCF
		mov	eax, [ebp+cchDest]
		test	eax, eax
		jz	loc_404C63
		cmp	esi, eax
		jg	loc_404C63
		push	eax		; cchDest
		push	[ebp+lpDestStr]	; lpDestStr
		push	[ebp+cchSrc]	; cchSrc
		push	ebx		; lpSrcStr
		push	[ebp+dwMapFlags] ; dwMapFlags
		push	[ebp+arg_0]	; int
		call	sub_40528E
		add	esp, 18h
		jmp	loc_404C63
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404BCF:				; CODE XREF: sub_404AAB+F4j
		lea	eax, [esi+esi]
		lea	ecx, [eax+8]
		cmp	eax, ecx
		sbb	eax, eax
		and	eax, ecx
		jz	short loc_404C0C
		cmp	eax, edx
		ja	short loc_404BF4
		call	sub_405980
		mov	ebx, esp
		test	ebx, ebx
		jz	short loc_404C58
		mov	dword ptr [ebx], 0CCCCh
		jmp	short loc_404C07
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404BF4:				; CODE XREF: sub_404AAB+134j
		push	eax
		call	sub_409F4D
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jz	short loc_404C58
		mov	dword ptr [ebx], 0DDDDh

loc_404C07:				; CODE XREF: sub_404AAB+147j
		add	ebx, 8
		jmp	short loc_404C0E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404C0C:				; CODE XREF: sub_404AAB+130j
		mov	ebx, edi

loc_404C0E:				; CODE XREF: sub_404AAB+15Fj
		test	ebx, ebx
		jz	short loc_404C58
		push	esi		; cchDest
		push	ebx		; lpDestStr
		push	[ebp+cchSrc]	; cchSrc
		push	[ebp+lpSrcStr]	; lpSrcStr
		push	[ebp+dwMapFlags] ; dwMapFlags
		push	[ebp+arg_0]	; int
		call	sub_40528E
		add	esp, 18h
		test	eax, eax
		jz	short loc_404C58
		push	edi		; lpUsedDefaultChar
		push	edi		; lpDefaultChar
		cmp	[ebp+cchDest], edi
		jnz	short loc_404C50
		push	edi		; cchMultiByte
		push	edi		; lpMultiByteStr

loc_404C35:				; CODE XREF: sub_404AAB+1ABj
		push	esi		; cchWideChar
		push	ebx		; lpWideCharStr
		push	edi		; dwFlags
		push	[ebp+CodePage]	; CodePage
		call	ds:WideCharToMultiByte
		mov	esi, eax
		test	esi, esi
		jz	short loc_404C5A
		push	ebx
		call	sub_404C80
		pop	ecx
		jmp	short loc_404C63
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404C50:				; CODE XREF: sub_404AAB+186j
		push	[ebp+cchDest]
		push	[ebp+lpDestStr]
		jmp	short loc_404C35
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_404C58:				; CODE XREF: sub_404AAB+13Fj
					; sub_404AAB+154j ...
		mov	edi, esi

loc_404C5A:				; CODE XREF: sub_404AAB+19Aj
		push	ebx
		call	sub_404C80
		pop	ecx

loc_404C61:				; CODE XREF: sub_404AAB+AFj
					; sub_404AAB+C8j ...
		mov	esi, edi

loc_404C63:				; CODE XREF: sub_404AAB+FBj
					; sub_404AAB+103j ...
		push	[ebp+lpSrcStr]
		call	sub_404C80
		pop	ecx
		mov	eax, esi

loc_404C6E:				; CODE XREF: sub_404AAB+56j
		lea	esp, [ebp-18h]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	sub_40534D
		leave
		retn
sub_404AAB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404C80	proc near		; CODE XREF: sub_404AAB+19Dp
					; sub_404AAB+1B0p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_404C9C
		sub	eax, 8
		cmp	dword ptr [eax], 0DDDDh
		jnz	short loc_404C9C
		push	eax
		call	sub_409C2E
		pop	ecx

loc_404C9C:				; CODE XREF: sub_404C80+8j
					; sub_404C80+13j
		pop	ebp
		retn
sub_404C80	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404C9E	proc near		; CODE XREF: sub_403EF1+3Ep

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	2
		lea	ecx, [ebp+var_4]
		call	sub_402EE9
		mov	edx, [ebp+arg_0]
		xor	eax, eax
		inc	eax
		push	esi
		mov	[edx+8], eax

loc_404CB6:				; CODE XREF: sub_404C9E+32j
		mov	esi, dword_42D03C[eax*4]
		mov	ecx, eax
		test	esi, esi
		jz	short loc_404CD2
		cmp	esi, edx
		jz	short loc_404CD2
		inc	eax
		mov	[edx+8], eax
		mov	ecx, eax
		cmp	eax, 8
		jb	short loc_404CB6

loc_404CD2:				; CODE XREF: sub_404C9E+23j
					; sub_404C9E+27j
		inc	byte_42D064[ecx]
		mov	dword_42D03C[ecx*4], edx
		lea	ecx, [ebp+var_4]
		call	sub_402F41
		pop	esi
		leave
		retn
sub_404C9E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404CEA	proc near		; CODE XREF: sub_404D5D+6p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, ecx
		push	edi
		mov	edi, [ebx+2Ch]
		test	edi, edi
		jz	short loc_404D17
		push	esi

loc_404CF9:				; CODE XREF: sub_404CEA+2Aj
		push	dword ptr [edi+4]
		mov	esi, [edi+8]
		mov	ecx, esi
		push	ebx
		push	[ebp+arg_0]
		call	ds:off_41D12C
		call	esi
		mov	edi, [edi]
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_404CF9
		pop	esi

loc_404D17:				; CODE XREF: sub_404CEA+Cj
		pop	edi
		pop	ebx
		pop	ebp
		retn	4
sub_404CEA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_404D1D	proc near		; CODE XREF: sub_4038D8+2Dp
					; sub_403939+4Bp ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_404D3B
		dec	byte_42D064[eax]
		mov	al, byte_42D064[eax]
		test	al, al
		jg	short loc_404D5A

loc_404D3B:				; CODE XREF: sub_404D1D+Cj
		mov	ecx, esi
		call	sub_404D5D
		mov	esi, [esi+30h]
		test	esi, esi
		jz	short loc_404D5A
		mov	ecx, esi
		call	sub_4014B0
		push	8
		push	esi
		call	sub_40535E
		pop	ecx
		pop	ecx

loc_404D5A:				; CODE XREF: sub_404D1D+1Cj
					; sub_404D1D+2Aj
		pop	esi
		pop	ebp
		retn
sub_404D1D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_404D5D	proc near		; CODE XREF: sub_404D1D+20p
		push	esi
		push	edi
		push	0
		mov	edi, ecx
		call	sub_404CEA
		mov	eax, [edi+28h]
		test	eax, eax
		jz	short loc_404D81

loc_404D6F:				; CODE XREF: sub_404D5D+22j
		mov	esi, [eax]
		push	10h
		push	eax
		call	sub_40535E
		mov	eax, esi
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_404D6F

loc_404D81:				; CODE XREF: sub_404D5D+10j
		and	dword ptr [edi+28h], 0
		mov	eax, [edi+2Ch]
		test	eax, eax
		jz	short loc_404D9E

loc_404D8C:				; CODE XREF: sub_404D5D+3Fj
		mov	esi, [eax]
		push	0Ch
		push	eax
		call	sub_40535E
		mov	eax, esi
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_404D8C

loc_404D9E:				; CODE XREF: sub_404D5D+2Dj
		and	dword ptr [edi+2Ch], 0
		pop	edi
		pop	esi
		retn
sub_404D5D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_404DA5	proc near		; DATA XREF: .rdata:0041D16Co
		push	esi
		push	offset ModuleName ; "kernel32.dll"
		call	ds:GetModuleHandleW
		mov	esi, eax
		push	offset aFlsalloc ; "FlsAlloc"
		push	esi		; hModule
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aFlsfree	; "FlsFree"
		push	esi		; hModule
		mov	dword_42D070, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aFlsgetvalue ; "FlsGetValue"
		push	esi		; hModule
		mov	dword_42D074, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aFlssetvalue ; "FlsSetValue"
		push	esi		; hModule
		mov	dword_42D078, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aInitializecrit ; "InitializeCriticalSectionEx"
		push	esi		; hModule
		mov	dword_42D07C, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aInitonceexecut ; "InitOnceExecuteOnce"
		push	esi		; hModule
		mov	dword_42D080, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aCreateeventexw ; "CreateEventExW"
		push	esi		; hModule
		mov	dword_42D084, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aCreatesemaphor ; "CreateSemaphoreW"
		push	esi		; hModule
		mov	dword_42D088, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aCreatesemaph_0 ; "CreateSemaphoreExW"
		push	esi		; hModule
		mov	dword_42D08C, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aCreatethreadpo ; "CreateThreadpoolTimer"
		push	esi		; hModule
		mov	dword_42D090, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aSetthreadpoolt ; "SetThreadpoolTimer"
		push	esi		; hModule
		mov	dword_42D094, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aWaitforthreadp ; "WaitForThreadpoolTimerCallbacks"
		push	esi		; hModule
		mov	dword_42D098, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aClosethreadpoo ; "CloseThreadpoolTimer"
		push	esi		; hModule
		mov	dword_42D09C, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aCreatethread_0 ; "CreateThreadpoolWait"
		push	esi		; hModule
		mov	dword_42D0A0, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aSetthreadpoolw ; "SetThreadpoolWait"
		push	esi		; hModule
		mov	dword_42D0A4, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aClosethreadp_0 ; "CloseThreadpoolWait"
		mov	dword_42D0A8, eax
		push	esi		; hModule
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aFlushprocesswr ; "FlushProcessWriteBuffers"
		push	esi		; hModule
		mov	dword_42D0AC, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aFreelibrarywhe ; "FreeLibraryWhenCallbackReturns"
		push	esi		; hModule
		mov	dword_42D0B0, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aGetcurrentproc ; "GetCurrentProcessorNumber"
		push	esi		; hModule
		mov	dword_42D0B4, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aCreatesymbolic ; "CreateSymbolicLinkW"
		push	esi		; hModule
		mov	dword_42D0B8, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aGetcurrentpack ; "GetCurrentPackageId"
		push	esi		; hModule
		mov	dword_42D0BC, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aGettickcount64 ; "GetTickCount64"
		push	esi		; hModule
		mov	dword_42D0C0, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aGetfileinforma ; "GetFileInformationByHandleEx"
		push	esi		; hModule
		mov	dword_42D0C4, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aSetfileinforma ; "SetFileInformationByHandle"
		push	esi		; hModule
		mov	dword_42D0C8, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aGetsystemtimep ; "GetSystemTimePreciseAsFileTime"
		push	esi		; hModule
		mov	dword_42D0CC, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aInitializecond ; "InitializeConditionVariable"
		push	esi		; hModule
		mov	dword_42D0D0, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aWakeconditionv ; "WakeConditionVariable"
		push	esi		; hModule
		mov	dword_42D0D4, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aWakeallconditi ; "WakeAllConditionVariable"
		push	esi		; hModule
		mov	dword_42D0D8, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aSleepcondition ; "SleepConditionVariableCS"
		push	esi		; hModule
		mov	dword_42D0DC, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aInitializesrwl ; "InitializeSRWLock"
		push	esi		; hModule
		mov	dword_42D0E0, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aAcquiresrwlock ; "AcquireSRWLockExclusive"
		push	esi		; hModule
		mov	dword_42D0E4, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aTryacquiresrwl ; "TryAcquireSRWLockExclusive"
		push	esi		; hModule
		mov	dword_42D0E8, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aReleasesrwlock ; "ReleaseSRWLockExclusive"
		push	esi		; hModule
		mov	dword_42D0EC, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aSleepconditi_0 ; "SleepConditionVariableSRW"
		push	esi		; hModule
		mov	dword_42D0F0, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aCreatethread_1 ; "CreateThreadpoolWork"
		push	esi		; hModule
		mov	dword_42D0F4, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aSubmitthreadpo ; "SubmitThreadpoolWork"
		push	esi		; hModule
		mov	dword_42D0F8, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aClosethreadp_1 ; "CloseThreadpoolWork"
		push	esi		; hModule
		mov	dword_42D0FC, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aComparestrin_0 ; "CompareStringEx"
		push	esi		; hModule
		mov	dword_42D100, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aGetlocaleinf_0 ; "GetLocaleInfoEx"
		push	esi		; hModule
		mov	dword_42D104, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		push	offset aLcmapstringe_0 ; "LCMapStringEx"
		push	esi		; hModule
		mov	dword_42D108, eax
		call	ds:GetProcAddress
		xor	eax, dword_42C06C
		mov	dword_42D10C, eax
		xor	eax, eax
		pop	esi
		retn
sub_404DA5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40514F	proc near		; CODE XREF: sub_404887+Ep

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, dword_42D084
		xor	esi, dword_42C06C
		jz	short loc_405179
		push	[ebp+arg_C]
		mov	ecx, esi
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	ds:off_41D12C
		call	esi
		jmp	short loc_4051AC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405179:				; CODE XREF: sub_40514F+10j
		push	ebx
		xor	ebx, ebx
		xor	eax, eax
		inc	ebx
		push	edi
		mov	edi, [ebp+arg_0]
		mov	ecx, ebx
		lock cmpxchg [edi], ecx
		push	2
		pop	esi
		jmp	short loc_4051A4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40518E:				; CODE XREF: sub_40514F+57j
		test	eax, eax
		jz	short loc_4051AF
		cmp	eax, ebx
		jnz	short loc_4051D1
		call	ds:SwitchToThread
		mov	ecx, ebx
		xor	eax, eax
		lock cmpxchg [edi], ecx

loc_4051A4:				; CODE XREF: sub_40514F+3Dj
		cmp	eax, esi
		jnz	short loc_40518E

loc_4051A8:				; CODE XREF: sub_40514F+80j
		mov	eax, ebx

loc_4051AA:				; CODE XREF: sub_40514F+8Cj
		pop	edi
		pop	ebx

loc_4051AC:				; CODE XREF: sub_40514F+28j
		pop	esi
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4051AF:				; CODE XREF: sub_40514F+41j
		push	[ebp+arg_C]
		mov	ecx, [ebp+arg_4]
		push	[ebp+arg_8]
		push	edi
		call	ds:off_41D12C
		call	[ebp+arg_4]
		test	eax, eax
		jnz	short loc_4051CA
		xor	esi, esi
		mov	ebx, esi

loc_4051CA:				; CODE XREF: sub_40514F+75j
		xchg	esi, [edi]
		cmp	esi, 1
		jz	short loc_4051A8

loc_4051D1:				; CODE XREF: sub_40514F+45j
		push	0Dh		; dwErrCode
		call	ds:SetLastError
		xor	eax, eax
		jmp	short loc_4051AA
sub_40514F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_4051DD(LPCRITICAL_SECTION lpCriticalSection,DWORD dwSpinCount,int)
sub_4051DD	proc near		; CODE XREF: sub_4049E1+Dp

lpCriticalSection= dword ptr  8
dwSpinCount	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, dword_42D080
		xor	esi, dword_42C06C
		jz	short loc_405204
		push	[ebp+arg_8]
		mov	ecx, esi
		push	[ebp+dwSpinCount]
		push	[ebp+lpCriticalSection]
		call	ds:off_41D12C
		call	esi
		jmp	short loc_405213
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405204:				; CODE XREF: sub_4051DD+10j
		push	[ebp+dwSpinCount] ; dwSpinCount
		push	[ebp+lpCriticalSection]	; lpCriticalSection
		call	ds:InitializeCriticalSectionAndSpinCount
		xor	eax, eax
		inc	eax

loc_405213:				; CODE XREF: sub_4051DD+25j
		pop	esi
		pop	ebp
		retn
sub_4051DD	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_405216	proc near		; CODE XREF: sub_405264+Cp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		xor	edi, edi
		mov	ebx, 0E3h

loc_405223:				; CODE XREF: sub_405216+3Bj
		lea	eax, [ebx+edi]
		cdq
		sub	eax, edx
		mov	esi, eax
		sar	esi, 1
		push	55h
		push	ds:off_41EA00[esi*8]
		push	[ebp+arg_0]
		call	sub_4052E5
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_405258
		jns	short loc_40524C
		lea	ebx, [esi-1]
		jmp	short loc_40524F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40524C:				; CODE XREF: sub_405216+2Fj
		lea	edi, [esi+1]

loc_40524F:				; CODE XREF: sub_405216+34j
		cmp	edi, ebx
		jle	short loc_405223
		or	eax, 0FFFFFFFFh
		jmp	short loc_40525F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405258:				; CODE XREF: sub_405216+2Dj
		mov	eax, ds:dword_41EA04[esi*8]

loc_40525F:				; CODE XREF: sub_405216+40j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_405216	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_405264	proc near		; CODE XREF: sub_40528E+47p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		jz	short loc_40528A
		push	[ebp+arg_0]
		call	sub_405216
		pop	ecx
		test	eax, eax
		js	short loc_40528A
		cmp	eax, 0E4h
		jnb	short loc_40528A
		mov	eax, ds:dword_41E2E0[eax*8]
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40528A:				; CODE XREF: sub_405264+7j
					; sub_405264+14j ...
		xor	eax, eax
		pop	ebp
		retn
sub_405264	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_40528E(int,DWORD dwMapFlags,LPCWSTR lpSrcStr,int cchSrc,LPWSTR lpDestStr,int cchDest)
sub_40528E	proc near		; CODE XREF: sub_404AAB+DAp
					; sub_404AAB+117p ...

arg_0		= dword	ptr  8
dwMapFlags	= dword	ptr  0Ch
lpSrcStr	= dword	ptr  10h
cchSrc		= dword	ptr  14h
lpDestStr	= dword	ptr  18h
cchDest		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, dword_42D10C
		xor	esi, dword_42C06C
		jz	short loc_4052C3
		xor	eax, eax
		mov	ecx, esi
		push	eax
		push	eax
		push	eax
		push	[ebp+cchDest]
		push	[ebp+lpDestStr]
		push	[ebp+cchSrc]
		push	[ebp+lpSrcStr]
		push	[ebp+dwMapFlags]
		push	[ebp+arg_0]
		call	ds:off_41D12C
		call	esi
		jmp	short loc_4052E2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4052C3:				; CODE XREF: sub_40528E+10j
		push	[ebp+cchDest]	; cchDest
		push	[ebp+lpDestStr]	; lpDestStr
		push	[ebp+cchSrc]	; cchSrc
		push	[ebp+lpSrcStr]	; lpSrcStr
		push	[ebp+dwMapFlags] ; dwMapFlags
		push	[ebp+arg_0]
		call	sub_405264
		pop	ecx
		push	eax		; Locale
		call	ds:LCMapStringW

loc_4052E2:				; CODE XREF: sub_40528E+33j
		pop	esi
		pop	ebp
		retn
sub_40528E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4052E5	proc near		; CODE XREF: sub_405216+23p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, [ebp+arg_8]
		xor	eax, eax
		test	esi, esi
		jz	short loc_40534A
		mov	ecx, [ebp+arg_4]
		push	ebx
		push	edi
		mov	edi, [ebp+arg_0]
		push	19h
		pop	ebx
		sub	edi, ecx
		mov	[ebp+var_4], ebx

loc_405303:				; CODE XREF: sub_4052E5+59j
		movzx	edx, word ptr [edi+ecx]
		lea	eax, [edx-41h]
		cmp	ax, bx
		ja	short loc_405315
		lea	eax, [edx+20h]
		movzx	edx, ax

loc_405315:				; CODE XREF: sub_4052E5+28j
		movzx	ebx, word ptr [ecx]
		lea	eax, [ebx-41h]
		cmp	ax, word ptr [ebp+var_4]
		ja	short loc_405329
		lea	eax, [ebx+20h]
		movzx	eax, ax
		jmp	short loc_40532B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405329:				; CODE XREF: sub_4052E5+3Aj
		mov	eax, ebx

loc_40532B:				; CODE XREF: sub_4052E5+42j
		add	ecx, 2
		sub	esi, 1
		jz	short loc_405340
		test	dx, dx
		jz	short loc_405340
		push	19h
		pop	ebx
		cmp	dx, ax
		jz	short loc_405303

loc_405340:				; CODE XREF: sub_4052E5+4Cj
					; sub_4052E5+51j
		movzx	ecx, ax
		movzx	eax, dx
		pop	edi
		sub	eax, ecx
		pop	ebx

loc_40534A:				; CODE XREF: sub_4052E5+Cj
		pop	esi
		leave
		retn
sub_4052E5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40534D	proc near		; CODE XREF: sub_4010D0+42p
					; sub_401190+48p ...
		cmp	ecx, dword_42C06C
		repne jnz short	loc_405358
		repne retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405358:				; CODE XREF: sub_40534D+6j
		repne jmp sub_405A80
sub_40534D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40535E	proc near		; CODE XREF: sub_401160+21p
					; sub_401400+15p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]
		call	sub_405C53
		pop	ecx
		pop	ebp
		retn
sub_40535E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40536C	proc near		; CODE XREF: .text:004015B1p
					; .text:00401A79p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		jmp	short loc_40537E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405371:				; CODE XREF: sub_40536C+1Dj
		push	[ebp+arg_0]
		call	sub_40C5ED
		pop	ecx
		test	eax, eax
		jz	short loc_40538D

loc_40537E:				; CODE XREF: sub_40536C+3j
		push	[ebp+arg_0]
		call	sub_409F4D
		pop	ecx
		test	eax, eax
		jz	short loc_405371
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40538D:				; CODE XREF: sub_40536C+10j
		cmp	[ebp+arg_0], 0FFFFFFFFh
		jz	sub_405CA8
		jmp	sub_405C8B
sub_40536C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40539C	proc near		; DATA XREF: .rdata:off_420394o

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		test	[ebp+arg_0], 1
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_420394
		jz	short loc_4053B8
		push	0Ch
		push	esi
		call	sub_40535E
		pop	ecx
		pop	ecx

loc_4053B8:				; CODE XREF: sub_40539C+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_40539C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: thunk

sub_4053BF	proc near		; CODE XREF: sub_4018A0+22p
		jmp	sub_405C53
sub_4053BF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4053C4	proc near		; DATA XREF: .rdata:0041D164o
		push	esi
		push	1
		call	sub_40C7CC
		call	sub_405D5D
		push	eax
		call	sub_40D141
		call	sub_40E40E
		mov	esi, eax
		call	sub_404310
		push	1
		mov	[esi], eax
		call	sub_4056E1
		add	esp, 0Ch
		pop	esi
		test	al, al
		jz	short loc_405467
		fnclex
		call	sub_405F82
		push	offset sub_405FAE
		call	sub_40589A
		call	sub_403E43
		push	eax
		call	sub_40CB68
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_405467
		call	sub_405D63
		call	sub_405DB3
		test	eax, eax
		jz	short loc_40542F
		push	offset sub_404310
		call	sub_40C853
		pop	ecx

loc_40542F:				; CODE XREF: sub_4053C4+5Ej
		call	nullsub_1
		call	nullsub_1
		call	sub_405D6F
		call	sub_404310
		push	eax
		call	loc_40D651
		pop	ecx
		call	sub_403E40
		test	al, al
		jz	short loc_405458
		call	sub_40CE25

loc_405458:				; CODE XREF: sub_4053C4+8Dj
		call	sub_404310
		call	sub_405EE5
		test	eax, eax
		jnz	short loc_405467
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405467:				; CODE XREF: sub_4053C4+2Ej
					; sub_4053C4+50j ...
		push	7
		call	sub_405DCB
		int	3		; Trap to Debugger

loc_40546F:				; DATA XREF: .rdata:0041D168o
		call	sub_405D96
		xor	eax, eax
		retn
sub_4053C4	endp ; sp = -4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405477	proc near		; DATA XREF: .rdata:0041D134o
		call	sub_405F2D
		call	sub_404310
		push	eax
		call	sub_40E3DF
		pop	ecx
		retn
sub_405477	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; [00000127 BYTES: COLLAPSED CHUNK OF FUNCTION start. PRESS KEYPAD "+" TO EXPAND]

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4055B0	proc near		; DATA XREF: .rdata:0042ADD4o
		mov	ecx, [ebp-14h]
		mov	eax, [ecx]
		mov	eax, [eax]
		mov	[ebp-20h], eax
		push	ecx
		push	eax
		call	sub_40C66C
		pop	ecx
		pop	ecx
		retn
sub_4055B0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4055C4	proc near		; DATA XREF: .rdata:0042ADD8o
		mov	esp, [ebp-18h]
		call	sub_405EEA
		test	al, al
		jz	short loc_405602
		cmp	byte ptr [ebp-19h], 0
		jnz	short loc_4055DB
		call	sub_40D0D1

loc_4055DB:				; CODE XREF: sub_4055C4+10j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		mov	eax, [ebp-20h]
sub_4055C4	endp

; [00000026 BYTES: COLLAPSED CHUNK OF FUNCTION start. PRESS KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION start. PRESS KEYPAD "+" TO EXPAND]

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_405615	proc near		; CODE XREF: sub_4098A6+53p
					; sub_4098A6+61p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, dword_42C06C
		and	eax, 1Fh
		push	20h
		pop	ecx
		sub	ecx, eax
		mov	eax, [ebp+arg_0]
		ror	eax, cl
		xor	eax, dword_42C06C
		pop	ebp
		retn
sub_405615	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_405632	proc near		; CODE XREF: sub_405786+49p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		lea	edx, [ecx+18h]
		add	edx, eax
		movzx	eax, word ptr [ecx+6]
		imul	esi, eax, 28h
		add	esi, edx
		cmp	edx, esi
		jz	short loc_40566D
		mov	ecx, [ebp+arg_4]

loc_405657:				; CODE XREF: sub_405632+39j
		cmp	ecx, [edx+0Ch]
		jb	short loc_405666
		mov	eax, [edx+8]
		add	eax, [edx+0Ch]
		cmp	ecx, eax
		jb	short loc_405672

loc_405666:				; CODE XREF: sub_405632+28j
		add	edx, 28h
		cmp	edx, esi
		jnz	short loc_405657

loc_40566D:				; CODE XREF: sub_405632+20j
		xor	eax, eax

loc_40566F:				; CODE XREF: sub_405632+42j
		pop	esi
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405672:				; CODE XREF: sub_405632+32j
		mov	eax, edx
		jmp	short loc_40566F
sub_405632	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405676	proc near		; CODE XREF: start-15Dp
		push	esi
		call	sub_4061E2
		test	eax, eax
		jz	short loc_4056A0
		mov	eax, large fs:18h
		mov	esi, offset dword_42D18C
		mov	edx, [eax+4]
		jmp	short loc_405694
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405690:				; CODE XREF: sub_405676+28j
		cmp	edx, eax
		jz	short loc_4056A4

loc_405694:				; CODE XREF: sub_405676+18j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [esi], ecx
		test	eax, eax
		jnz	short loc_405690

loc_4056A0:				; CODE XREF: sub_405676+8j
		xor	al, al
		pop	esi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4056A4:				; CODE XREF: sub_405676+1Cj
		mov	al, 1
		pop	esi
		retn
sub_405676	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4056A8	proc near		; CODE XREF: start-174p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		jnz	short loc_4056B8
		mov	byte_42D190, 1

loc_4056B8:				; CODE XREF: sub_4056A8+7j
		call	loc_40604B
		call	sub_408697
		test	al, al
		jnz	short loc_4056CA

loc_4056C6:				; CODE XREF: sub_4056A8+33j
		xor	al, al
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4056CA:				; CODE XREF: sub_4056A8+1Cj
		call	sub_40E85D
		test	al, al
		jnz	short loc_4056DD
		push	0
		call	sub_4086C0
		pop	ecx
		jmp	short loc_4056C6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4056DD:				; CODE XREF: sub_4056A8+29j
		mov	al, 1
		pop	ebp
		retn
sub_4056A8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4056E1	proc near		; CODE XREF: sub_4053C4+23p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		cmp	byte_42D191, 0
		jz	short loc_4056F4
		mov	al, 1
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4056F4:				; CODE XREF: sub_4056E1+Dj
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jz	short loc_405701
		cmp	esi, 1
		jnz	short loc_40577E

loc_405701:				; CODE XREF: sub_4056E1+19j
		call	sub_4061E2
		test	eax, eax
		jz	short loc_405730
		test	esi, esi
		jnz	short loc_405730
		push	offset dword_42D194
		call	sub_40E702
		pop	ecx
		test	eax, eax
		jnz	short loc_40572C
		push	offset dword_42D1A0
		call	sub_40E702
		pop	ecx
		test	eax, eax
		jz	short loc_405772

loc_40572C:				; CODE XREF: sub_4056E1+3Aj
		xor	al, al
		jmp	short loc_40577B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405730:				; CODE XREF: sub_4056E1+27j
					; sub_4056E1+2Bj
		mov	eax, dword_42C06C
		lea	esi, [ebp+var_C]
		push	edi
		and	eax, 1Fh
		mov	edi, offset dword_42D194
		push	20h
		pop	ecx
		sub	ecx, eax
		or	eax, 0FFFFFFFFh
		ror	eax, cl
		xor	eax, dword_42C06C
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		movsd
		movsd
		movsd
		mov	edi, offset dword_42D1A0
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		lea	esi, [ebp+var_C]
		mov	[ebp+var_4], eax
		movsd
		movsd
		movsd
		pop	edi

loc_405772:				; CODE XREF: sub_4056E1+49j
		mov	byte_42D191, 1
		mov	al, 1

loc_40577B:				; CODE XREF: sub_4056E1+4Dj
		pop	esi
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40577E:				; CODE XREF: sub_4056E1+1Ej
		push	5
		call	sub_405DCB
		int	3		; Trap to Debugger
sub_4056E1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405786	proc near		; CODE XREF: start-DCp	start-B6p
		push	8
		push	offset dword_42ADE0
		call	sub_405FF0
		and	dword ptr [ebp-4], 0
		mov	eax, 5A4Dh
		cmp	ds:400000h, ax
		jnz	short loc_405801
		mov	eax, ds:40003Ch
		cmp	dword ptr [eax+400000h], 4550h
		jnz	short loc_405801
		mov	ecx, 10Bh
		cmp	[eax+400018h], cx
		jnz	short loc_405801
		mov	eax, [ebp+8]
		mov	ecx, 400000h
		sub	eax, ecx
		push	eax
		push	ecx
		call	sub_405632
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_405801
		cmp	dword ptr [eax+24h], 0
		jl	short loc_405801
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		mov	al, 1
		jmp	short loc_40580A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4057EB:				; DATA XREF: .rdata:0042ADF4o
		mov	eax, [ebp-14h]
		mov	eax, [eax]
		xor	ecx, ecx
		cmp	dword ptr [eax], 0C0000005h
		setz	cl
		mov	eax, ecx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4057FE:				; DATA XREF: .rdata:0042ADF8o
		mov	esp, [ebp-18h]

loc_405801:				; CODE XREF: sub_405786+1Cj
					; sub_405786+2Dj ...
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		xor	al, al

loc_40580A:				; CODE XREF: sub_405786+63j
		mov	ecx, [ebp-10h]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_405786	endp ; sp =  4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40581A	proc near		; CODE XREF: start-F0p

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		call	sub_4061E2
		test	eax, eax
		jz	short loc_405835
		cmp	[ebp+arg_0], 0
		jnz	short loc_405835
		xor	eax, eax
		mov	ecx, offset dword_42D18C
		xchg	eax, [ecx]

loc_405835:				; CODE XREF: sub_40581A+Aj
					; sub_40581A+10j
		pop	ebp
		retn
sub_40581A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_405837	proc near		; CODE XREF: start-6Dp

arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	byte_42D190, 0
		jz	short loc_405849
		cmp	[ebp+arg_4], 0
		jnz	short loc_40585B

loc_405849:				; CODE XREF: sub_405837+Aj
		push	[ebp+arg_0]
		call	sub_40E86F
		push	[ebp+arg_0]
		call	sub_4086C0
		pop	ecx
		pop	ecx

loc_40585B:				; CODE XREF: sub_405837+10j
		mov	al, 1
		pop	ebp
		retn
sub_405837	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40585F	proc near		; CODE XREF: sub_40589A+6p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, dword_42C06C
		mov	ecx, eax
		xor	eax, dword_42D194
		and	ecx, 1Fh
		push	[ebp+arg_0]
		ror	eax, cl
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_405883
		call	sub_40E6BD
		jmp	short loc_40588E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405883:				; CODE XREF: sub_40585F+1Bj
		push	offset dword_42D194
		call	sub_40E72B
		pop	ecx

loc_40588E:				; CODE XREF: sub_40585F+22j
		neg	eax
		pop	ecx
		sbb	eax, eax
		not	eax
		and	eax, [ebp+arg_0]
		pop	ebp
		retn
sub_40585F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40589A	proc near		; CODE XREF: sub_401000+Fp
					; sub_401016+5p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]
		call	sub_40585F
		neg	eax
		pop	ecx
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	ebp
		retn
sub_40589A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4058AF	proc near		; CODE XREF: sub_403128+8Ap
					; sub_4031B8+71p ...
		mov	ecx, [ebp-0Ch]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		push	ecx
		repne retn
sub_4058AF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4058C4	proc near		; CODE XREF: sub_404313:loc_40448Bp
					; sub_410137:loc_4103DAp
		mov	ecx, [ebp-10h]
		xor	ecx, ebp
		repne call sub_40534D
		repne jmp sub_4058AF
sub_4058C4	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4058D5	proc near		; CODE XREF: sub_403128+7p
					; sub_4031B8+7p ...

arg_0		= dword	ptr  8

		push	eax
		push	large dword ptr	fs:0
		lea	eax, [esp+4+arg_0]
		sub	esp, [esp+0Ch]
		push	ebx
		push	esi
		push	edi
		mov	[eax], ebp
		mov	ebp, eax
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		push	dword ptr [ebp-4]
		mov	dword ptr [ebp-4], 0FFFFFFFFh
		lea	eax, [ebp-0Ch]
		mov	large fs:0, eax
		repne retn
sub_4058D5	endp ; sp = -1Ch


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405909	proc near		; CODE XREF: sub_404313+7p
					; sub_410137+7p

arg_0		= dword	ptr  8

		push	eax
		push	large dword ptr	fs:0
		lea	eax, [esp+4+arg_0]
		sub	esp, [esp+0Ch]
		push	ebx
		push	esi
		push	edi
		mov	[eax], ebp
		mov	ebp, eax
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		mov	[ebp-10h], eax
		push	dword ptr [ebp-4]
		mov	dword ptr [ebp-4], 0FFFFFFFFh
		lea	eax, [ebp-0Ch]
		mov	large fs:0, eax
		repne retn
sub_405909	endp ; sp = -1Ch


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405940	proc near		; CODE XREF: sub_4092F9+7p

arg_0		= dword	ptr  8

		push	eax
		push	large dword ptr	fs:0
		lea	eax, [esp+4+arg_0]
		sub	esp, [esp+0Ch]
		push	ebx
		push	esi
		push	edi
		mov	[eax], ebp
		mov	ebp, eax
		mov	eax, dword_42C06C
		xor	eax, ebp
		push	eax
		mov	[ebp-10h], esp
		push	dword ptr [ebp-4]
		mov	dword ptr [ebp-4], 0FFFFFFFFh
		lea	eax, [ebp-0Ch]
		mov	large fs:0, eax
		repne retn
sub_405940	endp ; sp = -1Ch

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405980	proc near		; CODE XREF: sub_404AAB+71p
					; sub_404AAB+136p ...

arg_0		= dword	ptr  8

		push	ecx
		lea	ecx, [esp+arg_0]
		sub	ecx, eax
		and	ecx, 0Fh
		add	eax, ecx
		sbb	ecx, ecx
		or	eax, ecx
		pop	ecx
		jmp	sub_4061F0
sub_405980	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	ecx
		lea	ecx, [esp+8]
		sub	ecx, eax
		and	ecx, 7
		add	eax, ecx
		sbb	ecx, ecx
		or	eax, ecx
		pop	ecx
		jmp	sub_4061F0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		mov	eax, [esp+8]
		mov	ecx, [esp+10h]
		or	ecx, eax
		mov	ecx, [esp+0Ch]
		jnz	short loc_4059C9
		mov	eax, [esp+4]
		mul	ecx
		retn	10h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4059C9:				; CODE XREF: .text:004059BEj
		push	ebx
		mul	ecx
		mov	ebx, eax
		mov	eax, [esp+8]
		mul	dword ptr [esp+14h]
		add	ebx, eax
		mov	eax, [esp+8]
		mul	ecx
		add	edx, ebx
		pop	ebx
		retn	10h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		push	ebx
		push	esi
		mov	eax, [esp+18h]
		or	eax, eax
		jnz	short loc_405A12
		mov	ecx, [esp+14h]
		mov	eax, [esp+10h]
		xor	edx, edx
		div	ecx
		mov	ebx, eax
		mov	eax, [esp+0Ch]
		div	ecx
		mov	edx, ebx
		jmp	short loc_405A53
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405A12:				; CODE XREF: .text:004059F8j
		mov	ecx, eax
		mov	ebx, [esp+14h]
		mov	edx, [esp+10h]
		mov	eax, [esp+0Ch]

loc_405A20:				; CODE XREF: .text:00405A2Aj
		shr	ecx, 1
		rcr	ebx, 1
		shr	edx, 1
		rcr	eax, 1
		or	ecx, ecx
		jnz	short loc_405A20
		div	ebx
		mov	esi, eax
		mul	dword ptr [esp+18h]
		mov	ecx, eax
		mov	eax, [esp+14h]
		mul	esi
		add	edx, ecx
		jb	short loc_405A4E
		cmp	edx, [esp+10h]
		ja	short loc_405A4E
		jb	short loc_405A4F
		cmp	eax, [esp+0Ch]
		jbe	short loc_405A4F

loc_405A4E:				; CODE XREF: .text:00405A3Ej
					; .text:00405A44j
		dec	esi

loc_405A4F:				; CODE XREF: .text:00405A46j
					; .text:00405A4Cj
		xor	edx, edx
		mov	eax, esi

loc_405A53:				; CODE XREF: .text:00405A10j
		pop	esi
		pop	ebx
		retn	10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_405A58(struct	_EXCEPTION_POINTERS *ExceptionInfo)
sub_405A58	proc near		; CODE XREF: sub_405A80+F2p
					; sub_405B85+C7p

ExceptionInfo	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0		; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		push	[ebp+ExceptionInfo] ; ExceptionInfo
		call	ds:UnhandledExceptionFilter
		push	0C0000409h	; uExitCode
		call	ds:GetCurrentProcess
		push	eax		; hProcess
		call	ds:TerminateProcess
		pop	ebp
		retn
sub_405A58	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_405A80	proc near		; CODE XREF: sub_40534D:loc_405358j

var_324		= dword	ptr -324h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 324h
		push	17h		; ProcessorFeature
		call	IsProcessorFeaturePresent
		test	eax, eax
		jz	short loc_405A99
		push	2
		pop	ecx
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display

loc_405A99:				; CODE XREF: sub_405A80+12j
		mov	dword_42D2B0, eax
		mov	dword_42D2AC, ecx
		mov	dword_42D2A8, edx
		mov	dword_42D2A4, ebx
		mov	dword_42D2A0, esi
		mov	dword_42D29C, edi
		mov	word_42D2C8, ss
		mov	word_42D2BC, cs
		mov	word_42D298, ds
		mov	word_42D294, es
		mov	word_42D290, fs
		mov	word_42D28C, gs
		pushf
		pop	dword_42D2C0
		mov	eax, [ebp+0]
		mov	dword_42D2B4, eax
		mov	eax, [ebp+4]
		mov	dword_42D2B8, eax
		lea	eax, [ebp+arg_0]
		mov	dword_42D2C4, eax
		mov	eax, [ebp+var_324]
		mov	dword_42D200, 10001h
		mov	eax, dword_42D2B8
		mov	dword_42D1BC, eax
		mov	dword_42D1B0, 0C0000409h
		mov	dword_42D1B4, 1
		mov	dword_42D1C0, 1
		push	4
		pop	eax
		imul	eax, 0
		mov	dword_42D1C4[eax], 2
		push	4
		pop	eax
		imul	eax, 0
		mov	ecx, dword_42C06C
		mov	[ebp+eax+var_8], ecx
		push	4
		pop	eax
		shl	eax, 0
		mov	ecx, dword_42C068
		mov	[ebp+eax+var_8], ecx
		push	offset ExceptionInfo ; ExceptionInfo
		call	sub_405A58
		leave
		retn
sub_405A80	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_405B79	proc near		; CODE XREF: sub_40DD23:loc_40DFFDp
		push	ebp
		mov	ebp, esp
		push	8
		call	sub_405B85
		pop	ebp
		retn
sub_405B79	endp ; sp = -4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_405B85	proc near		; CODE XREF: sub_405B79+5p

var_31C		= dword	ptr -31Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 31Ch
		push	17h		; ProcessorFeature
		call	IsProcessorFeaturePresent
		test	eax, eax
		jz	short loc_405B9E
		mov	ecx, [ebp+arg_0]
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display

loc_405B9E:				; CODE XREF: sub_405B85+12j
		mov	dword_42D2B0, eax
		mov	dword_42D2AC, ecx
		mov	dword_42D2A8, edx
		mov	dword_42D2A4, ebx
		mov	dword_42D2A0, esi
		mov	dword_42D29C, edi
		mov	word_42D2C8, ss
		mov	word_42D2BC, cs
		mov	word_42D298, ds
		mov	word_42D294, es
		mov	word_42D290, fs
		mov	word_42D28C, gs
		pushf
		pop	dword_42D2C0
		mov	eax, [ebp+0]
		mov	dword_42D2B4, eax
		mov	eax, [ebp+4]
		mov	dword_42D2B8, eax
		lea	eax, [ebp+arg_0]
		mov	dword_42D2C4, eax
		mov	eax, [ebp+var_31C]
		mov	eax, dword_42D2B8
		mov	dword_42D1BC, eax
		mov	dword_42D1B0, 0C0000409h
		mov	dword_42D1B4, 1
		mov	dword_42D1C0, 1
		push	4
		pop	eax
		imul	eax, 0
		mov	ecx, [ebp+arg_0]
		mov	dword_42D1C4[eax], ecx
		push	offset ExceptionInfo ; ExceptionInfo
		call	sub_405A58
		leave
		retn
sub_405B85	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: thunk

sub_405C53	proc near		; CODE XREF: sub_40535E+6p sub_4053BFj
		jmp	sub_409C2E
sub_405C53	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_405C58	proc near		; DATA XREF: .rdata:0042AE34o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	sub_401120
		mov	dword ptr [esi], offset	off_4203A4
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_405C58	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405C73	proc near		; CODE XREF: sub_405CA8+9p
		and	dword ptr [ecx+4], 0
		mov	eax, ecx
		and	dword ptr [ecx+8], 0
		mov	dword ptr [ecx+4], offset aBadArrayNewLen ; "bad array new length"
		mov	dword ptr [ecx], offset	off_4203A4
		retn
sub_405C73	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_405C8B	proc near		; CODE XREF: sub_40536C+2Bj

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		lea	ecx, [ebp+var_C]
		call	sub_4048BF
		push	offset dword_42ACF4
		lea	eax, [ebp+var_C]
		push	eax
		call	sub_406D34
		int	3		; Trap to Debugger
sub_405C8B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_405CA8	proc near		; CODE XREF: sub_40536C+25j

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		lea	ecx, [ebp+var_C]
		call	sub_405C73
		push	offset dword_42ADFC
		lea	eax, [ebp+var_C]
		push	eax
		call	sub_406D34
		int	3		; Trap to Debugger
sub_405CA8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_405CC5	proc near		; CODE XREF: sub_405D12:loc_405D2Cp

PerformanceCount= LARGE_INTEGER	ptr -14h
SystemTimeAsFileTime= _FILETIME	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		lea	eax, [ebp+SystemTimeAsFileTime]
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	[ebp+var_4], eax
		call	ds:GetCurrentThreadId
		xor	[ebp+var_4], eax
		call	ds:GetCurrentProcessId
		xor	[ebp+var_4], eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	eax, dword ptr [ebp+PerformanceCount+4]
		lea	ecx, [ebp+var_4]
		xor	eax, dword ptr [ebp+PerformanceCount]
		xor	eax, [ebp+var_4]
		xor	eax, ecx
		leave
		retn
sub_405CC5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405D12	proc near		; CODE XREF: startp
		mov	ecx, dword_42C06C
		push	esi
		push	edi
		mov	edi, 0BB40E64Eh
		mov	esi, 0FFFF0000h
		cmp	ecx, edi
		jz	short loc_405D2C
		test	ecx, esi
		jnz	short loc_405D52

loc_405D2C:				; CODE XREF: sub_405D12+14j
		call	sub_405CC5
		mov	ecx, eax
		cmp	ecx, edi
		jnz	short loc_405D3E
		mov	ecx, 0BB40E64Fh
		jmp	short loc_405D4C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405D3E:				; CODE XREF: sub_405D12+23j
		test	ecx, esi
		jnz	short loc_405D4C
		or	eax, 4711h
		shl	eax, 10h
		or	ecx, eax

loc_405D4C:				; CODE XREF: sub_405D12+2Aj
					; sub_405D12+2Ej
		mov	dword_42C06C, ecx

loc_405D52:				; CODE XREF: sub_405D12+18j
		not	ecx
		pop	edi
		mov	dword_42C068, ecx
		pop	esi
		retn
sub_405D12	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405D5D	proc near		; CODE XREF: sub_4053C4+8p
		mov	eax, 4000h
		retn
sub_405D5D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405D63	proc near		; CODE XREF: sub_4053C4+52p
		push	offset dword_42D4D0
		call	ds:InitializeSListHead
		retn
sub_405D63	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405D6F	proc near		; CODE XREF: sub_4053C4+75p
		push	30000h
		push	10000h
		push	0
		call	sub_40E89F
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_405D88
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405D88:				; CODE XREF: sub_405D6F+16j
		push	7
		call	sub_405DCB
		int	3		; Trap to Debugger
sub_405D6F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405D90	proc near		; CODE XREF: sub_405D96+Ep
		mov	eax, offset dword_42D4D8
		retn
sub_405D90	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405D96	proc near		; CODE XREF: sub_4053C4:loc_40546Fp
		call	sub_404A14
		mov	ecx, [eax+4]
		or	dword ptr [eax], 4
		mov	[eax+4], ecx
		call	sub_405D90
		mov	ecx, [eax+4]
		or	dword ptr [eax], 2
		mov	[eax+4], ecx
		retn
sub_405D96	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405DB3	proc near		; CODE XREF: sub_4053C4+57p
		xor	eax, eax
		cmp	dword_42C080, eax
		setz	al
		retn
sub_405DB3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405DBF	proc near		; CODE XREF: start-EAp
		mov	eax, offset dword_42DC88
		retn
sub_405DBF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405DC5	proc near		; CODE XREF: start:loc_405549p
		mov	eax, offset dword_42DC84
		retn
sub_405DC5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_405DCB	proc near		; CODE XREF: sub_4053C4+A5p start-14p	...

var_32C		= dword	ptr -32Ch
var_324		= dword	ptr -324h
var_298		= word ptr -298h
var_294		= word ptr -294h
var_290		= word ptr -290h
var_28C		= word ptr -28Ch
var_288		= dword	ptr -288h
var_284		= dword	ptr -284h
var_280		= dword	ptr -280h
var_27C		= dword	ptr -27Ch
var_278		= dword	ptr -278h
var_274		= dword	ptr -274h
var_270		= dword	ptr -270h
var_26C		= dword	ptr -26Ch
var_268		= word ptr -268h
var_264		= dword	ptr -264h
var_260		= dword	ptr -260h
var_25C		= word ptr -25Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_4C		= dword	ptr -4Ch
ExceptionInfo	= _EXCEPTION_POINTERS ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 324h
		push	ebx
		push	17h		; ProcessorFeature
		call	IsProcessorFeaturePresent
		test	eax, eax
		jz	short loc_405DE5
		mov	ecx, [ebp+arg_0]
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display

loc_405DE5:				; CODE XREF: sub_405DCB+13j
		push	3
		call	sub_405F7A
		mov	[esp+32Ch+var_32C], 2CCh
		lea	eax, [ebp+var_324]
		push	0
		push	eax
		call	sub_407330
		add	esp, 0Ch
		mov	[ebp+var_274], eax
		mov	[ebp+var_278], ecx
		mov	[ebp+var_27C], edx
		mov	[ebp+var_280], ebx
		mov	[ebp+var_284], esi
		mov	[ebp+var_288], edi
		mov	[ebp+var_25C], ss
		mov	[ebp+var_268], cs
		mov	[ebp+var_28C], ds
		mov	[ebp+var_290], es
		mov	[ebp+var_294], fs
		mov	[ebp+var_298], gs
		pushf
		pop	[ebp+var_264]
		mov	eax, [ebp+4]
		mov	[ebp+var_26C], eax
		lea	eax, [ebp+4]
		mov	[ebp+var_260], eax
		mov	[ebp+var_324], 10001h
		mov	eax, [eax-4]
		push	50h
		mov	[ebp+var_270], eax
		lea	eax, [ebp+var_58]
		push	0
		push	eax
		call	sub_407330
		mov	eax, [ebp+4]
		add	esp, 0Ch
		mov	[ebp+var_58], 40000015h
		mov	[ebp+var_54], 1
		mov	[ebp+var_4C], eax
		call	ds:IsDebuggerPresent
		push	0		; lpTopLevelExceptionFilter
		lea	ebx, [eax-1]
		neg	ebx
		lea	eax, [ebp+var_58]
		mov	[ebp+ExceptionInfo.ExceptionRecord], eax
		lea	eax, [ebp+var_324]
		sbb	bl, bl
		mov	[ebp+ExceptionInfo.ContextRecord], eax
		inc	bl
		call	ds:SetUnhandledExceptionFilter
		lea	eax, [ebp+ExceptionInfo]
		push	eax		; ExceptionInfo
		call	ds:UnhandledExceptionFilter
		test	eax, eax
		jnz	short loc_405EE2
		test	bl, bl
		jnz	short loc_405EE2
		push	3
		call	sub_405F7A
		pop	ecx

loc_405EE2:				; CODE XREF: sub_405DCB+109j
					; sub_405DCB+10Dj
		pop	ebx
		leave
		retn
sub_405DCB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: thunk

sub_405EE5	proc near		; CODE XREF: sub_4053C4+99p
		jmp	sub_404310
sub_405EE5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405EEA	proc near		; CODE XREF: start-83p	sub_4055C4+3p ...
		push	0		; lpModuleName
		call	ds:GetModuleHandleW
		test	eax, eax
		jz	short loc_405F2A
		mov	ecx, 5A4Dh
		cmp	[eax], cx
		jnz	short loc_405F2A
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		cmp	dword ptr [ecx], 4550h
		jnz	short loc_405F2A
		mov	eax, 10Bh
		cmp	[ecx+18h], ax
		jnz	short loc_405F2A
		cmp	dword ptr [ecx+74h], 0Eh
		jbe	short loc_405F2A
		cmp	dword ptr [ecx+0E8h], 0
		jz	short loc_405F2A
		mov	al, 1
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405F2A:				; CODE XREF: sub_405EEA+Aj
					; sub_405EEA+14j ...
		xor	al, al
		retn
sub_405EEA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405F2D	proc near		; CODE XREF: sub_405477p
		push	offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		retn
sub_405F2D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; LONG __stdcall TopLevelExceptionFilter(struct	_EXCEPTION_POINTERS *)
TopLevelExceptionFilter	proc near	; DATA XREF: sub_405F2Do

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		cmp	dword ptr [eax], 0E06D7363h
		jnz	short loc_405F6E
		cmp	dword ptr [eax+10h], 3
		jnz	short loc_405F6E
		mov	eax, [eax+14h]
		cmp	eax, 19930520h
		jz	short loc_405F74
		cmp	eax, 19930521h
		jz	short loc_405F74
		cmp	eax, 19930522h
		jz	short loc_405F74
		cmp	eax, 1994000h
		jz	short loc_405F74

loc_405F6E:				; CODE XREF: TopLevelExceptionFilter+Ej
					; TopLevelExceptionFilter+14j
		xor	eax, eax
		pop	ebp
		retn	4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_405F74:				; CODE XREF: TopLevelExceptionFilter+1Ej
					; TopLevelExceptionFilter+25j ...
		call	sub_409C4B
		int	3		; Trap to Debugger
TopLevelExceptionFilter	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405F7A	proc near		; CODE XREF: sub_405DCB+1Cp
					; sub_405DCB+111p ...
		and	dword_42D4E0, 0
		retn
sub_405F7A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405F82	proc near		; CODE XREF: sub_4053C4+32p
		push	ebx
		push	esi
		mov	esi, offset dword_42A7BC
		mov	ebx, offset dword_42A7BC
		cmp	esi, ebx
		jnb	short loc_405FAB
		push	edi

loc_405F93:				; CODE XREF: sub_405F82+26j
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_405FA3
		mov	ecx, edi
		call	ds:off_41D12C
		call	edi

loc_405FA3:				; CODE XREF: sub_405F82+15j
		add	esi, 4
		cmp	esi, ebx
		jb	short loc_405F93
		pop	edi

loc_405FAB:				; CODE XREF: sub_405F82+Ej
		pop	esi
		pop	ebx
		retn
sub_405F82	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405FAE	proc near		; DATA XREF: sub_4053C4+37o
		push	ebx
		push	esi
		mov	esi, offset dword_42A7C4
		mov	ebx, offset dword_42A7C4
		cmp	esi, ebx
		jnb	short loc_405FD7
		push	edi

loc_405FBF:				; CODE XREF: sub_405FAE+26j
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_405FCF
		mov	ecx, edi
		call	ds:off_41D12C
		call	edi

loc_405FCF:				; CODE XREF: sub_405FAE+15j
		add	esi, 4
		cmp	esi, ebx
		jb	short loc_405FBF
		pop	edi

loc_405FD7:				; CODE XREF: sub_405FAE+Ej
		pop	esi
		pop	ebx
		retn
sub_405FAE	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4
		dd 5 dup(0CCCCCCCCh)

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_405FF0	proc near		; CODE XREF: start-17Bp sub_405786+7p	...

arg_4		= dword	ptr  8

		push	offset sub_408540
		push	large dword ptr	fs:0
		mov	eax, [esp+8+arg_4]
		mov	[esp+8+arg_4], ebp
		lea	ebp, [esp+8+arg_4]
		sub	esp, eax
		push	ebx
		push	esi
		push	edi
		mov	eax, dword_42C06C
		xor	[ebp-4], eax
		xor	eax, ebp
		push	eax
		mov	[ebp-18h], esp
		push	dword ptr [ebp-8]
		mov	eax, [ebp-4]
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		mov	[ebp-8], eax
		lea	eax, [ebp-10h]
		mov	large fs:0, eax
		repne retn
sub_405FF0	endp ; sp = -1Ch


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_406036	proc near		; CODE XREF: sub_409F58+3Ap
					; sub_40AAEE:loc_40AB55p ...
		mov	ecx, [ebp-10h]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		push	ecx
		repne retn
sub_406036	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40604B:				; CODE XREF: sub_4056A8:loc_4056B8p
		push	ebp
		mov	ebp, esp
		and	dword_42D4E4, 0
		sub	esp, 24h
		push	ebx
		xor	ebx, ebx
		inc	ebx
		or	dword_42C090, ebx
		push	0Ah
		call	IsProcessorFeaturePresent
		test	eax, eax
		jz	loc_4061DD
		and	dword ptr [ebp-10h], 0
		xor	eax, eax
		or	dword_42C090, 2
		xor	ecx, ecx
		push	esi
		push	edi
		mov	dword_42D4E4, ebx
		lea	edi, [ebp-24h]
		push	ebx
		cpuid
		mov	esi, ebx
		pop	ebx
		mov	[edi], eax
		mov	[edi+4], esi
		mov	[edi+8], ecx
		xor	ecx, ecx
		mov	[edi+0Ch], edx
		mov	eax, [ebp-24h]
		mov	edi, [ebp-20h]
		mov	[ebp-0Ch], eax
		xor	edi, 756E6547h
		mov	eax, [ebp-18h]
		xor	eax, 49656E69h
		mov	[ebp-8], eax
		mov	eax, [ebp-1Ch]
		xor	eax, 6C65746Eh
		mov	[ebp-4], eax
		xor	eax, eax
		inc	eax
		push	ebx
		cpuid
		mov	esi, ebx
		pop	ebx
		lea	ebx, [ebp-24h]
		mov	[ebx], eax
		mov	eax, [ebp-4]
		or	eax, [ebp-8]
		or	eax, edi
		mov	[ebx+4], esi
		mov	[ebx+8], ecx
		mov	[ebx+0Ch], edx
		jnz	short loc_406127
		mov	eax, [ebp-24h]
		and	eax, 0FFF3FF0h
		cmp	eax, 106C0h
		jz	short loc_406116
		cmp	eax, 20660h
		jz	short loc_406116
		cmp	eax, 20670h
		jz	short loc_406116
		cmp	eax, 30650h
		jz	short loc_406116
		cmp	eax, 30660h
		jz	short loc_406116
		cmp	eax, 30670h
		jnz	short loc_406127

loc_406116:				; CODE XREF: .text:004060F1j
					; .text:004060F8j ...
		mov	edi, dword_42D4E8
		or	edi, 1
		mov	dword_42D4E8, edi
		jmp	short loc_40612D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406127:				; CODE XREF: .text:004060E2j
					; .text:00406114j
		mov	edi, dword_42D4E8

loc_40612D:				; CODE XREF: .text:00406125j
		cmp	dword ptr [ebp-0Ch], 7
		mov	eax, [ebp-1Ch]
		mov	[ebp-4], eax
		jl	short loc_40616B
		push	7
		pop	eax
		xor	ecx, ecx
		push	ebx
		cpuid
		mov	esi, ebx
		pop	ebx
		lea	ebx, [ebp-24h]
		mov	[ebx], eax
		mov	eax, [ebp-4]
		mov	[ebx+4], esi
		mov	[ebx+8], ecx
		mov	[ebx+0Ch], edx
		mov	ebx, [ebp-20h]
		test	ebx, 200h
		jz	short loc_40616E
		or	edi, 2
		mov	dword_42D4E8, edi
		jmp	short loc_40616E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40616B:				; CODE XREF: .text:00406137j
		mov	ebx, [ebp-10h]

loc_40616E:				; CODE XREF: .text:0040615Ej
					; .text:00406169j
		pop	edi
		pop	esi
		test	eax, 100000h
		jz	short loc_4061DD
		or	dword_42C090, 4
		mov	dword_42D4E4, 2
		test	eax, 8000000h
		jz	short loc_4061DD
		test	eax, 10000000h
		jz	short loc_4061DD
		xor	ecx, ecx
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dd 89D0010Fh, 5589EC45h, 0EC458BF0h, 83F04D8Bh,	0F88306E0h
		dd 0A12E7506h
		dd offset dword_42C090
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		or	eax, 8
		mov	dword_42D4E4, 3
		mov	dword_42C090, eax
		test	bl, 20h
		jz	short loc_4061DD
		or	eax, 20h
		mov	dword_42D4E4, 5
		mov	dword_42C090, eax

loc_4061DD:				; CODE XREF: .text:0040606Bj
					; .text:00406175j ...
		xor	eax, eax
		pop	ebx
		leave
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4061E2	proc near		; CODE XREF: sub_405676+1p
					; sub_4056E1:loc_405701p ...
		xor	eax, eax
		cmp	dword_42DC80, eax
		setnz	al
		retn
sub_4061E2	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4061F0	proc near		; CODE XREF: sub_405980+11j
					; .text:004059A7j ...
		push	ecx
		lea	ecx, [esp+4]
		sub	ecx, eax
		sbb	eax, eax
		not	eax
		and	ecx, eax
		mov	eax, esp
		and	eax, 0FFFFF000h

loc_406204:				; CODE XREF: sub_4061F0+2Bj
		cmp	ecx, eax
		repne jb short loc_406214
		mov	eax, ecx
		pop	ecx
		xchg	eax, esp
		mov	eax, [eax]
		mov	[esp+0], eax
		repne retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406214:				; CODE XREF: sub_4061F0+16j
		sub	eax, 1000h
		test	[eax], eax
		jmp	short loc_406204
sub_4061F0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40621D	proc near		; CODE XREF: sub_408AB4+1A1p
					; sub_408E42+8Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, [ebp+arg_C]
		push	edi
		mov	eax, [ebx]
		mov	ecx, [eax+10h]
		mov	edi, [eax+0Ch]
		mov	[ebp+var_8], ecx
		mov	ecx, edi
		mov	[ebp+var_4], ecx
		mov	edx, ecx
		test	esi, esi
		js	short loc_40627D
		mov	esi, [ebp+var_8]
		imul	eax, ecx, 14h
		add	esi, 8
		add	eax, esi
		mov	esi, [ebp+arg_C]

loc_40624F:				; CODE XREF: sub_40621D+5Ej
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_406299
		mov	ebx, [ebp+arg_8]
		sub	eax, 14h
		dec	ecx
		cmp	[eax-4], ebx
		mov	ebx, [ebp+arg_4]
		jge	short loc_40626D
		mov	ebx, [ebp+arg_8]
		cmp	ebx, [eax]
		mov	ebx, [ebp+arg_4]
		jle	short loc_406272

loc_40626D:				; CODE XREF: sub_40621D+44j
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_406279

loc_406272:				; CODE XREF: sub_40621D+4Ej
		mov	edx, [ebp+var_4]
		dec	esi
		mov	[ebp+var_4], ecx

loc_406279:				; CODE XREF: sub_40621D+53j
		test	esi, esi
		jns	short loc_40624F

loc_40627D:				; CODE XREF: sub_40621D+22j
		inc	ecx
		cmp	edx, edi
		ja	short loc_406299
		cmp	ecx, edx
		ja	short loc_406299
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		mov	[eax], ebx
		mov	[eax+8], ebx
		mov	[eax+4], ecx
		mov	[eax+0Ch], edx
		pop	ebx
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406299:				; CODE XREF: sub_40621D+35j
					; sub_40621D+63j ...
		call	sub_409C4B
		int	3		; Trap to Debugger
sub_40621D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40629F	proc near		; CODE XREF: sub_409135+76p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_42C06C
		lea	ecx, [ebp+var_18]
		and	[ebp+var_18], 0
		xor	eax, ecx
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_C]
		inc	eax
		mov	[ebp+var_14], offset sub_40645B
		mov	[ebp+var_8], ecx
		mov	[ebp+var_4], eax
		mov	eax, large fs:0
		mov	[ebp+var_18], eax
		lea	eax, [ebp+var_18]
		mov	large fs:0, eax
		push	[ebp+arg_10]
		push	ecx
		push	[ebp+arg_8]
		call	sub_409550
		mov	ecx, eax
		mov	eax, [ebp+var_18]
		mov	large fs:0, eax
		mov	eax, ecx
		leave
		retn
sub_40629F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4062FD	proc near		; CODE XREF: sub_4064F5+81p
					; sub_408E42+58p

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		push	ebx
		cmp	[ebp+arg_0], 123h
		jnz	short loc_40631F
		mov	eax, offset loc_4063AC
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		xor	eax, eax
		inc	eax
		jmp	loc_4063D5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40631F:				; CODE XREF: sub_4062FD+Ej
		and	[ebp+var_38], 0
		mov	[ebp+var_34], offset sub_4064F5
		mov	eax, dword_42C06C
		lea	ecx, [ebp+var_38]
		xor	eax, ecx
		mov	[ebp+var_30], eax
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_28], eax
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_24], eax
		mov	eax, [ebp+arg_18]
		mov	[ebp+var_20], eax
		and	[ebp+var_1C], 0
		and	[ebp+var_18], 0
		and	[ebp+var_14], 0
		mov	[ebp+var_1C], esp
		mov	[ebp+var_18], ebp
		mov	eax, large fs:0
		mov	[ebp+var_38], eax
		lea	eax, [ebp+var_38]
		mov	large fs:0, eax
		mov	[ebp+var_8], 1
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_C], eax
		call	sub_408737
		mov	eax, [eax+8]
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+var_4]
		call	ds:off_41D12C
		lea	eax, [ebp+var_10]
		push	eax
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax]
		call	[ebp+var_4]
		pop	ecx
		pop	ecx
		and	[ebp+var_8], 0

loc_4063AC:				; DATA XREF: sub_4062FD+10o
		cmp	[ebp+var_14], 0
		jz	short loc_4063C9
		mov	ebx, large fs:0
		mov	eax, [ebx]
		mov	ebx, [ebp+var_38]
		mov	[ebx], eax
		mov	large fs:0, ebx
		jmp	short loc_4063D2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4063C9:				; CODE XREF: sub_4062FD+B3j
		mov	eax, [ebp+var_38]
		mov	large fs:0, eax

loc_4063D2:				; CODE XREF: sub_4062FD+CAj
		mov	eax, [ebp+var_8]

loc_4063D5:				; CODE XREF: sub_4062FD+1Dj
		pop	ebx
		leave
		retn
sub_4062FD	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4063D8	proc near		; CODE XREF: sub_408A34+76p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		mov	eax, [ebp+arg_4]
		add	eax, 0Ch
		mov	[ebp+var_4], eax
		mov	ebx, large fs:0
		mov	eax, [ebx]
		mov	large fs:0, eax
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	ebp, [ebp+var_4]
		mov	esp, [ebx-4]
		jmp	eax
sub_4063D8	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		pop	ebx
		leave
		retn	8

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_406408	proc near		; CODE XREF: sub_4064F5+69p
					; sub_408A34+2Fp ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	esi, large fs:0
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], offset loc_406432
		push	0
		push	[ebp+arg_4]
		push	[ebp+var_4]
		push	[ebp+arg_0]
		call	ds:RtlUnwind

loc_406432:				; DATA XREF: sub_406408+12o
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+4]
		and	eax, 0FFFFFFFDh
		mov	ecx, [ebp+arg_4]
		mov	[ecx+4], eax
		mov	edi, large fs:0
		mov	ebx, [ebp+var_8]
		mov	[ebx], edi
		mov	large fs:0, ebx
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
sub_406408	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40645B	proc near		; DATA XREF: sub_40629F+24o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		cld
		mov	esi, [ebp+arg_4]
		mov	ecx, [esi+8]
		xor	ecx, esi
		call	sub_40534D
		push	0
		push	esi
		push	dword ptr [esi+14h]
		push	dword ptr [esi+0Ch]
		push	0
		push	[ebp+arg_8]
		push	dword ptr [esi+10h]
		push	[ebp+arg_0]
		call	sub_408FE1
		add	esp, 20h
		pop	esi
		pop	ebp
		retn
sub_40645B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40648C	proc near		; CODE XREF: sub_409135+29p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_4]
		push	esi
		mov	esi, [ebp+arg_0]
		mov	[esi], ecx
		call	sub_408737
		mov	ecx, [eax+24h]
		mov	[esi+4], ecx
		call	sub_408737
		mov	[eax+24h], esi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_40648C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4064B0	proc near		; CODE XREF: sub_40927D+Cp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		call	sub_408737
		mov	esi, [eax+24h]
		call	sub_408737
		mov	ecx, [ebp+arg_0]
		cmp	ecx, esi
		pop	esi
		jnz	short loc_4064D1
		mov	ecx, [ecx+4]
		mov	[eax+24h], ecx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4064D1:				; CODE XREF: sub_4064B0+17j
		mov	edx, [eax+24h]
		add	edx, 4
		jmp	short loc_4064E0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4064D9:				; CODE XREF: sub_4064B0+36j
		cmp	ecx, eax
		jz	short loc_4064E8
		lea	edx, [eax+4]

loc_4064E0:				; CODE XREF: sub_4064B0+27j
		mov	eax, [edx]
		test	eax, eax
		jz	short loc_4064EF
		jmp	short loc_4064D9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4064E8:				; CODE XREF: sub_4064B0+2Bj
		mov	eax, [ecx+4]
		mov	[edx], eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4064EF:				; CODE XREF: sub_4064B0+34j
		call	sub_409C4B
		int	3		; Trap to Debugger
sub_4064B0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4064F5	proc near		; DATA XREF: sub_4062FD+26o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		cld
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+8]
		xor	ecx, [ebp+arg_4]
		call	sub_40534D
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+4]
		and	eax, 66h
		jz	short loc_406525
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax+24h], 1
		xor	eax, eax
		inc	eax
		jmp	short loc_40658F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	short loc_40658F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406525:				; CODE XREF: sub_4064F5+1Dj
		push	1
		mov	eax, [ebp+arg_4]
		push	dword ptr [eax+18h]
		mov	eax, [ebp+arg_4]
		push	dword ptr [eax+14h]
		mov	eax, [ebp+arg_4]
		push	dword ptr [eax+0Ch]
		push	0
		push	[ebp+arg_8]
		mov	eax, [ebp+arg_4]
		push	dword ptr [eax+10h]
		push	[ebp+arg_0]
		call	sub_408FE1
		add	esp, 20h
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax+24h], 0
		jnz	short loc_406563
		push	[ebp+arg_0]
		push	[ebp+arg_4]
		call	sub_406408

loc_406563:				; CODE XREF: sub_4064F5+61j
		push	0
		push	0
		push	0
		push	0
		push	0
		lea	eax, [ebp+var_4]
		push	eax
		push	123h
		call	sub_4062FD
		add	esp, 1Ch
		mov	eax, [ebp+var_4]
		mov	ebx, [ebp+arg_4]
		mov	esp, [ebx+1Ch]
		mov	ebp, [ebx+20h]
		jmp	eax
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		xor	eax, eax
		inc	eax

loc_40658F:				; CODE XREF: sub_4064F5+2Cj
					; sub_4064F5+2Ej
		pop	ebx
		leave
		retn
sub_4064F5	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406592:				; CODE XREF: .text:0041C160j
					; .text:0041C186j ...
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	ebx
		push	esi
		push	edi
		cld
		mov	[ebp-4], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	dword ptr [ebp-4]
		push	dword ptr [ebp+14h]
		push	dword ptr [ebp+10h]
		push	dword ptr [ebp+0Ch]
		push	dword ptr [ebp+8]
		call	sub_408FE1
		add	esp, 20h
		mov	[ebp-8], eax
		pop	edi
		pop	esi
		pop	ebx
		mov	eax, [ebp-8]
		mov	esp, ebp
		pop	ebp
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4065C8	proc near		; CODE XREF: sub_408540+10Bp
					; sub_408AB4+2A9p ...
		push	8
		push	offset dword_42AE38
		call	sub_405FF0
		mov	eax, [ebp+8]
		test	eax, eax
		jz	short loc_40664F
		cmp	dword ptr [eax], 0E06D7363h
		jnz	short loc_40664F
		cmp	dword ptr [eax+10h], 3
		jnz	short loc_40664F
		cmp	dword ptr [eax+14h], 19930520h
		jz	short loc_406604
		cmp	dword ptr [eax+14h], 19930521h
		jz	short loc_406604
		cmp	dword ptr [eax+14h], 19930522h
		jnz	short loc_40664F

loc_406604:				; CODE XREF: sub_4065C8+28j
					; sub_4065C8+31j
		mov	ecx, [eax+1Ch]
		test	ecx, ecx
		jz	short loc_40664F
		mov	edx, [ecx+4]
		test	edx, edx
		jz	short loc_406631
		and	dword ptr [ebp-4], 0
		push	edx
		push	dword ptr [eax+18h]
		call	sub_406668
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		jmp	short loc_40664F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406628:				; DATA XREF: .rdata:0042AE4Co
		xor	eax, eax
		cmp	[ebp+0Ch], al
		setnz	al
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406631:				; CODE XREF: sub_4065C8+48j
		test	byte ptr [ecx],	10h
		jz	short loc_40664F
		mov	eax, [eax+18h]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_40664F
		mov	eax, [ecx]
		push	ecx
		mov	esi, [eax+8]
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi

loc_40664F:				; CODE XREF: sub_4065C8+11j
					; sub_4065C8+19j ...
		mov	ecx, [ebp-10h]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_4065C8	endp ; sp =  4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40665F	proc near		; DATA XREF: .rdata:0042AE50o
		mov	esp, [ebp-18h]
		call	sub_409C4B
		int	3		; Trap to Debugger
sub_40665F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_406668	proc near		; CODE XREF: sub_4065C8+52p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		call	[ebp+arg_4]
		pop	ebp
		retn	8
sub_406668	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_406675	proc near		; CODE XREF: sub_40927D+5Ep

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		call	sub_408737
		mov	eax, [eax+24h]
		test	eax, eax
		jz	short loc_406692
		mov	ecx, [ebp+arg_0]

loc_406687:				; CODE XREF: sub_406675+1Bj
		cmp	[eax], ecx
		jz	short loc_406697
		mov	eax, [eax+4]
		test	eax, eax
		jnz	short loc_406687

loc_406692:				; CODE XREF: sub_406675+Dj
		xor	eax, eax
		inc	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406697:				; CODE XREF: sub_406675+14j
		xor	eax, eax
		pop	ebp
		retn
sub_406675	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40669B	proc near		; CODE XREF: sub_40885C:loc_408923p
					; sub_40885C+EAp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		push	esi
		mov	eax, [ecx]
		mov	esi, [ecx+4]
		add	eax, edx
		test	esi, esi
		js	short loc_4066BD
		mov	ecx, [ecx+8]
		mov	edx, [esi+edx]
		mov	ecx, [edx+ecx]
		add	ecx, esi
		add	eax, ecx

loc_4066BD:				; CODE XREF: sub_40669B+13j
		pop	esi
		pop	ebp
		retn
sub_40669B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4066C0	proc near		; CODE XREF: sub_409395+85p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		cmp	dword ptr [eax], 0E0434352h
		jz	short loc_4066EE
		cmp	dword ptr [eax], 0E0434F4Dh
		jz	short loc_4066EE
		cmp	dword ptr [eax], 0E06D7363h
		jnz	short loc_406701
		call	sub_408737
		and	dword ptr [eax+18h], 0
		jmp	sub_409C4B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4066EE:				; CODE XREF: sub_4066C0+Ej
					; sub_4066C0+16j
		call	sub_408737
		cmp	dword ptr [eax+18h], 0
		jle	short loc_406701
		call	sub_408737
		dec	dword ptr [eax+18h]

loc_406701:				; CODE XREF: sub_4066C0+1Ej
					; sub_4066C0+37j
		xor	eax, eax
		pop	ebp
		retn
sub_4066C0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: thunk

sub_406705	proc near		; DATA XREF: .rdata:0042A8B4o
					; .rdata:0042A960o ...
		jmp	sub_409C4B
sub_406705	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40670A	proc near		; CODE XREF: sub_4010D0+32p
					; sub_401120+1Ep ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	byte ptr [edi+4], 0
		jz	short loc_40675F
		mov	ecx, [edi]
		test	ecx, ecx
		jz	short loc_40675F
		lea	edx, [ecx+1]

loc_406720:				; CODE XREF: sub_40670A+1Bj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_406720
		sub	ecx, edx
		push	ebx
		push	esi
		lea	ebx, [ecx+1]
		push	ebx
		call	sub_409F4D
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_406754
		push	dword ptr [edi]
		push	ebx
		push	esi
		call	sub_40E8FE
		mov	eax, [ebp+arg_4]
		mov	ecx, esi
		add	esp, 0Ch
		xor	esi, esi
		mov	[eax], ecx
		mov	byte ptr [eax+4], 1

loc_406754:				; CODE XREF: sub_40670A+2Fj
		push	esi
		call	sub_409C2E
		pop	ecx
		pop	esi
		pop	ebx
		jmp	short loc_40676A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40675F:				; CODE XREF: sub_40670A+Bj
					; sub_40670A+11j
		mov	ecx, [ebp+arg_4]
		mov	eax, [edi]
		mov	[ecx], eax
		mov	byte ptr [ecx+4], 0

loc_40676A:				; CODE XREF: sub_40670A+53j
		pop	edi
		pop	ebp
		retn
sub_40670A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40676D	proc near		; CODE XREF: sub_401160+10p
					; sub_4011F0+Ap ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		cmp	byte ptr [esi+4], 0
		jz	short loc_406782
		push	dword ptr [esi]
		call	sub_409C2E
		pop	ecx

loc_406782:				; CODE XREF: sub_40676D+Bj
		and	dword ptr [esi], 0
		mov	byte ptr [esi+4], 0
		pop	esi
		pop	ebp
		retn
sub_40676D	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db  8Bh	; 
		db  15h
		db  18h	;  OFF32 SEGDEF	[_data,42D518]
		db 0D5h	; е
		db  42h	; B
		db    0
		db 0A1h	; Ё
		db  6Ch	; l OFF32 SEGDEF [_data,42C06C]
		db 0C0h	; Р
		db  42h	; B
		db    0
		db  8Bh	; 
		db 0C8h	; Ш
		db  83h	; 
		db 0E1h	; с
		db  1Fh
		db  33h	; 3
		db 0C2h	; Т
		db 0D3h	; г
		db 0C8h	; Ш
		db 0C3h	; У
byte_4067A1	db 56h,	0E8h, 0E5h	; DATA XREF: .rdata:0041D1A8o
					; .rdata:0041D1ACo
		dd 8BFFFFFFh, 74F685F0h, 0FFCE8B0Ah
		db 15h
		dd offset off_41D12C
		db 0FFh, 0D6h, 0E8h
		dd 58ADh, 0CCCCCCCCh
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4067C0:				; CODE XREF: sub_401830+15p
					; sub_401870+15p ...
		push	edi
		push	esi
		mov	esi, [esp+10h]
		mov	ecx, [esp+14h]
		mov	edi, [esp+0Ch]
		mov	eax, ecx
		mov	edx, ecx
		add	eax, esi
		cmp	edi, esi
		jbe	short loc_4067E0
		cmp	edi, eax
		jb	loc_406A74

loc_4067E0:				; CODE XREF: .text:004067D6j
		cmp	ecx, 20h
		jb	loc_406CBB
		cmp	ecx, 80h
		jnb	short loc_406804
		bt	dword_42C090, 1
		jb	loc_406C8D
		jmp	loc_4069E7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406804:				; CODE XREF: .text:004067EFj
		bt	dword_42D4E8, 1
		jnb	short loc_406817
		rep movsb
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406817:				; CODE XREF: .text:0040680Cj
		mov	eax, edi
		xor	eax, esi
		test	eax, 0Fh
		jnz	short loc_406830
		bt	dword_42C090, 1
		jb	loc_406C10

loc_406830:				; CODE XREF: .text:00406820j
		bt	dword_42D4E8, 0
		jnb	loc_4069E7
		test	edi, 3
		jnz	loc_4069E7
		test	esi, 3
		jnz	loc_406A02
		bt	edi, 2
		jnb	short loc_406869
		mov	eax, [esi]
		sub	ecx, 4
		lea	esi, [esi+4]
		mov	[edi], eax
		lea	edi, [edi+4]

loc_406869:				; CODE XREF: .text:0040685Aj
		bt	edi, 3
		jnb	short loc_406880
		movq	xmm1, qword ptr	[esi]
		sub	ecx, 8
		lea	esi, [esi+8]
		movq	qword ptr [edi], xmm1
		lea	edi, [edi+8]

loc_406880:				; CODE XREF: .text:0040686Dj
		test	esi, 7
		jz	short loc_4068ED
		bt	esi, 3
		jnb	loc_406946
		movdqa	xmm1, oword ptr	[esi-0Ch]
		lea	esi, [esi-0Ch]
		mov	edi, edi
		movdqa	xmm3, oword ptr	[esi+10h]
		sub	ecx, 30h
		movdqa	xmm0, oword ptr	[esi+20h]
		movdqa	xmm5, oword ptr	[esi+30h]
		lea	esi, [esi+30h]
		cmp	ecx, 30h
		movdqa	xmm2, xmm3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dd 0F3A0F66h, 0F660CD9h, 0F661F7Fh, 0F66E06Fh, 0CC20F3Ah
		dd 477F0F66h, 6F0F6610h, 3A0F66CDh, 660CEC0Fh, 206F7F0Fh
		dd 73307F8Dh, 0C768DB7h, 0AFE9h
		db 0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4068ED:				; CODE XREF: .text:00406886j
		movdqa	xmm1, oword ptr	[esi-8]
		lea	esi, [esi-8]
		lea	ecx, [ecx+0]
		movdqa	xmm3, oword ptr	[esi+10h]
		sub	ecx, 30h
		movdqa	xmm0, oword ptr	[esi+20h]
		movdqa	xmm5, oword ptr	[esi+30h]
		lea	esi, [esi+30h]
		cmp	ecx, 30h
		movdqa	xmm2, xmm3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dd 0F3A0F66h, 0F6608D9h, 0F661F7Fh, 0F66E06Fh, 8C20F3Ah
		dd 477F0F66h, 6F0F6610h, 3A0F66CDh, 6608EC0Fh, 206F7F0Fh
		dd 73307F8Dh, 8768DB7h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	short loc_40699C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406946:				; CODE XREF: .text:0040688Cj
		movdqa	xmm1, oword ptr	[esi-4]
		lea	esi, [esi-4]
		mov	edi, edi
		movdqa	xmm3, oword ptr	[esi+10h]
		sub	ecx, 30h
		movdqa	xmm0, oword ptr	[esi+20h]
		movdqa	xmm5, oword ptr	[esi+30h]
		lea	esi, [esi+30h]
		cmp	ecx, 30h
		movdqa	xmm2, xmm3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dd 0F3A0F66h, 0F6604D9h, 0F661F7Fh, 0F66E06Fh, 4C20F3Ah
		dd 477F0F66h, 6F0F6610h, 3A0F66CDh, 6604EC0Fh, 206F7F0Fh
		dd 73307F8Dh, 4768DB7h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40699C:				; CODE XREF: .text:00406944j
					; .text:004069B2j
		cmp	ecx, 10h
		jb	short loc_4069B4
		movdqu	xmm1, qword ptr	[esi]
		sub	ecx, 10h
		lea	esi, [esi+10h]
		movdqa	oword ptr [edi], xmm1
		lea	edi, [edi+10h]
		jmp	short loc_40699C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4069B4:				; CODE XREF: .text:0040699Fj
		bt	ecx, 2
		jnb	short loc_4069C7
		mov	eax, [esi]
		sub	ecx, 4
		lea	esi, [esi+4]
		mov	[edi], eax
		lea	edi, [edi+4]

loc_4069C7:				; CODE XREF: .text:004069B8j
		bt	ecx, 3
		jnb	short loc_4069DE
		movq	xmm1, qword ptr	[esi]
		sub	ecx, 8
		lea	esi, [esi+8]
		movq	qword ptr [edi], xmm1
		lea	edi, [edi+8]

loc_4069DE:				; CODE XREF: .text:004069CBj
		mov	eax, ds:off_406A24[ecx*4]
		jmp	eax
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4069E7:				; CODE XREF: .text:004067FFj
					; .text:00406838j ...
		test	edi, 3
		jz	short loc_406A02

loc_4069EF:				; CODE XREF: .text:00406A00j
		mov	al, [esi]
		mov	[edi], al
		dec	ecx
		add	esi, 1
		add	edi, 1
		test	edi, 3
		jnz	short loc_4069EF

loc_406A02:				; CODE XREF: .text:00406850j
					; .text:004069EDj
		mov	edx, ecx
		cmp	ecx, 20h
		jb	loc_406CBB
		shr	ecx, 2
		rep movsd
		and	edx, 3
		jmp	ds:off_406A24[edx*4]
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	dword ptr ds:loc_406A34[ecx*4]
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4
off_406A24	dd offset loc_406A34	; DATA XREF: .text:loc_4069DEr
					; .text:00406A15r
		dd offset loc_406A3C
		dd offset loc_406A48
		dd offset loc_406A5C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406A34:				; CODE XREF: .text:00406A15j
					; DATA XREF: .text:00406A1Cr ...
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_406A3C:				; CODE XREF: .text:00406A15j
					; DATA XREF: .text:00406A28o
		mov	al, [esi]
		mov	[edi], al
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_406A48:				; CODE XREF: .text:00406A15j
					; DATA XREF: .text:00406A2Co
		mov	al, [esi]
		mov	[edi], al
		mov	al, [esi+1]
		mov	[edi+1], al
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_406A5C:				; CODE XREF: .text:00406A15j
					; DATA XREF: .text:00406A30o
		mov	al, [esi]
		mov	[edi], al
		mov	al, [esi+1]
		mov	[edi+1], al
		mov	al, [esi+2]
		mov	[edi+2], al
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_406A74:				; CODE XREF: .text:004067DAj
		lea	esi, [esi+ecx]
		lea	edi, [edi+ecx]
		cmp	ecx, 20h
		jb	loc_406BD4
		bt	dword_42C090, 1
		jb	loc_406B25
		test	edi, 3
		jz	short loc_406AAD
		mov	edx, edi
		and	edx, 3
		sub	ecx, edx

loc_406AA0:				; CODE XREF: .text:00406AABj
		mov	al, [esi-1]
		mov	[edi-1], al
		dec	esi
		dec	edi
		sub	edx, 1
		jnz	short loc_406AA0

loc_406AAD:				; CODE XREF: .text:00406A97j
		cmp	ecx, 20h
		jb	loc_406BD4
		mov	edx, ecx
		shr	ecx, 2
		and	edx, 3
		sub	esi, 4
		sub	edi, 4
		std
		rep movsd
		cld
		jmp	ds:off_406AD0[edx*4]
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
off_406AD0	dd offset loc_406AE0	; DATA XREF: .text:00406AC8r
		dd offset loc_406AE8
		dd offset loc_406AF8
		dd offset loc_406B0C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406AE0:				; CODE XREF: .text:00406AC8j
					; DATA XREF: .text:off_406AD0o
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_406AE8:				; CODE XREF: .text:00406AC8j
					; DATA XREF: .text:00406AD4o
		mov	al, [esi+3]
		mov	[edi+3], al
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_406AF8:				; CODE XREF: .text:00406AC8j
					; DATA XREF: .text:00406AD8o
		mov	al, [esi+3]
		mov	[edi+3], al
		mov	al, [esi+2]
		mov	[edi+2], al
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_406B0C:				; CODE XREF: .text:00406AC8j
					; DATA XREF: .text:00406ADCo
		mov	al, [esi+3]
		mov	[edi+3], al
		mov	al, [esi+2]
		mov	[edi+2], al
		mov	al, [esi+1]
		mov	[edi+1], al
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406B25:				; CODE XREF: .text:00406A8Bj
		test	edi, 0Fh
		jz	short loc_406B3C

loc_406B2D:				; CODE XREF: .text:00406B3Aj
		dec	ecx
		dec	esi
		dec	edi
		mov	al, [esi]
		mov	[edi], al
		test	edi, 0Fh
		jnz	short loc_406B2D

loc_406B3C:				; CODE XREF: .text:00406B2Bj
					; .text:00406BAAj
		cmp	ecx, 80h
		jb	short loc_406BAC
		sub	esi, 80h
		sub	edi, 80h
		movdqu	xmm0, qword ptr	[esi]
		movdqu	xmm1, qword ptr	[esi+10h]
		movdqu	xmm2, qword ptr	[esi+20h]
		movdqu	xmm3, qword ptr	[esi+30h]
		movdqu	xmm4, qword ptr	[esi+40h]
		movdqu	xmm5, qword ptr	[esi+50h]
		movdqu	xmm6, qword ptr	[esi+60h]
		movdqu	xmm7, qword ptr	[esi+70h]
		movdqu	qword ptr [edi], xmm0
		movdqu	qword ptr [edi+10h], xmm1
		movdqu	qword ptr [edi+20h], xmm2
		movdqu	qword ptr [edi+30h], xmm3
		movdqu	qword ptr [edi+40h], xmm4
		movdqu	qword ptr [edi+50h], xmm5
		movdqu	qword ptr [edi+60h], xmm6
		movdqu	qword ptr [edi+70h], xmm7
		sub	ecx, 80h
		test	ecx, 0FFFFFF80h
		jnz	short loc_406B3C

loc_406BAC:				; CODE XREF: .text:00406B42j
		cmp	ecx, 20h
		jb	short loc_406BD4

loc_406BB1:				; CODE XREF: .text:00406BD2j
		sub	esi, 20h
		sub	edi, 20h
		movdqu	xmm0, qword ptr	[esi]
		movdqu	xmm1, qword ptr	[esi+10h]
		movdqu	qword ptr [edi], xmm0
		movdqu	qword ptr [edi+10h], xmm1
		sub	ecx, 20h
		test	ecx, 0FFFFFFE0h
		jnz	short loc_406BB1

loc_406BD4:				; CODE XREF: .text:00406A7Dj
					; .text:00406AB0j ...
		test	ecx, 0FFFFFFFCh
		jz	short loc_406BF1

loc_406BDC:				; CODE XREF: .text:00406BEFj
		sub	edi, 4
		sub	esi, 4
		mov	eax, [esi]
		mov	[edi], eax
		sub	ecx, 4
		test	ecx, 0FFFFFFFCh
		jnz	short loc_406BDC

loc_406BF1:				; CODE XREF: .text:00406BDAj
		test	ecx, ecx
		jz	short loc_406C04

loc_406BF5:				; CODE XREF: .text:00406C02j
		sub	edi, 1
		sub	esi, 1
		mov	al, [esi]
		mov	[edi], al
		sub	ecx, 1
		jnz	short loc_406BF5

loc_406C04:				; CODE XREF: .text:00406BF3j
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	short loc_406C10
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_406C10:				; CODE XREF: .text:0040682Aj
					; .text:00406C0Bj
		mov	eax, esi
		and	eax, 0Fh
		test	eax, eax
		jnz	loc_406D00

loc_406C1D:				; CODE XREF: .text:00406D2Fj
		mov	edx, ecx
		and	ecx, 7Fh
		shr	edx, 7
		jz	short loc_406C8D
		lea	esp, [esp+0]
		mov	edi, edi

loc_406C30:				; CODE XREF: .text:00406C8Bj
		movdqa	xmm0, oword ptr	[esi]
		movdqa	xmm1, oword ptr	[esi+10h]
		movdqa	xmm2, oword ptr	[esi+20h]
		movdqa	xmm3, oword ptr	[esi+30h]
		movdqa	oword ptr [edi], xmm0
		movdqa	oword ptr [edi+10h], xmm1
		movdqa	oword ptr [edi+20h], xmm2
		movdqa	oword ptr [edi+30h], xmm3
		movdqa	xmm4, oword ptr	[esi+40h]
		movdqa	xmm5, oword ptr	[esi+50h]
		movdqa	xmm6, oword ptr	[esi+60h]
		movdqa	xmm7, oword ptr	[esi+70h]
		movdqa	oword ptr [edi+40h], xmm4
		movdqa	oword ptr [edi+50h], xmm5
		movdqa	oword ptr [edi+60h], xmm6
		movdqa	oword ptr [edi+70h], xmm7
		lea	esi, [esi+80h]
		lea	edi, [edi+80h]
		dec	edx
		jnz	short loc_406C30

loc_406C8D:				; CODE XREF: .text:004067F9j
					; .text:00406C25j
		test	ecx, ecx
		jz	short loc_406CF0
		mov	edx, ecx
		shr	edx, 5
		test	edx, edx
		jz	short loc_406CBB
		lea	ebx, [ebx+0]

loc_406CA0:				; CODE XREF: .text:00406CB9j
		movdqu	xmm0, qword ptr	[esi]
		movdqu	xmm1, qword ptr	[esi+10h]
		movdqu	qword ptr [edi], xmm0
		movdqu	qword ptr [edi+10h], xmm1
		lea	esi, [esi+20h]
		lea	edi, [edi+20h]
		dec	edx
		jnz	short loc_406CA0

loc_406CBB:				; CODE XREF: .text:004067E3j
					; .text:00406A07j ...
		and	ecx, 1Fh
		jz	short loc_406CF0
		mov	eax, ecx
		shr	ecx, 2
		jz	short loc_406CD6

loc_406CC7:				; CODE XREF: .text:00406CD4j
		mov	edx, [esi]
		mov	[edi], edx
		add	edi, 4
		add	esi, 4
		sub	ecx, 1
		jnz	short loc_406CC7

loc_406CD6:				; CODE XREF: .text:00406CC5j
		mov	ecx, eax
		and	ecx, 3
		jz	short loc_406CF0

loc_406CDD:				; CODE XREF: .text:00406CE4j
		mov	al, [esi]
		mov	[edi], al
		inc	esi
		inc	edi
		dec	ecx
		jnz	short loc_406CDD
		lea	esp, [esp+0]
		lea	ecx, [ecx+0]

loc_406CF0:				; CODE XREF: .text:00406C8Fj
					; .text:00406CBEj ...
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_406D00:				; CODE XREF: .text:00406C17j
		mov	edx, 10h
		sub	edx, eax
		sub	ecx, edx
		push	ecx
		mov	eax, edx
		mov	ecx, eax
		and	ecx, 3
		jz	short loc_406D1C

loc_406D13:				; CODE XREF: .text:00406D1Aj
		mov	dl, [esi]
		mov	[edi], dl
		inc	esi
		inc	edi
		dec	ecx
		jnz	short loc_406D13

loc_406D1C:				; CODE XREF: .text:00406D11j
		shr	eax, 2
		jz	short loc_406D2E

loc_406D21:				; CODE XREF: .text:00406D2Cj
		mov	edx, [esi]
		mov	[edi], edx
		lea	esi, [esi+4]
		lea	edi, [edi+4]
		dec	eax
		jnz	short loc_406D21

loc_406D2E:				; CODE XREF: .text:00406D1Fj
		pop	ecx
		jmp	loc_406C1D

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_406D34	proc near		; CODE XREF: .text:004012DEp
					; .text:0040172Dp ...

dwExceptionCode	= dword	ptr -20h
dwExceptionFlags= dword	ptr -1Ch
nNumberOfArguments= dword ptr -10h
Arguments	= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	edi
		push	8
		pop	ecx
		mov	esi, offset dword_4203C8
		lea	edi, [ebp+dwExceptionCode]
		rep movsd
		mov	edi, [ebp+arg_4]
		test	edi, edi
		jz	short loc_406D71
		test	byte ptr [edi],	10h
		jz	short loc_406D71
		mov	ecx, [ebx]
		sub	ecx, 4
		push	ecx
		mov	eax, [ecx]
		mov	esi, [eax+20h]
		mov	ecx, esi
		mov	edi, [eax+18h]
		call	ds:off_41D12C
		call	esi

loc_406D71:				; CODE XREF: sub_406D34+1Ej
					; sub_406D34+23j
		mov	[ebp+var_8], ebx
		mov	[ebp+var_4], edi
		test	edi, edi
		jz	short loc_406D87
		test	byte ptr [edi],	8
		jz	short loc_406D87
		mov	[ebp+Arguments], 1994000h

loc_406D87:				; CODE XREF: sub_406D34+45j
					; sub_406D34+4Aj
		lea	eax, [ebp+Arguments]
		push	eax		; lpArguments
		push	[ebp+nNumberOfArguments] ; nNumberOfArguments
		push	[ebp+dwExceptionFlags] ; dwExceptionFlags
		push	[ebp+dwExceptionCode] ;	dwExceptionCode
		call	ds:RaiseException
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
sub_406D34	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_406DB0:				; CODE XREF: .text:00401AFAp
					; .text:00401B5Ep ...
		push	edi
		push	esi
		mov	esi, [esp+10h]
		mov	ecx, [esp+14h]
		mov	edi, [esp+0Ch]
		mov	eax, ecx
		mov	edx, ecx
		add	eax, esi
		cmp	edi, esi
		jbe	short loc_406DD0
		cmp	edi, eax
		jb	loc_407064

loc_406DD0:				; CODE XREF: .text:00406DC6j
		cmp	ecx, 20h
		jb	loc_4072AB
		cmp	ecx, 80h
		jnb	short loc_406DF4
		bt	dword_42C090, 1
		jb	loc_40727D
		jmp	loc_406FD7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406DF4:				; CODE XREF: .text:00406DDFj
		bt	dword_42D4E8, 1
		jnb	short loc_406E07
		rep movsb
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406E07:				; CODE XREF: .text:00406DFCj
		mov	eax, edi
		xor	eax, esi
		test	eax, 0Fh
		jnz	short loc_406E20
		bt	dword_42C090, 1
		jb	loc_407200

loc_406E20:				; CODE XREF: .text:00406E10j
		bt	dword_42D4E8, 0
		jnb	loc_406FD7
		test	edi, 3
		jnz	loc_406FD7
		test	esi, 3
		jnz	loc_406FF2
		bt	edi, 2
		jnb	short loc_406E59
		mov	eax, [esi]
		sub	ecx, 4
		lea	esi, [esi+4]
		mov	[edi], eax
		lea	edi, [edi+4]

loc_406E59:				; CODE XREF: .text:00406E4Aj
		bt	edi, 3
		jnb	short loc_406E70
		movq	xmm1, qword ptr	[esi]
		sub	ecx, 8
		lea	esi, [esi+8]
		movq	qword ptr [edi], xmm1
		lea	edi, [edi+8]

loc_406E70:				; CODE XREF: .text:00406E5Dj
		test	esi, 7
		jz	short loc_406EDD
		bt	esi, 3
		jnb	loc_406F36
		movdqa	xmm1, oword ptr	[esi-0Ch]
		lea	esi, [esi-0Ch]
		mov	edi, edi
		movdqa	xmm3, oword ptr	[esi+10h]
		sub	ecx, 30h
		movdqa	xmm0, oword ptr	[esi+20h]
		movdqa	xmm5, oword ptr	[esi+30h]
		lea	esi, [esi+30h]
		cmp	ecx, 30h
		movdqa	xmm2, xmm3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dd 0F3A0F66h, 0F660CD9h, 0F661F7Fh, 0F66E06Fh, 0CC20F3Ah
		dd 477F0F66h, 6F0F6610h, 3A0F66CDh, 660CEC0Fh, 206F7F0Fh
		dd 73307F8Dh, 0C768DB7h, 0AFE9h
		db 0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406EDD:				; CODE XREF: .text:00406E76j
		movdqa	xmm1, oword ptr	[esi-8]
		lea	esi, [esi-8]
		lea	ecx, [ecx+0]
		movdqa	xmm3, oword ptr	[esi+10h]
		sub	ecx, 30h
		movdqa	xmm0, oword ptr	[esi+20h]
		movdqa	xmm5, oword ptr	[esi+30h]
		lea	esi, [esi+30h]
		cmp	ecx, 30h
		movdqa	xmm2, xmm3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dd 0F3A0F66h, 0F6608D9h, 0F661F7Fh, 0F66E06Fh, 8C20F3Ah
		dd 477F0F66h, 6F0F6610h, 3A0F66CDh, 6608EC0Fh, 206F7F0Fh
		dd 73307F8Dh, 8768DB7h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	short loc_406F8C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406F36:				; CODE XREF: .text:00406E7Cj
		movdqa	xmm1, oword ptr	[esi-4]
		lea	esi, [esi-4]
		mov	edi, edi
		movdqa	xmm3, oword ptr	[esi+10h]
		sub	ecx, 30h
		movdqa	xmm0, oword ptr	[esi+20h]
		movdqa	xmm5, oword ptr	[esi+30h]
		lea	esi, [esi+30h]
		cmp	ecx, 30h
		movdqa	xmm2, xmm3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dd 0F3A0F66h, 0F6604D9h, 0F661F7Fh, 0F66E06Fh, 4C20F3Ah
		dd 477F0F66h, 6F0F6610h, 3A0F66CDh, 6604EC0Fh, 206F7F0Fh
		dd 73307F8Dh, 4768DB7h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406F8C:				; CODE XREF: .text:00406F34j
					; .text:00406FA2j
		cmp	ecx, 10h
		jb	short loc_406FA4
		movdqu	xmm1, qword ptr	[esi]
		sub	ecx, 10h
		lea	esi, [esi+10h]
		movdqa	oword ptr [edi], xmm1
		lea	edi, [edi+10h]
		jmp	short loc_406F8C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406FA4:				; CODE XREF: .text:00406F8Fj
		bt	ecx, 2
		jnb	short loc_406FB7
		mov	eax, [esi]
		sub	ecx, 4
		lea	esi, [esi+4]
		mov	[edi], eax
		lea	edi, [edi+4]

loc_406FB7:				; CODE XREF: .text:00406FA8j
		bt	ecx, 3
		jnb	short loc_406FCE
		movq	xmm1, qword ptr	[esi]
		sub	ecx, 8
		lea	esi, [esi+8]
		movq	qword ptr [edi], xmm1
		lea	edi, [edi+8]

loc_406FCE:				; CODE XREF: .text:00406FBBj
		mov	eax, ds:off_407014[ecx*4]
		jmp	eax
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_406FD7:				; CODE XREF: .text:00406DEFj
					; .text:00406E28j ...
		test	edi, 3
		jz	short loc_406FF2

loc_406FDF:				; CODE XREF: .text:00406FF0j
		mov	al, [esi]
		mov	[edi], al
		dec	ecx
		add	esi, 1
		add	edi, 1
		test	edi, 3
		jnz	short loc_406FDF

loc_406FF2:				; CODE XREF: .text:00406E40j
					; .text:00406FDDj
		mov	edx, ecx
		cmp	ecx, 20h
		jb	loc_4072AB
		shr	ecx, 2
		rep movsd
		and	edx, 3
		jmp	ds:off_407014[edx*4]
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	dword ptr ds:loc_407024[ecx*4]
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4
off_407014	dd offset loc_407024	; DATA XREF: .text:loc_406FCEr
					; .text:00407005r
		dd offset loc_40702C
		dd offset loc_407038
		dd offset loc_40704C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407024:				; CODE XREF: .text:00407005j
					; DATA XREF: .text:0040700Cr ...
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_40702C:				; CODE XREF: .text:00407005j
					; DATA XREF: .text:00407018o
		mov	al, [esi]
		mov	[edi], al
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_407038:				; CODE XREF: .text:00407005j
					; DATA XREF: .text:0040701Co
		mov	al, [esi]
		mov	[edi], al
		mov	al, [esi+1]
		mov	[edi+1], al
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_40704C:				; CODE XREF: .text:00407005j
					; DATA XREF: .text:00407020o
		mov	al, [esi]
		mov	[edi], al
		mov	al, [esi+1]
		mov	[edi+1], al
		mov	al, [esi+2]
		mov	[edi+2], al
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_407064:				; CODE XREF: .text:00406DCAj
		lea	esi, [esi+ecx]
		lea	edi, [edi+ecx]
		cmp	ecx, 20h
		jb	loc_4071C4
		bt	dword_42C090, 1
		jb	loc_407115
		test	edi, 3
		jz	short loc_40709D
		mov	edx, edi
		and	edx, 3
		sub	ecx, edx

loc_407090:				; CODE XREF: .text:0040709Bj
		mov	al, [esi-1]
		mov	[edi-1], al
		dec	esi
		dec	edi
		sub	edx, 1
		jnz	short loc_407090

loc_40709D:				; CODE XREF: .text:00407087j
		cmp	ecx, 20h
		jb	loc_4071C4
		mov	edx, ecx
		shr	ecx, 2
		and	edx, 3
		sub	esi, 4
		sub	edi, 4
		std
		rep movsd
		cld
		jmp	ds:off_4070C0[edx*4]
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
off_4070C0	dd offset loc_4070D0	; DATA XREF: .text:004070B8r
		dd offset loc_4070D8
		dd offset loc_4070E8
		dd offset loc_4070FC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4070D0:				; CODE XREF: .text:004070B8j
					; DATA XREF: .text:off_4070C0o
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_4070D8:				; CODE XREF: .text:004070B8j
					; DATA XREF: .text:004070C4o
		mov	al, [esi+3]
		mov	[edi+3], al
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_4070E8:				; CODE XREF: .text:004070B8j
					; DATA XREF: .text:004070C8o
		mov	al, [esi+3]
		mov	[edi+3], al
		mov	al, [esi+2]
		mov	[edi+2], al
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

loc_4070FC:				; CODE XREF: .text:004070B8j
					; DATA XREF: .text:004070CCo
		mov	al, [esi+3]
		mov	[edi+3], al
		mov	al, [esi+2]
		mov	[edi+2], al
		mov	al, [esi+1]
		mov	[edi+1], al
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407115:				; CODE XREF: .text:0040707Bj
		test	edi, 0Fh
		jz	short loc_40712C

loc_40711D:				; CODE XREF: .text:0040712Aj
		dec	ecx
		dec	esi
		dec	edi
		mov	al, [esi]
		mov	[edi], al
		test	edi, 0Fh
		jnz	short loc_40711D

loc_40712C:				; CODE XREF: .text:0040711Bj
					; .text:0040719Aj
		cmp	ecx, 80h
		jb	short loc_40719C
		sub	esi, 80h
		sub	edi, 80h
		movdqu	xmm0, qword ptr	[esi]
		movdqu	xmm1, qword ptr	[esi+10h]
		movdqu	xmm2, qword ptr	[esi+20h]
		movdqu	xmm3, qword ptr	[esi+30h]
		movdqu	xmm4, qword ptr	[esi+40h]
		movdqu	xmm5, qword ptr	[esi+50h]
		movdqu	xmm6, qword ptr	[esi+60h]
		movdqu	xmm7, qword ptr	[esi+70h]
		movdqu	qword ptr [edi], xmm0
		movdqu	qword ptr [edi+10h], xmm1
		movdqu	qword ptr [edi+20h], xmm2
		movdqu	qword ptr [edi+30h], xmm3
		movdqu	qword ptr [edi+40h], xmm4
		movdqu	qword ptr [edi+50h], xmm5
		movdqu	qword ptr [edi+60h], xmm6
		movdqu	qword ptr [edi+70h], xmm7
		sub	ecx, 80h
		test	ecx, 0FFFFFF80h
		jnz	short loc_40712C

loc_40719C:				; CODE XREF: .text:00407132j
		cmp	ecx, 20h
		jb	short loc_4071C4

loc_4071A1:				; CODE XREF: .text:004071C2j
		sub	esi, 20h
		sub	edi, 20h
		movdqu	xmm0, qword ptr	[esi]
		movdqu	xmm1, qword ptr	[esi+10h]
		movdqu	qword ptr [edi], xmm0
		movdqu	qword ptr [edi+10h], xmm1
		sub	ecx, 20h
		test	ecx, 0FFFFFFE0h
		jnz	short loc_4071A1

loc_4071C4:				; CODE XREF: .text:0040706Dj
					; .text:004070A0j ...
		test	ecx, 0FFFFFFFCh
		jz	short loc_4071E1

loc_4071CC:				; CODE XREF: .text:004071DFj
		sub	edi, 4
		sub	esi, 4
		mov	eax, [esi]
		mov	[edi], eax
		sub	ecx, 4
		test	ecx, 0FFFFFFFCh
		jnz	short loc_4071CC

loc_4071E1:				; CODE XREF: .text:004071CAj
		test	ecx, ecx
		jz	short loc_4071F4

loc_4071E5:				; CODE XREF: .text:004071F2j
		sub	edi, 1
		sub	esi, 1
		mov	al, [esi]
		mov	[edi], al
		sub	ecx, 1
		jnz	short loc_4071E5

loc_4071F4:				; CODE XREF: .text:004071E3j
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	short loc_407200
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_407200:				; CODE XREF: .text:00406E1Aj
					; .text:004071FBj
		mov	eax, esi
		and	eax, 0Fh
		test	eax, eax
		jnz	loc_4072F0

loc_40720D:				; CODE XREF: .text:0040731Fj
		mov	edx, ecx
		and	ecx, 7Fh
		shr	edx, 7
		jz	short loc_40727D
		lea	esp, [esp+0]
		mov	edi, edi

loc_407220:				; CODE XREF: .text:0040727Bj
		movdqa	xmm0, oword ptr	[esi]
		movdqa	xmm1, oword ptr	[esi+10h]
		movdqa	xmm2, oword ptr	[esi+20h]
		movdqa	xmm3, oword ptr	[esi+30h]
		movdqa	oword ptr [edi], xmm0
		movdqa	oword ptr [edi+10h], xmm1
		movdqa	oword ptr [edi+20h], xmm2
		movdqa	oword ptr [edi+30h], xmm3
		movdqa	xmm4, oword ptr	[esi+40h]
		movdqa	xmm5, oword ptr	[esi+50h]
		movdqa	xmm6, oword ptr	[esi+60h]
		movdqa	xmm7, oword ptr	[esi+70h]
		movdqa	oword ptr [edi+40h], xmm4
		movdqa	oword ptr [edi+50h], xmm5
		movdqa	oword ptr [edi+60h], xmm6
		movdqa	oword ptr [edi+70h], xmm7
		lea	esi, [esi+80h]
		lea	edi, [edi+80h]
		dec	edx
		jnz	short loc_407220

loc_40727D:				; CODE XREF: .text:00406DE9j
					; .text:00407215j
		test	ecx, ecx
		jz	short loc_4072E0
		mov	edx, ecx
		shr	edx, 5
		test	edx, edx
		jz	short loc_4072AB
		lea	ebx, [ebx+0]

loc_407290:				; CODE XREF: .text:004072A9j
		movdqu	xmm0, qword ptr	[esi]
		movdqu	xmm1, qword ptr	[esi+10h]
		movdqu	qword ptr [edi], xmm0
		movdqu	qword ptr [edi+10h], xmm1
		lea	esi, [esi+20h]
		lea	edi, [edi+20h]
		dec	edx
		jnz	short loc_407290

loc_4072AB:				; CODE XREF: .text:00406DD3j
					; .text:00406FF7j ...
		and	ecx, 1Fh
		jz	short loc_4072E0
		mov	eax, ecx
		shr	ecx, 2
		jz	short loc_4072C6

loc_4072B7:				; CODE XREF: .text:004072C4j
		mov	edx, [esi]
		mov	[edi], edx
		add	edi, 4
		add	esi, 4
		sub	ecx, 1
		jnz	short loc_4072B7

loc_4072C6:				; CODE XREF: .text:004072B5j
		mov	ecx, eax
		and	ecx, 3
		jz	short loc_4072E0

loc_4072CD:				; CODE XREF: .text:004072D4j
		mov	al, [esi]
		mov	[edi], al
		inc	esi
		inc	edi
		dec	ecx
		jnz	short loc_4072CD
		lea	esp, [esp+0]
		lea	ecx, [ecx+0]

loc_4072E0:				; CODE XREF: .text:0040727Fj
					; .text:004072AEj ...
		mov	eax, [esp+0Ch]
		pop	esi
		pop	edi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_4072F0:				; CODE XREF: .text:00407207j
		mov	edx, 10h
		sub	edx, eax
		sub	ecx, edx
		push	ecx
		mov	eax, edx
		mov	ecx, eax
		and	ecx, 3
		jz	short loc_40730C

loc_407303:				; CODE XREF: .text:0040730Aj
		mov	dl, [esi]
		mov	[edi], dl
		inc	esi
		inc	edi
		dec	ecx
		jnz	short loc_407303

loc_40730C:				; CODE XREF: .text:00407301j
		shr	eax, 2
		jz	short loc_40731E

loc_407311:				; CODE XREF: .text:0040731Cj
		mov	edx, [esi]
		mov	[edi], edx
		lea	esi, [esi+4]
		lea	edi, [edi+4]
		dec	eax
		jnz	short loc_407311

loc_40731E:				; CODE XREF: .text:0040730Fj
		pop	ecx
		jmp	loc_40720D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_407330	proc near		; CODE XREF: sub_405DCB+31p
					; sub_405DCB+BBp ...

arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_8]
		movzx	eax, [esp+arg_4]
		mov	edx, edi
		mov	edi, [esp+arg_0]
		test	ecx, ecx
		jz	loc_407483
		imul	eax, 1010101h
		cmp	ecx, 20h
		jbe	loc_407435
		cmp	ecx, 80h
		jb	loc_4073ED
		bt	dword_42D4E8, 1
		jnb	short loc_407375
		rep stosb
		mov	eax, [esp+arg_0]
		mov	edi, edx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407375:				; CODE XREF: sub_407330+3Aj
		bt	dword_42C090, 1
		jnb	loc_407435
		movd	xmm0, eax
		pshufd	xmm0, xmm0, 0
		add	ecx, edi
		movups	oword ptr [edi], xmm0
		add	edi, 10h
		and	edi, 0FFFFFFF0h
		sub	ecx, edi
		cmp	ecx, 80h
		jbe	short loc_4073ED
		lea	esp, [esp+0]
		lea	esp, [esp+0]
		nop

loc_4073B0:				; CODE XREF: sub_407330+B9j
		movdqa	oword ptr [edi], xmm0
		movdqa	oword ptr [edi+10h], xmm0
		movdqa	oword ptr [edi+20h], xmm0
		movdqa	oword ptr [edi+30h], xmm0
		movdqa	oword ptr [edi+40h], xmm0
		movdqa	oword ptr [edi+50h], xmm0
		movdqa	oword ptr [edi+60h], xmm0
		movdqa	oword ptr [edi+70h], xmm0
		lea	edi, [edi+80h]
		sub	ecx, 80h
		test	ecx, 0FFFFFF00h
		jnz	short loc_4073B0
		jmp	short loc_407400
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4073ED:				; CODE XREF: sub_407330+2Cj
					; sub_407330+6Fj
		bt	dword_42C090, 1
		jnb	short loc_407435
		movd	xmm0, eax
		pshufd	xmm0, xmm0, 0

loc_407400:				; CODE XREF: sub_407330+BBj
		cmp	ecx, 20h
		jb	short loc_407421

loc_407405:				; CODE XREF: sub_407330+E7j
		movdqu	qword ptr [edi], xmm0
		movdqu	qword ptr [edi+10h], xmm0
		add	edi, 20h
		sub	ecx, 20h
		cmp	ecx, 20h
		jnb	short loc_407405
		test	ecx, 1Fh
		jz	short loc_407483

loc_407421:				; CODE XREF: sub_407330+D3j
		lea	edi, [edi+ecx-20h]
		movdqu	qword ptr [edi], xmm0
		movdqu	qword ptr [edi+10h], xmm0
		mov	eax, [esp+arg_0]
		mov	edi, edx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407435:				; CODE XREF: sub_407330+20j
					; sub_407330+4Dj ...
		test	ecx, 3
		jz	short loc_40744B

loc_40743D:				; CODE XREF: sub_407330+119j
		mov	[edi], al
		inc	edi
		sub	ecx, 1
		test	ecx, 3
		jnz	short loc_40743D

loc_40744B:				; CODE XREF: sub_407330+10Bj
		test	ecx, 4
		jz	short loc_40745B
		mov	[edi], eax
		add	edi, 4
		sub	ecx, 4

loc_40745B:				; CODE XREF: sub_407330+121j
		test	ecx, 0FFFFFFF8h
		jz	short loc_407483
		lea	esp, [esp+0]
		lea	ebx, [ebx+0]

loc_407470:				; CODE XREF: sub_407330+151j
		mov	[edi], eax
		mov	[edi+4], eax
		add	edi, 8
		sub	ecx, 8
		test	ecx, 0FFFFFFF8h
		jnz	short loc_407470

loc_407483:				; CODE XREF: sub_407330+11j
					; sub_407330+EFj ...
		mov	eax, [esp+arg_0]
		mov	edi, edx
		retn
sub_407330	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40748A	proc near		; CODE XREF: sub_40489Fj
		call	sub_4087D7
		mov	ecx, eax
		xor	eax, eax
		test	ecx, ecx
		jz	short locret_40749D
		cmp	[ecx+18h], eax
		setnle	al

locret_40749D:				; CODE XREF: sub_40748A+Bj
		retn
sub_40748A	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		mov	eax, [esp+0Ch]
		push	ebx
		test	eax, eax
		jz	short loc_4074FB
		mov	edx, [esp+8]
		xor	ebx, ebx
		mov	bl, [esp+0Ch]
		test	edx, 3
		jz	short loc_4074D1

loc_4074BB:				; CODE XREF: .text:004074CFj
		mov	cl, [edx]
		add	edx, 1
		xor	cl, bl
		jz	short loc_407536
		sub	eax, 1
		jz	short loc_4074FB
		test	edx, 3
		jnz	short loc_4074BB

loc_4074D1:				; CODE XREF: .text:004074B9j
		sub	eax, 4
		jb	short loc_4074E8
		push	edi
		mov	edi, ebx
		shl	ebx, 8
		add	ebx, edi
		mov	edi, ebx
		shl	ebx, 10h
		add	ebx, edi
		jmp	short loc_407502
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4074E7:				; CODE XREF: .text:00407500j
		pop	edi

loc_4074E8:				; CODE XREF: .text:004074D4j
		add	eax, 4
		jz	short loc_4074FB

loc_4074ED:				; CODE XREF: .text:004074F9j
		mov	cl, [edx]
		add	edx, 1
		xor	cl, bl
		jz	short loc_407536
		sub	eax, 1
		jnz	short loc_4074ED

loc_4074FB:				; CODE XREF: .text:004074A7j
					; .text:004074C7j ...
		pop	ebx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4074FD:				; CODE XREF: .text:0040751Bj
					; .text:00407533j
		sub	eax, 4
		jb	short loc_4074E7

loc_407502:				; CODE XREF: .text:004074E5j
		mov	ecx, [edx]
		xor	ecx, ebx
		mov	edi, 7EFEFEFFh
		add	edi, ecx
		xor	ecx, 0FFFFFFFFh
		xor	ecx, edi
		add	edx, 4
		and	ecx, 81010100h
		jz	short loc_4074FD
		mov	ecx, [edx-4]
		xor	cl, bl
		jz	short loc_407547
		xor	ch, bl
		jz	short loc_407541
		shr	ecx, 10h
		xor	cl, bl
		jz	short loc_40753B
		xor	ch, bl
		jz	short loc_407535
		jmp	short loc_4074FD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407535:				; CODE XREF: .text:00407531j
		pop	edi

loc_407536:				; CODE XREF: .text:004074C2j
					; .text:004074F4j
		lea	eax, [edx-1]
		pop	ebx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40753B:				; CODE XREF: .text:0040752Dj
		lea	eax, [edx-2]
		pop	edi
		pop	ebx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407541:				; CODE XREF: .text:00407526j
		lea	eax, [edx-3]
		pop	edi
		pop	ebx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407547:				; CODE XREF: .text:00407522j
		lea	eax, [edx-4]
		pop	edi
		pop	ebx
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40754D	proc near		; CODE XREF: sub_40E00F+299p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_8]
		mov	eax, ebx
		push	esi
		sub	eax, 0
		jz	loc_40846A
		sub	eax, 1
		jz	loc_40845C
		sub	eax, 1
		jz	loc_408442
		sub	eax, 1
		jz	loc_408416
		mov	edx, [ebp+arg_4]
		sub	eax, 1
		jz	loc_4083C3
		mov	esi, [ebp+arg_0]
		push	edi
		cmp	ebx, 20h
		jb	loc_4078AB

loc_407594:				; CODE XREF: sub_40754D+358j
		mov	eax, [esi]
		cmp	eax, [edx]
		jz	short loc_4075E8
		movzx	edi, al
		movzx	eax, byte ptr [edx]
		sub	edi, eax
		jnz	short loc_4075BC
		movzx	edi, byte ptr [esi+1]
		movzx	eax, byte ptr [edx+1]
		sub	edi, eax
		jnz	short loc_4075BC
		movzx	edi, byte ptr [esi+2]
		movzx	eax, byte ptr [edx+2]
		sub	edi, eax
		jz	short loc_4075CC

loc_4075BC:				; CODE XREF: sub_40754D+55j
					; sub_40754D+61j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_4075EA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4075CC:				; CODE XREF: sub_40754D+6Dj
		movzx	ecx, byte ptr [esi+3]
		movzx	eax, byte ptr [edx+3]
		sub	ecx, eax
		jz	short loc_4075EA
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_4075EA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4075E8:				; CODE XREF: sub_40754D+4Bj
		xor	ecx, ecx

loc_4075EA:				; CODE XREF: sub_40754D+7Dj
					; sub_40754D+89j ...
		test	ecx, ecx
		jnz	loc_407B61
		mov	eax, [esi+4]
		cmp	eax, [edx+4]
		jz	short loc_407649
		movzx	edi, al
		movzx	eax, byte ptr [edx+4]
		sub	edi, eax
		jnz	short loc_40761D
		movzx	edi, byte ptr [esi+5]
		movzx	eax, byte ptr [edx+5]
		sub	edi, eax
		jnz	short loc_40761D
		movzx	edi, byte ptr [esi+6]
		movzx	eax, byte ptr [edx+6]
		sub	edi, eax
		jz	short loc_40762D

loc_40761D:				; CODE XREF: sub_40754D+B6j
					; sub_40754D+C2j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_40764B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40762D:				; CODE XREF: sub_40754D+CEj
		movzx	ecx, byte ptr [esi+7]
		movzx	eax, byte ptr [edx+7]
		sub	ecx, eax
		jz	short loc_40764B
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_40764B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407649:				; CODE XREF: sub_40754D+ABj
		xor	ecx, ecx

loc_40764B:				; CODE XREF: sub_40754D+DEj
					; sub_40754D+EAj ...
		test	ecx, ecx
		jnz	loc_407B61
		mov	eax, [esi+8]
		cmp	eax, [edx+8]
		jz	short loc_4076AA
		movzx	edi, al
		movzx	eax, byte ptr [edx+8]
		sub	edi, eax
		jnz	short loc_40767E
		movzx	edi, byte ptr [esi+9]
		movzx	eax, byte ptr [edx+9]
		sub	edi, eax
		jnz	short loc_40767E
		movzx	edi, byte ptr [esi+0Ah]
		movzx	eax, byte ptr [edx+0Ah]
		sub	edi, eax
		jz	short loc_40768E

loc_40767E:				; CODE XREF: sub_40754D+117j
					; sub_40754D+123j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_4076AC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40768E:				; CODE XREF: sub_40754D+12Fj
		movzx	ecx, byte ptr [esi+0Bh]
		movzx	eax, byte ptr [edx+0Bh]
		sub	ecx, eax
		jz	short loc_4076AC
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_4076AC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4076AA:				; CODE XREF: sub_40754D+10Cj
		xor	ecx, ecx

loc_4076AC:				; CODE XREF: sub_40754D+13Fj
					; sub_40754D+14Bj ...
		test	ecx, ecx
		jnz	loc_407B61
		mov	eax, [esi+0Ch]
		cmp	eax, [edx+0Ch]
		jz	short loc_40770B
		movzx	edi, al
		movzx	eax, byte ptr [edx+0Ch]
		sub	edi, eax
		jnz	short loc_4076DF
		movzx	edi, byte ptr [esi+0Dh]
		movzx	eax, byte ptr [edx+0Dh]
		sub	edi, eax
		jnz	short loc_4076DF
		movzx	edi, byte ptr [esi+0Eh]
		movzx	eax, byte ptr [edx+0Eh]
		sub	edi, eax
		jz	short loc_4076EF

loc_4076DF:				; CODE XREF: sub_40754D+178j
					; sub_40754D+184j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_40770D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4076EF:				; CODE XREF: sub_40754D+190j
		movzx	ecx, byte ptr [esi+0Fh]
		movzx	eax, byte ptr [edx+0Fh]
		sub	ecx, eax
		jz	short loc_40770D
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_40770D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40770B:				; CODE XREF: sub_40754D+16Dj
		xor	ecx, ecx

loc_40770D:				; CODE XREF: sub_40754D+1A0j
					; sub_40754D+1ACj ...
		test	ecx, ecx
		jnz	loc_407B61
		mov	eax, [esi+10h]
		cmp	eax, [edx+10h]
		jz	short loc_40776D
		movzx	eax, byte ptr [edx+10h]
		movzx	edi, byte ptr [esi+10h]
		sub	edi, eax
		jnz	short loc_407741
		movzx	edi, byte ptr [esi+11h]
		movzx	eax, byte ptr [edx+11h]
		sub	edi, eax
		jnz	short loc_407741
		movzx	edi, byte ptr [esi+12h]
		movzx	eax, byte ptr [edx+12h]
		sub	edi, eax
		jz	short loc_407751

loc_407741:				; CODE XREF: sub_40754D+1DAj
					; sub_40754D+1E6j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_40776F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407751:				; CODE XREF: sub_40754D+1F2j
		movzx	ecx, byte ptr [esi+13h]
		movzx	eax, byte ptr [edx+13h]
		sub	ecx, eax
		jz	short loc_40776F
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_40776F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40776D:				; CODE XREF: sub_40754D+1CEj
		xor	ecx, ecx

loc_40776F:				; CODE XREF: sub_40754D+202j
					; sub_40754D+20Ej ...
		test	ecx, ecx
		jnz	loc_407B61
		mov	eax, [esi+14h]
		cmp	eax, [edx+14h]
		jz	short loc_4077CE
		movzx	edi, al
		movzx	eax, byte ptr [edx+14h]
		sub	edi, eax
		jnz	short loc_4077A2
		movzx	edi, byte ptr [esi+15h]
		movzx	eax, byte ptr [edx+15h]
		sub	edi, eax
		jnz	short loc_4077A2
		movzx	edi, byte ptr [esi+16h]
		movzx	eax, byte ptr [edx+16h]
		sub	edi, eax
		jz	short loc_4077B2

loc_4077A2:				; CODE XREF: sub_40754D+23Bj
					; sub_40754D+247j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_4077D0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4077B2:				; CODE XREF: sub_40754D+253j
		movzx	ecx, byte ptr [esi+17h]
		movzx	eax, byte ptr [edx+17h]
		sub	ecx, eax
		jz	short loc_4077D0
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_4077D0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4077CE:				; CODE XREF: sub_40754D+230j
		xor	ecx, ecx

loc_4077D0:				; CODE XREF: sub_40754D+263j
					; sub_40754D+26Fj ...
		test	ecx, ecx
		jnz	loc_407B61
		mov	eax, [esi+18h]
		cmp	eax, [edx+18h]
		jz	short loc_40782F
		movzx	edi, al
		movzx	eax, byte ptr [edx+18h]
		sub	edi, eax
		jnz	short loc_407803
		movzx	edi, byte ptr [esi+19h]
		movzx	eax, byte ptr [edx+19h]
		sub	edi, eax
		jnz	short loc_407803
		movzx	edi, byte ptr [esi+1Ah]
		movzx	eax, byte ptr [edx+1Ah]
		sub	edi, eax
		jz	short loc_407813

loc_407803:				; CODE XREF: sub_40754D+29Cj
					; sub_40754D+2A8j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407831
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407813:				; CODE XREF: sub_40754D+2B4j
		movzx	ecx, byte ptr [esi+1Bh]
		movzx	eax, byte ptr [edx+1Bh]
		sub	ecx, eax
		jz	short loc_407831
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407831
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40782F:				; CODE XREF: sub_40754D+291j
		xor	ecx, ecx

loc_407831:				; CODE XREF: sub_40754D+2C4j
					; sub_40754D+2D0j ...
		test	ecx, ecx
		jnz	loc_407B61
		mov	eax, [esi+1Ch]
		cmp	eax, [edx+1Ch]
		jz	short loc_407890
		movzx	edi, al
		movzx	eax, byte ptr [edx+1Ch]
		sub	edi, eax
		jnz	short loc_407864
		movzx	edi, byte ptr [esi+1Dh]
		movzx	eax, byte ptr [edx+1Dh]
		sub	edi, eax
		jnz	short loc_407864
		movzx	edi, byte ptr [esi+1Eh]
		movzx	eax, byte ptr [edx+1Eh]
		sub	edi, eax
		jz	short loc_407874

loc_407864:				; CODE XREF: sub_40754D+2FDj
					; sub_40754D+309j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407892
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407874:				; CODE XREF: sub_40754D+315j
		movzx	ecx, byte ptr [esi+1Fh]
		movzx	eax, byte ptr [edx+1Fh]
		sub	ecx, eax
		jz	short loc_407892
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407892
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407890:				; CODE XREF: sub_40754D+2F2j
		xor	ecx, ecx

loc_407892:				; CODE XREF: sub_40754D+325j
					; sub_40754D+331j ...
		test	ecx, ecx
		jnz	loc_407B61
		push	20h
		pop	ecx
		sub	ebx, ecx
		add	esi, ecx
		add	edx, ecx
		cmp	ebx, ecx
		jnb	loc_407594

loc_4078AB:				; CODE XREF: sub_40754D+41j
		add	esi, ebx
		add	edx, ebx
		cmp	ebx, 1Fh	; switch 32 cases
		ja	loc_407B5F	; default
		jmp	ds:off_408471[ebx*4] ; switch jump

loc_4078BF:				; DATA XREF: .text:off_408471o
		mov	eax, [esi-1Ch]	; case 0x1C
		cmp	eax, [edx-1Ch]
		jz	short loc_407916
		movzx	edi, al
		movzx	eax, byte ptr [edx-1Ch]
		sub	edi, eax
		jnz	short loc_4078EA
		movzx	edi, byte ptr [esi-1Bh]
		movzx	eax, byte ptr [edx-1Bh]
		sub	edi, eax
		jnz	short loc_4078EA
		movzx	edi, byte ptr [esi-1Ah]
		movzx	eax, byte ptr [edx-1Ah]
		sub	edi, eax
		jz	short loc_4078FA

loc_4078EA:				; CODE XREF: sub_40754D+383j
					; sub_40754D+38Fj
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407918
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4078FA:				; CODE XREF: sub_40754D+39Bj
		movzx	ecx, byte ptr [esi-19h]
		movzx	eax, byte ptr [edx-19h]
		sub	ecx, eax
		jz	short loc_407918
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407918
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407916:				; CODE XREF: sub_40754D+378j
		xor	ecx, ecx

loc_407918:				; CODE XREF: sub_40754D+3ABj
					; sub_40754D+3B7j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407920:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-18h]	; case 0x18
		cmp	eax, [edx-18h]
		jz	short loc_407977
		movzx	edi, al
		movzx	eax, byte ptr [edx-18h]
		sub	edi, eax
		jnz	short loc_40794B
		movzx	edi, byte ptr [esi-17h]
		movzx	eax, byte ptr [edx-17h]
		sub	edi, eax
		jnz	short loc_40794B
		movzx	edi, byte ptr [esi-16h]
		movzx	eax, byte ptr [edx-16h]
		sub	edi, eax
		jz	short loc_40795B

loc_40794B:				; CODE XREF: sub_40754D+3E4j
					; sub_40754D+3F0j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407979
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40795B:				; CODE XREF: sub_40754D+3FCj
		movzx	ecx, byte ptr [esi-15h]
		movzx	eax, byte ptr [edx-15h]
		sub	ecx, eax
		jz	short loc_407979
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407979
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407977:				; CODE XREF: sub_40754D+3D9j
		xor	ecx, ecx

loc_407979:				; CODE XREF: sub_40754D+40Cj
					; sub_40754D+418j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407981:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-14h]	; case 0x14
		cmp	eax, [edx-14h]
		jz	short loc_4079D8
		movzx	edi, al
		movzx	eax, byte ptr [edx-14h]
		sub	edi, eax
		jnz	short loc_4079AC
		movzx	edi, byte ptr [esi-13h]
		movzx	eax, byte ptr [edx-13h]
		sub	edi, eax
		jnz	short loc_4079AC
		movzx	edi, byte ptr [esi-12h]
		movzx	eax, byte ptr [edx-12h]
		sub	edi, eax
		jz	short loc_4079BC

loc_4079AC:				; CODE XREF: sub_40754D+445j
					; sub_40754D+451j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_4079DA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4079BC:				; CODE XREF: sub_40754D+45Dj
		movzx	ecx, byte ptr [esi-11h]
		movzx	eax, byte ptr [edx-11h]
		sub	ecx, eax
		jz	short loc_4079DA
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_4079DA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4079D8:				; CODE XREF: sub_40754D+43Aj
		xor	ecx, ecx

loc_4079DA:				; CODE XREF: sub_40754D+46Dj
					; sub_40754D+479j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_4079E2:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-10h]	; case 0x10
		cmp	eax, [edx-10h]
		jz	short loc_407A39
		movzx	edi, al
		movzx	eax, byte ptr [edx-10h]
		sub	edi, eax
		jnz	short loc_407A0D
		movzx	edi, byte ptr [esi-0Fh]
		movzx	eax, byte ptr [edx-0Fh]
		sub	edi, eax
		jnz	short loc_407A0D
		movzx	edi, byte ptr [esi-0Eh]
		movzx	eax, byte ptr [edx-0Eh]
		sub	edi, eax
		jz	short loc_407A1D

loc_407A0D:				; CODE XREF: sub_40754D+4A6j
					; sub_40754D+4B2j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407A3B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407A1D:				; CODE XREF: sub_40754D+4BEj
		movzx	ecx, byte ptr [esi-0Dh]
		movzx	eax, byte ptr [edx-0Dh]
		sub	ecx, eax
		jz	short loc_407A3B
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407A3B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407A39:				; CODE XREF: sub_40754D+49Bj
		xor	ecx, ecx

loc_407A3B:				; CODE XREF: sub_40754D+4CEj
					; sub_40754D+4DAj ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407A43:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-0Ch]	; case 0xC
		cmp	eax, [edx-0Ch]
		jz	short loc_407A9B
		movzx	eax, byte ptr [edx-0Ch]
		movzx	edi, byte ptr [esi-0Ch]
		sub	edi, eax
		jnz	short loc_407A6F
		movzx	edi, byte ptr [esi-0Bh]
		movzx	eax, byte ptr [edx-0Bh]
		sub	edi, eax
		jnz	short loc_407A6F
		movzx	edi, byte ptr [esi-0Ah]
		movzx	eax, byte ptr [edx-0Ah]
		sub	edi, eax
		jz	short loc_407A7F

loc_407A6F:				; CODE XREF: sub_40754D+508j
					; sub_40754D+514j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407A9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407A7F:				; CODE XREF: sub_40754D+520j
		movzx	ecx, byte ptr [esi-9]
		movzx	eax, byte ptr [edx-9]
		sub	ecx, eax
		jz	short loc_407A9D
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407A9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407A9B:				; CODE XREF: sub_40754D+4FCj
		xor	ecx, ecx

loc_407A9D:				; CODE XREF: sub_40754D+530j
					; sub_40754D+53Cj ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407AA5:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-8]	; case 0x8
		cmp	eax, [edx-8]
		jz	short loc_407AFC
		movzx	edi, al
		movzx	eax, byte ptr [edx-8]
		sub	edi, eax
		jnz	short loc_407AD0
		movzx	edi, byte ptr [esi-7]
		movzx	eax, byte ptr [edx-7]
		sub	edi, eax
		jnz	short loc_407AD0
		movzx	edi, byte ptr [esi-6]
		movzx	eax, byte ptr [edx-6]
		sub	edi, eax
		jz	short loc_407AE0

loc_407AD0:				; CODE XREF: sub_40754D+569j
					; sub_40754D+575j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407AFE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407AE0:				; CODE XREF: sub_40754D+581j
		movzx	ecx, byte ptr [esi-5]
		movzx	eax, byte ptr [edx-5]
		sub	ecx, eax
		jz	short loc_407AFE
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407AFE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407AFC:				; CODE XREF: sub_40754D+55Ej
		xor	ecx, ecx

loc_407AFE:				; CODE XREF: sub_40754D+591j
					; sub_40754D+59Dj ...
		test	ecx, ecx
		jnz	short loc_407B61

loc_407B02:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-4]	; case 0x4
		cmp	eax, [edx-4]
		jz	short loc_407B59
		movzx	edi, al
		movzx	eax, byte ptr [edx-4]
		sub	edi, eax
		jnz	short loc_407B2D
		movzx	edi, byte ptr [esi-3]
		movzx	eax, byte ptr [edx-3]
		sub	edi, eax
		jnz	short loc_407B2D
		movzx	edi, byte ptr [esi-2]
		movzx	eax, byte ptr [edx-2]
		sub	edi, eax
		jz	short loc_407B3D

loc_407B2D:				; CODE XREF: sub_40754D+5C6j
					; sub_40754D+5D2j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407B5B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407B3D:				; CODE XREF: sub_40754D+5DEj
		movzx	ecx, byte ptr [esi-1]
		movzx	eax, byte ptr [edx-1]
		sub	ecx, eax
		jz	short loc_407B5B
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407B5B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407B59:				; CODE XREF: sub_40754D+5BBj
		xor	ecx, ecx

loc_407B5B:				; CODE XREF: sub_40754D+5EEj
					; sub_40754D+5FAj ...
		test	ecx, ecx
		jnz	short loc_407B61

loc_407B5F:				; CODE XREF: sub_40754D+365j
					; sub_40754D+36Bj ...
		xor	ecx, ecx	; default

loc_407B61:				; CODE XREF: sub_40754D+9Fj
					; sub_40754D+100j ...
		mov	eax, ecx
		pop	edi
		jmp	loc_40846C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407B69:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-1Dh]	; case 0x1D
		cmp	eax, [edx-1Dh]
		jz	short loc_407BC0
		movzx	edi, al
		movzx	eax, byte ptr [edx-1Dh]
		sub	edi, eax
		jnz	short loc_407B94
		movzx	edi, byte ptr [esi-1Ch]
		movzx	eax, byte ptr [edx-1Ch]
		sub	edi, eax
		jnz	short loc_407B94
		movzx	edi, byte ptr [esi-1Bh]
		movzx	eax, byte ptr [edx-1Bh]
		sub	edi, eax
		jz	short loc_407BA4

loc_407B94:				; CODE XREF: sub_40754D+62Dj
					; sub_40754D+639j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407BC2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407BA4:				; CODE XREF: sub_40754D+645j
		movzx	ecx, byte ptr [esi-1Ah]
		movzx	eax, byte ptr [edx-1Ah]
		sub	ecx, eax
		jz	short loc_407BC2
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407BC2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407BC0:				; CODE XREF: sub_40754D+622j
		xor	ecx, ecx

loc_407BC2:				; CODE XREF: sub_40754D+655j
					; sub_40754D+661j ...
		test	ecx, ecx
		jnz	short loc_407B61

loc_407BC6:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-19h]	; case 0x19
		cmp	eax, [edx-19h]
		jz	short loc_407C1D
		movzx	edi, al
		movzx	eax, byte ptr [edx-19h]
		sub	edi, eax
		jnz	short loc_407BF1
		movzx	edi, byte ptr [esi-18h]
		movzx	eax, byte ptr [edx-18h]
		sub	edi, eax
		jnz	short loc_407BF1
		movzx	edi, byte ptr [esi-17h]
		movzx	eax, byte ptr [edx-17h]
		sub	edi, eax
		jz	short loc_407C01

loc_407BF1:				; CODE XREF: sub_40754D+68Aj
					; sub_40754D+696j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407C1F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407C01:				; CODE XREF: sub_40754D+6A2j
		movzx	ecx, byte ptr [esi-16h]
		movzx	eax, byte ptr [edx-16h]
		sub	ecx, eax
		jz	short loc_407C1F
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407C1F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407C1D:				; CODE XREF: sub_40754D+67Fj
		xor	ecx, ecx

loc_407C1F:				; CODE XREF: sub_40754D+6B2j
					; sub_40754D+6BEj ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407C27:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-15h]	; case 0x15
		cmp	eax, [edx-15h]
		jz	short loc_407C7E
		movzx	edi, al
		movzx	eax, byte ptr [edx-15h]
		sub	edi, eax
		jnz	short loc_407C52
		movzx	edi, byte ptr [esi-14h]
		movzx	eax, byte ptr [edx-14h]
		sub	edi, eax
		jnz	short loc_407C52
		movzx	edi, byte ptr [esi-13h]
		movzx	eax, byte ptr [edx-13h]
		sub	edi, eax
		jz	short loc_407C62

loc_407C52:				; CODE XREF: sub_40754D+6EBj
					; sub_40754D+6F7j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407C80
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407C62:				; CODE XREF: sub_40754D+703j
		movzx	ecx, byte ptr [esi-12h]
		movzx	eax, byte ptr [edx-12h]
		sub	ecx, eax
		jz	short loc_407C80
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407C80
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407C7E:				; CODE XREF: sub_40754D+6E0j
		xor	ecx, ecx

loc_407C80:				; CODE XREF: sub_40754D+713j
					; sub_40754D+71Fj ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407C88:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-11h]	; case 0x11
		cmp	eax, [edx-11h]
		jz	short loc_407CDF
		movzx	edi, al
		movzx	eax, byte ptr [edx-11h]
		sub	edi, eax
		jnz	short loc_407CB3
		movzx	edi, byte ptr [esi-10h]
		movzx	eax, byte ptr [edx-10h]
		sub	edi, eax
		jnz	short loc_407CB3
		movzx	edi, byte ptr [esi-0Fh]
		movzx	eax, byte ptr [edx-0Fh]
		sub	edi, eax
		jz	short loc_407CC3

loc_407CB3:				; CODE XREF: sub_40754D+74Cj
					; sub_40754D+758j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407CE1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407CC3:				; CODE XREF: sub_40754D+764j
		movzx	ecx, byte ptr [esi-0Eh]
		movzx	eax, byte ptr [edx-0Eh]
		sub	ecx, eax
		jz	short loc_407CE1
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407CE1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407CDF:				; CODE XREF: sub_40754D+741j
		xor	ecx, ecx

loc_407CE1:				; CODE XREF: sub_40754D+774j
					; sub_40754D+780j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407CE9:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-0Dh]	; case 0xD
		cmp	eax, [edx-0Dh]
		jz	short loc_407D40
		movzx	edi, al
		movzx	eax, byte ptr [edx-0Dh]
		sub	edi, eax
		jnz	short loc_407D14
		movzx	edi, byte ptr [esi-0Ch]
		movzx	eax, byte ptr [edx-0Ch]
		sub	edi, eax
		jnz	short loc_407D14
		movzx	edi, byte ptr [esi-0Bh]
		movzx	eax, byte ptr [edx-0Bh]
		sub	edi, eax
		jz	short loc_407D24

loc_407D14:				; CODE XREF: sub_40754D+7ADj
					; sub_40754D+7B9j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407D42
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407D24:				; CODE XREF: sub_40754D+7C5j
		movzx	ecx, byte ptr [esi-0Ah]
		movzx	eax, byte ptr [edx-0Ah]
		sub	ecx, eax
		jz	short loc_407D42
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407D42
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407D40:				; CODE XREF: sub_40754D+7A2j
		xor	ecx, ecx

loc_407D42:				; CODE XREF: sub_40754D+7D5j
					; sub_40754D+7E1j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407D4A:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-9]	; case 0x9
		cmp	eax, [edx-9]
		jz	short loc_407DA2
		movzx	eax, byte ptr [edx-9]
		movzx	edi, byte ptr [esi-9]
		sub	edi, eax
		jnz	short loc_407D76
		movzx	edi, byte ptr [esi-8]
		movzx	eax, byte ptr [edx-8]
		sub	edi, eax
		jnz	short loc_407D76
		movzx	edi, byte ptr [esi-7]
		movzx	eax, byte ptr [edx-7]
		sub	edi, eax
		jz	short loc_407D86

loc_407D76:				; CODE XREF: sub_40754D+80Fj
					; sub_40754D+81Bj
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407DA4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407D86:				; CODE XREF: sub_40754D+827j
		movzx	ecx, byte ptr [esi-6]
		movzx	eax, byte ptr [edx-6]
		sub	ecx, eax
		jz	short loc_407DA4
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407DA4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407DA2:				; CODE XREF: sub_40754D+803j
		xor	ecx, ecx

loc_407DA4:				; CODE XREF: sub_40754D+837j
					; sub_40754D+843j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407DAC:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-5]	; case 0x5
		cmp	eax, [edx-5]
		jz	short loc_407E03
		movzx	edi, al
		movzx	eax, byte ptr [edx-5]
		sub	edi, eax
		jnz	short loc_407DD7
		movzx	edi, byte ptr [esi-4]
		movzx	eax, byte ptr [edx-4]
		sub	edi, eax
		jnz	short loc_407DD7
		movzx	edi, byte ptr [esi-3]
		movzx	eax, byte ptr [edx-3]
		sub	edi, eax
		jz	short loc_407DE7

loc_407DD7:				; CODE XREF: sub_40754D+870j
					; sub_40754D+87Cj
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407E05
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407DE7:				; CODE XREF: sub_40754D+888j
		movzx	ecx, byte ptr [esi-2]
		movzx	eax, byte ptr [edx-2]
		sub	ecx, eax
		jz	short loc_407E05
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407E05
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407E03:				; CODE XREF: sub_40754D+865j
		xor	ecx, ecx

loc_407E05:				; CODE XREF: sub_40754D+898j
					; sub_40754D+8A4j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407E0D:				; CODE XREF: sub_40754D+36Bj
					; sub_40754D+E5Dj
					; DATA XREF: ...
		movzx	eax, byte ptr [edx-1] ;	case 0x1
		movzx	ecx, byte ptr [esi-1]
		sub	ecx, eax
		jz	loc_407B61
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	loc_407B61
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407E30:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-1Eh]	; case 0x1E
		cmp	eax, [edx-1Eh]
		jz	short loc_407E87
		movzx	edi, al
		movzx	eax, byte ptr [edx-1Eh]
		sub	edi, eax
		jnz	short loc_407E5B
		movzx	edi, byte ptr [esi-1Dh]
		movzx	eax, byte ptr [edx-1Dh]
		sub	edi, eax
		jnz	short loc_407E5B
		movzx	edi, byte ptr [esi-1Ch]
		movzx	eax, byte ptr [edx-1Ch]
		sub	edi, eax
		jz	short loc_407E6B

loc_407E5B:				; CODE XREF: sub_40754D+8F4j
					; sub_40754D+900j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407E89
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407E6B:				; CODE XREF: sub_40754D+90Cj
		movzx	ecx, byte ptr [esi-1Bh]
		movzx	eax, byte ptr [edx-1Bh]
		sub	ecx, eax
		jz	short loc_407E89
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407E89
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407E87:				; CODE XREF: sub_40754D+8E9j
		xor	ecx, ecx

loc_407E89:				; CODE XREF: sub_40754D+91Cj
					; sub_40754D+928j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407E91:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-1Ah]	; case 0x1A
		cmp	eax, [edx-1Ah]
		jz	short loc_407EE8
		movzx	edi, al
		movzx	eax, byte ptr [edx-1Ah]
		sub	edi, eax
		jnz	short loc_407EBC
		movzx	edi, byte ptr [esi-19h]
		movzx	eax, byte ptr [edx-19h]
		sub	edi, eax
		jnz	short loc_407EBC
		movzx	edi, byte ptr [esi-18h]
		movzx	eax, byte ptr [edx-18h]
		sub	edi, eax
		jz	short loc_407ECC

loc_407EBC:				; CODE XREF: sub_40754D+955j
					; sub_40754D+961j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407EEA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407ECC:				; CODE XREF: sub_40754D+96Dj
		movzx	ecx, byte ptr [esi-17h]
		movzx	eax, byte ptr [edx-17h]
		sub	ecx, eax
		jz	short loc_407EEA
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407EEA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407EE8:				; CODE XREF: sub_40754D+94Aj
		xor	ecx, ecx

loc_407EEA:				; CODE XREF: sub_40754D+97Dj
					; sub_40754D+989j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407EF2:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-16h]	; case 0x16
		cmp	eax, [edx-16h]
		jz	short loc_407F49
		movzx	edi, al
		movzx	eax, byte ptr [edx-16h]
		sub	edi, eax
		jnz	short loc_407F1D
		movzx	edi, byte ptr [esi-15h]
		movzx	eax, byte ptr [edx-15h]
		sub	edi, eax
		jnz	short loc_407F1D
		movzx	edi, byte ptr [esi-14h]
		movzx	eax, byte ptr [edx-14h]
		sub	edi, eax
		jz	short loc_407F2D

loc_407F1D:				; CODE XREF: sub_40754D+9B6j
					; sub_40754D+9C2j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407F4B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407F2D:				; CODE XREF: sub_40754D+9CEj
		movzx	ecx, byte ptr [esi-13h]
		movzx	eax, byte ptr [edx-13h]
		sub	ecx, eax
		jz	short loc_407F4B
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407F4B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407F49:				; CODE XREF: sub_40754D+9ABj
		xor	ecx, ecx

loc_407F4B:				; CODE XREF: sub_40754D+9DEj
					; sub_40754D+9EAj ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407F53:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-12h]	; case 0x12
		cmp	eax, [edx-12h]
		jz	short loc_407FAA
		movzx	edi, al
		movzx	eax, byte ptr [edx-12h]
		sub	edi, eax
		jnz	short loc_407F7E
		movzx	edi, byte ptr [esi-11h]
		movzx	eax, byte ptr [edx-11h]
		sub	edi, eax
		jnz	short loc_407F7E
		movzx	edi, byte ptr [esi-10h]
		movzx	eax, byte ptr [edx-10h]
		sub	edi, eax
		jz	short loc_407F8E

loc_407F7E:				; CODE XREF: sub_40754D+A17j
					; sub_40754D+A23j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_407FAC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407F8E:				; CODE XREF: sub_40754D+A2Fj
		movzx	ecx, byte ptr [esi-0Fh]
		movzx	eax, byte ptr [edx-0Fh]
		sub	ecx, eax
		jz	short loc_407FAC
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_407FAC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407FAA:				; CODE XREF: sub_40754D+A0Cj
		xor	ecx, ecx

loc_407FAC:				; CODE XREF: sub_40754D+A3Fj
					; sub_40754D+A4Bj ...
		test	ecx, ecx
		jnz	loc_407B61

loc_407FB4:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-0Eh]	; case 0xE
		cmp	eax, [edx-0Eh]
		jz	short loc_40800B
		movzx	edi, al
		movzx	eax, byte ptr [edx-0Eh]
		sub	edi, eax
		jnz	short loc_407FDF
		movzx	edi, byte ptr [esi-0Dh]
		movzx	eax, byte ptr [edx-0Dh]
		sub	edi, eax
		jnz	short loc_407FDF
		movzx	edi, byte ptr [esi-0Ch]
		movzx	eax, byte ptr [edx-0Ch]
		sub	edi, eax
		jz	short loc_407FEF

loc_407FDF:				; CODE XREF: sub_40754D+A78j
					; sub_40754D+A84j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_40800D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_407FEF:				; CODE XREF: sub_40754D+A90j
		movzx	ecx, byte ptr [esi-0Bh]
		movzx	eax, byte ptr [edx-0Bh]
		sub	ecx, eax
		jz	short loc_40800D
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_40800D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40800B:				; CODE XREF: sub_40754D+A6Dj
		xor	ecx, ecx

loc_40800D:				; CODE XREF: sub_40754D+AA0j
					; sub_40754D+AACj ...
		test	ecx, ecx
		jnz	loc_407B61

loc_408015:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-0Ah]	; case 0xA
		cmp	eax, [edx-0Ah]
		jz	short loc_40806D
		movzx	eax, byte ptr [edx-0Ah]
		movzx	edi, byte ptr [esi-0Ah]
		sub	edi, eax
		jnz	short loc_408041
		movzx	eax, byte ptr [edx-9]
		movzx	edi, byte ptr [esi-9]
		sub	edi, eax
		jnz	short loc_408041
		movzx	eax, byte ptr [edx-8]
		movzx	edi, byte ptr [esi-8]
		sub	edi, eax
		jz	short loc_408051

loc_408041:				; CODE XREF: sub_40754D+ADAj
					; sub_40754D+AE6j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_40806F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408051:				; CODE XREF: sub_40754D+AF2j
		movzx	eax, byte ptr [edx-7]
		movzx	ecx, byte ptr [esi-7]
		sub	ecx, eax
		jz	short loc_40806F
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_40806F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40806D:				; CODE XREF: sub_40754D+ACEj
		xor	ecx, ecx

loc_40806F:				; CODE XREF: sub_40754D+B02j
					; sub_40754D+B0Ej ...
		test	ecx, ecx
		jnz	loc_407B61

loc_408077:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-6]	; case 0x6
		cmp	eax, [edx-6]
		jz	short loc_4080CE
		movzx	edi, al
		movzx	eax, byte ptr [edx-6]
		sub	edi, eax
		jnz	short loc_4080A2
		movzx	edi, byte ptr [esi-5]
		movzx	eax, byte ptr [edx-5]
		sub	edi, eax
		jnz	short loc_4080A2
		movzx	edi, byte ptr [esi-4]
		movzx	eax, byte ptr [edx-4]
		sub	edi, eax
		jz	short loc_4080B2

loc_4080A2:				; CODE XREF: sub_40754D+B3Bj
					; sub_40754D+B47j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_4080D0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4080B2:				; CODE XREF: sub_40754D+B53j
		movzx	ecx, byte ptr [esi-3]
		movzx	eax, byte ptr [edx-3]
		sub	ecx, eax
		jz	short loc_4080D0
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_4080D0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4080CE:				; CODE XREF: sub_40754D+B30j
		xor	ecx, ecx

loc_4080D0:				; CODE XREF: sub_40754D+B63j
					; sub_40754D+B6Fj ...
		test	ecx, ecx
		jnz	loc_407B61

loc_4080D8:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	ax, [esi-2]	; case 0x2
		cmp	ax, [edx-2]
		jz	loc_407B5F	; default
		jmp	loc_4083A0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4080EB:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-1Fh]	; case 0x1F
		cmp	eax, [edx-1Fh]
		jz	short loc_408143
		movzx	eax, byte ptr [edx-1Fh]
		movzx	edi, byte ptr [esi-1Fh]
		sub	edi, eax
		jnz	short loc_408117
		movzx	edi, byte ptr [esi-1Eh]
		movzx	eax, byte ptr [edx-1Eh]
		sub	edi, eax
		jnz	short loc_408117
		movzx	edi, byte ptr [esi-1Dh]
		movzx	eax, byte ptr [edx-1Dh]
		sub	edi, eax
		jz	short loc_408127

loc_408117:				; CODE XREF: sub_40754D+BB0j
					; sub_40754D+BBCj
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_408145
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408127:				; CODE XREF: sub_40754D+BC8j
		movzx	ecx, byte ptr [esi-1Ch]
		movzx	eax, byte ptr [edx-1Ch]
		sub	ecx, eax
		jz	short loc_408145
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_408145
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408143:				; CODE XREF: sub_40754D+BA4j
		xor	ecx, ecx

loc_408145:				; CODE XREF: sub_40754D+BD8j
					; sub_40754D+BE4j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_40814D:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-1Bh]	; case 0x1B
		cmp	eax, [edx-1Bh]
		jz	short loc_4081A4
		movzx	edi, al
		movzx	eax, byte ptr [edx-1Bh]
		sub	edi, eax
		jnz	short loc_408178
		movzx	edi, byte ptr [esi-1Ah]
		movzx	eax, byte ptr [edx-1Ah]
		sub	edi, eax
		jnz	short loc_408178
		movzx	edi, byte ptr [esi-19h]
		movzx	eax, byte ptr [edx-19h]
		sub	edi, eax
		jz	short loc_408188

loc_408178:				; CODE XREF: sub_40754D+C11j
					; sub_40754D+C1Dj
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_4081A6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408188:				; CODE XREF: sub_40754D+C29j
		movzx	ecx, byte ptr [esi-18h]
		movzx	eax, byte ptr [edx-18h]
		sub	ecx, eax
		jz	short loc_4081A6
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_4081A6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4081A4:				; CODE XREF: sub_40754D+C06j
		xor	ecx, ecx

loc_4081A6:				; CODE XREF: sub_40754D+C39j
					; sub_40754D+C45j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_4081AE:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-17h]	; case 0x17
		cmp	eax, [edx-17h]
		jz	short loc_408205
		movzx	edi, al
		movzx	eax, byte ptr [edx-17h]
		sub	edi, eax
		jnz	short loc_4081D9
		movzx	edi, byte ptr [esi-16h]
		movzx	eax, byte ptr [edx-16h]
		sub	edi, eax
		jnz	short loc_4081D9
		movzx	edi, byte ptr [esi-15h]
		movzx	eax, byte ptr [edx-15h]
		sub	edi, eax
		jz	short loc_4081E9

loc_4081D9:				; CODE XREF: sub_40754D+C72j
					; sub_40754D+C7Ej
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_408207
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4081E9:				; CODE XREF: sub_40754D+C8Aj
		movzx	ecx, byte ptr [esi-14h]
		movzx	eax, byte ptr [edx-14h]
		sub	ecx, eax
		jz	short loc_408207
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_408207
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408205:				; CODE XREF: sub_40754D+C67j
		xor	ecx, ecx

loc_408207:				; CODE XREF: sub_40754D+C9Aj
					; sub_40754D+CA6j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_40820F:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-13h]	; case 0x13
		cmp	eax, [edx-13h]
		jz	short loc_408266
		movzx	edi, al
		movzx	eax, byte ptr [edx-13h]
		sub	edi, eax
		jnz	short loc_40823A
		movzx	edi, byte ptr [esi-12h]
		movzx	eax, byte ptr [edx-12h]
		sub	edi, eax
		jnz	short loc_40823A
		movzx	edi, byte ptr [esi-11h]
		movzx	eax, byte ptr [edx-11h]
		sub	edi, eax
		jz	short loc_40824A

loc_40823A:				; CODE XREF: sub_40754D+CD3j
					; sub_40754D+CDFj
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_408268
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40824A:				; CODE XREF: sub_40754D+CEBj
		movzx	ecx, byte ptr [esi-10h]
		movzx	eax, byte ptr [edx-10h]
		sub	ecx, eax
		jz	short loc_408268
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_408268
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408266:				; CODE XREF: sub_40754D+CC8j
		xor	ecx, ecx

loc_408268:				; CODE XREF: sub_40754D+CFBj
					; sub_40754D+D07j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_408270:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-0Fh]	; case 0xF
		cmp	eax, [edx-0Fh]
		jz	short loc_4082C8
		movzx	eax, byte ptr [edx-0Fh]
		movzx	edi, byte ptr [esi-0Fh]
		sub	edi, eax
		jnz	short loc_40829C
		movzx	edi, byte ptr [esi-0Eh]
		movzx	eax, byte ptr [edx-0Eh]
		sub	edi, eax
		jnz	short loc_40829C
		movzx	edi, byte ptr [esi-0Dh]
		movzx	eax, byte ptr [edx-0Dh]
		sub	edi, eax
		jz	short loc_4082AC

loc_40829C:				; CODE XREF: sub_40754D+D35j
					; sub_40754D+D41j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_4082CA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4082AC:				; CODE XREF: sub_40754D+D4Dj
		movzx	ecx, byte ptr [esi-0Ch]
		movzx	eax, byte ptr [edx-0Ch]
		sub	ecx, eax
		jz	short loc_4082CA
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_4082CA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4082C8:				; CODE XREF: sub_40754D+D29j
		xor	ecx, ecx

loc_4082CA:				; CODE XREF: sub_40754D+D5Dj
					; sub_40754D+D69j ...
		test	ecx, ecx
		jnz	loc_407B61

loc_4082D2:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-0Bh]	; case 0xB
		cmp	eax, [edx-0Bh]
		jz	short loc_408329
		movzx	edi, al
		movzx	eax, byte ptr [edx-0Bh]
		sub	edi, eax
		jnz	short loc_4082FD
		movzx	edi, byte ptr [esi-0Ah]
		movzx	eax, byte ptr [edx-0Ah]
		sub	edi, eax
		jnz	short loc_4082FD
		movzx	edi, byte ptr [esi-9]
		movzx	eax, byte ptr [edx-9]
		sub	edi, eax
		jz	short loc_40830D

loc_4082FD:				; CODE XREF: sub_40754D+D96j
					; sub_40754D+DA2j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_40832B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40830D:				; CODE XREF: sub_40754D+DAEj
		movzx	ecx, byte ptr [esi-8]
		movzx	eax, byte ptr [edx-8]
		sub	ecx, eax
		jz	short loc_40832B
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_40832B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408329:				; CODE XREF: sub_40754D+D8Bj
		xor	ecx, ecx

loc_40832B:				; CODE XREF: sub_40754D+DBEj
					; sub_40754D+DCAj ...
		test	ecx, ecx
		jnz	loc_407B61

loc_408333:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		mov	eax, [esi-7]	; case 0x7
		cmp	eax, [edx-7]
		jz	short loc_40838A
		movzx	edi, al
		movzx	eax, byte ptr [edx-7]
		sub	edi, eax
		jnz	short loc_40835E
		movzx	edi, byte ptr [esi-6]
		movzx	eax, byte ptr [edx-6]
		sub	edi, eax
		jnz	short loc_40835E
		movzx	edi, byte ptr [esi-5]
		movzx	eax, byte ptr [edx-5]
		sub	edi, eax
		jz	short loc_40836E

loc_40835E:				; CODE XREF: sub_40754D+DF7j
					; sub_40754D+E03j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_40838C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40836E:				; CODE XREF: sub_40754D+E0Fj
		movzx	ecx, byte ptr [esi-4]
		movzx	eax, byte ptr [edx-4]
		sub	ecx, eax
		jz	short loc_40838C
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]
		jmp	short loc_40838C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40838A:				; CODE XREF: sub_40754D+DECj
		xor	ecx, ecx

loc_40838C:				; CODE XREF: sub_40754D+E1Fj
					; sub_40754D+E2Bj ...
		test	ecx, ecx
		jnz	loc_407B61

loc_408394:				; CODE XREF: sub_40754D+36Bj
					; DATA XREF: .text:off_408471o
		movzx	edi, byte ptr [esi-3] ;	case 0x3
		movzx	eax, byte ptr [edx-3]
		sub	edi, eax
		jnz	short loc_4083B0

loc_4083A0:				; CODE XREF: sub_40754D+B99j
		movzx	eax, byte ptr [edx-2]
		movzx	edi, byte ptr [esi-2]
		sub	edi, eax
		jz	loc_407E0D	; case 0x1

loc_4083B0:				; CODE XREF: sub_40754D+E51j
		xor	ecx, ecx
		test	edi, edi
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	loc_407B61
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4083C3:				; CODE XREF: sub_40754D+34j
		mov	ecx, [ebp+arg_0]
		movzx	eax, byte ptr [edx]
		movzx	esi, byte ptr [ecx]
		sub	esi, eax
		jnz	short loc_4083E8
		movzx	esi, byte ptr [ecx+1]
		movzx	eax, byte ptr [edx+1]
		sub	esi, eax
		jnz	short loc_4083E8
		movzx	esi, byte ptr [ecx+2]
		movzx	eax, byte ptr [edx+2]
		sub	esi, eax
		jz	short loc_4083F8

loc_4083E8:				; CODE XREF: sub_40754D+E81j
					; sub_40754D+E8Dj
		xor	ecx, ecx
		test	esi, esi

loc_4083EC:				; CODE XREF: sub_40754D+EE9j
		setnle	cl
		lea	ecx, ds:0FFFFFFFFh[ecx*2]
		jmp	short loc_408412
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4083F8:				; CODE XREF: sub_40754D+E99j
		movzx	ecx, byte ptr [ecx+3]
		movzx	eax, byte ptr [edx+3]

loc_408400:				; CODE XREF: sub_40754D+EF3j
					; sub_40754D+F0Dj ...
		sub	ecx, eax
		jz	short loc_408412
		xor	eax, eax
		test	ecx, ecx
		setnle	al
		lea	ecx, ds:0FFFFFFFFh[eax*2]

loc_408412:				; CODE XREF: sub_40754D+EA9j
					; sub_40754D+EB5j
		mov	eax, ecx
		jmp	short loc_40846C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408416:				; CODE XREF: sub_40754D+28j
		mov	ecx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		movzx	edx, byte ptr [ecx]
		movzx	eax, byte ptr [esi]
		sub	edx, eax
		jnz	short loc_408432
		movzx	edx, byte ptr [ecx+1]
		movzx	eax, byte ptr [esi+1]
		sub	edx, eax
		jz	short loc_408438

loc_408432:				; CODE XREF: sub_40754D+ED7j
					; sub_40754D+F03j
		xor	ecx, ecx
		test	edx, edx
		jmp	short loc_4083EC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408438:				; CODE XREF: sub_40754D+EE3j
		movzx	ecx, byte ptr [ecx+2]
		movzx	eax, byte ptr [esi+2]
		jmp	short loc_408400
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408442:				; CODE XREF: sub_40754D+1Fj
		mov	ecx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		movzx	edx, byte ptr [ecx]
		movzx	eax, byte ptr [esi]
		sub	edx, eax
		jnz	short loc_408432
		movzx	ecx, byte ptr [ecx+1]
		movzx	eax, byte ptr [esi+1]
		jmp	short loc_408400
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40845C:				; CODE XREF: sub_40754D+16j
		mov	eax, [ebp+arg_0]
		movzx	ecx, byte ptr [eax]
		mov	eax, [ebp+arg_4]
		movzx	eax, byte ptr [eax]
		jmp	short loc_408400
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40846A:				; CODE XREF: sub_40754D+Dj
		xor	eax, eax

loc_40846C:				; CODE XREF: sub_40754D+617j
					; sub_40754D+EC7j
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_40754D	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 90h
off_408471	dd offset loc_407B5F	; DATA XREF: sub_40754D+36Br
		dd offset loc_407E0D	; jump table for switch	statement
		dd offset loc_4080D8
		dd offset loc_408394
		dd offset loc_407B02
		dd offset loc_407DAC
		dd offset loc_408077
		dd offset loc_408333
		dd offset loc_407AA5
		dd offset loc_407D4A
		dd offset loc_408015
		dd offset loc_4082D2
		dd offset loc_407A43
		dd offset loc_407CE9
		dd offset loc_407FB4
		dd offset loc_408270
		dd offset loc_4079E2
		dd offset loc_407C88
		dd offset loc_407F53
		dd offset loc_40820F
		dd offset loc_407981
		dd offset loc_407C27
		dd offset loc_407EF2
		dd offset loc_4081AE
		dd offset loc_407920
		dd offset loc_407BC6
		dd offset loc_407E91
		dd offset loc_40814D
		dd offset loc_4078BF
		dd offset loc_407B69
		dd offset loc_407E30
		dd offset loc_4080EB
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_408500	proc near		; CODE XREF: sub_408540+2Bp
					; sub_408540+C1p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	edi, [ebp+arg_4]
		mov	eax, [esi]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_40851F
		mov	ecx, [esi+4]
		add	ecx, edi
		xor	ecx, [eax+edi]
		call	sub_40534D

loc_40851F:				; CODE XREF: sub_408500+10j
		mov	eax, [esi+8]
		mov	ecx, [esi+0Ch]
		add	ecx, edi
		xor	ecx, [eax+edi]
		pop	edi
		pop	esi
		pop	ebp
		jmp	sub_40534D
sub_408500	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_408540	proc near		; DATA XREF: sub_405FF0o sub_41B990+Ao

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		push	edi
		mov	[ebp+var_1], 0
		mov	eax, [ebx+8]
		lea	esi, [ebx+10h]
		xor	eax, dword_42C06C
		push	esi
		push	eax
		mov	[ebp+var_C], 1
		mov	[ebp+var_10], esi
		mov	[ebp+var_8], eax
		call	sub_408500
		push	[ebp+arg_8]
		call	sub_40959C
		mov	eax, [ebp+arg_0]
		add	esp, 0Ch
		mov	edi, [ebx+0Ch]
		test	byte ptr [eax+4], 66h
		jnz	short loc_4085E6
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_18], eax
		lea	eax, [ebp+var_1C]
		mov	[ebx-4], eax
		cmp	edi, 0FFFFFFFEh
		jz	short loc_408609
		jmp	short loc_4085A0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_4085A0:				; CODE XREF: sub_408540+5Bj
					; sub_408540+95j
		mov	ecx, [ebp+var_8]
		lea	eax, [edi+2]
		lea	eax, [edi+eax*2]
		mov	ebx, [ecx+eax*4]
		lea	eax, [ecx+eax*4]
		mov	ecx, [eax+4]
		mov	[ebp+var_14], eax
		test	ecx, ecx
		jz	short loc_4085CD
		mov	edx, esi
		call	sub_409710
		mov	cl, 1
		mov	[ebp+var_1], cl
		test	eax, eax
		js	short loc_4085DD
		jg	short loc_408613
		jmp	short loc_4085D0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4085CD:				; CODE XREF: sub_408540+77j
		mov	cl, [ebp+var_1]

loc_4085D0:				; CODE XREF: sub_408540+8Bj
		mov	edi, ebx
		cmp	ebx, 0FFFFFFFEh
		jnz	short loc_4085A0
		test	cl, cl
		jz	short loc_408609
		jmp	short loc_4085FD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4085DD:				; CODE XREF: sub_408540+87j
		mov	[ebp+var_C], 0
		jmp	short loc_4085FD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4085E6:				; CODE XREF: sub_408540+45j
		cmp	edi, 0FFFFFFFEh
		jz	short loc_408609
		push	offset dword_42C06C
		push	esi
		mov	edx, 0FFFFFFFEh
		mov	ecx, ebx
		call	sub_409760

loc_4085FD:				; CODE XREF: sub_408540+9Bj
					; sub_408540+A4j
		push	esi
		push	[ebp+var_8]
		call	sub_408500
		add	esp, 8

loc_408609:				; CODE XREF: sub_408540+59j
					; sub_408540+99j ...
		mov	eax, [ebp+var_C]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408613:				; CODE XREF: sub_408540+89j
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax], 0E06D7363h
		jnz	short loc_408656
		cmp	ds:off_4203C4, 0
		jz	short loc_408656
		push	offset off_4203C4
		call	sub_41B990
		add	esp, 4
		test	eax, eax
		jz	short loc_408653
		mov	esi, ds:off_4203C4
		mov	ecx, esi
		push	1
		push	[ebp+arg_0]
		call	ds:off_41D12C
		call	esi ; sub_4065C8
		mov	esi, [ebp+var_10]
		add	esp, 8

loc_408653:				; CODE XREF: sub_408540+F6j
		mov	eax, [ebp+arg_0]

loc_408656:				; CODE XREF: sub_408540+DCj
					; sub_408540+E5j
		mov	ecx, [ebp+arg_4]
		mov	edx, eax
		call	sub_409744
		mov	eax, [ebp+arg_4]
		cmp	[eax+0Ch], edi
		jz	short loc_40867A
		push	offset dword_42C06C
		push	esi
		mov	edx, edi
		mov	ecx, eax
		call	sub_409760
		mov	eax, [ebp+arg_4]

loc_40867A:				; CODE XREF: sub_408540+126j
		push	esi
		push	[ebp+var_8]
		mov	[eax+0Ch], ebx
		call	sub_408500
		mov	ecx, [ebp+var_14]
		add	esp, 8
		mov	edx, esi
		mov	ecx, [ecx+8]
		call	sub_409728
		int	3		; Trap to Debugger
sub_408540	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_408697	proc near		; CODE XREF: sub_4056A8+15p
		call	sub_4095F9
		call	sub_409A4B
		call	sub_409777
		test	al, al
		jnz	short loc_4086AD

loc_4086AA:				; CODE XREF: sub_408697+24j
		xor	al, al
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4086AD:				; CODE XREF: sub_408697+11j
		call	sub_40880E
		test	al, al
		jnz	short loc_4086BD
		call	sub_4097B3
		jmp	short loc_4086AA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4086BD:				; CODE XREF: sub_408697+1Dj
		mov	al, 1
		retn
sub_408697	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4086C0	proc near		; CODE XREF: sub_4056A8+2Dp
					; sub_405837+1Dp

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		jnz	short loc_4086DB
		call	sub_408841
		call	sub_4097B3
		push	0
		call	sub_409A74
		pop	ecx

loc_4086DB:				; CODE XREF: sub_4086C0+7j
		mov	al, 1
		pop	ebp
		retn
sub_4086C0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4086DF	proc near		; CODE XREF: sub_409116+Ep

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		cmp	eax, ecx
		jnz	short loc_4086F0

loc_4086EC:				; CODE XREF: sub_4086DF+1Fj
					; sub_4086DF+33j
		xor	eax, eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4086F0:				; CODE XREF: sub_4086DF+Bj
		add	ecx, 5
		add	eax, 5

loc_4086F6:				; CODE XREF: sub_4086DF+31j
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_408714
		test	dl, dl
		jz	short loc_4086EC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_408714
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_4086F6
		jmp	short loc_4086EC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408714:				; CODE XREF: sub_4086DF+1Bj
					; sub_4086DF+27j
		sbb	eax, eax
		or	eax, 1
		pop	ebp
		retn
sub_4086DF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40871B	proc near		; DATA XREF: sub_40880Eo

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_408733
		cmp	eax, offset TlsValue
		jz	short loc_408733
		push	eax
		call	sub_409C2E
		pop	ecx

loc_408733:				; CODE XREF: sub_40871B+8j
					; sub_40871B+Fj
		pop	ebp
		retn	4
sub_40871B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_408737	proc near		; CODE XREF: sub_4062FD+89p
					; sub_40648C+Cp ...
		call	sub_408745
		test	eax, eax
		jz	sub_40C069
		retn
sub_408737	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_408745	proc near		; CODE XREF: sub_408737p
		cmp	dwTlsIndex, 0FFFFFFFFh
		jnz	short loc_408751
		xor	eax, eax
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408751:				; CODE XREF: sub_408745+7j
		push	ebx
		push	edi
		call	ds:GetLastError
		push	dwTlsIndex	; dwTlsIndex
		mov	edi, eax
		call	sub_40998B
		mov	ebx, eax
		pop	ecx
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_408785
		test	ebx, ebx
		jnz	short loc_4087CB
		push	0FFFFFFFFh	; lpTlsValue
		push	dwTlsIndex	; dwTlsIndex
		call	sub_4099C6
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_408789

loc_408785:				; CODE XREF: sub_408745+27j
		xor	ebx, ebx
		jmp	short loc_4087CB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408789:				; CODE XREF: sub_408745+3Ej
		push	esi
		push	28h
		push	1
		call	sub_40A1E6
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_4087AD
		push	esi		; lpTlsValue
		push	dwTlsIndex	; dwTlsIndex
		call	sub_4099C6
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_4087BF

loc_4087AD:				; CODE XREF: sub_408745+54j
		xor	ebx, ebx
		push	ebx		; lpTlsValue
		push	dwTlsIndex	; dwTlsIndex
		call	sub_4099C6
		pop	ecx
		pop	ecx
		jmp	short loc_4087C3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4087BF:				; CODE XREF: sub_408745+66j
		mov	ebx, esi
		xor	esi, esi

loc_4087C3:				; CODE XREF: sub_408745+78j
		push	esi
		call	sub_409C2E
		pop	ecx
		pop	esi

loc_4087CB:				; CODE XREF: sub_408745+2Bj
					; sub_408745+42j
		push	edi		; dwErrCode
		call	ds:SetLastError
		pop	edi
		mov	eax, ebx
		pop	ebx
		retn
sub_408745	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4087D7	proc near		; CODE XREF: sub_40748Ap
		cmp	dwTlsIndex, 0FFFFFFFFh
		jnz	short loc_4087E3
		xor	eax, eax
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4087E3:				; CODE XREF: sub_4087D7+7j
		push	esi
		push	edi
		call	ds:GetLastError
		push	dwTlsIndex	; dwTlsIndex
		mov	esi, eax
		call	sub_40998B
		pop	ecx
		push	esi		; dwErrCode
		mov	edi, eax
		call	ds:SetLastError
		lea	eax, [edi+1]
		neg	eax
		sbb	eax, eax
		and	eax, edi
		pop	edi
		pop	esi
		retn
sub_4087D7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40880E	proc near		; CODE XREF: sub_408697:loc_4086ADp
		push	offset sub_40871B
		call	sub_409915
		mov	dwTlsIndex, eax
		pop	ecx
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_408826

loc_408823:				; CODE XREF: sub_40880E+2Ej
		xor	al, al
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408826:				; CODE XREF: sub_40880E+13j
		push	offset TlsValue	; lpTlsValue
		push	eax		; dwTlsIndex
		call	sub_4099C6
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_40883E
		call	sub_408841
		jmp	short loc_408823
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40883E:				; CODE XREF: sub_40880E+27j
		mov	al, 1
		retn
sub_40880E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_408841	proc near		; CODE XREF: sub_4086C0+9p
					; sub_40880E+29p
		mov	eax, dwTlsIndex
		cmp	eax, 0FFFFFFFFh
		jz	short loc_408859
		push	eax		; dwTlsIndex
		call	sub_409950
		or	dwTlsIndex, 0FFFFFFFFh
		pop	ecx

loc_408859:				; CODE XREF: sub_408841+8j
		mov	al, 1
		retn
sub_408841	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40885C	proc near		; CODE XREF: sub_40899B+2Fp
		push	10h
		push	offset dword_42AF00
		call	sub_405FF0
		xor	ebx, ebx
		mov	eax, [ebp+10h]
		mov	ecx, [eax+4]
		test	ecx, ecx
		jz	loc_408983
		cmp	[ecx+8], bl
		jz	loc_408983
		mov	edx, [eax+8]
		test	edx, edx
		jnz	short loc_408890
		cmp	[eax], ebx
		jge	loc_408983

loc_408890:				; CODE XREF: sub_40885C+2Aj
		mov	ecx, [eax]
		mov	esi, [ebp+0Ch]
		test	ecx, ecx
		js	short loc_40889E
		add	esi, 0Ch
		add	esi, edx

loc_40889E:				; CODE XREF: sub_40885C+3Bj
		mov	[ebp-4], ebx
		mov	edi, [ebp+14h]
		test	cl, cl
		jns	short loc_4088C8
		test	byte ptr [edi],	10h
		jz	short loc_4088C8
		mov	eax, dword_42D4EC
		mov	[ebp-1Ch], eax
		test	eax, eax
		jz	short loc_4088C8
		mov	ecx, eax
		call	ds:off_41D12C
		call	dword ptr [ebp-1Ch]
		mov	ecx, eax
		jmp	short loc_4088D3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4088C8:				; CODE XREF: sub_40885C+4Aj
					; sub_40885C+4Fj ...
		mov	eax, [ebp+8]
		test	cl, 8
		jz	short loc_4088EC
		mov	ecx, [eax+18h]

loc_4088D3:				; CODE XREF: sub_40885C+6Aj
		test	ecx, ecx
		jz	loc_408995
		test	esi, esi
		jz	loc_408995
		mov	[esi], ecx
		lea	eax, [edi+8]
		push	eax
		push	ecx
		jmp	short loc_408923
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4088EC:				; CODE XREF: sub_40885C+72j
		test	byte ptr [edi],	1
		jz	short loc_40892E
		cmp	dword ptr [eax+18h], 0
		jz	loc_408995
		test	esi, esi
		jz	loc_408995
		push	dword ptr [edi+14h]
		push	dword ptr [eax+18h]
		push	esi
		call	loc_406DB0
		add	esp, 0Ch
		cmp	dword ptr [edi+14h], 4
		jnz	short loc_40896F
		cmp	dword ptr [esi], 0
		jz	short loc_40896F
		lea	eax, [edi+8]
		push	eax
		push	dword ptr [esi]

loc_408923:				; CODE XREF: sub_40885C+8Ej
		call	sub_40669B
		pop	ecx
		pop	ecx
		mov	[esi], eax
		jmp	short loc_40896F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40892E:				; CODE XREF: sub_40885C+93j
		cmp	[edi+18h], ebx
		jnz	short loc_408959
		mov	ecx, [eax+18h]
		test	ecx, ecx
		jz	short loc_408995
		test	esi, esi
		jz	short loc_408995
		push	dword ptr [edi+14h]
		lea	eax, [edi+8]
		push	eax
		push	ecx
		call	sub_40669B
		pop	ecx
		pop	ecx
		push	eax
		push	esi
		call	loc_406DB0
		add	esp, 0Ch
		jmp	short loc_40896F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408959:				; CODE XREF: sub_40885C+D5j
		cmp	[eax+18h], ebx
		jz	short loc_408995
		test	esi, esi
		jz	short loc_408995
		test	byte ptr [edi],	4
		push	0
		pop	ebx
		setnz	bl
		inc	ebx
		mov	[ebp-20h], ebx

loc_40896F:				; CODE XREF: sub_40885C+BAj
					; sub_40885C+BFj ...
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		mov	eax, ebx
		jmp	short loc_408985
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40897A:				; DATA XREF: .rdata:0042AF14o
		xor	eax, eax
		inc	eax
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40897E:				; DATA XREF: .rdata:0042AF18o
		mov	esp, [ebp-18h]
		jmp	short loc_408995
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408983:				; CODE XREF: sub_40885C+16j
					; sub_40885C+1Fj ...
		xor	eax, eax

loc_408985:				; CODE XREF: sub_40885C+11Cj
		mov	ecx, [ebp-10h]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408995:				; CODE XREF: sub_40885C+79j
					; sub_40885C+81j ...
		call	sub_409C4B
		int	3		; Trap to Debugger
sub_40885C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40899B	proc near		; CODE XREF: sub_408A34+1Ap
		push	8
		push	offset dword_42AF20
		call	sub_405FF0
		mov	edx, [ebp+10h]
		mov	ecx, [ebp+0Ch]
		cmp	dword ptr [edx], 0
		jge	short loc_4089B6
		mov	edi, ecx
		jmp	short loc_4089BC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4089B6:				; CODE XREF: sub_40899B+15j
		lea	edi, [ecx+0Ch]
		add	edi, [edx+8]

loc_4089BC:				; CODE XREF: sub_40899B+19j
		and	dword ptr [ebp-4], 0
		mov	esi, [ebp+14h]
		push	esi
		push	edx
		push	ecx
		mov	ebx, [ebp+8]
		push	ebx
		call	sub_40885C
		add	esp, 10h
		sub	eax, 1
		jz	short loc_4089F8
		sub	eax, 1
		jnz	short loc_408A10
		push	1
		lea	eax, [esi+8]
		push	eax
		push	dword ptr [ebx+18h]
		call	sub_40669B
		pop	ecx
		pop	ecx
		push	eax
		push	dword ptr [esi+18h]
		push	edi
		call	sub_409527
		jmp	short loc_408A10
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4089F8:				; CODE XREF: sub_40899B+3Aj
		lea	eax, [esi+8]
		push	eax
		push	dword ptr [ebx+18h]
		call	sub_40669B
		pop	ecx
		pop	ecx
		push	eax
		push	dword ptr [esi+18h]
		push	edi
		call	sub_409517

loc_408A10:				; CODE XREF: sub_40899B+3Fj
					; sub_40899B+5Bj
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		mov	ecx, [ebp-10h]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_40899B	endp ; sp =  4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_408A27	proc near		; DATA XREF: .rdata:0042AF34o
		xor	eax, eax
		inc	eax
		retn
sub_408A27	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_408A2B	proc near		; DATA XREF: .rdata:0042AF38o
		mov	esp, [ebp-18h]
		call	sub_409C4B
		int	3		; Trap to Debugger
sub_408A2B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_408A34	proc near		; CODE XREF: sub_408AB4+282p
					; sub_408E42+F1p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h
arg_24		= dword	ptr  2Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_18], 0
		push	ebx
		mov	ebx, [ebp+arg_14]
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		jz	short loc_408A56
		push	[ebp+arg_18]
		push	ebx
		push	edi
		push	[ebp+arg_0]
		call	sub_40899B
		add	esp, 10h

loc_408A56:				; CODE XREF: sub_408A34+10j
		mov	eax, [ebp+arg_24]
		test	eax, eax
		jnz	short loc_408A5F
		mov	eax, edi

loc_408A5F:				; CODE XREF: sub_408A34+27j
		push	[ebp+arg_0]
		push	eax
		call	sub_406408
		mov	esi, [ebp+arg_1C]
		push	dword ptr [esi]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	edi
		call	sub_409395
		mov	eax, [esi+4]
		inc	eax
		push	eax
		push	[ebp+arg_10]
		push	edi
		call	sub_409AE0
		push	100h
		push	[ebp+arg_20]
		push	dword ptr [ebx+0Ch]
		push	[ebp+arg_10]
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	sub_409135
		add	esp, 38h
		test	eax, eax
		jz	short loc_408AAF
		push	edi
		push	eax
		call	sub_4063D8

loc_408AAF:				; CODE XREF: sub_408A34+72j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_408A34	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_408AB4	proc near		; CODE XREF: sub_408FE1+F2p

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= byte ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		sub	esp, 54h
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_10]
		xor	ebx, ebx
		push	edi
		push	[ebp+arg_C]
		mov	byte ptr [ebp+var_28], bl
		push	[ebp+arg_4]
		mov	[ebp+var_1], bl
		call	sub_409AC3
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	eax, 0FFFFFFFFh
		jl	loc_408E3C
		cmp	eax, [edi+4]
		jge	loc_408E3C
		mov	esi, [ebp+arg_0]
		cmp	dword ptr [esi], 0E06D7363h
		jnz	loc_408BF4
		cmp	dword ptr [esi+10h], 3
		jnz	loc_408BF4
		cmp	dword ptr [esi+14h], 19930520h
		jz	short loc_408B24
		cmp	dword ptr [esi+14h], 19930521h
		jz	short loc_408B24
		cmp	dword ptr [esi+14h], 19930522h
		jnz	loc_408BF4

loc_408B24:				; CODE XREF: sub_408AB4+58j
					; sub_408AB4+61j
		cmp	[esi+1Ch], ebx
		jnz	loc_408BF4
		call	sub_408737
		cmp	[eax+10h], ebx
		jz	loc_408DD8
		call	sub_408737
		mov	esi, [eax+10h]
		call	sub_408737
		mov	byte ptr [ebp+var_28], 1
		mov	eax, [eax+14h]
		mov	[ebp+var_C], eax
		test	esi, esi
		jz	loc_408E3C
		cmp	dword ptr [esi], 0E06D7363h
		jnz	short loc_408B8C
		cmp	dword ptr [esi+10h], 3
		jnz	short loc_408B8C
		cmp	dword ptr [esi+14h], 19930520h
		jz	short loc_408B83
		cmp	dword ptr [esi+14h], 19930521h
		jz	short loc_408B83
		cmp	dword ptr [esi+14h], 19930522h
		jnz	short loc_408B8C

loc_408B83:				; CODE XREF: sub_408AB4+BBj
					; sub_408AB4+C4j
		cmp	[esi+1Ch], ebx
		jz	loc_408E3C

loc_408B8C:				; CODE XREF: sub_408AB4+ACj
					; sub_408AB4+B2j ...
		call	sub_408737
		cmp	[eax+1Ch], ebx
		jz	short loc_408BFC
		call	sub_408737
		mov	eax, [eax+1Ch]
		mov	[ebp+var_1C], eax
		call	sub_408737
		push	[ebp+var_1C]
		push	esi
		mov	[eax+1Ch], ebx
		call	sub_40947D
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_408BFC
		mov	edi, [ebp+var_1C]
		cmp	[edi], ebx
		jle	loc_408E3C
		mov	ecx, ebx
		mov	[ebp+var_1C], ebx

loc_408BC8:				; CODE XREF: sub_408AB4+139j
		mov	eax, [edi+4]
		push	offset off_42CC20
		mov	ecx, [ecx+eax+4]
		call	sub_409116
		test	al, al
		jnz	loc_408DDD
		mov	ecx, [ebp+var_1C]
		inc	ebx
		add	ecx, 10h
		mov	[ebp+var_1C], ecx
		cmp	ebx, [edi]
		jl	short loc_408BC8
		jmp	loc_408E3C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408BF4:				; CODE XREF: sub_408AB4+41j
					; sub_408AB4+4Bj ...
		mov	edx, [ebp+arg_8]
		mov	[ebp+var_C], edx
		jmp	short loc_408C02
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408BFC:				; CODE XREF: sub_408AB4+E0j
					; sub_408AB4+102j
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+var_8]

loc_408C02:				; CODE XREF: sub_408AB4+146j
		mov	ecx, [ebp+arg_C]
		mov	[ebp+var_44], edi
		mov	[ebp+var_40], ecx
		cmp	dword ptr [esi], 0E06D7363h
		jnz	loc_408DAA
		cmp	dword ptr [esi+10h], 3
		jnz	loc_408DAA
		cmp	dword ptr [esi+14h], 19930520h
		jz	short loc_408C40
		cmp	dword ptr [esi+14h], 19930521h
		jz	short loc_408C40
		cmp	dword ptr [esi+14h], 19930522h
		jnz	loc_408DAA

loc_408C40:				; CODE XREF: sub_408AB4+174j
					; sub_408AB4+17Dj
		cmp	[edi+0Ch], ebx
		jbe	loc_408D55
		push	[ebp+arg_18]
		push	eax
		lea	eax, [ebp+var_44]
		push	eax
		lea	eax, [ebp+var_54]
		push	eax
		call	sub_40621D
		mov	edx, [ebp+var_50]
		add	esp, 10h
		mov	eax, [ebp+var_54]
		mov	[ebp+var_2C], eax
		mov	[ebp+var_18], edx
		cmp	edx, [ebp+var_48]
		jnb	loc_408D55
		mov	ecx, [ebp+var_8]
		imul	eax, edx, 14h
		mov	[ebp+var_1C], eax

loc_408C7B:				; CODE XREF: sub_408AB4+29Bj
		mov	eax, [ebp+var_2C]
		mov	eax, [eax]
		mov	eax, [eax+10h]
		add	eax, [ebp+var_1C]
		mov	[ebp+var_3C], eax
		cmp	[eax], ecx
		jg	loc_408D44
		cmp	ecx, [eax+4]
		jg	loc_408D44
		mov	edi, [eax+10h]
		mov	eax, [eax+0Ch]
		mov	[ebp+var_10], edi
		mov	edi, [ebp+arg_10]
		mov	[ebp+var_34], eax
		mov	[ebp+var_24], ebx
		test	eax, eax
		jz	loc_408D44
		mov	eax, [esi+1Ch]
		mov	eax, [eax+0Ch]
		mov	edx, [eax]
		add	eax, 4
		mov	[ebp+var_30], edx
		mov	[ebp+var_38], eax

loc_408CC5:				; CODE XREF: sub_408AB4+25Dj
		mov	ecx, eax
		mov	eax, edx
		mov	[ebp+var_14], ecx
		mov	[ebp+var_20], eax
		test	eax, eax
		jle	short loc_408CFE

loc_408CD3:				; CODE XREF: sub_408AB4+245j
		push	dword ptr [esi+1Ch]
		push	dword ptr [ecx]
		push	[ebp+var_10]
		call	sub_408F53
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_408D13
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_14]
		dec	eax
		add	ecx, 4
		mov	[ebp+var_20], eax
		mov	[ebp+var_14], ecx
		test	eax, eax
		jg	short loc_408CD3
		mov	edx, [ebp+var_30]

loc_408CFE:				; CODE XREF: sub_408AB4+21Dj
		mov	eax, [ebp+var_24]
		add	[ebp+var_10], 10h
		inc	eax
		mov	[ebp+var_24], eax
		cmp	eax, [ebp+var_34]
		jz	short loc_408D3E
		mov	eax, [ebp+var_38]
		jmp	short loc_408CC5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408D13:				; CODE XREF: sub_408AB4+231j
		push	[ebp+var_28]
		mov	eax, [ebp+var_14]
		push	[ebp+arg_1C]
		mov	[ebp+var_1], 1
		push	[ebp+arg_18]
		push	[ebp+var_3C]
		push	dword ptr [eax]
		push	[ebp+var_10]
		push	edi
		push	[ebp+arg_C]
		push	[ebp+var_C]
		push	[ebp+arg_4]
		push	esi
		call	sub_408A34
		add	esp, 2Ch

loc_408D3E:				; CODE XREF: sub_408AB4+258j
		mov	edx, [ebp+var_18]
		mov	ecx, [ebp+var_8]

loc_408D44:				; CODE XREF: sub_408AB4+1D7j
					; sub_408AB4+1E0j ...
		add	[ebp+var_1C], 14h
		inc	edx
		mov	[ebp+var_18], edx
		cmp	edx, [ebp+var_48]
		jb	loc_408C7B

loc_408D55:				; CODE XREF: sub_408AB4+18Fj
					; sub_408AB4+1B8j
		cmp	[ebp+arg_14], bl
		jz	short loc_408D64
		push	1
		push	esi
		call	sub_4065C8
		pop	ecx
		pop	ecx

loc_408D64:				; CODE XREF: sub_408AB4+2A4j
		cmp	[ebp+var_1], bl
		jnz	short loc_408DCE
		mov	eax, [edi]
		and	eax, 1FFFFFFFh
		cmp	eax, 19930521h
		jb	short loc_408DCE
		cmp	[edi+1Ch], ebx
		jnz	short loc_408D8B
		mov	eax, [edi+20h]
		shr	eax, 2
		test	al, 1
		jz	short loc_408DCE
		cmp	[ebp+arg_18], ebx
		jnz	short loc_408DCE

loc_408D8B:				; CODE XREF: sub_408AB4+2C6j
		mov	eax, [edi+20h]
		shr	eax, 2
		test	al, 1
		jnz	loc_408E3C
		push	dword ptr [edi+1Ch]
		push	esi
		call	sub_40947D
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_408DFD
		jmp	short loc_408DCE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408DAA:				; CODE XREF: sub_408AB4+15Dj
					; sub_408AB4+167j ...
		cmp	[edi+0Ch], ebx
		jbe	short loc_408DCE
		cmp	[ebp+arg_14], bl
		jnz	loc_408E3C
		push	[ebp+arg_1C]
		push	[ebp+arg_18]
		push	eax
		push	edi
		push	ecx
		push	edx
		push	[ebp+arg_4]
		push	esi
		call	sub_408E42
		add	esp, 20h

loc_408DCE:				; CODE XREF: sub_408AB4+2B3j
					; sub_408AB4+2C1j ...
		call	sub_408737
		cmp	[eax+1Ch], ebx
		jnz	short loc_408E3C

loc_408DD8:				; CODE XREF: sub_408AB4+81j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408DDD:				; CODE XREF: sub_408AB4+127j
		push	1
		push	esi
		call	sub_4065C8
		pop	ecx
		pop	ecx
		lea	ecx, [ebp+var_50]
		call	sub_4090FE
		push	offset dword_42AF3C
		lea	eax, [ebp+var_50]
		push	eax
		call	sub_406D34

loc_408DFD:				; CODE XREF: sub_408AB4+2F2j
		call	sub_408737
		mov	[eax+10h], esi
		call	sub_408737
		mov	ecx, [ebp+var_C]
		mov	[eax+14h], ecx
		mov	eax, [ebp+arg_1C]
		test	eax, eax
		jnz	short loc_408E1A
		mov	eax, [ebp+arg_4]

loc_408E1A:				; CODE XREF: sub_408AB4+361j
		push	esi
		push	eax
		call	sub_406408
		push	edi
		push	[ebp+arg_C]
		push	[ebp+arg_4]
		call	sub_40937D
		push	edi
		call	sub_40953A
		add	esp, 10h
		push	eax
		call	sub_4092F9

loc_408E3C:				; CODE XREF: sub_408AB4+29j
					; sub_408AB4+32j ...
		call	sub_409C4B
		int	3		; Trap to Debugger
sub_408AB4	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_408E42	proc near		; CODE XREF: sub_408AB4+312p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	dword ptr [edi], 80000003h
		jz	short loc_408EA8
		push	ebx
		push	esi
		call	sub_408737
		mov	ebx, [ebp+arg_10]
		cmp	dword ptr [eax+8], 0
		jz	short loc_408EAB
		push	0
		call	ds:EncodePointer
		mov	esi, eax
		call	sub_408737
		cmp	[eax+8], esi
		jz	short loc_408EAB
		cmp	dword ptr [edi], 0E0434F4Dh
		jz	short loc_408EAB
		cmp	dword ptr [edi], 0E0434352h
		mov	esi, [ebp+arg_C]
		jz	short loc_408EAE
		push	[ebp+arg_1C]
		push	[ebp+arg_18]
		push	ebx
		push	esi
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	edi
		call	sub_4062FD
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_408EAE

loc_408EA6:				; CODE XREF: sub_408E42+9Ej
					; sub_408E42+106j
		pop	esi
		pop	ebx

loc_408EA8:				; CODE XREF: sub_408E42+10j
		pop	edi
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408EAB:				; CODE XREF: sub_408E42+20j
					; sub_408E42+34j ...
		mov	esi, [ebp+arg_C]

loc_408EAE:				; CODE XREF: sub_408E42+47j
					; sub_408E42+62j
		mov	[ebp+var_10], ebx
		mov	[ebp+var_C], esi
		cmp	dword ptr [ebx+0Ch], 0
		jbe	loc_408F4D
		push	[ebp+arg_18]
		lea	eax, [ebp+var_10]
		push	[ebp+arg_14]
		push	eax
		lea	eax, [ebp+var_20]
		push	eax
		call	sub_40621D
		mov	esi, [ebp+var_1C]
		add	esp, 10h
		mov	ecx, [ebp+var_20]
		mov	[ebp+var_4], ecx
		cmp	esi, [ebp+var_14]
		jnb	short loc_408EA6
		imul	eax, esi, 14h
		mov	[ebp+var_8], eax

loc_408EE8:				; CODE XREF: sub_408E42+104j
		mov	eax, [ecx]
		mov	edx, [eax+10h]
		add	edx, [ebp+var_8]
		mov	eax, [ebp+arg_14]
		cmp	[edx], eax
		jg	short loc_408F3E
		cmp	eax, [edx+4]
		jg	short loc_408F3E
		mov	ecx, [edx+10h]
		mov	eax, [edx+0Ch]
		add	ecx, 0FFFFFFF0h
		shl	eax, 4
		add	eax, ecx
		mov	ecx, [eax+4]
		test	ecx, ecx
		jz	short loc_408F17
		cmp	byte ptr [ecx+8], 0
		jnz	short loc_408F3B

loc_408F17:				; CODE XREF: sub_408E42+CDj
		test	byte ptr [eax],	40h
		jnz	short loc_408F3B
		push	1
		push	[ebp+arg_1C]
		push	[ebp+arg_18]
		push	edx
		push	0
		push	eax
		push	ebx
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	edi
		call	sub_408A34
		add	esp, 2Ch

loc_408F3B:				; CODE XREF: sub_408E42+D3j
					; sub_408E42+D8j
		mov	ecx, [ebp+var_4]

loc_408F3E:				; CODE XREF: sub_408E42+B3j
					; sub_408E42+B8j
		add	[ebp+var_8], 14h
		inc	esi
		cmp	esi, [ebp+var_14]
		jb	short loc_408EE8
		jmp	loc_408EA6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408F4D:				; CODE XREF: sub_408E42+76j
		call	sub_409C4B
		int	3		; Trap to Debugger
sub_408E42	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_408F53	proc near		; CODE XREF: sub_408AB4+227p
					; sub_40947D+55p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		push	ebx
		push	esi
		push	edi
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_408FD9
		lea	ecx, [eax+8]
		cmp	byte ptr [ecx],	0
		jz	short loc_408FD9
		test	byte ptr [edx],	80h
		mov	edi, [ebp+arg_4]
		jz	short loc_408F78
		test	byte ptr [edi],	10h
		jnz	short loc_408FD9

loc_408F78:				; CODE XREF: sub_408F53+1Ej
		mov	ebx, [edi+4]
		xor	esi, esi
		cmp	eax, ebx
		jz	short loc_408FB1
		lea	eax, [ebx+8]

loc_408F84:				; CODE XREF: sub_408F53+4Bj
		mov	bl, [ecx]
		cmp	bl, [eax]
		jnz	short loc_408FA4
		test	bl, bl
		jz	short loc_408FA0
		mov	bl, [ecx+1]
		cmp	bl, [eax+1]
		jnz	short loc_408FA4
		add	ecx, 2
		add	eax, 2
		test	bl, bl
		jnz	short loc_408F84

loc_408FA0:				; CODE XREF: sub_408F53+39j
		mov	eax, esi
		jmp	short loc_408FA9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408FA4:				; CODE XREF: sub_408F53+35j
					; sub_408F53+41j
		sbb	eax, eax
		or	eax, 1

loc_408FA9:				; CODE XREF: sub_408F53+4Fj
		test	eax, eax
		jz	short loc_408FB1
		xor	eax, eax
		jmp	short loc_408FDC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408FB1:				; CODE XREF: sub_408F53+2Cj
					; sub_408F53+58j
		test	byte ptr [edi],	2
		jz	short loc_408FBB
		test	byte ptr [edx],	8
		jz	short loc_408FD5

loc_408FBB:				; CODE XREF: sub_408F53+61j
		mov	eax, [ebp+arg_8]
		test	byte ptr [eax],	1
		jz	short loc_408FC8
		test	byte ptr [edx],	1
		jz	short loc_408FD5

loc_408FC8:				; CODE XREF: sub_408F53+6Ej
		test	byte ptr [eax],	2
		jz	short loc_408FD2
		test	byte ptr [edx],	2
		jz	short loc_408FD5

loc_408FD2:				; CODE XREF: sub_408F53+78j
		xor	esi, esi
		inc	esi

loc_408FD5:				; CODE XREF: sub_408F53+66j
					; sub_408F53+73j ...
		mov	eax, esi
		jmp	short loc_408FDC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_408FD9:				; CODE XREF: sub_408F53+Ej
					; sub_408F53+16j ...
		xor	eax, eax
		inc	eax

loc_408FDC:				; CODE XREF: sub_408F53+5Cj
					; sub_408F53+84j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_408F53	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_408FE1	proc near		; CODE XREF: sub_40645B+26p
					; sub_4064F5+52p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= byte ptr  24h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		push	[ebp+arg_8]
		call	sub_40959C
		pop	ecx
		call	sub_408737
		mov	ecx, [ebp+arg_10]
		xor	esi, esi
		mov	edx, [ebp+arg_0]
		mov	ebx, 1FFFFFFFh
		mov	edi, 19930522h
		cmp	[eax+20h], esi
		jnz	short loc_40902E
		cmp	dword ptr [edx], 0E06D7363h
		jz	short loc_40902E
		cmp	dword ptr [edx], 80000026h
		jz	short loc_40902E
		mov	eax, [ecx]
		and	eax, ebx
		cmp	eax, edi
		jb	short loc_40902E
		test	byte ptr [ecx+20h], 1
		jnz	loc_4090DB

loc_40902E:				; CODE XREF: sub_408FE1+29j
					; sub_408FE1+31j ...
		test	byte ptr [edx+4], 66h
		jz	short loc_40905A
		cmp	[ecx+4], esi
		jz	loc_4090DB
		cmp	[ebp+arg_14], esi
		jnz	loc_4090DB
		push	ecx
		push	[ebp+arg_C]
		push	[ebp+arg_4]
		call	sub_40937D
		add	esp, 0Ch
		jmp	loc_4090DB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40905A:				; CODE XREF: sub_408FE1+51j
		cmp	[ecx+0Ch], esi
		jnz	short loc_40907D
		mov	eax, [ecx]
		and	eax, ebx
		cmp	eax, 19930521h
		jb	short loc_40906F
		cmp	[ecx+1Ch], esi
		jnz	short loc_40907D

loc_40906F:				; CODE XREF: sub_408FE1+87j
		cmp	eax, edi
		jb	short loc_4090DB
		mov	eax, [ecx+20h]
		shr	eax, 2
		test	al, 1
		jz	short loc_4090DB

loc_40907D:				; CODE XREF: sub_408FE1+7Cj
					; sub_408FE1+8Cj
		cmp	dword ptr [edx], 0E06D7363h
		jnz	short loc_4090BF
		cmp	dword ptr [edx+10h], 3
		jb	short loc_4090BF
		cmp	[edx+14h], edi
		jbe	short loc_4090BF
		mov	eax, [edx+1Ch]
		mov	esi, [eax+8]
		test	esi, esi
		jz	short loc_4090BF
		movzx	eax, [ebp+arg_1C]
		push	eax
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	ecx
		push	[ebp+arg_C]
		mov	ecx, esi
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	edx
		call	ds:off_41D12C
		call	esi
		add	esp, 20h
		jmp	short loc_4090DE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4090BF:				; CODE XREF: sub_408FE1+A2j
					; sub_408FE1+A8j ...
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	dword ptr [ebp+arg_1C]
		push	ecx
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	edx
		call	sub_408AB4
		add	esp, 20h

loc_4090DB:				; CODE XREF: sub_408FE1+47j
					; sub_408FE1+56j ...
		xor	eax, eax
		inc	eax

loc_4090DE:				; CODE XREF: sub_408FE1+DCj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_408FE1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4090E3	proc near		; DATA XREF: .rdata:0042AF70o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	sub_401120
		mov	dword ptr [esi], offset	off_4203EC
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_4090E3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4090FE	proc near		; CODE XREF: sub_408AB4+336p
		and	dword ptr [ecx+4], 0
		mov	eax, ecx
		and	dword ptr [ecx+8], 0
		mov	dword ptr [ecx+4], offset aBadException	; "bad exception"
		mov	dword ptr [ecx], offset	off_4203EC
		retn
sub_4090FE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409116	proc near		; CODE XREF: sub_408AB4+120p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		add	eax, 4
		push	eax
		lea	eax, [ecx+4]
		push	eax
		call	sub_4086DF
		neg	eax
		pop	ecx
		sbb	al, al
		pop	ecx
		inc	al
		pop	ebp
		retn	4
sub_409116	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409135	proc near		; CODE XREF: sub_408A34+68p
		push	3Ch
		push	offset dword_42AE80
		call	sub_405FF0
		mov	eax, [ebp+18h]
		mov	[ebp-1Ch], eax
		and	dword ptr [ebp-40h], 0
		mov	ebx, [ebp+0Ch]
		mov	eax, [ebx-4]
		mov	[ebp-30h], eax
		mov	edi, [ebp+8]
		push	dword ptr [edi+18h]
		lea	eax, [ebp-4Ch]
		push	eax
		call	sub_40648C
		pop	ecx
		pop	ecx
		mov	[ebp-34h], eax
		call	sub_408737
		mov	eax, [eax+10h]
		mov	[ebp-38h], eax
		call	sub_408737
		mov	eax, [eax+14h]
		mov	[ebp-3Ch], eax
		call	sub_408737
		mov	[eax+10h], edi
		call	sub_408737
		mov	ecx, [ebp+10h]
		mov	[eax+14h], ecx
		and	dword ptr [ebp-4], 0
		xor	eax, eax
		inc	eax
		mov	[ebp-44h], eax
		mov	[ebp-4], eax
		push	dword ptr [ebp+20h]
		push	dword ptr [ebp+1Ch]
		push	dword ptr [ebp+18h]
		push	dword ptr [ebp+14h]
		push	ebx
		call	sub_40629F
		add	esp, 14h
		mov	ebx, eax
		mov	[ebp-1Ch], ebx
		and	dword ptr [ebp-4], 0
		jmp	loc_409252
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4091C1:				; DATA XREF: .rdata:0042AEA0o
		push	dword ptr [ebp-14h]
		call	loc_409333
		pop	ecx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4091CB:				; DATA XREF: .rdata:0042AEA4o
		mov	esp, [ebp-18h]
		call	sub_408737
		and	dword ptr [eax+20h], 0
		mov	edi, [ebp+14h]
		mov	eax, [edi+8]
		mov	[ebp-28h], eax
		push	edi
		push	dword ptr [ebp+18h]
		mov	ebx, [ebp+0Ch]
		push	ebx
		call	sub_409AC3
		add	esp, 0Ch
		mov	[ebp-20h], eax
		mov	edx, [edi+10h]
		xor	ecx, ecx
		mov	[ebp-2Ch], ecx
		cmp	[edi+0Ch], ecx
		jbe	short loc_40923A

loc_409200:				; CODE XREF: sub_409135+103j
		imul	ebx, ecx, 14h
		mov	[ebp-24h], ebx
		cmp	eax, [ebx+edx+4]
		mov	ebx, [ebp+0Ch]
		jle	short loc_409231
		mov	edi, [ebp-24h]
		cmp	eax, [edi+edx+8]
		mov	edi, [ebp+14h]
		jg	short loc_409231
		imul	eax, ecx, 14h
		mov	eax, [eax+edx+4]
		inc	eax
		mov	[ebp-20h], eax
		mov	ecx, [ebp-28h]
		mov	eax, [ecx+eax*8]
		mov	[ebp-20h], eax
		jmp	short loc_40923A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409231:				; CODE XREF: sub_409135+D8j
					; sub_409135+E4j
		inc	ecx
		mov	[ebp-2Ch], ecx
		cmp	ecx, [edi+0Ch]
		jb	short loc_409200

loc_40923A:				; CODE XREF: sub_409135+C9j
					; sub_409135+FAj
		push	eax
		push	edi
		push	0
		push	ebx
		call	sub_409395
		add	esp, 10h
		xor	ebx, ebx
		mov	[ebp-1Ch], ebx
		and	[ebp-4], ebx
		mov	edi, [ebp+8]

loc_409252:				; CODE XREF: sub_409135+87j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		mov	dword ptr [ebp-44h], 0
		call	sub_40927D
		mov	eax, ebx
		mov	ecx, [ebp-10h]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_409135	endp ; sp =  4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409277	proc near		; DATA XREF: .rdata:0042AE98o
		mov	edi, [ebp+8]
		mov	ebx, [ebp-1Ch]
sub_409277	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40927D	proc near		; CODE XREF: sub_409135+12Bp
		mov	eax, [ebp-30h]
		mov	ecx, [ebp+0Ch]
		mov	[ecx-4], eax
		push	dword ptr [ebp-34h]
		call	sub_4064B0
		pop	ecx
		call	sub_408737
		mov	ecx, [ebp-38h]
		mov	[eax+10h], ecx
		call	sub_408737
		mov	ecx, [ebp-3Ch]
		mov	[eax+14h], ecx
		cmp	dword ptr [edi], 0E06D7363h
		jnz	short locret_4092F8
		cmp	dword ptr [edi+10h], 3
		jnz	short locret_4092F8
		cmp	dword ptr [edi+14h], 19930520h
		jz	short loc_4092CE
		cmp	dword ptr [edi+14h], 19930521h
		jz	short loc_4092CE
		cmp	dword ptr [edi+14h], 19930522h
		jnz	short locret_4092F8

loc_4092CE:				; CODE XREF: sub_40927D+3Dj
					; sub_40927D+46j
		cmp	dword ptr [ebp-40h], 0
		jnz	short locret_4092F8
		test	ebx, ebx
		jz	short locret_4092F8
		push	dword ptr [edi+18h]
		call	sub_406675
		pop	ecx
		test	eax, eax
		jz	short locret_4092F8
		cmp	dword ptr [ebp-44h], 0
		setnz	al
		movzx	eax, al
		push	eax
		push	edi
		call	sub_4065C8
		pop	ecx
		pop	ecx

locret_4092F8:				; CODE XREF: sub_40927D+2Ej
					; sub_40927D+34j ...
		retn
sub_40927D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4092F9	proc near		; CODE XREF: sub_408AB4+383p

var_4		= dword	ptr -4
arg_4		= dword	ptr  8

		push	4
		mov	eax, offset loc_41C574
		call	sub_405940
		call	sub_408737
		cmp	dword ptr [eax+1Ch], 0
		jnz	short loc_40932D
		and	[ebp+var_4], 0
		call	sub_409AA6

loc_409319:				; DATA XREF: .rdata:0042AEB4o
		call	sub_408737
		mov	ecx, [ebp+arg_4]
		push	0
		push	0
		mov	[eax+1Ch], ecx
		call	sub_406D34

loc_40932D:				; CODE XREF: sub_4092F9+15j
		call	sub_409C4B
		int	3		; Trap to Debugger

loc_409333:				; CODE XREF: sub_409135+8Fp
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		mov	eax, [eax]
		cmp	dword ptr [eax], 0E06D7363h
		jnz	short loc_409379
		cmp	dword ptr [eax+10h], 3
		jnz	short loc_409379
		cmp	dword ptr [eax+14h], 19930520h
		jz	short loc_409364
		cmp	dword ptr [eax+14h], 19930521h
		jz	short loc_409364
		cmp	dword ptr [eax+14h], 19930522h
		jnz	short loc_409379

loc_409364:				; CODE XREF: sub_4092F9+57j
					; sub_4092F9+60j
		cmp	dword ptr [eax+1Ch], 0
		jnz	short loc_409379
		call	sub_408737
		xor	ecx, ecx
		inc	ecx
		mov	[eax+20h], ecx
		mov	eax, ecx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409379:				; CODE XREF: sub_4092F9+48j
					; sub_4092F9+4Ej ...
		xor	eax, eax
		pop	ebp
		retn
sub_4092F9	endp ; sp = -4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40937D	proc near		; CODE XREF: sub_408AB4+374p
					; sub_408FE1+6Cp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_409395
		add	esp, 10h
		pop	ebp
		retn
sub_40937D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409395	proc near		; CODE XREF: sub_408A34+40p
					; sub_409135+10Ap ...

; FUNCTION CHUNK AT 00409477 SIZE 00000006 BYTES

		push	10h
		push	offset dword_42AE58
		call	sub_405FF0
		push	dword ptr [ebp+10h]
		push	dword ptr [ebp+0Ch]
		push	dword ptr [ebp+8]
		call	sub_409AC3
		add	esp, 0Ch
		mov	esi, eax
		mov	[ebp-1Ch], esi
		call	sub_408737
		inc	dword ptr [eax+18h]
		and	dword ptr [ebp-4], 0

loc_4093C3:				; CODE XREF: sub_409395+99j
		cmp	esi, [ebp+14h]
		jz	short loc_409430
		cmp	esi, 0FFFFFFFFh
		jle	loc_409477
		mov	edi, [ebp+10h]
		cmp	esi, [edi+4]
		jge	loc_409477
		mov	eax, [edi+8]
		mov	ecx, [eax+esi*8]
		mov	[ebp-20h], ecx
		mov	dword ptr [ebp-4], 1
		cmp	dword ptr [eax+esi*8+4], 0
		jz	short loc_409424
		push	ecx
		push	edi
		push	dword ptr [ebp+8]
		call	sub_409AE0
		add	esp, 0Ch
		push	103h
		push	dword ptr [ebp+8]
		mov	eax, [edi+8]
		push	dword ptr [eax+esi*8+4]
		call	sub_409550
		jmp	short loc_409424
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409417:				; DATA XREF: .rdata:0042AE78o
		push	dword ptr [ebp-14h]
		call	sub_4066C0
		pop	ecx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409421:				; DATA XREF: .rdata:0042AE7Co
		mov	esp, [ebp-18h]

loc_409424:				; CODE XREF: sub_409395+5Dj
					; sub_409395+80j
		and	dword ptr [ebp-4], 0
		mov	esi, [ebp-20h]
		mov	[ebp-1Ch], esi
		jmp	short loc_4093C3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409430:				; CODE XREF: sub_409395+31j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_409463
		cmp	esi, [ebp+14h]
		jnz	short loc_409477
		push	esi
		push	dword ptr [ebp+10h]
		push	dword ptr [ebp+8]
		call	sub_409AE0
		add	esp, 0Ch
		mov	ecx, [ebp-10h]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_409395	endp ; sp =  4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409460	proc near		; DATA XREF: .rdata:0042AE70o
		mov	esi, [ebp-1Ch]
sub_409460	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409463	proc near		; CODE XREF: sub_409395+A2p
		call	sub_408737
		cmp	dword ptr [eax+18h], 0
		jle	short locret_409476
		call	sub_408737
		dec	dword ptr [eax+18h]

locret_409476:				; CODE XREF: sub_409463+9j
		retn
sub_409463	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_409395

loc_409477:				; CODE XREF: sub_409395+36j
					; sub_409395+42j ...
		call	sub_409C4B
		int	3		; Trap to Debugger
; END OF FUNCTION CHUNK	FOR sub_409395

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40947D	proc near		; CODE XREF: sub_408AB4+F9p
					; sub_408AB4+2E9p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		test	esi, esi
		jz	loc_409511
		mov	edi, [esi]
		xor	ebx, ebx
		test	edi, edi
		jle	short loc_40950A
		mov	eax, [ebp+arg_0]
		mov	edx, ebx
		mov	[ebp+var_4], ebx
		mov	eax, [eax+1Ch]
		mov	eax, [eax+0Ch]
		mov	ecx, [eax]
		add	eax, 4
		mov	[ebp+var_10], ecx
		mov	[ebp+var_18], eax

loc_4094B2:				; CODE XREF: sub_40947D+8Bj
		mov	ecx, eax
		mov	eax, [ebp+var_10]
		mov	[ebp+var_C], ecx
		mov	[ebp+var_8], eax
		test	eax, eax
		jle	short loc_4094FC
		mov	eax, [esi+4]
		add	eax, edx
		mov	[ebp+var_14], eax

loc_4094C9:				; CODE XREF: sub_40947D+76j
		mov	edx, [ebp+arg_0]
		push	dword ptr [edx+1Ch]
		push	dword ptr [ecx]
		push	eax
		call	sub_408F53
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_4094F7
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_C]
		dec	eax
		add	ecx, 4
		mov	[ebp+var_8], eax
		test	eax, eax
		mov	[ebp+var_C], ecx
		mov	eax, [ebp+var_14]
		jg	short loc_4094C9
		jmp	short loc_4094F9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4094F7:				; CODE XREF: sub_40947D+5Fj
		mov	bl, 1

loc_4094F9:				; CODE XREF: sub_40947D+78j
		mov	edx, [ebp+var_4]

loc_4094FC:				; CODE XREF: sub_40947D+42j
		mov	eax, [ebp+var_18]
		add	edx, 10h
		mov	[ebp+var_4], edx
		sub	edi, 1
		jnz	short loc_4094B2

loc_40950A:				; CODE XREF: sub_40947D+1Aj
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409511:				; CODE XREF: sub_40947D+Ej
		call	sub_409C4B
		int	3		; Trap to Debugger
sub_40947D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409517	proc near		; CODE XREF: sub_40899B+70p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		call	[ebp+arg_4]
		pop	ebp
		retn	0Ch
sub_409517	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409527	proc near		; CODE XREF: sub_40899B+56p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_C]
		mov	ecx, [ebp+arg_0]
		push	[ebp+arg_8]
		call	[ebp+arg_4]
		pop	ebp
		retn	10h
sub_409527	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40953A	proc near		; CODE XREF: sub_408AB4+37Ap

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+1Ch]
		pop	ebp
		retn
sub_40953A	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409550	proc near		; CODE XREF: sub_40629F+4Ap
					; sub_409395+7Bp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 4
		push	ebx
		push	ecx
		mov	eax, [ebp+arg_4]
		add	eax, 0Ch
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		push	ebp
		push	[ebp+arg_8]
		mov	ecx, [ebp+arg_8]
		mov	ebp, [ebp+var_4]
		call	sub_409C00
		push	esi
		push	edi
		call	eax
		pop	edi
		pop	esi
		mov	ebx, ebp
		pop	ebp
		mov	ecx, [ebp+arg_8]
		push	ebp
		mov	ebp, ebx
		cmp	ecx, 100h
		jnz	short loc_40958F
		mov	ecx, 2

loc_40958F:				; CODE XREF: sub_409550+38j
		push	ecx
		call	sub_409C00
		pop	ebp
		pop	ecx
		pop	ebx
		leave
		retn	0Ch
sub_409550	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40959C	proc near		; CODE XREF: sub_408540+33p
					; sub_408FE1+9p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, ds:off_41D12C
		cmp	eax, offset nullsub_1
		jz	short loc_4095CA
		mov	ecx, large fs:18h
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0C4h]
		cmp	eax, [ecx+8]
		jb	short loc_4095C5
		cmp	eax, [ecx+4]
		jbe	short loc_4095CA

loc_4095C5:				; CODE XREF: sub_40959C+22j
		push	0Dh
		pop	ecx
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display

loc_4095CA:				; CODE XREF: sub_40959C+Dj
					; sub_40959C+27j
		pop	ebp
		retn
sub_40959C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4095CC	proc near		; CODE XREF: .text:004096EDp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, ds:off_41D12C
		cmp	eax, offset nullsub_1
		jz	short loc_4095F7
		mov	ecx, large fs:18h
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		cmp	eax, [ecx+8]
		jb	short loc_4095F2
		cmp	eax, [ecx+4]
		jbe	short loc_4095F7

loc_4095F2:				; CODE XREF: sub_4095CC+1Fj
		push	0Dh
		pop	ecx
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display

loc_4095F7:				; CODE XREF: sub_4095CC+Dj
					; sub_4095CC+24j
		pop	ebp
		retn
sub_4095CC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4095F9	proc near		; CODE XREF: sub_408697p
		mov	eax, dword_42C06C
		mov	dword_42D518, eax
		retn
sub_4095F9	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409610	proc near		; CODE XREF: sub_4096A0+2Dp
					; .text:00409704p ...

var_14		= dword	ptr -14h
arg_0		= dword	ptr  10h
arg_4		= dword	ptr  14h
arg_8		= dword	ptr  18h

		push	ebx
		push	esi
		push	edi
		mov	edx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_8]
		push	ebp
		push	edx
		push	eax
		push	ecx
		push	ecx
		push	offset sub_4096A0
		push	large dword ptr	fs:0
		mov	eax, dword_42C06C
		xor	eax, esp
		mov	[esp+1Ch+var_14], eax
		mov	large fs:0, esp

loc_409642:				; CODE XREF: sub_409610+64j
					; sub_409610+80j
		mov	eax, [esp+1Ch+arg_4]
		mov	ebx, [eax+8]
		mov	ecx, [esp+1Ch+arg_0]
		xor	ebx, [ecx]
		mov	esi, [eax+0Ch]
		cmp	esi, 0FFFFFFFEh
		jz	short loc_409692
		mov	edx, [esp+1Ch+arg_8]
		cmp	edx, 0FFFFFFFEh
		jz	short loc_409664
		cmp	esi, edx
		jbe	short loc_409692

loc_409664:				; CODE XREF: sub_409610+4Ej
		lea	esi, [esi+esi*2]
		lea	ebx, [ebx+esi*4+10h]
		mov	ecx, [ebx]
		mov	[eax+0Ch], ecx
		cmp	dword ptr [ebx+4], 0
		jnz	short loc_409642
		push	101h
		mov	eax, [ebx+8]
		call	sub_409C0C
		mov	ecx, 1
		mov	eax, [ebx+8]
		call	sub_409C2B
		jmp	short loc_409642
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409692:				; CODE XREF: sub_409610+45j
					; sub_409610+52j
		pop	large dword ptr	fs:0
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_409610	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4096A0	proc near		; DATA XREF: sub_409610+14o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		test	dword ptr [ecx+4], 6
		mov	eax, 1
		jz	short locret_4096E5
		mov	eax, [esp+arg_4]
		mov	ecx, [eax+8]
		xor	ecx, eax
		call	sub_40534D
		push	ebp
		mov	ebp, [eax+18h]
		push	dword ptr [eax+0Ch]
		push	dword ptr [eax+10h]
		push	dword ptr [eax+14h]
		call	sub_409610
		add	esp, 0Ch
		pop	ebp
		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_C]
		mov	[edx], eax
		mov	eax, 3

locret_4096E5:				; CODE XREF: sub_4096A0+10j
		retn
sub_4096A0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4
		push	ebp
		push	dword ptr [esp+8]
		call	sub_4095CC
		add	esp, 4
		mov	ecx, [esp+8]
		mov	ebp, [ecx]
		push	dword ptr [ecx+1Ch]
		push	dword ptr [ecx+18h]
		push	dword ptr [ecx+28h]
		call	sub_409610
		add	esp, 0Ch
		pop	ebp
		retn	4

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409710	proc near		; CODE XREF: sub_408540+7Bp
		push	ebp
		push	esi
		push	edi
		push	ebx
		mov	ebp, edx
		xor	eax, eax
		xor	ebx, ebx
		xor	edx, edx
		xor	esi, esi
		xor	edi, edi
		call	ecx
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_409710	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409728	proc near		; CODE XREF: sub_408540+151p
		mov	ebp, edx
		mov	esi, ecx
		mov	eax, ecx
		push	1
		call	sub_409C0C
		xor	eax, eax
		xor	ebx, ebx
		xor	ecx, ecx
		xor	edx, edx
		xor	edi, edi
		jmp	esi
sub_409728	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409744	proc near		; CODE XREF: sub_408540+11Bp
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		push	0
		push	edx
		push	offset loc_409759
		push	ecx
		call	ds:RtlUnwind

loc_409759:				; DATA XREF: sub_409744+9o
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_409744	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409760	proc near		; CODE XREF: sub_408540+B8p
					; sub_408540+132p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+arg_0]
		push	edx
		push	ecx
		push	[esp+8+arg_4]
		call	sub_409610
		add	esp, 0Ch
		pop	ebp
		retn	8
sub_409760	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409777	proc near		; CODE XREF: sub_408697+Ap
		push	esi
		push	edi
		mov	edi, offset stru_42D51C
		xor	esi, esi

loc_409780:				; CODE XREF: sub_409777+2Cj
		push	0		; int
		push	0FA0h		; dwSpinCount
		push	edi		; lpCriticalSection
		call	sub_409A04
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_4097A9
		inc	dword_42D534
		add	esi, 18h
		add	edi, 18h
		cmp	esi, 18h
		jb	short loc_409780
		mov	al, 1
		jmp	short loc_4097B0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4097A9:				; CODE XREF: sub_409777+1Bj
		call	sub_4097B3
		xor	al, al

loc_4097B0:				; CODE XREF: sub_409777+30j
		pop	edi
		pop	esi
		retn
sub_409777	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4097B3	proc near		; CODE XREF: sub_408697+1Fp
					; sub_4086C0+Ep ...
		push	esi
		mov	esi, dword_42D534
		test	esi, esi
		jz	short loc_4097DE
		imul	eax, esi, 18h
		push	edi
		lea	edi, dword_42D504[eax]

loc_4097C8:				; CODE XREF: sub_4097B3+28j
		push	edi		; lpCriticalSection
		call	ds:DeleteCriticalSection
		dec	dword_42D534
		sub	edi, 18h
		sub	esi, 1
		jnz	short loc_4097C8
		pop	edi

loc_4097DE:				; CODE XREF: sub_4097B3+9j
		mov	al, 1
		pop	esi
		retn
sub_4097B3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4097E2	proc near		; CODE XREF: sub_4098A6+37p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		jmp	loc_409892
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4097F1:				; CODE XREF: sub_4097E2+B3j
		mov	ebx, [edi]
		lea	eax, dword_42D538[ebx*4]
		mov	esi, [eax]
		mov	[ebp+var_4], eax
		test	esi, esi
		jz	short loc_40980E
		cmp	esi, 0FFFFFFFFh
		jz	loc_40988F
		jmp	short loc_40988B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40980E:				; CODE XREF: sub_4097E2+1Fj
		mov	ebx, ds:lpLibFileName[ebx*4]
		push	800h		; dwFlags
		push	0		; hFile
		push	ebx		; lpLibFileName
		call	ds:LoadLibraryExW
		mov	esi, eax
		test	esi, esi
		jnz	short loc_409879
		call	ds:GetLastError
		cmp	eax, 57h
		jnz	short loc_409869
		push	7
		push	offset aApiMs	; "api-ms-"
		push	ebx
		call	sub_40E958
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_409869
		push	7
		push	offset aExtMs	; "ext-ms-"
		push	ebx
		call	sub_40E958
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_409869
		push	esi		; dwFlags
		push	esi		; hFile
		push	ebx		; lpLibFileName
		call	ds:LoadLibraryExW
		mov	esi, eax
		jmp	short loc_40986B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409869:				; CODE XREF: sub_4097E2+50j
					; sub_4097E2+64j ...
		xor	esi, esi

loc_40986B:				; CODE XREF: sub_4097E2+85j
		test	esi, esi
		jnz	short loc_409879
		mov	ecx, [ebp+var_4]
		or	eax, 0FFFFFFFFh
		xchg	eax, [ecx]
		jmp	short loc_40988F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409879:				; CODE XREF: sub_4097E2+45j
					; sub_4097E2+8Bj
		mov	ecx, [ebp+var_4]
		mov	eax, esi
		xchg	eax, [ecx]
		test	eax, eax
		jz	short loc_40988B
		push	esi		; hLibModule
		call	ds:FreeLibrary

loc_40988B:				; CODE XREF: sub_4097E2+2Aj
					; sub_4097E2+A0j
		test	esi, esi
		jnz	short loc_4098A2

loc_40988F:				; CODE XREF: sub_4097E2+24j
					; sub_4097E2+95j
		add	edi, 4

loc_409892:				; CODE XREF: sub_4097E2+Aj
		cmp	edi, [ebp+arg_4]
		jnz	loc_4097F1
		xor	eax, eax

loc_40989D:				; CODE XREF: sub_4097E2+C2j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4098A2:				; CODE XREF: sub_4097E2+ABj
		mov	eax, esi
		jmp	short loc_40989D
sub_4097E2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_4098A6(int,LPCSTR lpProcName,int,int)
sub_4098A6	proc near		; CODE XREF: sub_409915+15p
					; sub_409950+15p ...

arg_0		= dword	ptr  8
lpProcName	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	edi
		lea	edi, dword_42D544[eax*4]
		mov	eax, [edi]
		mov	edx, dword_42C06C
		mov	ecx, edx
		and	ecx, 1Fh
		xor	edx, eax
		ror	edx, cl
		cmp	edx, 0FFFFFFFFh
		jnz	short loc_4098CE
		xor	eax, eax
		jmp	short loc_409912
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4098CE:				; CODE XREF: sub_4098A6+22j
		test	edx, edx
		jz	short loc_4098D6
		mov	eax, edx
		jmp	short loc_409912
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4098D6:				; CODE XREF: sub_4098A6+2Aj
		push	esi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		call	sub_4097E2
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_409905
		push	[ebp+lpProcName] ; lpProcName
		push	eax		; hModule
		call	ds:GetProcAddress
		mov	esi, eax
		test	esi, esi
		jz	short loc_409905
		push	esi
		call	sub_405615
		pop	ecx
		xchg	eax, [edi]
		mov	eax, esi
		jmp	short loc_409911
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409905:				; CODE XREF: sub_4098A6+40j
					; sub_4098A6+50j
		push	0FFFFFFFFh
		call	sub_405615
		pop	ecx
		xchg	eax, [edi]
		xor	eax, eax

loc_409911:				; CODE XREF: sub_4098A6+5Dj
		pop	esi

loc_409912:				; CODE XREF: sub_4098A6+26j
					; sub_4098A6+2Ej
		pop	edi
		pop	ebp
		retn
sub_4098A6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409915	proc near		; CODE XREF: sub_40880E+5p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	offset dword_4204C4 ; int
		push	offset dword_4204BC ; int
		push	offset aFlsalloc ; "FlsAlloc"
		push	0		; int
		call	sub_4098A6
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_409948
		push	[ebp+arg_0]
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		pop	esi
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409948:				; CODE XREF: sub_409915+21j
		pop	esi
		pop	ebp
		jmp	ds:TlsAlloc	; Allocate a thread local storage (TLS)	index
sub_409915	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_409950(DWORD dwTlsIndex)
sub_409950	proc near		; CODE XREF: sub_408841+Bp

dwTlsIndex	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	offset dword_4204CC ; int
		push	offset dword_4204C4 ; int
		push	offset aFlsfree	; "FlsFree"
		push	1		; int
		call	sub_4098A6
		add	esp, 10h
		mov	esi, eax
		push	[ebp+dwTlsIndex] ; dwTlsIndex
		test	esi, esi
		jz	short loc_409982
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		jmp	short loc_409988
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409982:				; CODE XREF: sub_409950+24j
		call	ds:TlsFree	; Release a thread local storage (TLS) index

loc_409988:				; CODE XREF: sub_409950+30j
		pop	esi
		pop	ebp
		retn
sub_409950	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_40998B(DWORD dwTlsIndex)
sub_40998B	proc near		; CODE XREF: sub_408745+1Cp
					; sub_4087D7+1Cp

dwTlsIndex	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	offset dword_4204D4 ; int
		push	offset dword_4204CC ; int
		push	offset aFlsgetvalue ; "FlsGetValue"
		push	2		; int
		call	sub_4098A6
		add	esp, 10h
		mov	esi, eax
		push	[ebp+dwTlsIndex] ; dwTlsIndex
		test	esi, esi
		jz	short loc_4099BD
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		jmp	short loc_4099C3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4099BD:				; CODE XREF: sub_40998B+24j
		call	ds:TlsGetValue

loc_4099C3:				; CODE XREF: sub_40998B+30j
		pop	esi
		pop	ebp
		retn
sub_40998B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_4099C6(DWORD dwTlsIndex,LPVOID lpTlsValue)
sub_4099C6	proc near		; CODE XREF: sub_408745+35p
					; sub_408745+5Dp ...

dwTlsIndex	= dword	ptr  8
lpTlsValue	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	offset dword_4204DC ; int
		push	offset dword_4204D4 ; int
		push	offset aFlssetvalue ; "FlsSetValue"
		push	3		; int
		call	sub_4098A6
		add	esp, 10h
		mov	esi, eax
		push	[ebp+lpTlsValue] ; lpTlsValue
		push	[ebp+dwTlsIndex] ; dwTlsIndex
		test	esi, esi
		jz	short loc_4099FB
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		jmp	short loc_409A01
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4099FB:				; CODE XREF: sub_4099C6+27j
		call	ds:TlsSetValue

loc_409A01:				; CODE XREF: sub_4099C6+33j
		pop	esi
		pop	ebp
		retn
sub_4099C6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_409A04(LPCRITICAL_SECTION lpCriticalSection,DWORD dwSpinCount,int)
sub_409A04	proc near		; CODE XREF: sub_409777+11p

lpCriticalSection= dword ptr  8
dwSpinCount	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	offset dword_4204E4 ; int
		push	offset dword_4204DC ; int
		push	offset aInitializecrit ; "InitializeCriticalSectionEx"
		push	4		; int
		call	sub_4098A6
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_409A3C
		push	[ebp+arg_8]
		mov	ecx, esi
		push	[ebp+dwSpinCount]
		push	[ebp+lpCriticalSection]
		call	ds:off_41D12C
		call	esi
		jmp	short loc_409A48
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409A3C:				; CODE XREF: sub_409A04+21j
		push	[ebp+dwSpinCount] ; dwSpinCount
		push	[ebp+lpCriticalSection]	; lpCriticalSection
		call	ds:InitializeCriticalSectionAndSpinCount

loc_409A48:				; CODE XREF: sub_409A04+36j
		pop	esi
		pop	ebp
		retn
sub_409A04	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409A4B	proc near		; CODE XREF: sub_408697+5p
		mov	ecx, offset dword_42D558
		mov	eax, offset dword_42D544
		xor	edx, edx
		cmp	ecx, eax
		push	esi
		mov	esi, dword_42C06C
		sbb	ecx, ecx
		and	ecx, 0FFFFFFFBh
		add	ecx, 5

loc_409A68:				; CODE XREF: sub_409A4B+25j
		inc	edx
		mov	[eax], esi
		lea	eax, [eax+4]
		cmp	edx, ecx
		jnz	short loc_409A68
		pop	esi
		retn
sub_409A4B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409A74	proc near		; CODE XREF: sub_4086C0+15p

arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		jnz	short loc_409AA4
		push	esi
		mov	esi, offset dword_42D538

loc_409A83:				; CODE XREF: sub_409A74+2Dj
		cmp	dword ptr [esi], 0
		jz	short loc_409A98
		cmp	dword ptr [esi], 0FFFFFFFFh
		jz	short loc_409A95
		push	dword ptr [esi]	; hLibModule
		call	ds:FreeLibrary

loc_409A95:				; CODE XREF: sub_409A74+17j
		and	dword ptr [esi], 0

loc_409A98:				; CODE XREF: sub_409A74+12j
		add	esi, 4
		cmp	esi, offset dword_42D544
		jnz	short loc_409A83
		pop	esi

loc_409AA4:				; CODE XREF: sub_409A74+7j
		pop	ebp
		retn
sub_409A74	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409AA6	proc near		; CODE XREF: sub_4092F9+1Bp
		push	esi
		call	sub_408737
		mov	esi, [eax+4]
		test	esi, esi
		jz	short loc_409ABD
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi

loc_409ABD:				; CODE XREF: sub_409AA6+Bj
		call	sub_409C4B
		int	3		; Trap to Debugger
sub_409AA6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409AC3	proc near		; CODE XREF: sub_408AB4+1Bp
					; sub_409135+B3p ...

arg_0		= dword	ptr  8
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		cmp	dword ptr [eax+4], 80h
		jg	short loc_409ADB
		movsx	eax, byte ptr [ecx+8]
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409ADB:				; CODE XREF: sub_409AC3+10j
		mov	eax, [ecx+8]
		pop	ebp
		retn
sub_409AC3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409AE0	proc near		; CODE XREF: sub_408A34+4Ep
					; sub_409395+64p ...

arg_0		= dword	ptr  8
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_8]
		mov	[eax+8], ecx
		pop	ebp
		retn
sub_409AE0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		push	ebp
		push	0
		push	0
		push	offset loc_409B09
		push	dword ptr [ebp+8]
		call	ds:RtlUnwind

loc_409B09:				; DATA XREF: .text:00409AFBo
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409B11:				; DATA XREF: sub_409B56+Bo
					; .text:00409BE3o
		mov	ecx, [esp+4]
		test	dword ptr [ecx+4], 6
		mov	eax, 1
		jz	short locret_409B55
		mov	eax, [esp+14h]
		mov	ecx, [eax-4]
		xor	ecx, eax
		call	sub_40534D
		push	ebp
		mov	ebp, [eax+10h]
		mov	edx, [eax+28h]
		push	edx
		mov	edx, [eax+24h]
		push	edx
		call	sub_409B56
		add	esp, 8
		pop	ebp
		mov	eax, [esp+8]
		mov	edx, [esp+10h]
		mov	[edx], eax
		mov	eax, 3

locret_409B55:				; CODE XREF: .text:00409B21j
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409B56	proc near		; CODE XREF: .text:00409B3Dp

var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  10h
arg_4		= dword	ptr  14h

		push	ebx
		push	esi
		push	edi
		mov	eax, [esp+arg_0]
		push	ebp
		push	eax
		push	0FFFFFFFEh
		push	offset loc_409B11
		push	large dword ptr	fs:0
		mov	eax, dword_42C06C
		xor	eax, esp
		push	eax
		lea	eax, [esp+18h+var_14]
		mov	large fs:0, eax

loc_409B7F:				; CODE XREF: sub_409B56:loc_409BC6j
		mov	eax, [esp+18h+arg_0]
		mov	ebx, [eax+8]
		mov	esi, [eax+0Ch]
		cmp	esi, 0FFFFFFFFh
		jz	short loc_409BC8
		cmp	[esp+18h+arg_4], 0FFFFFFFFh
		jz	short loc_409B9B
		cmp	esi, [esp+18h+arg_4]
		jbe	short loc_409BC8

loc_409B9B:				; CODE XREF: sub_409B56+3Dj
		lea	esi, [esi+esi*2]
		mov	ecx, [ebx+esi*4]
		mov	[esp+18h+var_C], ecx
		mov	[eax+0Ch], ecx
		cmp	dword ptr [ebx+esi*4+4], 0
		jnz	short loc_409BC6
		push	101h
		mov	eax, [ebx+esi*4+8]
		call	sub_409C0C
		mov	eax, [ebx+esi*4+8]
		call	sub_409C2B

loc_409BC6:				; CODE XREF: sub_409B56+57j
		jmp	short loc_409B7F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409BC8:				; CODE XREF: sub_409B56+36j
					; sub_409B56+43j
		mov	ecx, [esp+18h+var_14]
		mov	large fs:0, ecx
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_409B56	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		xor	eax, eax
		mov	ecx, large fs:0
		cmp	dword ptr [ecx+4], offset loc_409B11
		jnz	short locret_409BFC
		mov	edx, [ecx+0Ch]
		mov	edx, [edx+0Ch]
		cmp	[ecx+8], edx
		jnz	short locret_409BFC
		mov	eax, 1

locret_409BFC:				; CODE XREF: .text:00409BEAj
					; .text:00409BF5j
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409C00	proc near		; CODE XREF: sub_409550+1Ep
					; sub_409550+40p
		push	ebx
		push	ecx
		mov	ebx, offset dword_42C0B0
		jmp	short loc_409C17
sub_409C00	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409C0C	proc near		; CODE XREF: sub_409610+6Ep
					; sub_409728+8p ...

arg_0		= dword	ptr  0Ch

		push	ebx
		push	ecx
		mov	ebx, offset dword_42C0B0
		mov	ecx, [esp+arg_0]

loc_409C17:				; CODE XREF: sub_409C00+7j
		mov	[ebx+8], ecx
		mov	[ebx+4], eax
		mov	[ebx+0Ch], ebp
		push	ebp
		push	ecx
		push	eax
		pop	eax
		pop	ecx
		pop	ebp
		pop	ecx
		pop	ebx
		retn	4
sub_409C0C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409C2B	proc near		; CODE XREF: sub_409610+7Bp
					; sub_409B56+6Bp
		call	eax
		retn
sub_409C2B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409C2E	proc near		; CODE XREF: sub_4012F0+36p
					; sub_4012F0+4Dp ...

var_4		= dword	ptr -4
lpMem		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+lpMem]	; lpMem
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_4]
		call	sub_40F0A8
		pop	ecx
		mov	esp, ebp
		pop	ebp
		retn
sub_409C2E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409C4B	proc near		; CODE XREF: sub_401990+1Cj
					; TopLevelExceptionFilter:loc_405F74p ...
		push	8
		push	offset dword_42AF78
		call	sub_405FF0
		call	sub_40F3FC
		mov	esi, [eax+0Ch]
		test	esi, esi
		jz	short loc_409C81
		and	dword ptr [ebp-4], 0
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		jmp	short loc_409C7A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409C73:				; DATA XREF: .rdata:0042AF8Co
		xor	eax, eax
		inc	eax
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409C77:				; DATA XREF: .rdata:0042AF90o
		mov	esp, [ebp-18h]

loc_409C7A:				; CODE XREF: sub_409C4B+26j
		mov	dword ptr [ebp-4], 0FFFFFFFEh

loc_409C81:				; CODE XREF: sub_409C4B+16j
		call	sub_40C069
		int	3		; Trap to Debugger
sub_409C4B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409C87	proc near		; CODE XREF: sub_409E62+1Cp
					; sub_40C069+34p

ExceptionInfo	= _EXCEPTION_POINTERS ptr -328h
var_320		= dword	ptr -320h
var_31C		= dword	ptr -31Ch
var_314		= dword	ptr -314h
var_2D0		= dword	ptr -2D0h
var_244		= word ptr -244h
var_240		= word ptr -240h
var_23C		= word ptr -23Ch
var_238		= word ptr -238h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= word ptr -214h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= word ptr -208h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 328h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_0], 0FFFFFFFFh
		push	edi
		jz	short loc_409CAC
		push	[ebp+arg_0]
		call	sub_405F7A
		pop	ecx

loc_409CAC:				; CODE XREF: sub_409C87+1Aj
		push	50h
		lea	eax, [ebp+var_320]
		push	0
		push	eax
		call	sub_407330
		push	2CCh
		lea	eax, [ebp+var_2D0]
		push	0
		push	eax
		call	sub_407330
		lea	eax, [ebp+var_320]
		add	esp, 18h
		mov	[ebp+ExceptionInfo.ExceptionRecord], eax
		lea	eax, [ebp+var_2D0]
		mov	[ebp+ExceptionInfo.ContextRecord], eax
		mov	[ebp+var_220], eax
		mov	[ebp+var_224], ecx
		mov	[ebp+var_228], edx
		mov	[ebp+var_22C], ebx
		mov	[ebp+var_230], esi
		mov	[ebp+var_234], edi
		mov	[ebp+var_208], ss
		mov	[ebp+var_214], cs
		mov	[ebp+var_238], ds
		mov	[ebp+var_23C], es
		mov	[ebp+var_240], fs
		mov	[ebp+var_244], gs
		pushf
		pop	[ebp+var_210]
		mov	eax, [ebp+4]
		mov	[ebp+var_218], eax
		lea	eax, [ebp+4]
		mov	[ebp+var_20C], eax
		mov	[ebp+var_2D0], 10001h
		mov	eax, [eax-4]
		mov	[ebp+var_21C], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_320], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_31C], eax
		mov	eax, [ebp+4]
		mov	[ebp+var_314], eax
		call	ds:IsDebuggerPresent
		push	0		; lpTopLevelExceptionFilter
		mov	edi, eax
		call	ds:SetUnhandledExceptionFilter
		lea	eax, [ebp+ExceptionInfo]
		push	eax		; ExceptionInfo
		call	ds:UnhandledExceptionFilter
		test	eax, eax
		jnz	short loc_409DB3
		test	edi, edi
		jnz	short loc_409DB3
		cmp	[ebp+arg_0], 0FFFFFFFFh
		jz	short loc_409DB3
		push	[ebp+arg_0]
		call	sub_405F7A
		pop	ecx

loc_409DB3:				; CODE XREF: sub_409C87+117j
					; sub_409C87+11Bj ...
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		pop	edi
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_409C87	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+8]
		mov	dword_42D594, eax
		pop	ebp
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409DD1	proc near		; CODE XREF: sub_409E35+7p
					; sub_409E45+Ap

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		call	sub_40F553
		test	eax, eax
		jz	short loc_409E09
		mov	esi, [eax+35Ch]
		test	esi, esi
		jz	short loc_409E09
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]

loc_409DF9:				; CODE XREF: sub_409DD1+5Cj
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		add	esp, 14h
		pop	esi
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409E09:				; CODE XREF: sub_409DD1+Dj
					; sub_409DD1+17j
		push	[ebp+arg_10]
		mov	esi, dword_42C06C
		mov	ecx, esi
		push	[ebp+arg_C]
		xor	esi, dword_42D594
		and	ecx, 1Fh
		push	[ebp+arg_8]
		ror	esi, cl
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		test	esi, esi
		jnz	short loc_409DF9
		call	sub_409E62
		int	3		; Trap to Debugger
sub_409DD1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409E35	proc near		; CODE XREF: sub_40AA09+17p
					; sub_40AA77+18p ...
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	sub_409DD1
		add	esp, 14h
		retn
sub_409E35	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409E45	proc near		; CODE XREF: .text:loc_401C74p
					; .text:loc_401C79p ...
		mov	edi, edi
		push	esi
		xor	esi, esi
		push	esi
		push	esi
		push	esi
		push	esi
		push	esi
		call	sub_409DD1
		add	esp, 14h
		push	esi
		push	esi
		push	esi
		push	esi
		push	esi
		call	sub_409E62
		int	3		; Trap to Debugger
sub_409E45	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409E62	proc near		; CODE XREF: sub_409DD1+5Ep
					; sub_409E45+17p ...
		push	17h		; ProcessorFeature
		call	ds:__imp_IsProcessorFeaturePresent
		test	eax, eax
		jz	short loc_409E73
		push	5
		pop	ecx
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display

loc_409E73:				; CODE XREF: sub_409E62+Aj
		push	esi
		push	1
		mov	esi, 0C0000417h
		push	esi
		push	2
		call	sub_409C87
		add	esp, 0Ch
		push	esi		; uExitCode
		call	ds:GetCurrentProcess
		push	eax		; hProcess
		call	ds:TerminateProcess
		pop	esi
		retn
sub_409E62	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
unk_409E96	db  8Bh	; 		; DATA XREF: .rdata:00421868o
		db 0FFh
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	esi
		push	edi
		mov	edi, offset dword_42D598
		xor	esi, esi

loc_409EA1:				; CODE XREF: .text:00409EC4j
		push	0
		push	0FA0h
		push	edi
		call	sub_40FBF2
		test	eax, eax
		jz	short loc_409ECA
		inc	dword_42D6E8
		add	esi, 18h
		add	edi, 18h
		cmp	esi, 150h
		jb	short loc_409EA1
		mov	al, 1
		jmp	short loc_409ED4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_409ECA:				; CODE XREF: .text:00409EB0j
		push	0
		call	sub_409EEE
		pop	ecx
		xor	al, al

loc_409ED4:				; CODE XREF: .text:00409EC8j
		pop	edi
		pop	esi
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409ED7	proc near		; CODE XREF: sub_409F36+7p
					; sub_409F58+15p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		imul	eax, [ebp+arg_0], 18h
		add	eax, offset dword_42D598
		push	eax		; lpCriticalSection
		call	ds:EnterCriticalSection
		pop	ebp
		retn
sub_409ED7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409EEE	proc near		; CODE XREF: .text:00409ECCp
					; DATA XREF: .rdata:0042186Co
		mov	edi, edi
		push	esi
		mov	esi, dword_42D6E8
		test	esi, esi
		jz	short loc_409F1B
		imul	eax, esi, 18h
		push	edi
		lea	edi, dword_42D580[eax]

loc_409F05:				; CODE XREF: sub_409EEE+2Aj
		push	edi		; lpCriticalSection
		call	ds:DeleteCriticalSection
		dec	dword_42D6E8
		sub	edi, 18h
		sub	esi, 1
		jnz	short loc_409F05
		pop	edi

loc_409F1B:				; CODE XREF: sub_409EEE+Bj
		mov	al, 1
		pop	esi
		retn
sub_409EEE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409F1F	proc near		; CODE XREF: sub_402F41+7005p
					; sub_409F9D+5p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		imul	eax, [ebp+arg_0], 18h
		add	eax, offset dword_42D598
		push	eax		; lpCriticalSection
		call	ds:LeaveCriticalSection
		pop	ebp
		retn
sub_409F1F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409F36	proc near		; CODE XREF: sub_402EE9+Fp
		call	sub_40FD4D
		push	4
		call	sub_409ED7
		pop	ecx
		retn
sub_409F36	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_402F41

loc_409F44:				; CODE XREF: sub_402F41+4j
		push	4
		call	sub_409F1F
		pop	ecx
		retn
; END OF FUNCTION CHUNK	FOR sub_402F41

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409F4D	proc near		; CODE XREF: sub_403080+34p
					; sub_404AAB+88p ...
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	sub_40FDE5
sub_409F4D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409F58	proc near		; CODE XREF: sub_40A1AC+31p
		push	0Ch
		push	offset dword_42AF98
		call	sub_405FF0
		and	dword ptr [ebp-1Ch], 0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	ecx, [ebp+0Ch]
		call	sub_409FA9
		mov	esi, eax
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_409F9D
		mov	eax, esi
		call	sub_406036
		retn	0Ch
sub_409F58	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409F9A	proc near		; DATA XREF: .rdata:0042AFB0o
		mov	esi, [ebp-1Ch]
sub_409F9A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_409F9D	proc near		; CODE XREF: sub_409F58+33p
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_409F1F
		pop	ecx
		retn
sub_409F9D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_409FA9	proc near		; CODE XREF: sub_409F58+22p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		mov	eax, [esi+4]
		push	dword ptr [eax]
		mov	eax, [esi]
		push	dword ptr [eax]
		call	sub_40A10F
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_40A00F
		call	sub_40F3FC
		mov	[ebp+var_8], eax
		xor	ebx, ebx
		mov	ecx, [eax+4Ch]
		mov	[ebp+var_10], ecx
		mov	ecx, [eax+48h]
		lea	eax, [ebp+var_10]
		push	eax
		push	ebx
		push	edi
		push	ebx
		lea	eax, [ebp+var_4]
		mov	[ebp+var_C], ecx
		push	ebx
		push	eax
		mov	[ebp+var_4], ebx
		call	sub_4103E0
		add	esp, 18h
		test	eax, eax
		jz	short loc_40A018
		cmp	eax, 16h
		jz	loc_40A104
		cmp	eax, 22h
		jz	loc_40A104

loc_40A00F:				; CODE XREF: sub_409FA9+21j
					; sub_409FA9+80j ...
		xor	eax, eax

loc_40A011:				; CODE XREF: sub_409FA9+154j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A018:				; CODE XREF: sub_409FA9+52j
		mov	eax, [ebp+var_4]
		add	eax, 4
		push	eax
		call	sub_40FDE5
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jz	short loc_40A00F
		lea	ecx, [ebp+var_10]
		push	ecx
		push	0FFFFFFFFh
		push	edi
		push	[ebp+var_4]
		lea	eax, [ebx+4]
		push	eax
		push	0
		call	sub_4103E0
		add	esp, 18h
		test	eax, eax
		jz	short loc_40A062
		cmp	eax, 16h
		jz	loc_40A102
		cmp	eax, 22h
		jz	loc_40A102
		push	ebx		; lpMem
		call	sub_40F0A8
		pop	ecx
		jmp	short loc_40A00F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A062:				; CODE XREF: sub_409FA9+9Cj
		mov	eax, [esi]
		or	ecx, 0FFFFFFFFh
		mov	edi, [ebp+var_10]
		mov	eax, [eax]
		add	eax, eax
		mov	edx, [edi+eax*8+24h]
		test	edx, edx
		jz	short loc_40A09C
		mov	eax, ecx
		lock xadd [edx], eax
		jnz	short loc_40A09C
		mov	eax, [esi]
		mov	eax, [eax]
		add	eax, eax
		push	dword ptr [edi+eax*8+24h] ; lpMem
		call	sub_40F0A8
		mov	eax, [esi]
		pop	ecx
		mov	eax, [eax]
		add	eax, eax
		and	dword ptr [edi+eax*8+24h], 0
		or	ecx, 0FFFFFFFFh

loc_40A09C:				; CODE XREF: sub_409FA9+CBj
					; sub_409FA9+D3j
		mov	eax, [ebp+var_8]
		test	byte ptr [eax+350h], 2
		jnz	short loc_40A0E1
		test	byte ptr dword_42C1F4, 1
		jnz	short loc_40A0E1
		mov	eax, [esi]
		mov	eax, [eax]
		add	eax, eax
		mov	eax, [edi+eax*8+24h]
		test	eax, eax
		jz	short loc_40A0E1
		lock xadd [eax], ecx
		dec	ecx
		jnz	short loc_40A0E1
		mov	eax, [esi]
		mov	eax, [eax]
		add	eax, eax
		push	dword ptr [edi+eax*8+24h] ; lpMem
		call	sub_40F0A8
		mov	eax, [esi]
		pop	ecx
		mov	eax, [eax]
		add	eax, eax
		and	dword ptr [edi+eax*8+24h], 0

loc_40A0E1:				; CODE XREF: sub_409FA9+FDj
					; sub_409FA9+106j ...
		mov	ecx, [edi+0Ch]
		lea	eax, [ebx+4]
		mov	[ebx], ecx
		mov	ecx, [esi]
		mov	ecx, [ecx]
		add	ecx, ecx
		mov	[edi+ecx*8+24h], ebx
		mov	ecx, [esi]
		mov	ecx, [ecx]
		add	ecx, ecx
		mov	[edi+ecx*8+1Ch], eax
		jmp	loc_40A011
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A102:				; CODE XREF: sub_409FA9+A1j
					; sub_409FA9+AAj
		xor	ebx, ebx

loc_40A104:				; CODE XREF: sub_409FA9+57j
					; sub_409FA9+60j
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		call	sub_409E62
		int	3		; Trap to Debugger
sub_409FA9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A10F	proc near		; CODE XREF: sub_409FA9+16p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
lpMultiByteStr	= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		cmp	[ebp+lpMultiByteStr], 0
		jnz	short loc_40A129
		push	0
		push	[ebp+arg_0]
		call	sub_40DB01
		pop	ecx
		pop	ecx
		jmp	short loc_40A19D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A129:				; CODE XREF: sub_40A10F+Aj
		push	esi
		push	edi
		push	7FFFFFFFh	; int
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		xor	edi, edi
		lea	eax, [ebp+var_4]
		push	edi		; int
		push	edi		; int
		push	eax		; int
		call	sub_410117
		add	esp, 14h
		test	eax, eax
		jz	short loc_40A151
		cmp	eax, 16h
		jz	short loc_40A1A1
		cmp	eax, 22h
		jz	short loc_40A1A1

loc_40A151:				; CODE XREF: sub_40A10F+36j
		push	2
		push	[ebp+var_4]
		call	sub_40FE33
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_40A192
		push	0FFFFFFFFh	; int
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		push	[ebp+var_4]	; int
		push	esi		; int
		push	edi		; int
		call	sub_410117
		add	esp, 14h
		test	eax, eax
		jz	short loc_40A185
		cmp	eax, 16h
		jz	short loc_40A1A1
		cmp	eax, 22h
		jz	short loc_40A1A1
		jmp	short loc_40A192
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A185:				; CODE XREF: sub_40A10F+68j
		push	esi
		push	[ebp+arg_0]
		call	sub_40DB01
		pop	ecx
		pop	ecx
		mov	edi, eax

loc_40A192:				; CODE XREF: sub_40A10F+52j
					; sub_40A10F+74j
		push	esi		; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	eax, edi
		pop	edi
		pop	esi

loc_40A19D:				; CODE XREF: sub_40A10F+18j
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A1A1:				; CODE XREF: sub_40A10F+3Bj
					; sub_40A10F+40j ...
		push	edi
		push	edi
		push	edi
		push	edi
		push	edi
		call	sub_409E62
		int	3		; Trap to Debugger
sub_40A10F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A1AC	proc near		; CODE XREF: sub_40322F+7p
					; sub_40322F+2Fp ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		call	sub_40FD4D
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		lea	ecx, [ebp-1]
		push	4
		lea	eax, [ebp+arg_4]
		mov	[ebp+var_10], eax
		pop	eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_14]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		call	sub_409F58
		mov	esp, ebp
		pop	ebp
		retn
sub_40A1AC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A1E6	proc near		; CODE XREF: sub_403344+16p
					; sub_408745+49p
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	sub_40FE33
sub_40A1E6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A1F1	proc near		; CODE XREF: sub_403344+22p
					; sub_4033AC+79p ...

var_4		= dword	ptr -4

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		call	sub_40F3FC
		mov	ecx, [eax+4Ch]
		mov	[ebp+var_4], ecx
		lea	ecx, [ebp+var_4]
		push	ecx
		push	eax
		call	sub_4104AD
		mov	eax, [ebp+var_4]
		pop	ecx
		pop	ecx
		mov	eax, [eax]
		mov	esp, ebp
		pop	ebp
		retn
sub_40A1F1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A217	proc near		; CODE XREF: sub_40A327+Ep
					; sub_40A35F+Ep ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		push	edi
		mov	edi, ecx
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [edi+0Ch], 0
		lea	ebx, [edi+4]
		test	ecx, ecx
		jz	short loc_40A237
		mov	eax, [ecx]
		mov	[ebx], eax
		mov	eax, [ecx+4]
		jmp	short loc_40A24C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A237:				; CODE XREF: sub_40A217+15j
		cmp	dword_42D84C, 0
		jnz	short loc_40A251
		mov	eax, off_42C2B8
		mov	[ebx], eax
		mov	eax, off_42C2BC

loc_40A24C:				; CODE XREF: sub_40A217+1Ej
		mov	[ebx+4], eax
		jmp	short loc_40A292
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A251:				; CODE XREF: sub_40A217+27j
		push	esi
		call	sub_40F3FC
		mov	[edi], eax
		lea	esi, [edi+8]
		push	ebx
		push	eax
		mov	ecx, [eax+4Ch]
		mov	[ebx], ecx
		mov	ecx, [eax+48h]
		mov	[esi], ecx
		call	sub_4104AD
		push	esi
		push	dword ptr [edi]
		call	sub_4104DA
		mov	ecx, [edi]
		add	esp, 10h
		mov	eax, [ecx+350h]
		pop	esi
		test	al, 2
		jnz	short loc_40A292
		or	eax, 2
		mov	[ecx+350h], eax
		mov	byte ptr [edi+0Ch], 1

loc_40A292:				; CODE XREF: sub_40A217+38j
					; sub_40A217+6Cj
		mov	eax, edi
		pop	edi
		pop	ebx
		pop	ebp
		retn	4
sub_40A217	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_41C58F

loc_40A29A:				; CODE XREF: sub_41C58F+3j
		cmp	byte ptr [ecx+0Ch], 0
		jz	short locret_40A2A9
		mov	eax, [ecx]
		and	dword ptr [eax+350h], 0FFFFFFFDh

locret_40A2A9:				; CODE XREF: sub_41C58F-122F1j
		retn
; END OF FUNCTION CHUNK	FOR sub_41C58F

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A2AA	proc near		; CODE XREF: sub_40A2CC:loc_40A2EAp
					; sub_40A397+27p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_4]
		lea	eax, [ecx+1]
		cmp	eax, 100h
		ja	short loc_40A2C8
		mov	eax, [ebp+arg_0]
		movzx	eax, word ptr [eax+ecx*2]
		and	eax, [ebp+arg_8]
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A2C8:				; CODE XREF: sub_40A2AA+10j
		xor	eax, eax
		pop	ebp
		retn
sub_40A2AA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A2CC	proc near		; CODE XREF: sub_40A2F4+29p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		mov	eax, [ebp+arg_8]
		push	[ebp+arg_0]
		test	eax, eax
		jz	short loc_40A2E4
		mov	eax, [eax]
		push	dword ptr [eax]
		jmp	short loc_40A2EA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A2E4:				; CODE XREF: sub_40A2CC+10j
		call	sub_40A1F1
		push	eax

loc_40A2EA:				; CODE XREF: sub_40A2CC+16j
		call	sub_40A2AA
		add	esp, 0Ch
		pop	ebp
		retn
sub_40A2CC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A2F4	proc near		; CODE XREF: sub_40A327+1Cp
					; sub_40A35F+1Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_8]
		test	ecx, ecx
		jz	short loc_40A316
		mov	eax, [ecx]
		cmp	dword ptr [eax+4], 1
		jle	short loc_40A316
		push	ecx
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_410507
		jmp	short loc_40A322
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A316:				; CODE XREF: sub_40A2F4+Aj
					; sub_40A2F4+12j
		push	ecx
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_40A2CC

loc_40A322:				; CODE XREF: sub_40A2F4+20j
		add	esp, 0Ch
		pop	ebp
		retn
sub_40A2F4	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A327	proc near		; CODE XREF: sub_40A397+13p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_10]
		call	sub_40A217
		lea	eax, [ebp+var_C]
		push	eax
		push	2
		push	[ebp+arg_0]
		call	sub_40A2F4
		add	esp, 0Ch
		cmp	[ebp+var_4], 0
		jz	short loc_40A35B
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_40A35B:				; CODE XREF: sub_40A327+28j
		mov	esp, ebp
		pop	ebp
		retn
sub_40A327	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A35F	proc near		; CODE XREF: sub_40A3C8+13p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_10]
		call	sub_40A217
		lea	eax, [ebp+var_C]
		push	eax
		push	1
		push	[ebp+arg_0]
		call	sub_40A2F4
		add	esp, 0Ch
		cmp	[ebp+var_4], 0
		jz	short loc_40A393
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_40A393:				; CODE XREF: sub_40A35F+28j
		mov	esp, ebp
		pop	ebp
		retn
sub_40A35F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A397	proc near		; CODE XREF: sub_4034AA+58p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	dword_42D84C, 0
		jz	short loc_40A3B3
		push	0
		push	[ebp+arg_0]
		call	sub_40A327
		pop	ecx
		pop	ecx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A3B3:				; CODE XREF: sub_40A397+Cj
		push	2
		push	[ebp+arg_0]
		push	off_42C200
		call	sub_40A2AA
		add	esp, 0Ch
		pop	ebp
		retn
sub_40A397	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A3C8	proc near		; CODE XREF: sub_4033AC+58p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	dword_42D84C, 0
		jz	short loc_40A3E4
		push	0
		push	[ebp+arg_0]
		call	sub_40A35F
		pop	ecx
		pop	ecx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A3E4:				; CODE XREF: sub_40A3C8+Cj
		push	1
		push	[ebp+arg_0]
		push	off_42C200
		call	sub_40A2AA
		add	esp, 0Ch
		pop	ebp
		retn
sub_40A3C8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A3F9	proc near		; CODE XREF: sub_403344+59p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		push	ebx
		push	edi
		jz	short loc_40A445
		mov	ecx, [ebp+arg_0]
		xor	edi, edi
		lea	edx, [ecx+2]

loc_40A40E:				; CODE XREF: sub_40A3F9+1Ej
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, di
		jnz	short loc_40A40E
		sub	ecx, edx
		sar	ecx, 1
		lea	ebx, [ecx+1]
		lea	eax, [ebx+ebx]
		push	eax
		call	sub_409F4D
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_40A445
		push	[ebp+arg_0]
		push	ebx
		push	edi
		call	sub_40C3CA
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_40A44B
		mov	eax, edi
		jmp	short loc_40A447
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A445:				; CODE XREF: sub_40A3F9+Bj
					; sub_40A3F9+35j
		xor	eax, eax

loc_40A447:				; CODE XREF: sub_40A3F9+4Aj
		pop	edi
		pop	ebx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A44B:				; CODE XREF: sub_40A3F9+46j
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	sub_409E62
		int	3		; Trap to Debugger
sub_40A3F9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A458	proc near		; CODE XREF: sub_403344+5p
					; sub_4033AC+17p ...

var_4		= dword	ptr -4

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		call	sub_40F3FC
		mov	ecx, [eax+4Ch]
		mov	[ebp+var_4], ecx
		lea	ecx, [ebp+var_4]
		push	ecx
		push	eax
		call	sub_4104AD
		mov	eax, [ebp+var_4]
		pop	ecx
		pop	ecx
		mov	eax, [eax+8]
		mov	esp, ebp
		pop	ebp
		retn
sub_40A458	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A47F	proc near		; CODE XREF: sub_403344:loc_40338Dp
					; sub_4033AC+Fp ...

var_4		= dword	ptr -4

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		call	sub_40F3FC
		mov	ecx, [eax+4Ch]
		mov	[ebp+var_4], ecx
		lea	ecx, [ebp+var_4]
		push	ecx
		push	eax
		call	sub_4104AD
		mov	eax, [ebp+var_4]
		pop	ecx
		pop	ecx
		add	eax, 0A0h
		mov	esp, ebp
		pop	ebp
		retn
sub_40A47F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A4A8	proc near		; DATA XREF: .rdata:00421768o

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
lpMem		= dword	ptr -2Ch
lpMultiByteStr	= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
CPInfo		= _cpinfo ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		xor	ebx, ebx
		mov	[ebp+var_34], esi
		mov	[ebp+var_1C], ebx
		mov	[ebp+var_20], ebx
		mov	eax, [esi+0A8h]
		mov	[ebp+var_24], ebx
		mov	[ebp+lpMultiByteStr], ebx
		mov	[ebp+var_58], esi
		mov	[ebp+var_54], ebx
		test	eax, eax
		jz	loc_40A899
		push	edi
		lea	edi, [esi+8]
		mov	[ebp+lpMem], ebx
		cmp	[edi], ebx
		jnz	short loc_40A50B
		push	edi		; int
		push	1004h		; LCType
		push	eax		; int
		lea	eax, [ebp+var_58]
		push	ebx		; int
		push	eax		; int
		call	sub_4106BD
		add	esp, 14h
		test	eax, eax
		jnz	loc_40A865

loc_40A50B:				; CODE XREF: sub_40A4A8+45j
		push	4
		push	1
		call	sub_40FE33
		push	ebx		; lpMem
		mov	[ebp+lpMem], eax
		call	sub_40F0A8
		push	2
		push	180h
		call	sub_40FE33
		push	ebx		; lpMem
		mov	[ebp+var_1C], eax
		call	sub_40F0A8
		push	1
		push	180h
		call	sub_40FE33
		push	ebx		; lpMem
		mov	[ebp+var_20], eax
		call	sub_40F0A8
		push	1
		push	180h
		call	sub_40FE33
		push	ebx		; lpMem
		mov	[ebp+var_24], eax
		call	sub_40F0A8
		push	1
		push	101h
		call	sub_40FE33
		push	ebx		; lpMem
		mov	[ebp+lpMultiByteStr], eax
		call	sub_40F0A8
		add	esp, 3Ch
		cmp	[ebp+lpMem], ebx
		jz	loc_40A865
		cmp	[ebp+var_1C], ebx
		jz	loc_40A865
		mov	ecx, [ebp+lpMultiByteStr]
		test	ecx, ecx
		jz	loc_40A865
		cmp	[ebp+var_20], ebx
		jz	loc_40A865
		cmp	[ebp+var_24], ebx
		jz	loc_40A865
		mov	eax, ebx

loc_40A5A5:				; CODE XREF: sub_40A4A8+106j
		mov	[eax+ecx], al
		inc	eax
		cmp	eax, 100h
		jl	short loc_40A5A5
		lea	eax, [ebp+CPInfo]
		push	eax		; lpCPInfo
		push	dword ptr [edi]	; CodePage
		call	ds:GetCPInfo
		test	eax, eax
		jz	loc_40A865
		mov	eax, [ebp+CPInfo.MaxCharSize]
		cmp	eax, 5
		ja	loc_40A865
		movzx	eax, ax
		mov	[ebp+var_38], eax
		cmp	eax, 1
		jbe	short loc_40A62E
		cmp	dword ptr [edi], 0FDE9h
		jnz	short loc_40A5FB
		mov	eax, [ebp+lpMultiByteStr]
		push	80h
		sub	eax, 0FFFFFF80h
		push	20h
		push	eax
		call	sub_407330
		add	esp, 0Ch
		jmp	short loc_40A62E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A5FB:				; CODE XREF: sub_40A4A8+139j
		lea	edx, [ebp+CPInfo.LeadByte]
		cmp	[ebp+CPInfo.LeadByte], bl
		jz	short loc_40A62E
		mov	ecx, [ebp+lpMultiByteStr]

loc_40A606:				; CODE XREF: sub_40A4A8+181j
		mov	al, [edx+1]
		test	al, al
		jz	short loc_40A62B
		movzx	esi, byte ptr [edx]
		movzx	eax, al
		cmp	esi, eax
		ja	short loc_40A624

loc_40A617:				; CODE XREF: sub_40A4A8+17Aj
		mov	byte ptr [esi+ecx], 20h
		inc	esi
		movzx	eax, byte ptr [edx+1]
		cmp	esi, eax
		jle	short loc_40A617

loc_40A624:				; CODE XREF: sub_40A4A8+16Dj
		add	edx, 2
		cmp	[edx], bl
		jnz	short loc_40A606

loc_40A62B:				; CODE XREF: sub_40A4A8+163j
		mov	esi, [ebp+var_34]

loc_40A62E:				; CODE XREF: sub_40A4A8+131j
					; sub_40A4A8+151j ...
		mov	eax, [ebp+var_20]
		mov	edx, 0FFh
		mov	ecx, [ebp+lpMultiByteStr]
		add	eax, 81h
		push	ebx		; int
		push	dword ptr [edi]	; CodePage
		inc	ecx
		push	edx		; cchDest
		push	eax		; lpDestStr
		push	edx		; int
		push	ecx		; lpMultiByteStr
		push	100h		; dwMapFlags
		push	dword ptr [esi+0A8h] ; int
		mov	[ebp+var_30], ecx
		push	ebx		; int
		call	sub_410B60
		add	esp, 24h
		test	eax, eax
		jz	loc_40A865
		mov	eax, [ebp+var_24]
		mov	ecx, 0FFh
		push	ebx		; int
		push	dword ptr [edi]	; CodePage
		add	eax, 81h
		push	ecx		; cchDest
		push	eax		; lpDestStr
		push	ecx		; int
		push	[ebp+var_30]	; lpMultiByteStr
		push	200h		; dwMapFlags
		push	dword ptr [esi+0A8h] ; int
		push	ebx		; int
		call	sub_410B60
		add	esp, 24h
		test	eax, eax
		jz	loc_40A865
		mov	eax, [ebp+var_1C]
		push	ebx		; int
		push	dword ptr [edi]	; int
		add	eax, 100h
		push	eax		; lpCharType
		push	100h		; cchMultiByte
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		mov	[ebp+var_48], eax
		push	1		; dwInfoType
		push	ebx		; int
		call	sub_41086F
		add	esp, 1Ch
		test	eax, eax
		jz	loc_40A865
		mov	eax, [ebp+var_1C]
		xor	edx, edx
		cmp	[ebp+var_38], 1
		lea	ecx, [eax+0FEh]
		mov	[ecx], dx
		mov	edx, [ebp+var_24]
		mov	[ebp+var_4C], ecx
		mov	ecx, [ebp+var_20]
		lea	esi, [ecx+80h]
		mov	[ecx+7Fh], bl
		mov	[edx+7Fh], bl
		mov	[esi], bl
		mov	[ebp+var_50], esi
		lea	esi, [edx+80h]
		mov	[ebp+var_30], esi
		mov	[esi], bl
		jbe	loc_40A7A3
		cmp	dword ptr [edi], 0FDE9h
		jnz	short loc_40A739
		mov	ebx, [ebp+var_30]
		lea	edi, [eax+284h]
		mov	esi, ecx
		mov	ecx, 0C2h
		sub	esi, edx
		mov	edx, 8000h

loc_40A71D:				; CODE XREF: sub_40A4A8+28Aj
		lea	eax, [ebx+ecx]
		mov	[edi], dx
		mov	[esi+eax], cl
		lea	edi, [edi+2]
		mov	[eax], cl
		inc	ecx
		cmp	ecx, 0F5h
		jl	short loc_40A71D
		mov	edx, [ebp+var_24]
		jmp	short loc_40A7A1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A739:				; CODE XREF: sub_40A4A8+25Cj
		lea	edi, [ebp+CPInfo.LeadByte]
		cmp	[ebp+CPInfo.LeadByte], bl
		jz	short loc_40A7A3
		mov	ebx, [ebp+var_1C]

loc_40A744:				; CODE XREF: sub_40A4A8+2F7j
		mov	al, [edi+1]
		test	al, al
		jz	short loc_40A7A1
		movzx	esi, byte ptr [edi]
		movzx	eax, al
		mov	[ebp+var_40], esi
		cmp	esi, eax
		ja	short loc_40A799
		sub	ebx, 0FFFFFF00h
		mov	[ebp+var_3C], ecx
		lea	eax, [edx+80h]
		add	eax, esi
		sub	ecx, edx
		mov	edx, [ebp+var_40]
		lea	esi, [ebx+esi*2]
		mov	[ebp+var_44], eax
		mov	ebx, eax

loc_40A776:				; CODE XREF: sub_40A4A8+2E6j
		mov	eax, 8000h
		mov	[esi], ax
		lea	esi, [esi+2]
		mov	[ebx+ecx], dl
		mov	[ebx], dl
		inc	edx
		movzx	eax, byte ptr [edi+1]
		inc	ebx
		cmp	edx, eax
		jle	short loc_40A776
		mov	edx, [ebp+var_24]
		mov	ecx, [ebp+var_20]
		mov	ebx, [ebp+var_1C]

loc_40A799:				; CODE XREF: sub_40A4A8+2AEj
		add	edi, 2
		cmp	byte ptr [edi],	0
		jnz	short loc_40A744

loc_40A7A1:				; CODE XREF: sub_40A4A8+28Fj
					; sub_40A4A8+2A1j
		xor	ebx, ebx

loc_40A7A3:				; CODE XREF: sub_40A4A8+250j
					; sub_40A4A8+297j
		mov	eax, [ebp+var_1C]
		mov	edi, eax
		push	3Fh
		pop	ecx
		push	1Fh
		lea	esi, [eax+200h]
		mov	eax, [ebp+var_20]
		rep movsd
		pop	ecx
		push	1Fh
		movsw
		lea	esi, [eax+100h]
		mov	edi, eax
		rep movsd
		pop	ecx
		movsw
		movsb
		lea	esi, [edx+100h]
		mov	edi, edx
		rep movsd
		movsw
		movsb
		mov	esi, [ebp+var_34]
		mov	ecx, [esi+8Ch]
		test	ecx, ecx
		jz	short loc_40A82E
		or	eax, 0FFFFFFFFh
		lock xadd [ecx], eax
		jnz	short loc_40A82E
		mov	eax, [esi+90h]
		sub	eax, 0FEh
		push	eax		; lpMem
		call	sub_40F0A8
		mov	eax, [esi+94h]
		mov	edi, 80h
		sub	eax, edi
		push	eax		; lpMem
		call	sub_40F0A8
		mov	eax, [esi+98h]
		sub	eax, edi
		push	eax		; lpMem
		call	sub_40F0A8
		push	dword ptr [esi+8Ch] ; lpMem
		call	sub_40F0A8
		add	esp, 10h

loc_40A82E:				; CODE XREF: sub_40A4A8+33Bj
					; sub_40A4A8+344j
		mov	eax, [ebp+lpMem]
		mov	dword ptr [eax], 1
		mov	[esi+8Ch], eax
		mov	eax, [ebp+var_48]
		mov	[esi], eax
		mov	eax, [ebp+var_4C]
		mov	[esi+90h], eax
		mov	eax, [ebp+var_50]
		mov	[esi+94h], eax
		mov	eax, [ebp+var_30]
		mov	[esi+98h], eax
		mov	eax, [ebp+var_38]
		mov	[esi+4], eax
		jmp	short loc_40A88B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A865:				; CODE XREF: sub_40A4A8+5Dj
					; sub_40A4A8+CFj ...
		push	[ebp+lpMem]	; lpMem
		call	sub_40F0A8
		push	[ebp+var_1C]	; lpMem
		call	sub_40F0A8
		push	[ebp+var_20]	; lpMem
		call	sub_40F0A8
		push	[ebp+var_24]	; lpMem
		call	sub_40F0A8
		xor	ebx, ebx
		add	esp, 10h
		inc	ebx

loc_40A88B:				; CODE XREF: sub_40A4A8+3BBj
		push	[ebp+lpMultiByteStr] ; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	eax, ebx
		pop	edi
		jmp	short loc_40A8D5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A899:				; CODE XREF: sub_40A4A8+36j
		mov	eax, [esi+8Ch]
		test	eax, eax
		jz	short loc_40A8A6
		lock dec dword ptr [eax]

loc_40A8A6:				; CODE XREF: sub_40A4A8+3F9j
		mov	[esi+8Ch], ebx
		xor	eax, eax
		mov	[esi+90h], ebx
		mov	dword ptr [esi], offset	asc_420D78 ; "	       (((((		      H"
		mov	dword ptr [esi+94h], offset dword_420FF8
		mov	dword ptr [esi+98h], offset dword_421178
		mov	dword ptr [esi+4], 1

loc_40A8D5:				; CODE XREF: sub_40A4A8+3EFj
		mov	ecx, [ebp+var_4]
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_40A4A8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40A8E5	proc near		; DATA XREF: .rdata:0041D170o
		mov	eax, dword_42D6EC
		push	esi
		push	3
		pop	esi
		test	eax, eax
		jnz	short loc_40A8F9
		mov	eax, 200h
		jmp	short loc_40A8FF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A8F9:				; CODE XREF: sub_40A8E5+Bj
		cmp	eax, esi
		jge	short loc_40A904
		mov	eax, esi

loc_40A8FF:				; CODE XREF: sub_40A8E5+12j
		mov	dword_42D6EC, eax

loc_40A904:				; CODE XREF: sub_40A8E5+16j
		push	4
		push	eax
		call	sub_40FE33
		push	0		; lpMem
		mov	lpMem, eax
		call	sub_40F0A8
		add	esp, 0Ch
		cmp	lpMem, 0
		jnz	short loc_40A94F
		push	4
		push	esi
		mov	dword_42D6EC, esi
		call	sub_40FE33
		push	0		; lpMem
		mov	lpMem, eax
		call	sub_40F0A8
		add	esp, 0Ch
		cmp	lpMem, 0
		jnz	short loc_40A94F
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40A94F:				; CODE XREF: sub_40A8E5+3Dj
					; sub_40A8E5+63j
		push	edi
		xor	edi, edi
		mov	esi, offset dword_42C0C8

loc_40A957:				; CODE XREF: sub_40A8E5+C1j
		push	0		; int
		push	0FA0h		; dwSpinCount
		lea	eax, [esi+20h]
		push	eax		; lpCriticalSection
		call	sub_40FBF2
		mov	eax, lpMem
		mov	edx, edi
		sar	edx, 6
		mov	[eax+edi*4], esi
		mov	eax, edi
		and	eax, 3Fh
		imul	ecx, eax, 38h
		mov	eax, dword_42D950[edx*4]
		mov	eax, [eax+ecx+18h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40A995
		cmp	eax, 0FFFFFFFEh
		jz	short loc_40A995
		test	eax, eax
		jnz	short loc_40A99C

loc_40A995:				; CODE XREF: sub_40A8E5+A5j
					; sub_40A8E5+AAj
		mov	dword ptr [esi+10h], 0FFFFFFFEh

loc_40A99C:				; CODE XREF: sub_40A8E5+AEj
		add	esi, 38h
		inc	edi
		cmp	esi, offset dword_42C170
		jnz	short loc_40A957
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_40A8E5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40A9AD	proc near		; CODE XREF: sub_40104D+4p
					; sub_4125DD-1AAp ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		imul	eax, [ebp+arg_0], 38h
		add	eax, offset dword_42C0C8
		pop	ebp
		retn
sub_40A9AD	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40A9BD	proc near		; DATA XREF: .rdata:0041D190o
		mov	edi, edi
		push	esi
		call	sub_40AE36
		call	sub_410BAB
		xor	esi, esi

loc_40A9CC:				; CODE XREF: sub_40A9BD+35j
		mov	eax, lpMem
		push	dword ptr [esi+eax]
		call	sub_410C4C
		mov	eax, lpMem
		pop	ecx
		mov	eax, [esi+eax]
		add	eax, 20h
		push	eax		; lpCriticalSection
		call	ds:DeleteCriticalSection
		add	esi, 4
		cmp	esi, 0Ch
		jnz	short loc_40A9CC
		push	lpMem		; lpMem
		call	sub_40F0A8
		and	lpMem, 0
		pop	ecx
		pop	esi
		retn
sub_40A9BD	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40AA09	proc near		; CODE XREF: sub_403BF3+3Cp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jnz	short loc_40AA2A
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		push	16h
		pop	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AA2A:				; CODE XREF: sub_40AA09+Aj
		mov	edx, [ebp+arg_4]
		test	edx, edx
		jz	short loc_40AA36
		lea	eax, [ecx+4]
		mov	[edx], eax

loc_40AA36:				; CODE XREF: sub_40AA09+26j
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_40AA3F
		mov	[eax], ecx

loc_40AA3F:				; CODE XREF: sub_40AA09+32j
		mov	edx, [ebp+arg_C]
		test	edx, edx
		jz	short loc_40AA4B
		lea	eax, [ecx+8]
		mov	[edx], eax

loc_40AA4B:				; CODE XREF: sub_40AA09+3Bj
		xor	eax, eax
		pop	ebp
		retn
sub_40AA09	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40AA4F	proc near		; CODE XREF: sub_403D44+9p
					; sub_40AAEE+43p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		add	eax, 20h
		push	eax		; lpCriticalSection
		call	ds:EnterCriticalSection
		pop	ebp
		retn
sub_40AA4F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40AA63	proc near		; CODE XREF: sub_403DAE+9p
					; sub_40AB5E+3p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		add	eax, 20h
		push	eax		; lpCriticalSection
		call	ds:LeaveCriticalSection
		pop	ebp
		retn
sub_40AA63	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40AA77	proc near		; CODE XREF: sub_40AAEE+4Ep

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jnz	short loc_40AA99
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		jmp	short loc_40AAEB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AA99:				; CODE XREF: sub_40AA77+Bj
		mov	eax, [esi+0Ch]
		push	edi
		or	edi, 0FFFFFFFFh
		nop
		shr	eax, 0Dh
		test	al, 1
		jz	short loc_40AAE1
		push	esi
		call	sub_40AD89
		push	esi
		mov	edi, eax
		call	sub_410C4C
		push	esi
		call	sub_411027
		push	eax
		call	sub_410EFC
		add	esp, 10h
		test	eax, eax
		jns	short loc_40AACE
		or	edi, 0FFFFFFFFh
		jmp	short loc_40AAE1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AACE:				; CODE XREF: sub_40AA77+50j
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_40AAE1
		push	dword ptr [esi+1Ch] ; lpMem
		call	sub_40F0A8
		and	dword ptr [esi+1Ch], 0
		pop	ecx

loc_40AAE1:				; CODE XREF: sub_40AA77+2Fj
					; sub_40AA77+55j ...
		push	esi
		call	sub_41104E
		pop	ecx
		mov	eax, edi
		pop	edi

loc_40AAEB:				; CODE XREF: sub_40AA77+20j
		pop	esi
		pop	ebp
		retn
sub_40AA77	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40AAEE	proc near		; CODE XREF: sub_403DE1+20p
					; sub_410BAB+49p
		push	10h
		push	offset dword_42AFB8
		call	sub_405FF0
		mov	esi, [ebp+8]
		mov	[ebp-20h], esi
		test	esi, esi
		jnz	short loc_40AB19
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35

loc_40AB14:				; CODE XREF: sub_40AAEE+3Dj
		or	eax, 0FFFFFFFFh
		jmp	short loc_40AB55
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AB19:				; CODE XREF: sub_40AAEE+14j
		mov	eax, [esi+0Ch]
		nop
		shr	eax, 0Ch
		push	esi
		test	al, 1
		jz	short loc_40AB2D
		call	sub_41104E
		pop	ecx
		jmp	short loc_40AB14
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AB2D:				; CODE XREF: sub_40AAEE+35j
		and	dword ptr [ebp-1Ch], 0
		call	sub_40AA4F
		pop	ecx
		and	dword ptr [ebp-4], 0
		push	esi
		call	sub_40AA77
		pop	ecx
		mov	esi, eax
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40AB5E
		mov	eax, esi

loc_40AB55:				; CODE XREF: sub_40AAEE+29j
		call	sub_406036
		retn
sub_40AAEE	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40AB5B	proc near		; DATA XREF: .rdata:0042AFD0o
		mov	esi, [ebp-1Ch]
sub_40AB5B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40AB5E	proc near		; CODE XREF: sub_40AAEE+60p
		push	dword ptr [ebp-20h]
		call	sub_40AA63
		pop	ecx
		retn
sub_40AB5E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40AB68	proc near		; CODE XREF: sub_40ABEA+75p
		push	8
		push	offset dword_42AFD8
		call	sub_405FF0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_40AA4F
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	esi, [ebp+0Ch]
		push	dword ptr [esi+4]
		mov	eax, [esi]
		push	dword ptr [eax]
		call	sub_40AD31
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_40ABCA
		mov	eax, [esi+8]
		cmp	byte ptr [eax],	0
		jnz	short loc_40ABAE
		mov	eax, [esi]
		mov	eax, [eax]
		mov	eax, [eax+0Ch]
		nop
		shr	eax, 1
		test	al, 1
		jz	short loc_40ABCA

loc_40ABAE:				; CODE XREF: sub_40AB68+36j
		mov	eax, [esi]
		push	dword ptr [eax]
		call	sub_40ADEE
		pop	ecx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40ABC4
		mov	eax, [esi+4]
		inc	dword ptr [eax]
		jmp	short loc_40ABCA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40ABC4:				; CODE XREF: sub_40AB68+53j
		mov	eax, [esi+0Ch]
		or	dword ptr [eax], 0FFFFFFFFh

loc_40ABCA:				; CODE XREF: sub_40AB68+2Ej
					; sub_40AB68+44j ...
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40ABDE
		call	sub_406036
		retn	0Ch
sub_40AB68	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40ABDE	proc near		; CODE XREF: sub_40AB68+69p
					; DATA XREF: .rdata:0042AFF0o
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_40AA63
		pop	ecx
		retn
sub_40ABDE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40ABEA	proc near		; CODE XREF: sub_40ACE2+3Ap
		push	2Ch
		push	offset dword_42AFF8
		call	sub_405FF0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	esi, lpMem
		mov	eax, dword_42D6EC
		lea	ebx, [esi+eax*4]
		mov	edi, [ebp+0Ch]

loc_40AC16:				; CODE XREF: sub_40ABEA+80j
		mov	[ebp-2Ch], esi
		cmp	esi, ebx
		jz	short loc_40AC6C
		mov	eax, [esi]
		mov	[ebp-20h], eax
		push	dword ptr [edi]
		push	eax
		call	sub_40AD31
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_40AC67
		mov	edx, [edi+8]
		mov	ecx, [edi+4]
		mov	eax, [edi]
		lea	edi, [ebp-20h]
		mov	[ebp-3Ch], edi
		mov	[ebp-38h], eax
		mov	[ebp-34h], ecx
		mov	[ebp-30h], edx
		mov	eax, [ebp-20h]
		mov	[ebp-24h], eax
		mov	[ebp-28h], eax
		lea	eax, [ebp-24h]
		push	eax
		lea	eax, [ebp-3Ch]
		push	eax
		lea	eax, [ebp-28h]
		push	eax
		lea	ecx, [ebp-19h]
		call	sub_40AB68
		mov	edi, [ebp+0Ch]

loc_40AC67:				; CODE XREF: sub_40ABEA+44j
		add	esi, 4
		jmp	short loc_40AC16
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AC6C:				; CODE XREF: sub_40ABEA+31j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40AC80
		call	sub_406036
		retn	0Ch
sub_40ABEA	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40AC80	proc near		; CODE XREF: sub_40ABEA+89p
					; DATA XREF: .rdata:0042B010o
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_409F1F
		pop	ecx
		retn
sub_40AC80	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40AC8C	proc near		; CODE XREF: sub_40AE3F+4Ep
		push	0Ch
		push	offset dword_42B018
		call	sub_405FF0
		and	dword ptr [ebp-1Ch], 0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_40AA4F
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	eax, [ebp+0Ch]
		mov	eax, [eax]
		push	dword ptr [eax]
		call	sub_40ADEE
		pop	ecx
		mov	esi, eax
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40ACD6
		mov	eax, esi
		call	sub_406036
		retn	0Ch
sub_40AC8C	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40ACD3	proc near		; DATA XREF: .rdata:0042B030o
		mov	esi, [ebp-1Ch]
sub_40ACD3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40ACD6	proc near		; CODE XREF: sub_40AC8C+38p
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_40AA63
		pop	ecx
		retn
sub_40ACD6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40ACE2	proc near		; CODE XREF: sub_40ADEE+Ep
					; sub_40AE36+2p ...

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		and	[ebp+var_8], 0
		lea	eax, [ebp+var_8]
		and	[ebp+var_C], 0
		lea	ecx, [ebp-1]
		mov	[ebp+var_20], eax
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_C]
		push	8
		mov	[ebp+var_18], eax
		pop	eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_14], eax
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+var_14]
		push	eax
		call	sub_40ABEA
		cmp	byte ptr [ebp+arg_0], 0
		mov	eax, [ebp+var_8]
		jnz	short loc_40AD2D
		mov	eax, [ebp+var_C]

loc_40AD2D:				; CODE XREF: sub_40ACE2+46j
		mov	esp, ebp
		pop	ebp
		retn
sub_40ACE2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40AD31	proc near		; CODE XREF: sub_40AB68+25p
					; sub_40ABEA+3Bp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_40AD5C
		mov	ecx, [eax+0Ch]
		nop
		mov	eax, ecx
		shr	eax, 0Dh
		test	al, 1
		jz	short loc_40AD5C
		push	ecx
		call	sub_40AD64
		add	esp, 4
		test	al, al
		jnz	short loc_40AD60
		mov	eax, [ebp+arg_4]
		inc	dword ptr [eax]

loc_40AD5C:				; CODE XREF: sub_40AD31+Aj
					; sub_40AD31+17j
		xor	al, al
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AD60:				; CODE XREF: sub_40AD31+24j
		mov	al, 1
		pop	ebp
		retn
sub_40AD31	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40AD64	proc near		; CODE XREF: sub_40AD31+1Ap
					; sub_40AE3F+20p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		and	al, 3
		cmp	al, 2
		jnz	short loc_40AD78
		test	byte ptr [ebp+arg_0], 0C0h
		jnz	short loc_40AD81

loc_40AD78:				; CODE XREF: sub_40AD64+Cj
		test	[ebp+arg_0], 800h
		jz	short loc_40AD85

loc_40AD81:				; CODE XREF: sub_40AD64+12j
		mov	al, 1
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AD85:				; CODE XREF: sub_40AD64+1Bj
		xor	al, al
		pop	ebp
		retn
sub_40AD64	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40AD89	proc near		; CODE XREF: sub_40AA77+32p
					; sub_40ADEE+17p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		push	edi
		lea	esi, [ecx+0Ch]
		mov	edx, [esi]
		nop
		mov	eax, edx
		and	al, 3
		cmp	al, 2
		jnz	short loc_40ADE8
		test	dl, 0C0h
		jz	short loc_40ADE8
		mov	edi, [ecx]
		mov	eax, [ecx+4]
		sub	edi, eax
		mov	[ecx], eax
		and	dword ptr [ecx+8], 0
		test	edi, edi
		jle	short loc_40ADE8
		push	edi
		push	eax
		push	ecx
		call	sub_411027
		pop	ecx
		push	eax
		call	sub_411925
		add	esp, 0Ch
		cmp	edi, eax
		jz	short loc_40ADD8
		push	10h
		pop	eax
		lock or	[esi], eax
		or	eax, 0FFFFFFFFh
		jmp	short loc_40ADEA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40ADD8:				; CODE XREF: sub_40AD89+42j
		mov	eax, [esi]
		nop
		shr	eax, 2
		test	al, 1
		jz	short loc_40ADE8
		push	0FFFFFFFDh
		pop	eax
		lock and [esi],	eax

loc_40ADE8:				; CODE XREF: sub_40AD89+16j
					; sub_40AD89+1Bj ...
		xor	eax, eax

loc_40ADEA:				; CODE XREF: sub_40AD89+4Dj
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_40AD89	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40ADEE	proc near		; CODE XREF: sub_40AB68+4Ap
					; sub_40AC8C+26p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jnz	short loc_40AE04
		push	esi
		call	sub_40ACE2
		pop	ecx
		jmp	short loc_40AE33
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AE04:				; CODE XREF: sub_40ADEE+Bj
		push	esi
		call	sub_40AD89
		pop	ecx
		test	eax, eax
		jnz	short loc_40AE30
		mov	eax, [esi+0Ch]
		nop
		shr	eax, 0Bh
		test	al, 1
		jz	short loc_40AE2C
		push	esi
		call	sub_411027
		push	eax
		call	sub_411121
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_40AE30

loc_40AE2C:				; CODE XREF: sub_40ADEE+2Aj
		xor	eax, eax
		jmp	short loc_40AE33
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AE30:				; CODE XREF: sub_40ADEE+1Fj
					; sub_40ADEE+3Cj
		or	eax, 0FFFFFFFFh

loc_40AE33:				; CODE XREF: sub_40ADEE+14j
					; sub_40ADEE+40j
		pop	esi
		pop	ebp
		retn
sub_40ADEE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40AE36	proc near		; CODE XREF: sub_40A9BD+3p
					; sub_40E86F+14p
		push	1
		call	sub_40ACE2
		pop	ecx
		retn
sub_40AE36	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40AE3F	proc near		; CODE XREF: sub_4042D7+28p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		test	eax, eax
		jnz	short loc_40AE5A
		push	eax
		call	sub_40ACE2
		pop	ecx
		jmp	short loc_40AE92
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AE5A:				; CODE XREF: sub_40AE3F+10j
		mov	eax, [eax+0Ch]
		nop
		push	eax
		call	sub_40AD64
		add	esp, 4
		test	al, al
		jnz	short loc_40AE6F
		xor	eax, eax
		jmp	short loc_40AE92
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AE6F:				; CODE XREF: sub_40AE3F+2Aj
		lea	eax, [ebp+var_8]
		mov	[ebp+var_10], eax
		lea	ecx, [ebp-1]
		mov	eax, [ebp+var_8]
		mov	[ebp+var_C], eax
		mov	[ebp+var_14], eax
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+var_14]
		push	eax
		call	sub_40AC8C

loc_40AE92:				; CODE XREF: sub_40AE3F+19j
					; sub_40AE3F+2Ej
		mov	esp, ebp
		pop	ebp
		retn
sub_40AE3F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40AE96	proc near		; CODE XREF: sub_40AED2+D2p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		test	edx, edx
		jnz	short loc_40AEB7
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AEB7:				; CODE XREF: sub_40AE96+Aj
		sub	dword ptr [edx+8], 1
		jns	short loc_40AEC6
		push	edx
		call	sub_411D7B
		pop	ecx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AEC6:				; CODE XREF: sub_40AE96+25j
		mov	eax, [edx]
		mov	cl, [eax]
		inc	eax
		mov	[edx], eax
		movzx	eax, cl
		pop	ebp
		retn
sub_40AE96	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40AED2	proc near		; CODE XREF: sub_4035CD+6p
					; sub_404313+83p ...
		push	10h
		push	offset dword_42B038
		call	sub_405FF0
		mov	esi, [ebp+8]
		mov	[ebp-20h], esi
		test	esi, esi
		jnz	short loc_40AF00
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35

loc_40AEF8:				; CODE XREF: sub_40AED2+CCj
		or	eax, 0FFFFFFFFh
		jmp	loc_40AFBD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AF00:				; CODE XREF: sub_40AED2+14j
		and	dword ptr [ebp-1Ch], 0
		push	esi
		call	sub_40AA4F
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	eax, [esi+0Ch]
		nop
		shr	eax, 0Ch
		test	al, 1
		jnz	loc_40AFA3
		push	esi
		call	sub_411027
		pop	ecx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40AF4A
		cmp	eax, 0FFFFFFFEh
		jz	short loc_40AF4A
		mov	edx, eax
		sar	edx, 6
		mov	edi, eax
		and	edi, 3Fh
		imul	ebx, edi, 38h
		add	ebx, dword_42D950[edx*4]
		mov	ecx, offset dword_42C2C8
		jmp	short loc_40AF5B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AF4A:				; CODE XREF: sub_40AED2+56j
					; sub_40AED2+5Bj
		mov	ecx, offset dword_42C2C8
		mov	ebx, ecx
		mov	edx, eax
		sar	edx, 6
		mov	edi, eax
		and	edi, 3Fh

loc_40AF5B:				; CODE XREF: sub_40AED2+76j
		cmp	byte ptr [ebx+29h], 0
		jnz	short loc_40AF7B
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40AF75
		cmp	eax, 0FFFFFFFEh
		jz	short loc_40AF75
		imul	ecx, edi, 38h
		add	ecx, dword_42D950[edx*4]

loc_40AF75:				; CODE XREF: sub_40AED2+92j
					; sub_40AED2+97j
		test	byte ptr [ecx+2Dh], 1
		jz	short loc_40AFA3

loc_40AF7B:				; CODE XREF: sub_40AED2+8Dj
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		push	0FFFFFFFEh
		lea	ecx, [ebp-10h]
		push	ecx
		push	offset dword_42C06C
		call	sub_409610
		add	esp, 0Ch
		jmp	loc_40AEF8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AFA3:				; CODE XREF: sub_40AED2+46j
					; sub_40AED2+A7j
		push	esi
		call	sub_40AE96
		pop	ecx
		mov	esi, eax
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40AFC6
		mov	eax, esi

loc_40AFBD:				; CODE XREF: sub_40AED2+29j
		call	sub_406036
		retn
sub_40AED2	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40AFC3	proc near		; DATA XREF: .rdata:0042B050o
		mov	esi, [ebp-1Ch]
sub_40AFC3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40AFC6	proc near		; CODE XREF: sub_40AED2+E4p
		push	dword ptr [ebp-20h]
		call	sub_40AA63
		pop	ecx
		retn
sub_40AFC6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40AFD0	proc near		; CODE XREF: sub_404106+6Ap

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		jnz	short loc_40AFF0
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40AFF0:				; CODE XREF: sub_40AFD0+9j
		push	esi
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jnz	short loc_40B00D
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		jmp	short loc_40B028
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B00D:				; CODE XREF: sub_40AFD0+26j
		push	[ebp+arg_0]
		call	sub_41235F
		pop	ecx
		mov	ecx, eax
		mov	[esi], eax
		and	ecx, edx
		mov	[esi+4], edx
		or	eax, 0FFFFFFFFh
		cmp	ecx, eax
		jz	short loc_40B028
		xor	eax, eax

loc_40B028:				; CODE XREF: sub_40AFD0+3Bj
					; sub_40AFD0+54j
		pop	esi
		pop	ebp
		retn
sub_40AFD0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40B02B	proc near		; CODE XREF: sub_40B054+D2p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		sub	dword ptr [edx+8], 1
		jns	short loc_40B046
		push	edx
		push	[ebp+arg_0]
		call	sub_4125DD
		pop	ecx
		pop	ecx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B046:				; CODE XREF: sub_40B02B+Cj
		mov	eax, [edx]
		mov	cl, byte ptr [ebp+arg_0]
		mov	[eax], cl
		inc	dword ptr [edx]
		movzx	eax, cl
		pop	ebp
		retn
sub_40B02B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40B054	proc near		; CODE XREF: sub_4035ED+Bp
		push	0Ch
		push	offset dword_42B058
		call	sub_405FF0
		mov	esi, [ebp+0Ch]
		test	esi, esi
		jnz	short loc_40B07F
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35

loc_40B077:				; CODE XREF: sub_40B054+C9j
		or	eax, 0FFFFFFFFh
		jmp	loc_40B140
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B07F:				; CODE XREF: sub_40B054+11j
		and	dword ptr [ebp-1Ch], 0
		push	esi
		call	sub_40AA4F
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	eax, [esi+0Ch]
		nop
		shr	eax, 0Ch
		test	al, 1
		jnz	loc_40B122
		push	esi
		call	sub_411027
		pop	ecx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40B0C9
		cmp	eax, 0FFFFFFFEh
		jz	short loc_40B0C9
		mov	edx, eax
		sar	edx, 6
		mov	edi, eax
		and	edi, 3Fh
		imul	ebx, edi, 38h
		add	ebx, dword_42D950[edx*4]
		mov	ecx, offset dword_42C2C8
		jmp	short loc_40B0DA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B0C9:				; CODE XREF: sub_40B054+53j
					; sub_40B054+58j
		mov	ecx, offset dword_42C2C8
		mov	ebx, ecx
		mov	edx, eax
		sar	edx, 6
		mov	edi, eax
		and	edi, 3Fh

loc_40B0DA:				; CODE XREF: sub_40B054+73j
		cmp	byte ptr [ebx+29h], 0
		jnz	short loc_40B0FA
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40B0F4
		cmp	eax, 0FFFFFFFEh
		jz	short loc_40B0F4
		imul	ecx, edi, 38h
		add	ecx, dword_42D950[edx*4]

loc_40B0F4:				; CODE XREF: sub_40B054+8Fj
					; sub_40B054+94j
		test	byte ptr [ecx+2Dh], 1
		jz	short loc_40B122

loc_40B0FA:				; CODE XREF: sub_40B054+8Aj
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		push	0FFFFFFFEh
		lea	ecx, [ebp-10h]
		push	ecx
		push	offset dword_42C06C
		call	sub_409610
		add	esp, 0Ch
		jmp	loc_40B077
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B122:				; CODE XREF: sub_40B054+43j
					; sub_40B054+A4j
		push	esi
		push	dword ptr [ebp+8]
		call	sub_40B02B
		pop	ecx
		pop	ecx
		mov	edi, eax
		mov	[ebp-1Ch], edi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40B14C
		mov	eax, edi

loc_40B140:				; CODE XREF: sub_40B054+26j
		call	sub_406036
		retn
sub_40B054	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40B146	proc near		; DATA XREF: .rdata:0042B070o
		mov	esi, [ebp+0Ch]
		mov	edi, [ebp-1Ch]
sub_40B146	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40B14C	proc near		; CODE XREF: sub_40B054+E5p
		push	esi
		call	sub_40AA63
		pop	ecx
		retn
sub_40B14C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40B154	proc near		; CODE XREF: sub_40B359+68p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
lpWideCharStr	= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		cmp	[ebp+arg_8], 0
		push	ebx
		push	esi
		push	edi
		jz	short loc_40B181
		cmp	[ebp+arg_C], 0
		jz	short loc_40B181
		cmp	[ebp+arg_0], 0
		jnz	short loc_40B18A

loc_40B171:				; CODE XREF: sub_40B154+62j
					; sub_40B154+6Fj
		call	sub_40BD71
		mov	dword ptr [eax], 16h

loc_40B17C:				; CODE XREF: sub_40B154+1B6j
		call	sub_409E35

loc_40B181:				; CODE XREF: sub_40B154+Fj
					; sub_40B154+15j
		xor	eax, eax

loc_40B183:				; CODE XREF: sub_40B154+1DBj
					; sub_40B154+1E3j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B18A:				; CODE XREF: sub_40B154+1Bj
		mov	edi, [ebp+arg_10]
		mov	esi, [ebp+arg_4]
		test	edi, edi
		jz	short loc_40B1A1
		or	eax, 0FFFFFFFFh
		xor	edx, edx
		div	[ebp+arg_8]
		cmp	[ebp+arg_C], eax
		jbe	short loc_40B1C5

loc_40B1A1:				; CODE XREF: sub_40B154+3Ej
		cmp	esi, 0FFFFFFFFh
		jz	short loc_40B1B4
		push	esi
		push	0
		push	[ebp+arg_0]
		call	sub_407330
		add	esp, 0Ch

loc_40B1B4:				; CODE XREF: sub_40B154+50j
		test	edi, edi
		jz	short loc_40B171
		or	eax, 0FFFFFFFFh
		xor	edx, edx
		div	[ebp+arg_8]
		cmp	[ebp+arg_C], eax
		ja	short loc_40B171

loc_40B1C5:				; CODE XREF: sub_40B154+4Bj
		mov	edx, edi
		lea	eax, [edx+0Ch]
		mov	[ebp+var_14], eax
		mov	eax, [eax]
		nop
		test	eax, 4C0h
		jz	short loc_40B1DF
		mov	eax, [edx+18h]
		mov	[ebp+var_10], eax
		jmp	short loc_40B1E6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B1DF:				; CODE XREF: sub_40B154+81j
		mov	[ebp+var_10], 1000h

loc_40B1E6:				; CODE XREF: sub_40B154+89j
		mov	edi, [ebp+arg_8]
		mov	ebx, esi
		imul	edi, [ebp+arg_C]
		mov	eax, [ebp+arg_0]
		mov	[ebp+lpWideCharStr], eax
		mov	[ebp+var_8], ebx
		mov	ecx, edi
		mov	[ebp+var_4], ecx
		test	edi, edi
		jz	loc_40B334

loc_40B205:				; CODE XREF: sub_40B154+193j
		mov	eax, [edx+0Ch]
		nop
		test	eax, 4C0h
		jz	short loc_40B256
		mov	ebx, [edx+8]
		test	ebx, ebx
		jz	short loc_40B253
		js	loc_40B30F
		cmp	ecx, ebx
		jnb	short loc_40B223
		mov	ebx, ecx

loc_40B223:				; CODE XREF: sub_40B154+CBj
		mov	eax, [ebp+var_8]
		cmp	ebx, eax
		ja	loc_40B2EC
		mov	ecx, [ebp+lpWideCharStr]
		push	ebx
		push	dword ptr [edx]
		push	eax
		push	ecx
		call	sub_40B3EC
		mov	edx, [ebp+arg_10]
		add	esp, 10h
		mov	ecx, [ebp+var_4]
		sub	ecx, ebx
		sub	[edx+8], ebx
		add	[edx], ebx
		sub	[ebp+var_8], ebx
		jmp	loc_40B2DA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B253:				; CODE XREF: sub_40B154+C1j
		mov	ebx, [ebp+var_8]

loc_40B256:				; CODE XREF: sub_40B154+BAj
		mov	eax, [ebp+var_10]
		cmp	ecx, eax
		jb	short loc_40B2B1
		cmp	ecx, 7FFFFFFFh
		jbe	short loc_40B26A
		mov	ecx, 7FFFFFFFh

loc_40B26A:				; CODE XREF: sub_40B154+10Fj
		test	eax, eax
		jz	short loc_40B27A
		xor	edx, edx
		mov	eax, ecx
		div	[ebp+var_10]
		sub	ecx, edx
		mov	edx, [ebp+arg_10]

loc_40B27A:				; CODE XREF: sub_40B154+118j
		cmp	ecx, ebx
		ja	short loc_40B2EC
		mov	eax, [edx+4]
		and	dword ptr [edx+8], 0
		push	ecx		; int
		mov	ecx, [ebp+lpWideCharStr]
		push	ecx		; lpWideCharStr
		push	edx
		mov	[edx], eax
		call	sub_411027
		pop	ecx
		push	eax		; int
		call	sub_412BEA
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_40B31C
		mov	ecx, [ebp+var_4]
		js	short loc_40B30F
		mov	edx, [ebp+arg_10]
		sub	ecx, ebx
		sub	[ebp+var_8], ebx
		jmp	short loc_40B2DA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B2B1:				; CODE XREF: sub_40B154+107j
		push	edx
		call	sub_411D7B
		pop	ecx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40B325
		test	ebx, ebx
		jz	short loc_40B2EC
		mov	ecx, [ebp+lpWideCharStr]
		mov	edx, [ebp+arg_10]
		mov	[ecx], al
		mov	ecx, [ebp+var_4]
		mov	eax, [edx+18h]
		dec	ecx
		dec	ebx
		mov	[ebp+var_10], eax
		mov	[ebp+var_8], ebx
		xor	ebx, ebx
		inc	ebx

loc_40B2DA:				; CODE XREF: sub_40B154+FAj
					; sub_40B154+15Bj
		add	[ebp+lpWideCharStr], ebx
		mov	[ebp+var_4], ecx
		test	ecx, ecx
		jz	short loc_40B334
		mov	ebx, [ebp+var_8]
		jmp	loc_40B205
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B2EC:				; CODE XREF: sub_40B154+D4j
					; sub_40B154+128j ...
		cmp	esi, 0FFFFFFFFh
		jz	short loc_40B2FF
		push	esi
		push	0
		push	[ebp+arg_0]
		call	sub_407330
		add	esp, 0Ch

loc_40B2FF:				; CODE XREF: sub_40B154+19Bj
		call	sub_40BD71
		mov	dword ptr [eax], 22h
		jmp	loc_40B17C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B30F:				; CODE XREF: sub_40B154+C3j
					; sub_40B154+151j
		mov	eax, [ebp+var_14]
		push	10h
		pop	edx
		lock or	[eax], edx
		sub	edi, ecx
		jmp	short loc_40B328
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B31C:				; CODE XREF: sub_40B154+14Cj
		mov	eax, [ebp+var_14]
		push	8
		pop	ecx
		lock or	[eax], ecx

loc_40B325:				; CODE XREF: sub_40B154+167j
		sub	edi, [ebp+var_4]

loc_40B328:				; CODE XREF: sub_40B154+1C6j
		mov	eax, edi
		xor	edx, edx
		div	[ebp+arg_8]
		jmp	loc_40B183
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B334:				; CODE XREF: sub_40B154+ABj
					; sub_40B154+18Ej
		mov	eax, [ebp+arg_C]
		jmp	loc_40B183
sub_40B154	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40B33C	proc near		; CODE XREF: sub_404518+C9p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	0FFFFFFFFh
		push	[ebp+arg_0]
		call	sub_40B359
		add	esp, 14h
		pop	ebp
		retn
sub_40B33C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40B359	proc near		; CODE XREF: sub_40B33C+13p
		push	0Ch
		push	offset dword_42B078
		call	sub_405FF0
		cmp	dword ptr [ebp+10h], 0
		jz	short loc_40B39D
		cmp	dword ptr [ebp+14h], 0
		jz	short loc_40B39D
		mov	esi, [ebp+18h]
		test	esi, esi
		jnz	short loc_40B3A5
		cmp	dword ptr [ebp+0Ch], 0FFFFFFFFh
		jz	short loc_40B38D
		push	dword ptr [ebp+0Ch]
		push	esi
		push	dword ptr [ebp+8]
		call	sub_407330
		add	esp, 0Ch

loc_40B38D:				; CODE XREF: sub_40B359+23j
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35

loc_40B39D:				; CODE XREF: sub_40B359+10j
					; sub_40B359+16j
		xor	eax, eax

loc_40B39F:				; CODE XREF: sub_40B359+83j
		call	sub_406036
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B3A5:				; CODE XREF: sub_40B359+1Dj
		and	dword ptr [ebp-1Ch], 0
		push	esi
		call	sub_40AA4F
		pop	ecx
		and	dword ptr [ebp-4], 0
		push	esi
		push	dword ptr [ebp+14h]
		push	dword ptr [ebp+10h]
		push	dword ptr [ebp+0Ch]
		push	dword ptr [ebp+8]
		call	sub_40B154
		add	esp, 14h
		mov	edi, eax
		mov	[ebp-1Ch], edi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40B3E4
		mov	eax, edi
		jmp	short loc_40B39F
sub_40B359	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40B3DE	proc near		; DATA XREF: .rdata:0042B090o
		mov	esi, [ebp+18h]
		mov	edi, [ebp-1Ch]
sub_40B3DE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40B3E4	proc near		; CODE XREF: sub_40B359+7Cp
		push	esi
		call	sub_40AA63
		pop	ecx
		retn
sub_40B3E4	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40B3EC	proc near		; CODE XREF: sub_40B154+E2p
					; sub_4161E2+1Dp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_C]
		test	esi, esi
		jnz	short loc_40B3FD
		xor	eax, eax
		jmp	short loc_40B46A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B3FD:				; CODE XREF: sub_40B3EC+Bj
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_40B417
		call	sub_40BD71
		push	16h
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		mov	eax, esi
		jmp	short loc_40B46A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B417:				; CODE XREF: sub_40B3EC+16j
		push	edi
		mov	edi, [ebp+arg_8]
		test	edi, edi
		jz	short loc_40B433
		cmp	[ebp+arg_4], esi
		jb	short loc_40B433
		push	esi
		push	edi
		push	eax
		call	loc_4067C0
		add	esp, 0Ch
		xor	eax, eax
		jmp	short loc_40B469
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B433:				; CODE XREF: sub_40B3EC+31j
					; sub_40B3EC+36j
		push	[ebp+arg_4]
		push	0
		push	eax
		call	sub_407330
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_40B44E
		call	sub_40BD71
		push	16h
		jmp	short loc_40B45A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B44E:				; CODE XREF: sub_40B3EC+57j
		cmp	[ebp+arg_4], esi
		jnb	short loc_40B466
		call	sub_40BD71
		push	22h

loc_40B45A:				; CODE XREF: sub_40B3EC+60j
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		mov	eax, esi
		jmp	short loc_40B469
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B466:				; CODE XREF: sub_40B3EC+65j
		push	16h
		pop	eax

loc_40B469:				; CODE XREF: sub_40B3EC+45j
					; sub_40B3EC+78j
		pop	edi

loc_40B46A:				; CODE XREF: sub_40B3EC+Fj
					; sub_40B3EC+29j
		pop	esi
		pop	ebp
		retn
sub_40B3EC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40B46D	proc near		; CODE XREF: sub_4041DB+32p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		jnz	short loc_40B48D

loc_40B478:				; CODE XREF: sub_40B46D+25j
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B48D:				; CODE XREF: sub_40B46D+9j
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_40B478
		push	0
		push	dword ptr [eax+4]
		push	dword ptr [eax]
		push	[ebp+arg_0]
		call	sub_40B75A
		add	esp, 10h
		pop	ebp
		retn
sub_40B46D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40B4A8	proc near		; CODE XREF: sub_40B5A3+91p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		sub	edx, [ebp+arg_8]
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		sbb	edi, [ebp+arg_C]
		xor	ecx, ecx
		xor	eax, eax
		inc	ecx
		cmp	[ebp+arg_4], eax
		jg	short loc_40B4D1
		jl	short loc_40B4CD
		cmp	[ebp+arg_0], eax
		jnb	short loc_40B4D1

loc_40B4CD:				; CODE XREF: sub_40B4A8+1Ej
		mov	ebx, ecx
		jmp	short loc_40B4D3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B4D1:				; CODE XREF: sub_40B4A8+1Cj
					; sub_40B4A8+23j
		mov	ebx, eax

loc_40B4D3:				; CODE XREF: sub_40B4A8+27j
		cmp	[ebp+arg_C], eax
		jg	short loc_40B4E3
		jl	short loc_40B4DF
		cmp	[ebp+arg_8], eax
		jnb	short loc_40B4E3

loc_40B4DF:				; CODE XREF: sub_40B4A8+30j
		mov	esi, ecx
		jmp	short loc_40B4E5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B4E3:				; CODE XREF: sub_40B4A8+2Ej
					; sub_40B4A8+35j
		mov	esi, eax

loc_40B4E5:				; CODE XREF: sub_40B4A8+39j
		cmp	ebx, esi
		jz	short loc_40B515
		cmp	[ebp+arg_4], eax
		jg	short loc_40B4F9
		jl	short loc_40B4F5
		cmp	[ebp+arg_0], eax
		jnb	short loc_40B4F9

loc_40B4F5:				; CODE XREF: sub_40B4A8+46j
		mov	esi, ecx
		jmp	short loc_40B4FB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B4F9:				; CODE XREF: sub_40B4A8+44j
					; sub_40B4A8+4Bj
		mov	esi, eax

loc_40B4FB:				; CODE XREF: sub_40B4A8+4Fj
		cmp	edi, eax
		jg	short loc_40B505
		jl	short loc_40B507
		cmp	edx, eax
		jb	short loc_40B507

loc_40B505:				; CODE XREF: sub_40B4A8+55j
		mov	ecx, eax

loc_40B507:				; CODE XREF: sub_40B4A8+57j
					; sub_40B4A8+5Bj
		cmp	esi, ecx
		jz	short loc_40B515
		or	edx, 0FFFFFFFFh
		mov	eax, 80070216h
		mov	edi, edx

loc_40B515:				; CODE XREF: sub_40B4A8+3Fj
					; sub_40B4A8+61j
		mov	ecx, [ebp+arg_10]
		mov	[ecx], edx
		mov	[ecx+4], edi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_40B4A8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40B522	proc near		; CODE XREF: sub_40B75A+11p
		push	0Ch
		push	offset dword_42B098
		call	sub_405FF0
		cmp	dword ptr [ebp+8], 0
		jnz	short loc_40B549

loc_40B534:				; CODE XREF: sub_40B522+36j
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		jmp	short loc_40B590
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B549:				; CODE XREF: sub_40B522+10j
		mov	esi, [ebp+14h]
		test	esi, esi
		jz	short loc_40B55A
		cmp	esi, 1
		jz	short loc_40B55A
		cmp	esi, 2
		jnz	short loc_40B534

loc_40B55A:				; CODE XREF: sub_40B522+2Cj
					; sub_40B522+31j
		or	dword ptr [ebp-1Ch], 0FFFFFFFFh
		push	dword ptr [ebp+8]
		call	sub_40AA4F
		pop	ecx
		and	dword ptr [ebp-4], 0
		push	esi
		push	dword ptr [ebp+10h]
		push	dword ptr [ebp+0Ch]
		push	dword ptr [ebp+8]
		call	sub_40B67C
		add	esp, 10h
		mov	esi, eax
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40B599
		mov	eax, esi

loc_40B590:				; CODE XREF: sub_40B522+25j
		call	sub_406036
		retn
sub_40B522	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40B596	proc near		; DATA XREF: .rdata:0042B0B0o
		mov	esi, [ebp-1Ch]
sub_40B596	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40B599	proc near		; CODE XREF: sub_40B522+67p
		push	dword ptr [ebp+8]
		call	sub_40AA63
		pop	ecx
		retn
sub_40B599	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40B5A3	proc near		; CODE XREF: sub_40B67C+41p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_C], 2
		push	esi
		push	edi
		jz	loc_40B640
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		nop
		test	eax, 4C0h
		jz	short loc_40B640
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		nop
		test	al, 6
		jnz	short loc_40B640
		mov	eax, [ebp+arg_0]
		xor	esi, esi
		cmp	[eax+8], esi
		jle	short loc_40B640
		mov	edx, [eax+10h]
		nop
		mov	eax, edx
		mov	ecx, edx
		and	eax, 3Fh
		sar	ecx, 6
		imul	eax, 38h
		mov	ecx, dword_42D950[ecx*4]
		cmp	byte ptr [ecx+eax+28h],	0
		jl	short loc_40B640
		cmp	byte ptr [ecx+eax+29h],	0
		jnz	short loc_40B640
		cmp	[ebp+arg_C], esi
		jnz	short loc_40B646
		push	1
		push	esi
		push	esi
		push	edx
		call	sub_413137
		mov	edi, edx
		add	esp, 10h
		mov	ecx, eax
		cmp	edi, esi
		jl	short loc_40B640
		jg	short loc_40B61D
		cmp	ecx, esi
		jb	short loc_40B640

loc_40B61D:				; CODE XREF: sub_40B5A3+74j
		mov	esi, [ebp+arg_0]
		lea	eax, [ebp+arg_4]
		push	eax
		mov	eax, [esi+8]
		cdq
		sub	ecx, eax
		sbb	edi, edx
		push	edi
		push	ecx
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		call	sub_40B4A8
		add	esp, 14h
		test	eax, eax
		jns	short loc_40B649

loc_40B640:				; CODE XREF: sub_40B5A3+Bj
					; sub_40B5A3+1Dj ...
		xor	al, al

loc_40B642:				; CODE XREF: sub_40B5A3+D7j
		pop	edi
		pop	esi
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B646:				; CODE XREF: sub_40B5A3+5Dj
		mov	esi, [ebp+arg_0]

loc_40B649:				; CODE XREF: sub_40B5A3+9Bj
		mov	eax, [esi+4]
		mov	ecx, [esi]
		sub	eax, ecx
		cdq
		cmp	edx, [ebp+arg_8]
		jg	short loc_40B640
		mov	edi, [ebp+arg_4]
		jl	short loc_40B65F
		cmp	eax, edi
		ja	short loc_40B640

loc_40B65F:				; CODE XREF: sub_40B5A3+B6j
		mov	eax, [esi+8]
		cdq
		cmp	[ebp+arg_8], edx
		jg	short loc_40B640
		jl	short loc_40B66E
		cmp	edi, eax
		ja	short loc_40B640

loc_40B66E:				; CODE XREF: sub_40B5A3+C5j
		add	ecx, edi
		mov	al, 1
		mov	[esi], ecx
		mov	ecx, [ebp+arg_0]
		sub	[ecx+8], edi
		jmp	short loc_40B642
sub_40B5A3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40B67C	proc near		; CODE XREF: sub_40B522+53p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		nop
		shr	eax, 0Dh
		test	al, 1
		jnz	short loc_40B69F
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B69F:				; CODE XREF: sub_40B67C+11j
		mov	eax, [ebp+arg_0]
		push	ebx
		push	esi
		push	edi
		push	0FFFFFFF7h
		pop	ecx
		add	eax, 0Ch
		lock and [eax],	ecx
		mov	esi, [ebp+arg_C]
		mov	edi, [ebp+arg_8]
		mov	ebx, [ebp+arg_4]
		push	esi
		push	edi
		push	ebx
		push	[ebp+arg_0]
		call	sub_40B5A3
		add	esp, 10h
		test	al, al
		jnz	loc_40B753
		cmp	esi, 1
		jnz	short loc_40B6E1
		push	[ebp+arg_0]
		call	sub_41236A
		add	ebx, eax
		pop	ecx
		adc	edi, edx
		xor	esi, esi

loc_40B6E1:				; CODE XREF: sub_40B67C+54j
		push	[ebp+arg_0]
		call	sub_40AD89
		mov	eax, [ebp+arg_0]
		pop	ecx
		mov	ecx, [eax+4]
		and	dword ptr [eax+8], 0
		mov	[eax], ecx
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		nop
		shr	eax, 2
		test	al, 1
		mov	eax, [ebp+arg_0]
		jz	short loc_40B712
		push	0FFFFFFFCh
		pop	ecx
		add	eax, 0Ch
		lock and [eax],	ecx
		jmp	short loc_40B735
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B712:				; CODE XREF: sub_40B67C+89j
		mov	eax, [eax+0Ch]
		nop
		and	eax, 41h
		cmp	al, 41h
		jnz	short loc_40B735
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		nop
		shr	eax, 8
		test	al, 1
		jnz	short loc_40B735
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+18h], 200h

loc_40B735:				; CODE XREF: sub_40B67C+94j
					; sub_40B67C+9Fj ...
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		nop
		push	esi
		push	edi
		push	ebx
		push	eax
		call	sub_413137
		and	eax, edx
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_40B753
		or	eax, eax
		jmp	short loc_40B755
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B753:				; CODE XREF: sub_40B67C+4Bj
					; sub_40B67C+D1j
		xor	eax, eax

loc_40B755:				; CODE XREF: sub_40B67C+D5j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_40B67C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40B75A	proc near		; CODE XREF: sub_404106+57p
					; sub_40B46D+31p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_40B522
		add	esp, 10h
		pop	ebp
		retn
sub_40B75A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40B775	proc near		; CODE XREF: sub_40B98E+5Ep
		push	0Ch
		push	offset dword_42B0B8
		call	sub_405FF0
		and	dword ptr [ebp-1Ch], 0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_40AA4F
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	ecx, [ebp+0Ch]
		call	sub_40B7C6
		mov	esi, eax
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40B7BA
		mov	eax, esi
		call	sub_406036
		retn	0Ch
sub_40B775	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40B7B7	proc near		; DATA XREF: .rdata:0042B0D0o
		mov	esi, [ebp-1Ch]
sub_40B7B7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40B7BA	proc near		; CODE XREF: sub_40B775+33p
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_40AA63
		pop	ecx
		retn
sub_40B7BA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40B7C6	proc near		; CODE XREF: sub_40B775+22p

var_4		= dword	ptr -4

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		push	edi
		mov	eax, [esi]
		mov	edi, [eax]
		push	edi
		call	sub_413152
		mov	byte ptr [ebp+var_4], al
		mov	eax, [esi]
		push	dword ptr [eax]
		mov	eax, [esi+0Ch]
		push	dword ptr [eax]
		mov	eax, [esi+8]
		push	dword ptr [eax]
		mov	eax, [esi+4]
		push	dword ptr [eax]
		call	sub_40B80B
		push	edi
		push	[ebp+var_4]
		mov	esi, eax
		call	sub_413205
		add	esp, 1Ch
		mov	eax, esi
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_40B7C6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40B80B	proc near		; CODE XREF: sub_40B7C6+2Ap

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		push	edi
		test	ebx, ebx
		jz	short loc_40B83B
		mov	esi, [ebp+arg_8]
		test	esi, esi
		jz	short loc_40B83B
		mov	edi, [ebp+arg_C]
		test	edi, edi
		jnz	short loc_40B844

loc_40B82B:				; CODE XREF: sub_40B80B+3Dj
					; sub_40B80B+48j
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35

loc_40B83B:				; CODE XREF: sub_40B80B+10j
					; sub_40B80B+17j
		xor	eax, eax

loc_40B83D:				; CODE XREF: sub_40B80B+167j
					; sub_40B80B+17Ej
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B844:				; CODE XREF: sub_40B80B+1Ej
		cmp	[ebp+arg_0], 0
		jz	short loc_40B82B
		or	eax, 0FFFFFFFFh
		xor	edx, edx
		div	ebx
		cmp	esi, eax
		ja	short loc_40B82B
		lea	eax, [edi+0Ch]
		mov	[ebp+var_C], eax
		mov	eax, [eax]
		nop
		test	eax, 4C0h
		jz	short loc_40B86A
		mov	ecx, [edi+18h]
		jmp	short loc_40B86F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B86A:				; CODE XREF: sub_40B80B+58j
		mov	ecx, 1000h

loc_40B86F:				; CODE XREF: sub_40B80B+5Dj
		imul	ebx, esi
		mov	[ebp+var_4], ecx
		mov	esi, ebx
		test	ebx, ebx
		jz	loc_40B96F
		mov	edx, [ebp+arg_0]

loc_40B882:				; CODE XREF: sub_40B80B+15Ej
		mov	eax, [edi+0Ch]
		nop
		test	al, 0C0h
		jz	short loc_40B8CA
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_40B8CA
		js	loc_40B977
		mov	eax, [edi+0Ch]
		nop
		test	al, 1
		jnz	loc_40B980
		mov	eax, [edi+8]
		mov	[ebp+var_8], eax
		cmp	esi, eax
		jnb	short loc_40B8B2
		mov	eax, esi
		mov	[ebp+var_8], esi

loc_40B8B2:				; CODE XREF: sub_40B80B+A0j
		push	eax
		push	edx
		push	dword ptr [edi]
		call	loc_4067C0
		mov	eax, [ebp+var_8]
		add	esp, 0Ch
		sub	[edi+8], eax
		sub	esi, eax
		add	[edi], eax
		jmp	short loc_40B935
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B8CA:				; CODE XREF: sub_40B80B+7Dj
					; sub_40B80B+84j
		cmp	esi, ecx
		jb	short loc_40B93A
		mov	eax, [edi+0Ch]
		nop
		test	al, 0C0h
		jz	short loc_40B8E8
		push	edi
		call	sub_40AD89
		pop	ecx
		test	eax, eax
		jnz	loc_40B980
		mov	ecx, [ebp+var_4]

loc_40B8E8:				; CODE XREF: sub_40B80B+C9j
		mov	eax, esi
		test	ecx, ecx
		jz	short loc_40B8FB
		xor	edx, edx
		div	ecx
		mov	eax, esi
		sub	eax, edx
		mov	[ebp+var_8], eax
		jmp	short loc_40B8FE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B8FB:				; CODE XREF: sub_40B80B+E1j
		mov	[ebp+var_8], esi

loc_40B8FE:				; CODE XREF: sub_40B80B+EEj
		cmp	eax, 0FFFFFFFEh
		jb	short loc_40B909
		push	0FFFFFFFEh
		pop	eax
		mov	[ebp+var_8], eax

loc_40B909:				; CODE XREF: sub_40B80B+F6j
		push	eax
		push	[ebp+arg_0]
		push	edi
		call	sub_411027
		pop	ecx
		push	eax
		call	sub_411925
		mov	edx, eax
		add	esp, 0Ch
		cmp	edx, 0FFFFFFFFh
		jz	short loc_40B977
		mov	ecx, [ebp+var_8]
		mov	eax, ecx
		cmp	edx, ecx
		ja	short loc_40B92F
		mov	eax, edx

loc_40B92F:				; CODE XREF: sub_40B80B+120j
		sub	esi, eax
		cmp	edx, ecx
		jb	short loc_40B977

loc_40B935:				; CODE XREF: sub_40B80B+BDj
		mov	ecx, [ebp+var_4]
		jmp	short loc_40B95F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B93A:				; CODE XREF: sub_40B80B+C1j
		movsx	eax, byte ptr [edx]
		push	edi
		push	eax
		call	sub_4125DD
		pop	ecx
		pop	ecx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40B980
		mov	ecx, [edi+18h]
		dec	esi
		xor	eax, eax
		mov	[ebp+var_4], ecx
		test	ecx, ecx
		jg	short loc_40B95E
		xor	ecx, ecx
		inc	ecx
		mov	[ebp+var_4], ecx

loc_40B95E:				; CODE XREF: sub_40B80B+14Bj
		inc	eax

loc_40B95F:				; CODE XREF: sub_40B80B+12Dj
		mov	edx, [ebp+arg_0]
		add	edx, eax
		mov	[ebp+arg_0], edx
		test	esi, esi
		jnz	loc_40B882

loc_40B96F:				; CODE XREF: sub_40B80B+6Ej
		mov	eax, [ebp+arg_8]
		jmp	loc_40B83D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B977:				; CODE XREF: sub_40B80B+86j
					; sub_40B80B+117j ...
		mov	eax, [ebp+var_C]
		push	10h
		pop	ecx
		lock or	[eax], ecx

loc_40B980:				; CODE XREF: sub_40B80B+92j
					; sub_40B80B+D4j ...
		sub	ebx, esi
		xor	edx, edx
		mov	eax, ebx
		div	[ebp+arg_4]
		jmp	loc_40B83D
sub_40B80B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40B98E	proc near		; CODE XREF: sub_403ADB+8Bp
					; sub_403F3A+D8p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		cmp	[ebp+arg_4], 0
		jz	short loc_40B9B9
		cmp	[ebp+arg_8], 0
		jz	short loc_40B9B9
		mov	eax, [ebp+arg_C]
		test	eax, eax
		jnz	short loc_40B9BF
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35

loc_40B9B9:				; CODE XREF: sub_40B98E+Cj
					; sub_40B98E+12j
		xor	eax, eax

loc_40B9BB:				; CODE XREF: sub_40B98E+63j
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40B9BF:				; CODE XREF: sub_40B98E+19j
		lea	ecx, [ebp+arg_C]
		mov	[ebp+var_8], eax
		mov	[ebp+var_1C], ecx
		lea	ecx, [ebp+arg_0]
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_18], ecx
		lea	ecx, [ebp+arg_4]
		push	eax
		mov	[ebp+var_14], ecx
		lea	eax, [ebp+var_1C]
		push	eax
		lea	ecx, [ebp+arg_8]
		lea	eax, [ebp+var_C]
		mov	[ebp+var_10], ecx
		push	eax
		lea	ecx, [ebp-1]
		call	sub_40B775
		jmp	short loc_40B9BB
sub_40B98E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40B9F3	proc near		; CODE XREF: sub_40BB11+7Bp
		push	0Ch
		push	offset dword_42B0D8
		call	sub_405FF0
		and	dword ptr [ebp-1Ch], 0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_40AA4F
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	ecx, [ebp+0Ch]
		call	sub_40BA44
		mov	esi, eax
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40BA38
		mov	eax, esi
		call	sub_406036
		retn	0Ch
sub_40B9F3	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40BA35	proc near		; DATA XREF: .rdata:0042B0F0o
		mov	esi, [ebp-1Ch]
sub_40BA35	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40BA38	proc near		; CODE XREF: sub_40B9F3+33p
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_40AA63
		pop	ecx
		retn
sub_40BA38	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40BA44	proc near		; CODE XREF: sub_40B9F3+22p
		mov	edi, edi
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		mov	eax, [esi]
		mov	edi, [eax]
		mov	eax, [esi+4]
		and	edi, 0FFFFFFFEh
		push	dword ptr [eax]
		call	sub_40AD89
		mov	eax, [esi+4]
		push	dword ptr [eax]
		call	sub_410C4C
		mov	eax, [esi+4]
		pop	ecx
		pop	ecx
		mov	ecx, 0FFFFF81Fh
		mov	eax, [eax]
		add	eax, 0Ch
		lock and [eax],	ecx
		mov	eax, [esi+8]
		test	byte ptr [eax],	4
		jz	short loc_40BA94
		mov	ecx, [esi+4]
		push	400h
		push	2
		mov	eax, [ecx]
		add	eax, 14h
		push	eax
		push	dword ptr [ecx]
		jmp	short loc_40BAD2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BA94:				; CODE XREF: sub_40BA44+3Aj
		mov	eax, [esi+0Ch]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_40BAC6
		push	edi
		call	sub_40FDE5
		push	0		; lpMem
		mov	ebx, eax
		call	sub_40F0A8
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jnz	short loc_40BABD
		inc	dword_42D6F4
		or	eax, 0FFFFFFFFh
		jmp	short loc_40BADA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BABD:				; CODE XREF: sub_40BA44+6Cj
		push	140h
		push	edi
		push	ebx
		jmp	short loc_40BACD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BAC6:				; CODE XREF: sub_40BA44+57j
		push	180h
		push	edi
		push	eax

loc_40BACD:				; CODE XREF: sub_40BA44+80j
		mov	eax, [esi+4]
		push	dword ptr [eax]

loc_40BAD2:				; CODE XREF: sub_40BA44+4Ej
		call	sub_40BADE
		add	esp, 10h

loc_40BADA:				; CODE XREF: sub_40BA44+77j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_40BA44	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40BADE	proc near		; CODE XREF: sub_40BA44:loc_40BAD2p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_C]
		add	eax, 0Ch
		lock or	[eax], ecx
		mov	ecx, [ebp+arg_0]
		mov	eax, [ebp+arg_8]
		mov	[ecx+18h], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax], ecx
		mov	eax, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	eax, [ebp+arg_0]
		and	dword ptr [eax+8], 0
		xor	eax, eax
		pop	ebp
		retn
sub_40BADE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40BB11	proc near		; CODE XREF: sub_40427F+2Bp

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_8], ecx
		test	ecx, ecx
		jnz	short loc_40BB38

loc_40BB23:				; CODE XREF: sub_40BB11+36j
					; sub_40BB11+4Cj
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		jmp	short loc_40BB91
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BB38:				; CODE XREF: sub_40BB11+10j
		mov	eax, [ebp+arg_8]
		cmp	eax, 4
		jz	short loc_40BB49
		test	eax, eax
		jz	short loc_40BB52
		cmp	eax, 40h
		jnz	short loc_40BB23

loc_40BB49:				; CODE XREF: sub_40BB11+2Dj
		test	eax, eax
		jz	short loc_40BB52
		cmp	eax, 40h
		jnz	short loc_40BB5F

loc_40BB52:				; CODE XREF: sub_40BB11+31j
					; sub_40BB11+3Aj
		mov	eax, [ebp+arg_C]
		add	eax, 0FFFFFFFEh
		cmp	eax, 7FFFFFFDh
		ja	short loc_40BB23

loc_40BB5F:				; CODE XREF: sub_40BB11+3Fj
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_C], ecx
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+arg_8]
		mov	[ebp+var_18], eax
		lea	eax, [ebp+arg_4]
		mov	[ebp+var_14], eax
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_20]
		mov	[ebp+var_10], ecx
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		lea	ecx, [ebp-1]
		call	sub_40B9F3

loc_40BB91:				; CODE XREF: sub_40BB11+25j
		mov	esp, ebp
		pop	ebp
		retn
sub_40BB11	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40BB95	proc near		; CODE XREF: sub_40BC8F+3Bp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		lea	edx, [esi+0Ch]
		mov	eax, [edx]
		nop
		shr	eax, 0Ch
		test	al, 1
		jnz	short loc_40BC20
		push	esi
		call	sub_411027
		mov	edi, offset dword_42C2C8
		pop	ecx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40BBD9
		cmp	eax, 0FFFFFFFEh
		jz	short loc_40BBD9
		mov	edx, eax
		mov	ecx, eax
		and	edx, 3Fh
		sar	ecx, 6
		imul	ebx, edx, 38h
		add	ebx, dword_42D950[ecx*4]
		jmp	short loc_40BBE5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BBD9:				; CODE XREF: sub_40BB95+27j
					; sub_40BB95+2Cj
		mov	ecx, eax
		mov	edx, eax
		sar	ecx, 6
		mov	ebx, edi
		and	edx, 3Fh

loc_40BBE5:				; CODE XREF: sub_40BB95+42j
		cmp	byte ptr [ebx+29h], 0
		jnz	short loc_40BC05
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40BBFF
		cmp	eax, 0FFFFFFFEh
		jz	short loc_40BBFF
		imul	edi, edx, 38h
		add	edi, dword_42D950[ecx*4]

loc_40BBFF:				; CODE XREF: sub_40BB95+59j
					; sub_40BB95+5Ej
		test	byte ptr [edi+2Dh], 1
		jz	short loc_40BC1D

loc_40BC05:				; CODE XREF: sub_40BB95+54j
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35

loc_40BC15:				; CODE XREF: sub_40BB95+91j
					; sub_40BB95+A3j ...
		or	eax, 0FFFFFFFFh

loc_40BC18:				; CODE XREF: sub_40BB95+F8j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BC1D:				; CODE XREF: sub_40BB95+6Ej
		lea	edx, [esi+0Ch]

loc_40BC20:				; CODE XREF: sub_40BB95+16j
		mov	ebx, [ebp+arg_0]
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_40BC15
		mov	eax, [edx]
		nop
		mov	ecx, [edx]
		nop
		test	al, 1
		jnz	short loc_40BC3A
		and	ecx, 6
		cmp	cl, 6
		jnz	short loc_40BC15

loc_40BC3A:				; CODE XREF: sub_40BB95+9Bj
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_40BC4E
		push	esi
		call	sub_41323F
		mov	eax, [esi+4]
		lea	edx, [esi+0Ch]
		pop	ecx

loc_40BC4E:				; CODE XREF: sub_40BB95+AAj
		mov	ecx, [esi]
		cmp	ecx, eax
		jnz	short loc_40BC5F
		cmp	dword ptr [esi+8], 0
		jnz	short loc_40BC15
		lea	eax, [ecx+1]
		mov	[esi], eax

loc_40BC5F:				; CODE XREF: sub_40BB95+BDj
		mov	eax, [edx]
		nop
		mov	ecx, [esi]
		shr	eax, 0Ch
		dec	ecx
		mov	[esi], ecx
		and	al, 1
		jz	short loc_40BC79
		cmp	[ecx], bl
		jz	short loc_40BC7B
		lea	eax, [ecx+1]
		mov	[esi], eax
		jmp	short loc_40BC15
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BC79:				; CODE XREF: sub_40BB95+D7j
		mov	[ecx], bl

loc_40BC7B:				; CODE XREF: sub_40BB95+DBj
		inc	dword ptr [esi+8]
		push	0FFFFFFF7h
		pop	eax
		lock and [edx],	eax
		xor	eax, eax
		inc	eax
		lock or	[edx], eax
		movzx	eax, bl
		jmp	short loc_40BC18
sub_40BB95	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40BC8F	proc near		; CODE XREF: sub_404048+54p
					; sub_404313+144p
		push	0Ch
		push	offset dword_42B0F8
		call	sub_405FF0
		mov	esi, [ebp+0Ch]
		test	esi, esi
		jnz	short loc_40BCB7
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		jmp	short loc_40BCE4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BCB7:				; CODE XREF: sub_40BC8F+11j
		or	dword ptr [ebp-1Ch], 0FFFFFFFFh
		push	esi
		call	sub_40AA4F
		pop	ecx
		and	dword ptr [ebp-4], 0
		push	esi
		push	dword ptr [ebp+8]
		call	sub_40BB95
		pop	ecx
		pop	ecx
		mov	edi, eax
		mov	[ebp-1Ch], edi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40BCF0
		mov	eax, edi

loc_40BCE4:				; CODE XREF: sub_40BC8F+26j
		call	sub_406036
		retn
sub_40BC8F	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40BCEA	proc near		; DATA XREF: .rdata:0042B110o
		mov	esi, [ebp+0Ch]
		mov	edi, [ebp-1Ch]
sub_40BCEA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40BCF0	proc near		; CODE XREF: sub_40BC8F+4Ep
		push	esi
		call	sub_40AA63
		pop	ecx
		retn
sub_40BCF0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40BCF8	proc near		; CODE XREF: sub_40BD3B+11p
					; sub_40F0A8+2Fp

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		xor	eax, eax

loc_40BD02:				; CODE XREF: sub_40BCF8+17j
		cmp	ecx, ds:dword_421480[eax*8]
		jz	short loc_40BD32
		inc	eax
		cmp	eax, 2Dh
		jb	short loc_40BD02
		lea	eax, [ecx-13h]
		cmp	eax, 11h
		ja	short loc_40BD1E
		push	0Dh
		pop	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BD1E:				; CODE XREF: sub_40BCF8+1Fj
		lea	eax, [ecx-0BCh]
		push	0Eh
		pop	ecx
		cmp	ecx, eax
		sbb	eax, eax
		and	eax, ecx
		add	eax, 8
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BD32:				; CODE XREF: sub_40BCF8+11j
		mov	eax, ds:dword_421484[eax*8]
		pop	ebp
		retn
sub_40BCF8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40BD3B	proc near		; CODE XREF: sub_40C0C9+6Bp
					; sub_410F8B+8Bp ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		call	sub_40BD5E
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	[eax], ecx
		call	sub_40BCF8
		pop	ecx
		mov	esi, eax
		call	sub_40BD71
		mov	[eax], esi
		pop	esi
		pop	ebp
		retn
sub_40BD3B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40BD5E	proc near		; CODE XREF: sub_40BD3B+6p
					; sub_410EFC+11p ...
		call	sub_40F553
		test	eax, eax
		jnz	short loc_40BD6D
		mov	eax, offset dword_42C174
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BD6D:				; CODE XREF: sub_40BD5E+7j
		add	eax, 14h
		retn
sub_40BD5E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40BD71	proc near		; CODE XREF: sub_40AA09+Cp
					; sub_40AA77+Dp ...
		call	sub_40F553
		test	eax, eax
		jnz	short loc_40BD80
		mov	eax, offset dword_42C170
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BD80:				; CODE XREF: sub_40BD71+7j
		add	eax, 10h
		retn
sub_40BD71	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40BD84	proc near		; CODE XREF: sub_40E9C3+2DCp
					; sub_40E9C3+5D2p

arg_0		= word ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ecx]
		add	eax, 0FFFFFFFEh
		mov	[ecx], eax
		mov	cx, [ebp+arg_0]
		test	cx, cx
		jz	short loc_40BDAE
		cmp	[eax], cx
		jz	short loc_40BDAE
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35

loc_40BDAE:				; CODE XREF: sub_40BD84+13j
					; sub_40BD84+18j
		pop	ebp
		retn	4
sub_40BD84	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40BDB2	proc near		; CODE XREF: sub_40E9C3+Cp
		cmp	dword ptr [ecx], 0
		jnz	short loc_40BDCA
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		xor	al, al
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BDCA:				; CODE XREF: sub_40BDB2+3j
		mov	al, 1
		retn
sub_40BDB2	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		push	ebp
		mov	ebp, esp
		push	esi
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		mov	edx, [ebp+0Ch]
		lea	ecx, [ecx+0]

loc_40BDE4:				; CODE XREF: .text:0040BDF1j
		mov	al, [edx]
		or	al, al
		jz	short loc_40BDF3
		add	edx, 1
		bts	[esp], eax
		jmp	short loc_40BDE4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BDF3:				; CODE XREF: .text:0040BDE8j
		mov	esi, [ebp+8]
		or	ecx, 0FFFFFFFFh
		lea	ecx, [ecx+0]

loc_40BDFC:				; CODE XREF: .text:0040BE0Cj
		add	ecx, 1
		mov	al, [esi]
		or	al, al
		jz	short loc_40BE0E
		add	esi, 1
		bt	[esp], eax
		jnb	short loc_40BDFC

loc_40BE0E:				; CODE XREF: .text:0040BE03j
		mov	eax, ecx
		add	esp, 20h
		pop	esi
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		cmp	dword_42DC90, 0
		jz	short loc_40BE5B
		sub	esp, 8
		stmxcsr	dword ptr [esp+4]
		mov	eax, [esp+4]
		and	eax, 7F80h
		cmp	eax, 1F80h
		jnz	short loc_40BE50
		fnstcw	word ptr [esp]
		mov	ax, [esp]
		and	ax, 7Fh
		cmp	ax, 7Fh

loc_40BE50:				; CODE XREF: .text:0040BE3Fj
		lea	esp, [esp+8]
		jnz	short loc_40BE5B
		jmp	loc_413EF0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BE5B:				; CODE XREF: .text:0040BE27j
					; .text:0040BE54j
		sub	esp, 14h
		fxch	st(1)
		fstp	qword ptr [esp]
		fst	qword ptr [esp+8]
		mov	eax, [esp+0Ch]
		call	sub_40BE7D
		add	esp, 14h
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		lea	edx, [esp+0Ch]
		call	sub_414F25

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40BE7D	proc near		; CODE XREF: .text:0040BE6Bp

var_8C		= qword	ptr -8Ch
var_84		= qword	ptr -84h
var_4		= word ptr -4
arg_0		= dword	ptr  4
arg_7		= byte ptr  0Bh
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

; FUNCTION CHUNK AT 00414F7E SIZE 0000000D BYTES

		mov	ecx, eax
		push	eax
		fstcw	[esp+4+var_4]
		cmp	[esp+4+var_4], 27Fh
		jz	short loc_40BE91
		call	sub_414EF5

loc_40BE91:				; CODE XREF: sub_40BE7D+Dj
		and	ecx, 7FF00000h
		lea	edx, [esp+4+arg_0]
		cmp	ecx, 7FF00000h
		jz	loc_40BF43
		call	sub_414F25
		jz	loc_40BF3F
		test	eax, 7FF00000h
		jz	loc_40BFB2

loc_40BEBD:				; CODE XREF: sub_40BE7D+142j
		mov	cl, [esp+4+arg_7]
		and	cl, 80h
		jnz	loc_40C01C

loc_40BECA:				; CODE XREF: sub_40BE7D+1AAj
		fyl2x
		call	sub_414EE0
		cmp	cl, 1
		jnz	short loc_40BED8
		fchs

loc_40BED8:				; CODE XREF: sub_40BE7D+57j
		cmp	dword_42DB64, 0
		jnz	loc_414F7E
		lea	ecx, dword_4215F0
		mov	edx, 1Dh
		jmp	sub_414FC9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BEF5:				; CODE XREF: sub_40BE7D+130j
					; sub_40BE7D+180j ...
		cmp	dword_42DB64, 0
		jnz	loc_414F7E
		lea	ecx, dword_4215F0
		mov	edx, 1Dh
		call	sub_414E80
		pop	edx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BF14:				; CODE XREF: sub_40BE7D+D1j
		lea	edx, [esp+8]
		call	sub_414F25
		fld1
		fucomip	st, st(1)
		jp	short loc_40BF28
		jz	short loc_40BF33
		inc	ecx
		jmp	short loc_40BF59
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BF28:				; CODE XREF: sub_40BE7D+A4j
					; sub_40BE7D+F8j
		fxch	st(1)
		fxam
		fstsw	ax
		wait
		sahf
		jnz	short loc_40BF3B

loc_40BF33:				; CODE XREF: sub_40BE7D+A6j
		fstp	st
		fstp	st
		fld1
		pop	edx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BF3B:				; CODE XREF: sub_40BE7D+B4j
					; sub_40BE7D+FCj
		faddp	st(1), st
		pop	edx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BF3F:				; CODE XREF: sub_40BE7D+2Fj
		xor	ecx, ecx
		jmp	short loc_40BF59
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BF43:				; CODE XREF: sub_40BE7D+24j
		xor	ecx, ecx
		and	eax, 0FFFFFh
		or	eax, [esp+4+arg_8]
		jnz	short loc_40BF14
		lea	edx, [esp+4+arg_0]
		call	sub_414F25

loc_40BF59:				; CODE XREF: sub_40BE7D+A9j
					; sub_40BE7D+C4j
		mov	eax, [esp+0Ch]
		mov	edx, eax
		and	eax, 7FF00000h
		and	edx, 0FFFFFh
		cmp	eax, 7FF00000h
		jnz	short loc_40BF77
		or	edx, [esp+4+arg_0]
		jnz	short loc_40BF28

loc_40BF77:				; CODE XREF: sub_40BE7D+F2j
		test	ecx, ecx
		jnz	short loc_40BF3B
		sub	esp, 74h
		mov	ecx, esp
		push	ecx
		sub	esp, 10h
		fstp	[esp+8Ch+var_8C]
		fstp	[esp+8Ch+var_84]
		fsave	byte ptr [ecx+8]
		call	sub_4150D6
		add	esp, 10h
		pop	ecx
		frstor	byte ptr [ecx+8]
		fld	qword ptr [ecx]
		add	esp, 74h
		test	eax, eax
		jz	loc_414F7E
		mov	eax, 1
		jmp	loc_40BEF5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40BFB2:				; CODE XREF: sub_40BE7D+3Aj
		mov	eax, [esp+0Ch]
		and	eax, 0FFFFFh
		or	eax, [esp+4+arg_0]
		jnz	loc_40BEBD
		fstp	st
		mov	eax, [esp+4+arg_C]
		and	eax, 7FFFFFFFh
		or	eax, [esp+4+arg_8]
		jz	short loc_40C013
		call	sub_40C041
		mov	ch, [esp+4+arg_7]
		shr	ch, 7
		test	[esp+4+arg_C+3], 80h
		jz	short loc_40C002
		fld	ds:tbyte_422710
		test	cl, ch
		jz	short loc_40BFF8
		fchs

loc_40BFF8:				; CODE XREF: sub_40BE7D+177j
		mov	eax, 2
		jmp	loc_40BEF5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C002:				; CODE XREF: sub_40BE7D+16Dj
		fldz
		test	cl, ch
		jz	loc_414F7E
		fchs
		jmp	loc_414F7E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C013:				; CODE XREF: sub_40BE7D+157j
		fstp	st
		fld1
		jmp	loc_414F7E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C01C:				; CODE XREF: sub_40BE7D+47j
		fld	st(1)
		call	sub_40C041
		fchs
		test	cl, cl
		jnz	loc_40BECA
		fstp	st
		fstp	st
		fld	ds:tbyte_422770
		mov	eax, 1
		jmp	loc_40BEF5
sub_40BE7D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40C041	proc near		; CODE XREF: sub_40BE7D+159p
					; sub_40BE7D+1A1p
		fld	st
		frndint
		fcomp	st(1)
		mov	cl, 0
		fstsw	ax
		sahf
		jnz	short loc_40C066
		fmul	ds:dbl_4215F4
		inc	cl
		fld	st
		frndint
		fcompp	st(1), st
		fstsw	ax
		sahf
		jnz	short locret_40C065
		inc	cl

locret_40C065:				; CODE XREF: sub_40C041+20j
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C066:				; CODE XREF: sub_40C041+Cj
		fstp	st
		retn
sub_40C041	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40C069	proc near		; CODE XREF: sub_404A7D+Aj
					; sub_408737+7j ...
		call	sub_4152C5
		test	eax, eax
		jz	short loc_40C07A
		push	16h
		call	sub_415315
		pop	ecx

loc_40C07A:				; CODE XREF: sub_40C069+7j
		test	byte_42C1E0, 2
		jz	short loc_40C0A5
		push	17h		; ProcessorFeature
		call	ds:__imp_IsProcessorFeaturePresent
		test	eax, eax
		jz	short loc_40C094
		push	7
		pop	ecx
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display

loc_40C094:				; CODE XREF: sub_40C069+24j
		push	1
		push	40000015h
		push	3
		call	sub_409C87
		add	esp, 0Ch

loc_40C0A5:				; CODE XREF: sub_40C069+18j
		push	3		; uExitCode
		call	sub_40D0EF
		int	3		; Trap to Debugger
sub_40C069	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C0AD	proc near		; CODE XREF: sub_404AAB+1Ep
					; sub_410974+1Fp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		xor	eax, eax
		cmp	[ecx], al
		jz	short loc_40C0C7

loc_40C0BB:				; CODE XREF: sub_40C0AD+18j
		cmp	eax, [ebp+arg_4]
		jz	short loc_40C0C7
		inc	eax
		cmp	byte ptr [eax+ecx], 0
		jnz	short loc_40C0BB

loc_40C0C7:				; CODE XREF: sub_40C0AD+Cj
					; sub_40C0AD+11j
		pop	ebp
		retn
sub_40C0AD	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_40C0C9(int,int,int,UINT CodePage)
sub_40C0C9	proc near		; CODE XREF: sub_40C17B+13p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
CodePage	= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		test	esi, esi
		jnz	short loc_40C0F1
		mov	esi, [ebp+arg_4]
		mov	ecx, esi
		call	sub_40C19A
		xor	edi, edi
		mov	[esi+8], edi
		mov	[esi+0Ch], edi

loc_40C0E9:				; CODE XREF: sub_40C0C9+4Cj
		mov	[esi+10h], edi
		jmp	loc_40C175
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C0F1:				; CODE XREF: sub_40C0C9+Cj
		xor	edi, edi
		cmp	byte ptr [esi],	0
		jnz	short loc_40C117
		mov	esi, [ebp+arg_4]
		cmp	[esi+0Ch], edi
		jnz	short loc_40C10D
		push	1
		mov	ecx, esi
		call	sub_40C1DB
		test	eax, eax
		jnz	short loc_40C177

loc_40C10D:				; CODE XREF: sub_40C0C9+35j
		mov	eax, [esi+8]
		xor	ecx, ecx
		mov	[eax], cx
		jmp	short loc_40C0E9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C117:				; CODE XREF: sub_40C0C9+2Dj
		push	edi		; cchWideChar
		push	edi		; lpWideCharStr
		push	0FFFFFFFFh	; cchMultiByte
		push	esi		; lpMultiByteStr
		push	9		; int
		push	[ebp+CodePage]	; CodePage
		call	sub_4154FC
		add	esp, 18h
		test	eax, eax
		jnz	short loc_40C143

loc_40C12D:				; CODE XREF: sub_40C0C9+A6j
		call	ds:GetLastError
		push	eax
		call	sub_40BD3B
		pop	ecx
		call	sub_40BD71
		mov	eax, [eax]
		jmp	short loc_40C177
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C143:				; CODE XREF: sub_40C0C9+62j
		mov	edi, [ebp+arg_4]
		cmp	eax, [edi+0Ch]
		jbe	short loc_40C157
		push	eax
		mov	ecx, edi
		call	sub_40C1DB
		test	eax, eax
		jnz	short loc_40C177

loc_40C157:				; CODE XREF: sub_40C0C9+80j
		push	dword ptr [edi+0Ch] ; cchWideChar
		push	dword ptr [edi+8] ; lpWideCharStr
		push	0FFFFFFFFh	; cchMultiByte
		push	esi		; lpMultiByteStr
		push	9		; int
		push	[ebp+CodePage]	; CodePage
		call	sub_4154FC
		add	esp, 18h
		test	eax, eax
		jz	short loc_40C12D
		dec	eax
		mov	[edi+10h], eax

loc_40C175:				; CODE XREF: sub_40C0C9+23j
		xor	eax, eax

loc_40C177:				; CODE XREF: sub_40C0C9+42j
					; sub_40C0C9+78j ...
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_40C0C9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_40C17B(int,int,UINT CodePage)
sub_40C17B	proc near		; CODE XREF: sub_415CCD+D0p
					; sub_41A838+3Fp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
CodePage	= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+CodePage]	; CodePage
		lea	eax, [ebp-1]
		push	eax		; int
		push	[ebp+arg_4]	; int
		push	[ebp+arg_0]	; int
		call	sub_40C0C9
		add	esp, 10h
		mov	esp, ebp
		pop	ebp
		retn
sub_40C17B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40C19A	proc near		; CODE XREF: sub_40C0C9+13p
					; sub_40C1DB+9p ...
		mov	edi, edi
		push	esi
		mov	esi, ecx
		cmp	byte ptr [esi+14h], 0
		jz	short loc_40C1B2
		push	dword ptr [esi+8] ; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	byte ptr [esi+14h], 0

loc_40C1B2:				; CODE XREF: sub_40C19A+9j
		pop	esi
		retn
sub_40C19A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40C1B4	proc near		; CODE XREF: sub_416035+30p
					; sub_416035+82p
		mov	edi, edi
		push	esi
		mov	esi, ecx
		cmp	byte ptr [esi+14h], 0
		jz	short loc_40C1C3
		mov	byte ptr [esi+14h], 0

loc_40C1C3:				; CODE XREF: sub_40C1B4+9j
		call	sub_40BD71
		push	22h
		pop	ecx
		mov	[eax], ecx
		mov	eax, ecx
		and	dword ptr [esi+0Ch], 0
		mov	byte ptr [esi+14h], 0
		pop	esi
		retn	4
sub_40C1B4	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C1DB	proc near		; CODE XREF: sub_40C0C9+3Bp
					; sub_40C0C9+85p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_40C19A
		mov	edi, [ebp+arg_0]
		push	esi
		lea	eax, [edi+edi]
		push	eax
		lea	eax, [esi+8]
		push	eax
		call	sub_40C21A
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_40C20B
		and	dword ptr [esi+0Ch], 0
		mov	byte ptr [esi+14h], 0
		jmp	short loc_40C214
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C20B:				; CODE XREF: sub_40C1DB+24j
		mov	byte ptr [esi+14h], 1
		xor	eax, eax
		mov	[esi+0Ch], edi

loc_40C214:				; CODE XREF: sub_40C1DB+2Ej
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_40C1DB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C21A	proc near		; CODE XREF: sub_40C1DB+1Ap
					; sub_415F67+17p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		call	sub_40FDE5
		pop	ecx
		mov	ecx, [ebp+arg_0]
		mov	[ecx], eax
		neg	eax
		sbb	eax, eax
		and	eax, 0FFFFFFF4h
		add	eax, 0Ch
		pop	ebp
		retn
sub_40C21A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40C239	proc near		; CODE XREF: sub_416035+10p
		xor	eax, eax
		cmp	[ecx+14h], al
		jz	short loc_40C243
		mov	[ecx+14h], al

loc_40C243:				; CODE XREF: sub_40C239+5j
		mov	[ecx+8], eax
		mov	[ecx+0Ch], eax
		mov	[ecx+10h], eax
		retn
sub_40C239	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C24D	proc near		; CODE XREF: sub_40C3B0+10p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
DestStr		= word ptr -8
MultiByteStr	= byte ptr -4
arg_0		= dword	ptr  8
dwMapFlags	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		lea	ecx, [ebp+var_1C]
		push	ebx
		push	[ebp+arg_8]
		call	sub_40A217
		mov	ebx, [ebp+arg_0]
		cmp	ebx, 100h
		jnb	short loc_40C2B9
		lea	eax, [ebp+var_18]
		push	eax
		push	ebx
		call	sub_40C394
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_40C2A0
		cmp	[ebp+var_10], 0
		mov	eax, [ebp+var_18]
		mov	eax, [eax+94h]
		movzx	ecx, byte ptr [eax+ebx]
		jz	short loc_40C299
		mov	eax, [ebp+var_1C]
		and	dword ptr [eax+350h], 0FFFFFFFDh

loc_40C299:				; CODE XREF: sub_40C24D+40j
		mov	eax, ecx
		jmp	loc_40C38F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C2A0:				; CODE XREF: sub_40C24D+2Dj
		cmp	[ebp+var_10], 0
		jz	loc_40C351
		mov	eax, [ebp+var_1C]
		and	dword ptr [eax+350h], 0FFFFFFFDh
		jmp	loc_40C351
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C2B9:				; CODE XREF: sub_40C24D+1Dj
		xor	eax, eax
		mov	word ptr [ebp+MultiByteStr], ax
		mov	[ebp-2], al
		mov	eax, [ebp+var_18]
		cmp	dword ptr [eax+4], 1
		jle	short loc_40C2F9
		mov	eax, ebx
		lea	ecx, [ebp+var_18]
		sar	eax, 8
		mov	[ebp+var_C], eax
		push	ecx
		movzx	eax, al
		push	eax
		call	sub_4157BB
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_40C2F9
		mov	eax, [ebp+var_C]
		mov	[ebp+MultiByteStr], al
		xor	eax, eax
		push	2
		mov	[ebp-3], bl
		mov	[ebp-2], al
		pop	ecx
		jmp	short loc_40C30F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C2F9:				; CODE XREF: sub_40C24D+7Cj
					; sub_40C24D+97j
		call	sub_40BD71
		xor	ecx, ecx
		mov	dword ptr [eax], 2Ah
		xor	eax, eax
		mov	[ebp+MultiByteStr], bl
		inc	ecx
		mov	[ebp-3], al

loc_40C30F:				; CODE XREF: sub_40C24D+AAj
		mov	[ebp+DestStr], ax
		lea	edx, [ebp+DestStr]
		mov	[ebp-6], al
		mov	eax, [ebp+var_18]
		push	1		; int
		push	dword ptr [eax+8] ; CodePage
		push	3		; cchDest
		push	edx		; lpDestStr
		push	ecx		; int
		lea	ecx, [ebp+MultiByteStr]
		push	ecx		; lpMultiByteStr
		push	[ebp+dwMapFlags] ; dwMapFlags
		push	dword ptr [eax+0A8h] ; int
		lea	eax, [ebp+var_18]
		push	eax		; int
		call	sub_410B60
		add	esp, 24h
		test	eax, eax
		jnz	short loc_40C355
		cmp	[ebp+var_10], al
		jz	short loc_40C351
		mov	ecx, [ebp+var_1C]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_40C351:				; CODE XREF: sub_40C24D+57j
					; sub_40C24D+67j ...
		mov	eax, ebx
		jmp	short loc_40C38F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C355:				; CODE XREF: sub_40C24D+F3j
		cmp	eax, 1
		jnz	short loc_40C370
		cmp	[ebp+var_10], 0
		movzx	eax, byte ptr [ebp+DestStr]
		jz	short loc_40C38F
		mov	ecx, [ebp+var_1C]
		and	dword ptr [ecx+350h], 0FFFFFFFDh
		jmp	short loc_40C38F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C370:				; CODE XREF: sub_40C24D+10Bj
		movzx	edx, byte ptr [ebp+DestStr]
		movzx	eax, byte ptr [ebp+DestStr+1]
		shl	edx, 8
		or	edx, eax
		cmp	[ebp+var_10], 0
		jz	short loc_40C38D
		mov	ecx, [ebp+var_1C]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_40C38D:				; CODE XREF: sub_40C24D+134j
		mov	eax, edx

loc_40C38F:				; CODE XREF: sub_40C24D+4Ej
					; sub_40C24D+106j ...
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_40C24D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C394	proc near		; CODE XREF: sub_40C24D+24p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		push	1
		push	[ebp+arg_0]
		call	sub_40A2F4
		add	esp, 0Ch
		test	eax, eax
		setnz	al
		pop	ebp
		retn
sub_40C394	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C3B0	proc near		; CODE XREF: sub_41B1E8+72p
					; sub_41B1E8+81p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_4]
		push	100h
		push	[ebp+arg_0]
		call	sub_40C24D
		add	esp, 0Ch
		pop	ebp
		retn
sub_40C3B0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C3CA	proc near		; CODE XREF: sub_40A3F9+3Cp
					; sub_40D483+11p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		push	esi
		test	edx, edx
		jz	short loc_40C3EA
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	short loc_40C3EA
		mov	esi, [ebp+arg_8]
		test	esi, esi
		jnz	short loc_40C3FE
		xor	eax, eax
		mov	[edx], ax

loc_40C3EA:				; CODE XREF: sub_40C3CA+Bj
					; sub_40C3CA+12j
		call	sub_40BD71
		push	16h

loc_40C3F1:				; CODE XREF: sub_40C3CA+5Ej
		pop	esi
		mov	[eax], esi
		call	sub_409E35

loc_40C3F9:				; CODE XREF: sub_40C3CA+62j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C3FE:				; CODE XREF: sub_40C3CA+19j
		push	edi
		mov	edi, edx
		sub	esi, edx

loc_40C403:				; CODE XREF: sub_40C3CA+4Bj
		movzx	eax, word ptr [esi+edi]
		mov	[edi], ax
		lea	edi, [edi+2]
		test	ax, ax
		jz	short loc_40C417
		sub	ecx, 1
		jnz	short loc_40C403

loc_40C417:				; CODE XREF: sub_40C3CA+46j
		pop	edi
		test	ecx, ecx
		jnz	short loc_40C42A
		xor	eax, eax
		mov	[edx], ax
		call	sub_40BD71
		push	22h
		jmp	short loc_40C3F1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C42A:				; CODE XREF: sub_40C3CA+50j
		xor	esi, esi
		jmp	short loc_40C3F9
sub_40C3CA	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C42E:				; CODE XREF: sub_40D3EF+12p
					; sub_41985D+6Fp ...
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, dword_42D4E4
		push	esi
		push	edi
		cmp	eax, 5
		jl	loc_40C4FA
		mov	ecx, [ebp+8]
		test	cl, 1
		jz	short loc_40C46C
		mov	eax, [ebp+0Ch]
		mov	esi, ecx
		lea	edx, [ecx+eax*2]
		cmp	esi, edx
		jz	short loc_40C465
		xor	eax, eax

loc_40C459:				; CODE XREF: .text:0040C463j
		cmp	[ecx], ax
		jz	short loc_40C465
		add	ecx, 2
		cmp	ecx, edx
		jnz	short loc_40C459

loc_40C465:				; CODE XREF: .text:0040C455j
					; .text:0040C45Cj ...
		sub	ecx, esi
		jmp	loc_40C5D6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C46C:				; CODE XREF: .text:0040C449j
		mov	edx, ecx
		and	edx, 1Fh
		push	20h
		pop	eax
		sub	eax, edx
		neg	edx
		sbb	edx, edx
		and	edx, eax
		mov	eax, [ebp+0Ch]
		shr	edx, 1
		cmp	eax, edx
		jnb	short loc_40C487
		mov	edx, eax

loc_40C487:				; CODE XREF: .text:0040C483j
		mov	esi, [ebp+8]
		lea	edi, [ecx+edx*2]
		xor	eax, eax
		cmp	esi, edi
		jz	short loc_40C49F

loc_40C493:				; CODE XREF: .text:0040C49Dj
		cmp	[ecx], ax
		jz	short loc_40C49F
		add	ecx, 2
		cmp	ecx, edi
		jnz	short loc_40C493

loc_40C49F:				; CODE XREF: .text:0040C491j
					; .text:0040C496j
		sub	ecx, esi
		sar	ecx, 1
		cmp	ecx, edx
		jnz	loc_40C5D8
		mov	eax, [ebp+0Ch]
		lea	edi, [esi+ecx*2]
		sub	eax, edx
		and	eax, 0FFFFFFE0h
		add	eax, ecx
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		dd 0C9EFF1C5h, 0EB460C8Dh, 75F5C50Fh, 0D7FDC507h, 75C085C0h
		dd 20C78307h, 0ED75F93Bh, 8D0C458Bh, 0F93B460Ch, 0C0330E74h
		dd 74073966h, 2C78307h,	0F475F93Bh, 0CE2BCF8Bh,	0F8C5F9D1h
		dd 0DEE977h
		db 2 dup(0)
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C4FA:				; CODE XREF: .text:0040C43Dj
		cmp	eax, 1
		jl	loc_40C5B7
		mov	ecx, [ebp+8]
		test	cl, 1
		jz	short loc_40C532
		mov	eax, [ebp+0Ch]
		mov	esi, ecx
		lea	edx, [ecx+eax*2]
		cmp	esi, edx
		jz	loc_40C465
		xor	eax, eax

loc_40C51D:				; CODE XREF: .text:0040C52Bj
		cmp	[ecx], ax
		jz	loc_40C465
		add	ecx, 2
		cmp	ecx, edx
		jnz	short loc_40C51D
		jmp	loc_40C465
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C532:				; CODE XREF: .text:0040C509j
		mov	edx, ecx
		and	edx, 0Fh
		push	10h
		pop	eax
		sub	eax, edx
		neg	edx
		sbb	edx, edx
		and	edx, eax
		mov	eax, [ebp+0Ch]
		shr	edx, 1
		cmp	eax, edx
		jnb	short loc_40C54D
		mov	edx, eax

loc_40C54D:				; CODE XREF: .text:0040C549j
		mov	esi, [ebp+8]
		lea	edi, [ecx+edx*2]
		xor	eax, eax
		cmp	esi, edi
		jz	short loc_40C565

loc_40C559:				; CODE XREF: .text:0040C563j
		cmp	[ecx], ax
		jz	short loc_40C565
		add	ecx, 2
		cmp	ecx, edi
		jnz	short loc_40C559

loc_40C565:				; CODE XREF: .text:0040C557j
					; .text:0040C55Cj
		sub	ecx, esi
		sar	ecx, 1
		cmp	ecx, edx
		jnz	short loc_40C5D8
		mov	eax, [ebp+0Ch]
		lea	edi, [esi+ecx*2]
		sub	eax, edx
		xorps	xmm1, xmm1
		and	eax, 0FFFFFFF0h
		add	eax, ecx
		lea	ecx, [esi+eax*2]
		jmp	short loc_40C594
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C582:				; CODE XREF: .text:0040C596j
		movups	xmm0, oword ptr	[edi]
		pcmpeqw	xmm0, xmm1
		pmovmskb eax, xmm0
		test	eax, eax
		jnz	short loc_40C598
		add	edi, 10h

loc_40C594:				; CODE XREF: .text:0040C580j
		cmp	edi, ecx
		jnz	short loc_40C582

loc_40C598:				; CODE XREF: .text:0040C58Fj
		mov	eax, [ebp+0Ch]
		lea	ecx, [esi+eax*2]
		cmp	edi, ecx
		jz	short loc_40C5B0
		xor	eax, eax

loc_40C5A4:				; CODE XREF: .text:0040C5AEj
		cmp	[edi], ax
		jz	short loc_40C5B0
		add	edi, 2
		cmp	edi, ecx
		jnz	short loc_40C5A4

loc_40C5B0:				; CODE XREF: .text:0040C5A0j
					; .text:0040C5A7j
		mov	ecx, edi
		jmp	loc_40C465
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C5B7:				; CODE XREF: .text:0040C4FDj
		mov	edx, [ebp+8]
		mov	ecx, edx
		mov	eax, [ebp+0Ch]
		lea	esi, [edx+eax*2]
		cmp	edx, esi
		jz	short loc_40C5D4
		xor	eax, eax

loc_40C5C8:				; CODE XREF: .text:0040C5D2j
		cmp	[ecx], ax
		jz	short loc_40C5D4
		add	ecx, 2
		cmp	ecx, esi
		jnz	short loc_40C5C8

loc_40C5D4:				; CODE XREF: .text:0040C5C4j
					; .text:0040C5CBj
		sub	ecx, edx

loc_40C5D6:				; CODE XREF: .text:0040C467j
		sar	ecx, 1

loc_40C5D8:				; CODE XREF: .text:0040C4A5j
					; .text:0040C56Bj
		pop	edi
		mov	eax, ecx
		pop	esi
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+8]
		mov	dword_42D700, eax
		pop	ebp
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C5ED	proc near		; CODE XREF: sub_40536C+8p
					; sub_40FDE5+1Fp ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		call	sub_40C61A
		mov	esi, eax
		test	esi, esi
		jz	short loc_40C615
		push	[ebp+arg_0]
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		pop	ecx
		test	eax, eax
		jz	short loc_40C615
		xor	eax, eax
		inc	eax
		jmp	short loc_40C617
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C615:				; CODE XREF: sub_40C5ED+Fj
					; sub_40C5ED+21j
		xor	eax, eax

loc_40C617:				; CODE XREF: sub_40C5ED+26j
		pop	esi
		pop	ebp
		retn
sub_40C5ED	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40C61A	proc near		; CODE XREF: sub_40C5ED+6p
		push	0Ch
		push	offset dword_42B118
		call	sub_405FF0
		and	dword ptr [ebp-1Ch], 0
		push	0
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	esi, dword_42C06C
		mov	ecx, esi
		and	ecx, 1Fh
		xor	esi, dword_42D700
		ror	esi, cl
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40C663
		mov	eax, esi
		call	sub_406036
		retn
sub_40C61A	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40C660	proc near		; DATA XREF: .rdata:0042B130o
		mov	esi, [ebp-1Ch]
sub_40C660	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40C663	proc near		; CODE XREF: sub_40C61A+39p
		push	0
		call	sub_409F1F
		pop	ecx
		retn
sub_40C663	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C66C	proc near		; CODE XREF: sub_4055B0+Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		push	edi
		call	sub_40F553
		mov	esi, eax
		test	esi, esi
		jz	loc_40C7BD
		mov	edx, [esi]
		xor	ebx, ebx
		mov	ecx, edx
		lea	eax, [edx+90h]
		cmp	edx, eax
		jz	short loc_40C6A2
		mov	edi, [ebp+arg_0]

loc_40C697:				; CODE XREF: sub_40C66C+34j
		cmp	[ecx], edi
		jz	short loc_40C6A4
		add	ecx, 0Ch
		cmp	ecx, eax
		jnz	short loc_40C697

loc_40C6A2:				; CODE XREF: sub_40C66C+26j
		mov	ecx, ebx

loc_40C6A4:				; CODE XREF: sub_40C66C+2Dj
		test	ecx, ecx
		jz	loc_40C7BD
		mov	edi, [ecx+8]
		test	edi, edi
		jz	loc_40C7BD
		cmp	edi, 5
		jnz	short loc_40C6C7
		xor	eax, eax
		mov	[ecx+8], ebx
		inc	eax
		jmp	loc_40C7BF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C6C7:				; CODE XREF: sub_40C66C+4Ej
		cmp	edi, 1
		jnz	short loc_40C6D4

loc_40C6CC:				; CODE XREF: sub_40C66C+14Cj
		or	eax, 0FFFFFFFFh
		jmp	loc_40C7BF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C6D4:				; CODE XREF: sub_40C66C+5Ej
		mov	eax, [esi+4]
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		mov	[esi+4], eax
		cmp	dword ptr [ecx+4], 8
		jnz	loc_40C7A1
		lea	eax, [edx+24h]
		lea	edx, [eax+6Ch]
		jmp	short loc_40C6F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C6F2:				; CODE XREF: sub_40C66C+8Ej
		mov	[eax+8], ebx
		add	eax, 0Ch

loc_40C6F8:				; CODE XREF: sub_40C66C+84j
		cmp	eax, edx
		jnz	short loc_40C6F2
		mov	ebx, [esi+8]
		mov	eax, 0C0000091h
		cmp	[ecx], eax
		ja	short loc_40C74F
		jz	short loc_40C748
		cmp	dword ptr [ecx], 0C000008Dh
		jz	short loc_40C741
		cmp	dword ptr [ecx], 0C000008Eh
		jz	short loc_40C73A
		cmp	dword ptr [ecx], 0C000008Fh
		jz	short loc_40C733
		cmp	dword ptr [ecx], 0C0000090h
		mov	eax, ebx
		jnz	short loc_40C78E
		mov	eax, 81h
		jmp	short loc_40C78B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C733:				; CODE XREF: sub_40C66C+B4j
		mov	eax, 86h
		jmp	short loc_40C78B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C73A:				; CODE XREF: sub_40C66C+ACj
		mov	eax, 83h
		jmp	short loc_40C78B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C741:				; CODE XREF: sub_40C66C+A4j
		mov	eax, 82h
		jmp	short loc_40C78B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C748:				; CODE XREF: sub_40C66C+9Cj
		mov	eax, 84h
		jmp	short loc_40C78B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C74F:				; CODE XREF: sub_40C66C+9Aj
		cmp	dword ptr [ecx], 0C0000092h
		jz	short loc_40C786
		cmp	dword ptr [ecx], 0C0000093h
		jz	short loc_40C77F
		cmp	dword ptr [ecx], 0C00002B4h
		jz	short loc_40C778
		cmp	dword ptr [ecx], 0C00002B5h
		mov	eax, ebx
		jnz	short loc_40C78E
		mov	eax, 8Dh
		jmp	short loc_40C78B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C778:				; CODE XREF: sub_40C66C+F9j
		mov	eax, 8Eh
		jmp	short loc_40C78B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C77F:				; CODE XREF: sub_40C66C+F1j
		mov	eax, 85h
		jmp	short loc_40C78B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C786:				; CODE XREF: sub_40C66C+E9j
		mov	eax, 8Ah

loc_40C78B:				; CODE XREF: sub_40C66C+C5j
					; sub_40C66C+CCj ...
		mov	[esi+8], eax

loc_40C78E:				; CODE XREF: sub_40C66C+BEj
					; sub_40C66C+103j
		push	eax
		push	8
		mov	ecx, edi
		call	ds:off_41D12C
		call	edi
		pop	ecx
		mov	[esi+8], ebx
		jmp	short loc_40C7B1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C7A1:				; CODE XREF: sub_40C66C+78j
		push	dword ptr [ecx+4]
		mov	[ecx+8], ebx
		mov	ecx, edi
		call	ds:off_41D12C
		call	edi

loc_40C7B1:				; CODE XREF: sub_40C66C+133j
		mov	eax, [ebp+var_4]
		pop	ecx
		mov	[esi+4], eax
		jmp	loc_40C6CC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C7BD:				; CODE XREF: sub_40C66C+12j
					; sub_40C66C+3Aj ...
		xor	eax, eax

loc_40C7BF:				; CODE XREF: sub_40C66C+56j
					; sub_40C66C+63j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_40C66C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40C7C6	proc near		; CODE XREF: sub_416F58+39p
		mov	eax, dword_42D704
		retn
sub_40C7C6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C7CC	proc near		; CODE XREF: sub_4053C4+3p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	dword_42D704, eax
		pop	ebp
		retn
sub_40C7CC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C7DB	proc near		; CODE XREF: sub_40C853+8p
					; sub_40D105+19p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, dword_42C06C
		and	eax, 1Fh
		push	20h
		pop	ecx
		sub	ecx, eax
		mov	eax, [ebp+arg_0]
		ror	eax, cl
		xor	eax, dword_42C06C
		pop	ebp
		retn
sub_40C7DB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40C7FA	proc near		; CODE XREF: sub_4133A0+71p
					; sub_419FCE+DBp
		mov	eax, dword_42C06C
		mov	ecx, eax
		xor	eax, dword_42D708
		and	ecx, 1Fh
		ror	eax, cl
		test	eax, eax
		setnz	al
		retn
sub_40C7FA	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+8]
		mov	dword_42D708, eax
		pop	ebp
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C821	proc near		; CODE XREF: sub_4139A3+6Ap
					; sub_419DD8+E9p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, dword_42C06C
		mov	ecx, esi
		xor	esi, dword_42D708
		and	ecx, 1Fh
		ror	esi, cl
		test	esi, esi
		jnz	short loc_40C842
		xor	eax, eax
		jmp	short loc_40C850
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C842:				; CODE XREF: sub_40C821+1Bj
		push	[ebp+arg_0]
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		pop	ecx

loc_40C850:				; CODE XREF: sub_40C821+1Fj
		pop	esi
		pop	ebp
		retn
sub_40C821	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C853	proc near		; CODE XREF: sub_4053C4+65p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]
		call	sub_40C7DB
		pop	ecx
		mov	dword_42D708, eax
		pop	ebp
		retn
sub_40C853	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_40CB68

loc_40C868:				; CODE XREF: sub_40CB68+6j
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		mov	ebx, [ebp+arg_0]
		test	ebx, ebx
		jnz	short loc_40C87F
		xor	eax, eax
		jmp	loc_40C99B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C87F:				; CODE XREF: sub_40CB68-2F2j
		push	esi
		cmp	ebx, 2
		jz	short loc_40C8A0
		cmp	ebx, 1
		jz	short loc_40C8A0
		call	sub_40BD71
		push	16h
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		mov	eax, esi
		jmp	loc_40C99A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C8A0:				; CODE XREF: sub_40CB68-2E5j
					; sub_40CB68-2E0j
		push	edi
		call	sub_4166AF
		push	104h		; int
		mov	esi, offset dword_42D710
		xor	edi, edi
		push	esi		; int
		push	edi		; hModule
		call	sub_4160FC
		mov	eax, dword_42D844
		add	esp, 0Ch
		mov	dword_42D834, esi
		mov	[ebp+var_10], eax
		test	eax, eax
		jz	short loc_40C8D3
		cmp	byte ptr [eax],	0
		jnz	short loc_40C8D8

loc_40C8D3:				; CODE XREF: sub_40CB68-29Cj
		mov	eax, esi
		mov	[ebp+var_10], esi

loc_40C8D8:				; CODE XREF: sub_40CB68-297j
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_4], edi
		push	ecx
		lea	ecx, [ebp+var_4]
		mov	[ebp+var_C], edi
		push	ecx
		push	edi
		push	edi
		push	eax
		call	sub_40C9A0
		push	1
		push	[ebp+var_C]
		push	[ebp+var_4]
		call	sub_40CB19
		mov	esi, eax
		add	esp, 20h
		test	esi, esi
		jnz	short loc_40C910
		call	sub_40BD71
		push	0Ch
		pop	edi
		mov	[eax], edi
		jmp	short loc_40C942
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C910:				; CODE XREF: sub_40CB68-266j
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_4]
		push	eax
		mov	eax, [ebp+var_4]
		lea	eax, [esi+eax*4]
		push	eax
		push	esi
		push	[ebp+var_10]
		call	sub_40C9A0
		add	esp, 14h
		cmp	ebx, 1
		jnz	short loc_40C946
		mov	eax, [ebp+var_4]
		dec	eax
		mov	dword_42D838, eax
		mov	eax, esi
		mov	esi, edi
		mov	dword_42D83C, eax

loc_40C942:				; CODE XREF: sub_40CB68-25Aj
		mov	ebx, edi
		jmp	short loc_40C990
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C946:				; CODE XREF: sub_40CB68-23Aj
		lea	eax, [ebp+var_8]
		mov	[ebp+var_8], edi
		push	eax
		push	esi
		call	sub_41602A
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_40C960
		mov	eax, [ebp+var_8]
		jmp	short loc_40C986
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C960:				; CODE XREF: sub_40CB68-20Fj
		mov	edx, [ebp+var_8]
		mov	ecx, edi
		mov	eax, edx
		cmp	[edx], edi
		jz	short loc_40C973

loc_40C96B:				; CODE XREF: sub_40CB68-1F7j
		lea	eax, [eax+4]
		inc	ecx
		cmp	[eax], edi
		jnz	short loc_40C96B

loc_40C973:				; CODE XREF: sub_40CB68-1FFj
		mov	eax, edi
		mov	dword_42D838, ecx
		mov	[ebp+var_8], eax
		mov	ebx, edi
		mov	dword_42D83C, edx

loc_40C986:				; CODE XREF: sub_40CB68-20Aj
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	[ebp+var_8], edi

loc_40C990:				; CODE XREF: sub_40CB68-224j
		push	esi		; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	eax, ebx
		pop	edi

loc_40C99A:				; CODE XREF: sub_40CB68-2CDj
		pop	esi

loc_40C99B:				; CODE XREF: sub_40CB68-2EEj
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; END OF FUNCTION CHUNK	FOR sub_40CB68

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40C9A0	proc near		; CODE XREF: sub_40CB68-27Fp
					; sub_40CB68-245p

var_2		= byte ptr -2
var_1		= byte ptr -1
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		mov	eax, [ebp+arg_C]
		push	ebx
		mov	ebx, [ebp+arg_10]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		and	dword ptr [ebx], 0
		mov	edi, [ebp+arg_0]
		mov	dword ptr [eax], 1
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_40C9CD
		mov	[eax], esi
		add	eax, 4
		mov	[ebp+arg_4], eax

loc_40C9CD:				; CODE XREF: sub_40C9A0+23j
		xor	cl, cl
		mov	[ebp+var_1], cl

loc_40C9D2:				; CODE XREF: sub_40C9A0+7Bj
					; sub_40C9A0+83j
		cmp	byte ptr [edi],	22h
		jnz	short loc_40C9E4
		test	cl, cl
		mov	al, 22h
		setz	cl
		inc	edi
		mov	[ebp+var_1], cl
		jmp	short loc_40CA19
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40C9E4:				; CODE XREF: sub_40C9A0+35j
		inc	dword ptr [ebx]
		test	esi, esi
		jz	short loc_40C9EF
		mov	al, [edi]
		mov	[esi], al
		inc	esi

loc_40C9EF:				; CODE XREF: sub_40C9A0+48j
		mov	al, [edi]
		inc	edi
		mov	[ebp+var_2], al
		movsx	eax, al
		push	eax
		call	sub_416958
		pop	ecx
		test	eax, eax
		jz	short loc_40CA0F
		inc	dword ptr [ebx]
		test	esi, esi
		jz	short loc_40CA0E
		mov	al, [edi]
		mov	[esi], al
		inc	esi

loc_40CA0E:				; CODE XREF: sub_40C9A0+67j
		inc	edi

loc_40CA0F:				; CODE XREF: sub_40C9A0+61j
		mov	al, [ebp+var_2]
		test	al, al
		jz	short loc_40CA2F
		mov	cl, [ebp+var_1]

loc_40CA19:				; CODE XREF: sub_40C9A0+42j
		test	cl, cl
		jnz	short loc_40C9D2
		cmp	al, 20h
		jz	short loc_40CA25
		cmp	al, 9
		jnz	short loc_40C9D2

loc_40CA25:				; CODE XREF: sub_40C9A0+7Fj
		test	esi, esi
		jz	short loc_40CA30
		mov	byte ptr [esi-1], 0
		jmp	short loc_40CA30
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CA2F:				; CODE XREF: sub_40C9A0+74j
		dec	edi

loc_40CA30:				; CODE XREF: sub_40C9A0+87j
					; sub_40C9A0+8Dj
		mov	[ebp+var_1], 0

loc_40CA34:				; CODE XREF: sub_40C9A0+15Ej
		mov	al, [edi]
		test	al, al
		jz	loc_40CB03

loc_40CA3E:				; CODE XREF: sub_40C9A0+A9j
		cmp	al, 20h
		jz	short loc_40CA46
		cmp	al, 9
		jnz	short loc_40CA4B

loc_40CA46:				; CODE XREF: sub_40C9A0+A0j
		inc	edi
		mov	al, [edi]
		jmp	short loc_40CA3E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CA4B:				; CODE XREF: sub_40C9A0+A4j
		test	al, al
		jz	loc_40CB03
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	short loc_40CA62
		mov	[ecx], esi
		add	ecx, 4
		mov	[ebp+arg_4], ecx

loc_40CA62:				; CODE XREF: sub_40C9A0+B8j
		mov	eax, [ebp+arg_C]
		inc	dword ptr [eax]

loc_40CA67:				; CODE XREF: sub_40C9A0+14Fj
		xor	edx, edx
		inc	edx
		xor	eax, eax
		jmp	short loc_40CA70
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CA6E:				; CODE XREF: sub_40C9A0+D5j
		inc	edi
		inc	eax

loc_40CA70:				; CODE XREF: sub_40C9A0+CCj
		mov	cl, [edi]
		cmp	cl, 5Ch
		jz	short loc_40CA6E
		cmp	cl, 22h
		jnz	short loc_40CAAD
		test	al, 1
		jnz	short loc_40CA9E
		mov	cl, [ebp+var_1]
		test	cl, cl
		jz	short loc_40CA96
		lea	ecx, [edi+1]
		cmp	byte ptr [ecx],	22h
		jnz	short loc_40CA93
		mov	edi, ecx
		jmp	short loc_40CA9E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CA93:				; CODE XREF: sub_40C9A0+EDj
		mov	cl, [ebp+var_1]

loc_40CA96:				; CODE XREF: sub_40C9A0+E5j
		xor	edx, edx
		test	cl, cl
		setz	[ebp+var_1]

loc_40CA9E:				; CODE XREF: sub_40C9A0+DEj
					; sub_40C9A0+F1j
		shr	eax, 1
		jmp	short loc_40CAAD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CAA2:				; CODE XREF: sub_40C9A0+10Fj
		dec	eax
		test	esi, esi
		jz	short loc_40CAAB
		mov	byte ptr [esi],	5Ch
		inc	esi

loc_40CAAB:				; CODE XREF: sub_40C9A0+105j
		inc	dword ptr [ebx]

loc_40CAAD:				; CODE XREF: sub_40C9A0+DAj
					; sub_40C9A0+100j
		test	eax, eax
		jnz	short loc_40CAA2
		mov	al, [edi]
		test	al, al
		jz	short loc_40CAF4
		cmp	[ebp+var_1], 0
		jnz	short loc_40CAC5
		cmp	al, 20h
		jz	short loc_40CAF4
		cmp	al, 9
		jz	short loc_40CAF4

loc_40CAC5:				; CODE XREF: sub_40C9A0+11Bj
		test	edx, edx
		jz	short loc_40CAEE
		test	esi, esi
		jz	short loc_40CAD2
		mov	[esi], al
		inc	esi
		mov	al, [edi]

loc_40CAD2:				; CODE XREF: sub_40C9A0+12Bj
		movsx	eax, al
		push	eax
		call	sub_416958
		pop	ecx
		test	eax, eax
		jz	short loc_40CAEC
		inc	edi
		inc	dword ptr [ebx]
		test	esi, esi
		jz	short loc_40CAEC
		mov	al, [edi]
		mov	[esi], al
		inc	esi

loc_40CAEC:				; CODE XREF: sub_40C9A0+13Ej
					; sub_40C9A0+145j
		inc	dword ptr [ebx]

loc_40CAEE:				; CODE XREF: sub_40C9A0+127j
		inc	edi
		jmp	loc_40CA67
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CAF4:				; CODE XREF: sub_40C9A0+115j
					; sub_40C9A0+11Fj ...
		test	esi, esi
		jz	short loc_40CAFC
		mov	byte ptr [esi],	0
		inc	esi

loc_40CAFC:				; CODE XREF: sub_40C9A0+156j
		inc	dword ptr [ebx]
		jmp	loc_40CA34
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CB03:				; CODE XREF: sub_40C9A0+98j
					; sub_40C9A0+ADj
		mov	ecx, [ebp+arg_4]
		pop	edi
		pop	esi
		pop	ebx
		test	ecx, ecx
		jz	short loc_40CB10
		and	dword ptr [ecx], 0

loc_40CB10:				; CODE XREF: sub_40C9A0+16Bj
		mov	eax, [ebp+arg_C]
		inc	dword ptr [eax]
		mov	esp, ebp
		pop	ebp
		retn
sub_40C9A0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40CB19	proc near		; CODE XREF: sub_40CB68-272p
					; sub_41602A-506p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		cmp	esi, 3FFFFFFFh
		jnb	short loc_40CB63
		or	eax, 0FFFFFFFFh
		mov	ecx, [ebp+arg_4]
		xor	edx, edx
		div	[ebp+arg_8]
		cmp	ecx, eax
		jnb	short loc_40CB63
		imul	ecx, [ebp+arg_8]
		shl	esi, 2
		mov	eax, esi
		not	eax
		cmp	eax, ecx
		jbe	short loc_40CB63
		lea	eax, [esi+ecx]
		push	1
		push	eax
		call	sub_40FE33
		push	0		; lpMem
		mov	esi, eax
		call	sub_40F0A8
		add	esp, 0Ch
		mov	eax, esi
		jmp	short loc_40CB65
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CB63:				; CODE XREF: sub_40CB19+Fj
					; sub_40CB19+1Ej ...
		xor	eax, eax

loc_40CB65:				; CODE XREF: sub_40CB19+48j
		pop	esi
		pop	ebp
		retn
sub_40CB19	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40CB68	proc near		; CODE XREF: sub_4053C4+47p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

; FUNCTION CHUNK AT 0040C868 SIZE 00000138 BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_40C868
sub_40CB68	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40CB73	proc near		; CODE XREF: sub_40CDD5j sub_40CE11+9p
		mov	eax, dword_42D818
		test	eax, eax
		jnz	short locret_40CB9E
		cmp	dword_42D81C, eax
		jz	short loc_40CB9C
		call	sub_40CB9F
		test	eax, eax
		jz	short loc_40CB96
		call	sub_40CCF3
		test	eax, eax
		jnz	short loc_40CB9C

loc_40CB96:				; CODE XREF: sub_40CB73+18j
		mov	eax, dword_42D818
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CB9C:				; CODE XREF: sub_40CB73+Fj
					; sub_40CB73+21j
		xor	eax, eax

locret_40CB9E:				; CODE XREF: sub_40CB73+7j
		retn
sub_40CB73	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40CB9F	proc near		; CODE XREF: sub_40CB73+11p
					; sub_40CE25j
		cmp	dword_42D818, 0
		jz	short loc_40CBAB
		xor	eax, eax
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CBAB:				; CODE XREF: sub_40CB9F+7j
		push	esi
		push	edi
		call	sub_4166AF
		call	sub_4169A7
		mov	esi, eax
		test	esi, esi
		jnz	short loc_40CBC2
		or	edi, 0FFFFFFFFh
		jmp	short loc_40CBE6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CBC2:				; CODE XREF: sub_40CB9F+1Cj
		push	esi
		call	sub_40CBF2
		pop	ecx
		test	eax, eax
		jnz	short loc_40CBD2
		or	edi, 0FFFFFFFFh
		jmp	short loc_40CBDE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CBD2:				; CODE XREF: sub_40CB9F+2Cj
		mov	dword_42D824, eax
		xor	edi, edi
		mov	dword_42D818, eax

loc_40CBDE:				; CODE XREF: sub_40CB9F+31j
		push	0		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_40CBE6:				; CODE XREF: sub_40CB9F+21j
		push	esi		; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_40CB9F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40CBF2	proc near		; CODE XREF: sub_40CB9F+24p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_0]
		xor	edx, edx
		push	esi
		push	edi
		mov	esi, ebx
		mov	al, [ebx]
		jmp	short loc_40CC1F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CC07:				; CODE XREF: sub_40CBF2+2Fj
		cmp	al, 3Dh
		jz	short loc_40CC0C
		inc	edx

loc_40CC0C:				; CODE XREF: sub_40CBF2+17j
		mov	ecx, esi
		lea	edi, [ecx+1]

loc_40CC11:				; CODE XREF: sub_40CBF2+24j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_40CC11
		sub	ecx, edi
		inc	esi
		add	esi, ecx
		mov	al, [esi]

loc_40CC1F:				; CODE XREF: sub_40CBF2+13j
		test	al, al
		jnz	short loc_40CC07
		lea	eax, [edx+1]
		push	4
		push	eax
		call	sub_40FE33
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_40CCA4
		mov	[ebp+var_4], edi
		jmp	short loc_40CC8D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CC3B:				; CODE XREF: sub_40CBF2+9Fj
		mov	ecx, ebx
		lea	esi, [ecx+1]

loc_40CC40:				; CODE XREF: sub_40CBF2+53j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_40CC40
		sub	ecx, esi
		lea	eax, [ecx+1]
		mov	[ebp+var_8], eax
		cmp	dl, 3Dh
		jz	short loc_40CC8B
		push	1
		push	eax
		call	sub_40FE33
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_40CC95
		push	ebx
		push	[ebp+var_8]
		push	esi
		call	sub_40E8FE
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_40CCB7
		mov	eax, [ebp+var_4]
		push	0		; lpMem
		mov	[eax], esi
		add	eax, 4
		mov	[ebp+var_4], eax
		call	sub_40F0A8
		mov	eax, [ebp+var_8]
		pop	ecx

loc_40CC8B:				; CODE XREF: sub_40CBF2+60j
		add	ebx, eax

loc_40CC8D:				; CODE XREF: sub_40CBF2+47j
		mov	dl, [ebx]
		test	dl, dl
		jnz	short loc_40CC3B
		jmp	short loc_40CCA6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CC95:				; CODE XREF: sub_40CBF2+70j
		push	edi
		call	sub_40CCC4
		push	0		; lpMem
		call	sub_40F0A8
		pop	ecx
		pop	ecx

loc_40CCA4:				; CODE XREF: sub_40CBF2+42j
		xor	edi, edi

loc_40CCA6:				; CODE XREF: sub_40CBF2+A1j
		push	0		; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CCB7:				; CODE XREF: sub_40CBF2+81j
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	sub_409E62
		int	3		; Trap to Debugger
sub_40CBF2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40CCC4	proc near		; CODE XREF: sub_40CBF2+A4p
					; .text:0040CDB2p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jz	short loc_40CCF0
		mov	eax, [esi]
		push	edi
		mov	edi, esi
		jmp	short loc_40CCE4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CCD8:				; CODE XREF: sub_40CCC4+22j
		push	eax		; lpMem
		call	sub_40F0A8
		lea	edi, [edi+4]
		mov	eax, [edi]
		pop	ecx

loc_40CCE4:				; CODE XREF: sub_40CCC4+12j
		test	eax, eax
		jnz	short loc_40CCD8
		push	esi		; lpMem
		call	sub_40F0A8
		pop	ecx
		pop	edi

loc_40CCF0:				; CODE XREF: sub_40CCC4+Bj
		pop	esi
		pop	ebp
		retn
sub_40CCC4	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40CCF3	proc near		; CODE XREF: sub_40CB73+1Ap
		mov	edi, edi
		push	ebx
		push	esi
		push	edi
		mov	edi, dword_42D81C
		test	edi, edi
		jz	short loc_40CD6F
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_40CD64
		xor	ebx, ebx

loc_40CD0A:				; CODE XREF: sub_40CCF3+6Fj
		push	ebx		; int
		push	ebx		; int
		push	ebx		; cchMultiByte
		push	ebx		; lpMultiByteStr
		push	0FFFFFFFFh	; cchWideChar
		push	eax		; lpWideCharStr
		push	ebx		; int
		push	ebx		; CodePage
		call	sub_415578
		mov	ebx, eax
		add	esp, 20h
		test	ebx, ebx
		jz	short loc_40CD6F
		push	1
		push	ebx
		call	sub_40FE33
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_40CD68
		push	0		; int
		push	0		; int
		push	ebx		; cchMultiByte
		push	esi		; lpMultiByteStr
		push	0FFFFFFFFh	; cchWideChar
		push	dword ptr [edi]	; lpWideCharStr
		xor	ebx, ebx
		push	ebx		; int
		push	ebx		; CodePage
		call	sub_415578
		add	esp, 20h
		test	eax, eax
		jz	short loc_40CD68
		push	ebx
		push	esi
		call	sub_416D8E
		push	ebx		; lpMem
		call	sub_40F0A8
		add	edi, 4
		add	esp, 0Ch
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_40CD0A

loc_40CD64:				; CODE XREF: sub_40CCF3+13j
		xor	eax, eax
		jmp	short loc_40CD72
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CD68:				; CODE XREF: sub_40CCF3+3Cj
					; sub_40CCF3+56j
		push	esi		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_40CD6F:				; CODE XREF: sub_40CCF3+Dj
					; sub_40CCF3+2Cj
		or	eax, 0FFFFFFFFh

loc_40CD72:				; CODE XREF: sub_40CCF3+73j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_40CCF3	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+4]
		jmp	short loc_40CD95
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CD84:				; CODE XREF: .text:0040CD97j
		mov	ecx, [ebp+8]
		push	esi
		call	ds:off_41D12C
		call	dword ptr [ebp+8]
		pop	ecx
		add	esi, 4

loc_40CD95:				; CODE XREF: .text:0040CD82j
		cmp	esi, edi
		jnz	short loc_40CD84
		pop	edi
		pop	esi
		pop	ebp
		retn	4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CD9F:				; DATA XREF: .text:0040CDDBo
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+8]
		mov	eax, [eax]
		cmp	eax, dword_42D824
		jz	short loc_40CDB8
		push	eax
		call	sub_40CCC4
		pop	ecx

loc_40CDB8:				; CODE XREF: .text:0040CDAFj
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+8]
		mov	eax, [eax]
		cmp	eax, dword_42D820
		jz	short loc_40CDD3
		push	eax
		call	sub_40CCC4
		pop	ecx

loc_40CDD3:				; CODE XREF: .text:0040CDCAj
		pop	ebp
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: thunk

sub_40CDD5	proc near		; CODE XREF: sub_416D8E-2FBp
		jmp	sub_40CB73
sub_40CDD5	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 68h
		dd offset loc_40CD9F
		db 0B9h
		dd offset dword_42D818
		dd 0FFFF8DE8h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	fword ptr (byte_41C7FF-41C845h)[eax]
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 0CDh
		db 40h,	0, 0B9h
		dd offset dword_42D81C
		db 0E8h
		dd 0FFFFFF7Eh
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	dword_42D824
		call	sub_40CCC4
		push	dword_42D820
		call	sub_40CCC4
		pop	ecx
		pop	ecx
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40CE11	proc near		; CODE XREF: start-96p
		mov	eax, dword_42D824
		test	eax, eax
		jnz	short locret_40CE24
		call	sub_40CB73
		mov	dword_42D824, eax

locret_40CE24:				; CODE XREF: sub_40CE11+7j
		retn
sub_40CE11	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: thunk

sub_40CE25	proc near		; CODE XREF: sub_4053C4+8Fp
		jmp	sub_40CB9F
sub_40CE25	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40CE2A	proc near		; CODE XREF: start-10Bp sub_40CEE2+85p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		mov	eax, [ebp+arg_4]
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		sub	eax, esi
		add	eax, 3
		push	edi
		xor	edi, edi
		shr	eax, 2
		cmp	[ebp+arg_4], esi
		sbb	ebx, ebx
		not	ebx
		and	ebx, eax
		jz	short loc_40CE6A

loc_40CE4E:				; CODE XREF: sub_40CE2A+3Ej
		mov	eax, [esi]
		mov	[ebp+var_4], eax
		test	eax, eax
		jz	short loc_40CE62
		mov	ecx, eax
		call	ds:off_41D12C
		call	[ebp+var_4]

loc_40CE62:				; CODE XREF: sub_40CE2A+2Bj
		add	esi, 4
		inc	edi
		cmp	edi, ebx
		jnz	short loc_40CE4E

loc_40CE6A:				; CODE XREF: sub_40CE2A+22j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_40CE2A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40CE71	proc near		; CODE XREF: start-131p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		jmp	short loc_40CE94
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CE7D:				; CODE XREF: sub_40CE71+26j
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_40CE91
		mov	ecx, edi
		call	ds:off_41D12C
		call	edi
		test	eax, eax
		jnz	short loc_40CE9B

loc_40CE91:				; CODE XREF: sub_40CE71+10j
		add	esi, 4

loc_40CE94:				; CODE XREF: sub_40CE71+Aj
		cmp	esi, [ebp+arg_4]
		jnz	short loc_40CE7D
		xor	eax, eax

loc_40CE9B:				; CODE XREF: sub_40CE71+1Ej
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_40CE71	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40CE9F	proc near		; CODE XREF: sub_40CFC5+4Ep
		push	8
		push	offset dword_42B158
		call	sub_405FF0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	ecx, [ebp+0Ch]
		call	sub_40CEE2
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40CED6
		call	sub_406036
		retn	0Ch
sub_40CE9F	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40CED6	proc near		; CODE XREF: sub_40CE9F+2Ap
					; DATA XREF: .rdata:0042B170o
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_409F1F
		pop	ecx
		retn
sub_40CED6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40CEE2	proc near		; CODE XREF: sub_40CE9F+1Ep
		push	8
		push	offset dword_42B138
		call	sub_405FF0
		mov	esi, ecx
		cmp	byte_42D830, 0
		jnz	loc_40CF93
		xor	eax, eax
		inc	eax
		mov	ecx, offset dword_42D828
		xchg	eax, [ecx]
		xor	ebx, ebx
		mov	[ebp-4], ebx
		mov	eax, [esi]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_40CF40
		mov	edi, dword_42C06C
		mov	ecx, edi
		and	ecx, 1Fh
		mov	eax, dword_42D82C
		cmp	eax, edi
		jz	short loc_40CF39
		xor	edi, eax
		push	ebx
		push	ebx
		push	ebx
		ror	edi, cl
		mov	ecx, edi
		call	ds:off_41D12C
		call	edi

loc_40CF39:				; CODE XREF: sub_40CEE2+44j
		push	offset dword_42D858
		jmp	short loc_40CF4A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40CF40:				; CODE XREF: sub_40CEE2+30j
		cmp	eax, 1
		jnz	short loc_40CF50
		push	offset dword_42D864

loc_40CF4A:				; CODE XREF: sub_40CEE2+5Cj
		call	sub_40E6D3
		pop	ecx

loc_40CF50:				; CODE XREF: sub_40CEE2+61j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		mov	eax, [esi]
		cmp	[eax], ebx
		jnz	short loc_40CF6E
		push	offset dword_41D194
		push	offset dword_41D184
		call	sub_40CE2A
		pop	ecx
		pop	ecx

loc_40CF6E:				; CODE XREF: sub_40CEE2+79j
		push	offset dword_41D19C
		push	offset dword_41D198
		call	sub_40CE2A
		pop	ecx
		pop	ecx
		mov	eax, [esi+4]
		cmp	[eax], ebx
		jnz	short loc_40CF93
		mov	byte_42D830, 1
		mov	eax, [esi+8]
		mov	byte ptr [eax],	1

loc_40CF93:				; CODE XREF: sub_40CEE2+15j
					; sub_40CEE2+A2j
		call	sub_406036
		retn
sub_40CEE2	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40CF99	proc near		; DATA XREF: .rdata:0042B14Co
		mov	eax, [ebp-14h]
		mov	eax, [eax]
		push	dword ptr [eax]
		call	sub_40CFB2
		add	esp, 4
		retn
sub_40CF99	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40CFA9	proc near		; DATA XREF: .rdata:0042B150o
		mov	esp, [ebp-18h]
		call	sub_409C4B
		int	3		; Trap to Debugger
sub_40CFA9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40CFB2	proc near		; CODE XREF: sub_40CF99+7p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		xor	eax, eax
		cmp	[ebp+arg_0], 0E06D7363h
		setz	al
		pop	ebp
		retn
sub_40CFB2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_40CFC5(UINT uExitCode,int,int)
sub_40CFC5	proc near		; CODE XREF: sub_40D0D1+6p
					; sub_40D0E0+6p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= dword	ptr -1
uExitCode	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	[ebp+arg_8], 0
		jnz	short loc_40CFE5
		call	sub_405EEA
		test	al, al
		jz	short loc_40CFE5
		push	[ebp+uExitCode]
		call	sub_40D06D
		pop	ecx

loc_40CFE5:				; CODE XREF: sub_40CFC5+Cj
					; sub_40CFC5+15j
		lea	eax, [ebp+arg_4]
		mov	byte ptr [ebp+var_1], 0
		mov	[ebp+var_18], eax
		lea	ecx, [ebp-2]
		lea	eax, [ebp+arg_8]
		mov	[ebp+var_14], eax
		lea	eax, [ebp+var_1]
		push	2
		mov	[ebp+var_10], eax
		pop	eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		call	sub_40CE9F
		cmp	[ebp+arg_8], 0
		jz	short loc_40D022
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D022:				; CODE XREF: sub_40CFC5+57j
		push	[ebp+uExitCode]	; uExitCode
		call	sub_40D02B
		int	3		; Trap to Debugger
sub_40CFC5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_40D02B(UINT uExitCode)
sub_40D02B	proc near		; CODE XREF: sub_40CFC5+60p

uExitCode	= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		call	sub_416D99
		cmp	eax, 1
		jz	short loc_40D05A
		mov	eax, large fs:30h
		mov	eax, [eax+68h]
		shr	eax, 8
		test	al, 1
		jnz	short loc_40D05A
		push	[ebp+uExitCode]	; uExitCode
		call	ds:GetCurrentProcess
		push	eax		; hProcess
		call	ds:TerminateProcess

loc_40D05A:				; CODE XREF: sub_40D02B+Dj
					; sub_40D02B+1Dj
		push	[ebp+uExitCode]
		call	sub_40D06D
		pop	ecx
		push	[ebp+uExitCode]	; uExitCode
		call	ds:ExitProcess
		int	3		; Trap to Debugger
sub_40D02B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40D06D	proc near		; CODE XREF: sub_40CFC5+1Ap
					; sub_40D02B+32p

hLibModule	= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+hLibModule], 0
		lea	eax, [ebp+hLibModule]
		push	eax
		push	offset aMscoree_dll ; "mscoree.dll"
		push	0
		call	ds:GetModuleHandleExW
		test	eax, eax
		jz	short loc_40D0AF
		push	esi
		push	offset ProcName	; "CorExitProcess"
		push	[ebp+hLibModule] ; hModule
		call	ds:GetProcAddress
		mov	esi, eax
		test	esi, esi
		jz	short loc_40D0AE
		push	[ebp+arg_0]
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi

loc_40D0AE:				; CODE XREF: sub_40D06D+32j
		pop	esi

loc_40D0AF:				; CODE XREF: sub_40D06D+1Dj
		cmp	[ebp+hLibModule], 0
		jz	short loc_40D0BE
		push	[ebp+hLibModule] ; hLibModule
		call	ds:FreeLibrary

loc_40D0BE:				; CODE XREF: sub_40D06D+46j
		mov	esp, ebp
		pop	ebp
		retn
sub_40D06D	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 4
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+8]
		mov	dword_42D82C, eax
		pop	ebp
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40D0D1	proc near		; CODE XREF: sub_4055C4+12p
		push	1		; int
		push	2		; int
		push	0		; uExitCode
		call	sub_40CFC5
		add	esp, 0Ch
		retn
sub_40D0D1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40D0E0	proc near		; CODE XREF: start-76p
		push	1		; int
		push	0		; int
		push	0		; uExitCode
		call	sub_40CFC5
		add	esp, 0Ch
		retn
sub_40D0E0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_40D0EF(UINT uExitCode)
sub_40D0EF	proc near		; CODE XREF: start-6p sub_40C069+3Ep ...

uExitCode	= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	0		; int
		push	2		; int
		push	[ebp+uExitCode]	; uExitCode
		call	sub_40CFC5
		add	esp, 0Ch
		pop	ebp
		retn
sub_40D0EF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40D105	proc near		; CODE XREF: start-AAp

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, dword_42D82C
		cmp	eax, dword_42C06C
		jnz	sub_409C4B
		push	[ebp+arg_0]
		call	sub_40C7DB
		pop	ecx
		mov	dword_42D82C, eax
		pop	ebp
		retn
sub_40D105	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_40D12B(UINT uExitCode)
sub_40D12B	proc near		; CODE XREF: start-Ep

uExitCode	= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	0		; int
		push	0		; int
		push	[ebp+uExitCode]	; uExitCode
		call	sub_40CFC5
		add	esp, 0Ch
		pop	ebp
		retn
sub_40D12B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40D141	proc near		; CODE XREF: sub_4053C4+Ep

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		cmp	eax, 4000h
		jz	short loc_40D173
		cmp	eax, 8000h
		jz	short loc_40D173
		cmp	eax, 10000h
		jz	short loc_40D173
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		push	16h
		pop	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D173:				; CODE XREF: sub_40D141+Dj
					; sub_40D141+14j ...
		mov	ecx, offset dword_42DC50
		xchg	eax, [ecx]
		xor	eax, eax
		pop	ebp
		retn
sub_40D141	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40D17E	proc near		; DATA XREF: .rdata:00421890o
		call	ds:GetCommandLineA
		mov	dword_42D844, eax
		call	ds:GetCommandLineW
		mov	dword_42D848, eax
		mov	al, 1
		retn
sub_40D17E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40D197	proc near		; CODE XREF: start-9Dp
		mov	eax, offset dword_42D838
		retn
sub_40D197	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40D19D	proc near		; CODE XREF: start:loc_405567p
		mov	eax, offset dword_42D83C
		retn
sub_40D19D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40D1A3	proc near		; CODE XREF: sub_40DB01+79p
		push	8
		push	offset dword_42B1B8
		call	sub_405FF0
		and	dword ptr [ebp-4], 0
		mov	ecx, [ebp+0Ch]
		call	sub_40D285
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40D1CF
		call	sub_406036
		retn	0Ch
sub_40D1A3	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40D1CF	proc near		; CODE XREF: sub_40D1A3+1Fp
					; DATA XREF: .rdata:0042B1D0o
		mov	eax, [ebp+10h]
		mov	eax, [eax]
		mov	eax, [eax]
		and	dword ptr [eax+350h], 0FFFFFFEFh
		retn
sub_40D1CF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40D1DE	proc near		; CODE XREF: sub_40D285+61p
		push	8
		push	offset dword_42B198
		call	sub_405FF0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	ecx, [ebp+0Ch]
		call	sub_40D2F1
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40D215
		call	sub_406036
		retn	0Ch
sub_40D1DE	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40D215	proc near		; CODE XREF: sub_40D1DE+2Ap
					; DATA XREF: .rdata:0042B1B0o
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_409F1F
		pop	ecx
		retn
sub_40D215	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40D221	proc near		; CODE XREF: .text:0040D47Ap
		push	0Ch
		push	offset dword_42B178
		call	sub_405FF0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	esi, offset dword_42D94C
		mov	edi, offset off_42C200

loc_40D246:				; CODE XREF: sub_40D221+42j
		mov	[ebp-1Ch], esi
		cmp	esi, offset dword_42D950
		jz	short loc_40D265
		cmp	[esi], edi
		jz	short loc_40D260
		push	edi
		push	esi
		call	sub_417F84
		pop	ecx
		pop	ecx
		mov	[esi], eax

loc_40D260:				; CODE XREF: sub_40D221+32j
		add	esi, 4
		jmp	short loc_40D246
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D265:				; CODE XREF: sub_40D221+2Ej
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40D279
		call	sub_406036
		retn	0Ch
sub_40D221	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40D279	proc near		; CODE XREF: sub_40D221+4Bp
					; DATA XREF: .rdata:0042B190o
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_409F1F
		pop	ecx
		retn
sub_40D279	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40D285	proc near		; CODE XREF: sub_40D1A3+13p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	esi
		push	edi
		push	0B8h
		push	1
		mov	edi, ecx
		call	sub_40FE33
		mov	edx, [edi]
		mov	esi, eax
		push	0		; lpMem
		mov	[edx], esi
		call	sub_40F0A8
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_40D2EB
		mov	eax, [edi]
		lea	ecx, [ebp-1]
		mov	[ebp+var_20], eax
		mov	eax, [edi+4]
		mov	[ebp+var_1C], eax
		mov	eax, [edi+8]
		mov	[ebp+var_18], eax
		mov	eax, [edi+0Ch]
		mov	[ebp+var_14], eax
		mov	eax, [edi+10h]
		push	4
		mov	[ebp+var_10], eax
		pop	eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		call	sub_40D1DE

loc_40D2EB:				; CODE XREF: sub_40D285+2Aj
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_40D285	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40D2F1	proc near		; CODE XREF: sub_40D1DE+1Ep
		mov	edi, edi
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	eax, [eax]
		push	dword ptr [eax+4Ch]
		mov	eax, [esi]
		push	dword ptr [eax]
		call	sub_40D6B3
		mov	eax, [esi+10h]
		push	dword ptr [eax]
		mov	eax, [esi+0Ch]
		push	dword ptr [eax]
		mov	eax, [esi]
		push	dword ptr [eax]
		call	sub_40DD23
		mov	ecx, [esi+8]
		add	esp, 14h
		mov	[ecx], eax
		test	eax, eax
		jz	loc_40D3D9
		mov	eax, [esi+10h]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_40D372
		mov	edx, offset dword_42C2C0
		push	edi

loc_40D339:				; CODE XREF: sub_40D2F1+6Bj
		mov	di, [eax]
		xor	ecx, ecx
		inc	ecx
		cmp	di, [edx]
		jnz	short loc_40D362
		test	di, di
		jz	short loc_40D35E
		mov	di, [eax+2]
		cmp	di, [edx+2]
		jnz	short loc_40D362
		add	eax, 4
		add	edx, 4
		test	di, di
		jnz	short loc_40D339

loc_40D35E:				; CODE XREF: sub_40D2F1+56j
		xor	eax, eax
		jmp	short loc_40D366
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D362:				; CODE XREF: sub_40D2F1+51j
					; sub_40D2F1+60j
		sbb	eax, eax
		or	eax, ecx

loc_40D366:				; CODE XREF: sub_40D2F1+6Fj
		pop	edi
		test	eax, eax
		jz	short loc_40D372
		mov	eax, offset dword_42D84C
		xchg	ecx, [eax]

loc_40D372:				; CODE XREF: sub_40D2F1+40j
					; sub_40D2F1+78j
		mov	eax, [esi]
		push	dword ptr [eax]
		mov	eax, [esi+4]
		mov	eax, [eax]
		add	eax, 4Ch
		push	eax
		call	sub_417F84
		mov	eax, [esi]
		push	dword ptr [eax]
		call	sub_417E8C
		mov	eax, [esi+4]
		add	esp, 0Ch
		mov	eax, [eax]
		test	byte ptr [eax+350h], 2
		jnz	short loc_40D3ED
		test	byte ptr dword_42C1F4, 1
		jnz	short loc_40D3ED
		push	dword ptr [eax+4Ch]
		push	offset dword_42D94C
		call	sub_417F84
		mov	eax, dword_42D94C
		pop	ecx
		pop	ecx
		pop	esi
		mov	ecx, [eax+88h]
		mov	off_42C1D0, ecx
		mov	ecx, [eax]
		mov	off_42C0C0, ecx
		mov	eax, [eax+4]
		mov	dword_42C1F8, eax
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D3D9:				; CODE XREF: sub_40D2F1+33j
		mov	eax, [esi]
		push	dword ptr [eax]
		call	sub_417E8C
		mov	eax, [esi]
		push	dword ptr [eax]
		call	sub_417CBF
		pop	ecx
		pop	ecx

loc_40D3ED:				; CODE XREF: sub_40D2F1+ABj
					; sub_40D2F1+B4j
		pop	esi
		retn
sub_40D2F1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40D3EF	proc near		; CODE XREF: sub_40E00F+18Ap
					; sub_4177BC+1Fp

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		push	ebx
		push	edi
		jz	short loc_40D43C
		push	55h
		push	[ebp+arg_0]
		call	loc_40C42E
		mov	ebx, eax
		pop	ecx
		pop	ecx
		cmp	ebx, 55h
		jnb	short loc_40D43C
		lea	ecx, ds:2[ebx*2]
		push	ecx
		call	sub_40FDE5
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_40D43C
		lea	ecx, [ebx+1]
		push	ecx
		push	[ebp+arg_0]
		push	ecx
		push	edi
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	short loc_40D442
		mov	eax, edi
		jmp	short loc_40D43E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D43C:				; CODE XREF: sub_40D3EF+Bj
					; sub_40D3EF+1Ej ...
		xor	eax, eax

loc_40D43E:				; CODE XREF: sub_40D3EF+4Bj
		pop	edi
		pop	ebx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D442:				; CODE XREF: sub_40D3EF+47j
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	sub_409E62
		int	3		; Trap to Debugger
sub_40D3EF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40D44F	proc near		; CODE XREF: sub_4164FE+8Dp
		xor	eax, eax
		mov	ecx, offset dword_42D84C
		inc	eax
		xchg	eax, [ecx]
		retn
sub_40D44F	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
unk_40D45A	db  8Bh	; 		; DATA XREF: .rdata:0041D188o
		db 0FFh
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	4
		pop	eax
		mov	[ebp-8], eax
		lea	ecx, [ebp-1]
		mov	[ebp-0Ch], eax
		lea	eax, [ebp-8]
		push	eax
		lea	eax, [ebp-1]
		push	eax
		lea	eax, [ebp-0Ch]
		push	eax
		call	sub_40D221
		mov	esp, ebp
		pop	ebp
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40D483	proc near		; CODE XREF: sub_40D6E2+1C2p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+arg_8]
		push	edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_40C3CA
		add	esp, 0Ch
		xor	esi, esi
		test	eax, eax
		jnz	short loc_40D4E8
		lea	eax, [edi+80h]
		cmp	[eax], si
		jz	short loc_40D4C3
		push	eax
		push	offset a_	; "_"
		push	2
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_40DAC0
		add	esp, 14h

loc_40D4C3:				; CODE XREF: sub_40D483+28j
		add	edi, 100h
		cmp	[edi], si
		jz	short loc_40D4E4
		push	edi
		push	offset a__0	; "."
		push	2
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_40DAC0
		add	esp, 14h

loc_40D4E4:				; CODE XREF: sub_40D483+49j
		pop	edi
		pop	esi
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D4E8:				; CODE XREF: sub_40D483+1Dj
		push	esi
		push	esi
		push	esi
		push	esi
		push	esi
		call	sub_409E62
		int	3		; Trap to Debugger
sub_40D483	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40D4F3	proc near		; CODE XREF: sub_40D6E2+177p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		xor	ebx, ebx
		push	1CAh
		push	ebx
		push	edi
		call	sub_407330
		mov	esi, [ebp+arg_4]
		add	esp, 0Ch
		movzx	eax, word ptr [esi]
		test	ax, ax
		jnz	short loc_40D523

loc_40D51C:				; CODE XREF: sub_40D4F3+63j
					; sub_40D4F3+11Ej ...
		xor	eax, eax
		jmp	loc_40D5B8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D523:				; CODE XREF: sub_40D4F3+27j
		push	2Eh
		pop	ecx
		cmp	ax, cx
		jnz	short loc_40D558
		lea	eax, [esi+2]
		cmp	[eax], bx
		jz	short loc_40D558
		push	0Fh
		push	eax
		lea	eax, [edi+100h]
		push	10h
		push	eax
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	loc_40D646
		mov	[edi+11Eh], ax
		jmp	short loc_40D51C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D558:				; CODE XREF: sub_40D4F3+36j
					; sub_40D4F3+3Ej
		push	offset a__	; "_.,"
		push	esi
		mov	[ebp+var_4], ebx
		call	sub_417B99
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_40D5B5
		push	2Ch
		pop	edx

loc_40D56F:				; CODE XREF: sub_40D4F3+146j
		lea	ecx, [esi+eax*2]
		movzx	ebx, word ptr [ecx]
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_4]
		test	ecx, ecx
		jnz	short loc_40D5BF
		cmp	eax, 40h
		jnb	short loc_40D5B5
		push	eax
		push	esi
		push	40h
		push	edi
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	loc_40D644
		mov	esi, [ebp+var_8]
		push	2Eh
		pop	eax
		cmp	bx, ax
		jnz	short loc_40D608
		movzx	eax, word ptr [esi+2]
		xor	ecx, ecx
		inc	ecx
		cmp	eax, 75h
		jz	short loc_40D620
		cmp	eax, 55h
		jz	short loc_40D60B

loc_40D5B5:				; CODE XREF: sub_40D4F3+77j
					; sub_40D4F3+8Fj ...
		or	eax, 0FFFFFFFFh

loc_40D5B8:				; CODE XREF: sub_40D4F3+2Bj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D5BF:				; CODE XREF: sub_40D4F3+8Aj
		cmp	ecx, 1
		jnz	short loc_40D5DA
		cmp	eax, 40h
		jnb	short loc_40D5B5
		cmp	ebx, 5Fh
		jz	short loc_40D5B5
		push	eax
		push	esi
		push	40h
		lea	eax, [edi+80h]
		jmp	short loc_40D5F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D5DA:				; CODE XREF: sub_40D4F3+CFj
		cmp	ecx, 2
		jnz	short loc_40D5B5
		cmp	eax, 10h
		jnb	short loc_40D5B5
		test	bx, bx
		jz	short loc_40D5EE
		cmp	bx, dx
		jnz	short loc_40D5B5

loc_40D5EE:				; CODE XREF: sub_40D4F3+F4j
		push	eax
		push	esi
		push	10h
		lea	eax, [edi+100h]

loc_40D5F8:				; CODE XREF: sub_40D4F3+E5j
		push	eax
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	short loc_40D644
		mov	esi, [ebp+var_8]

loc_40D608:				; CODE XREF: sub_40D4F3+AFj
		mov	ecx, [ebp+var_4]

loc_40D60B:				; CODE XREF: sub_40D4F3+C0j
		push	2Ch
		pop	eax
		cmp	bx, ax
		jz	loc_40D51C
		test	bx, bx
		jz	loc_40D51C

loc_40D620:				; CODE XREF: sub_40D4F3+BBj
		add	esi, 2
		inc	ecx
		push	offset a__	; "_.,"
		push	esi
		mov	[ebp+var_4], ecx
		call	sub_417B99
		pop	ecx
		pop	ecx
		push	2Ch
		pop	edx
		test	eax, eax
		jnz	loc_40D56F
		jmp	loc_40D5B5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D644:				; CODE XREF: sub_40D4F3+A0j
					; sub_40D4F3+110j
		xor	ebx, ebx

loc_40D646:				; CODE XREF: sub_40D4F3+56j
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		call	sub_409E62
		int	3		; Trap to Debugger

loc_40D651:				; CODE XREF: sub_4053C4+80p
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		call	sub_40F3FC
		mov	edx, [ebp+arg_0]
		mov	esi, eax
		push	0
		pop	eax
		mov	ecx, [esi+350h]
		test	cl, 2
		setz	al
		inc	eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_40D6A9
		test	edx, edx
		jz	short loc_40D6B0
		cmp	edx, 1
		jz	short loc_40D69E
		cmp	edx, 2
		jz	short loc_40D699
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		jmp	short loc_40D6B0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D699:				; CODE XREF: sub_40D4F3+18Fj
		and	ecx, 0FFFFFFFDh
		jmp	short loc_40D6A1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D69E:				; CODE XREF: sub_40D4F3+18Aj
		or	ecx, 2

loc_40D6A1:				; CODE XREF: sub_40D4F3+1A9j
		mov	[esi+350h], ecx
		jmp	short loc_40D6B0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D6A9:				; CODE XREF: sub_40D4F3+181j
		or	dword_42C1F4, 0FFFFFFFFh

loc_40D6B0:				; CODE XREF: sub_40D4F3+185j
					; sub_40D4F3+1A4j ...
		pop	esi
		pop	ebp
		retn
sub_40D4F3	endp ; sp = -2Ch


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40D6B3	proc near		; CODE XREF: sub_40D2F1+11p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jz	short loc_40D6DF
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_40D6DF
		cmp	eax, esi
		jz	short loc_40D6DF
		push	edi
		push	2Eh
		pop	ecx
		mov	edi, eax
		rep movsd
		and	dword ptr [eax+0Ch], 0
		push	eax
		call	sub_417C42
		pop	ecx
		pop	edi

loc_40D6DF:				; CODE XREF: sub_40D6B3+Bj
					; sub_40D6B3+12j ...
		pop	esi
		pop	ebp
		retn
sub_40D6B3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40D6E2	proc near		; CODE XREF: sub_40DD23+1F7p
					; sub_40E00F+54p

var_1F8		= dword	ptr -1F8h
var_1F4		= dword	ptr -1F4h
var_1F0		= dword	ptr -1F0h
var_1EC		= dword	ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1E4		= dword	ptr -1E4h
var_1E0		= dword	ptr -1E0h
LCData		= word ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1D0		= dword	ptr -1D0h
var_D0		= dword	ptr -0D0h
var_B0		= dword	ptr -0B0h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 1F8h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		push	ebx
		mov	ebx, [ebp+arg_14]
		push	esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_1E8], eax
		mov	[ebp+var_1F8], ebx
		push	edi
		mov	edi, [ebp+arg_C]
		mov	[ebp+var_1F4], edi
		test	esi, esi
		jz	loc_40D98C
		call	sub_40F3FC
		push	55h
		lea	ecx, [eax+68h]
		mov	[ebp+var_1D4], ecx
		lea	ecx, [eax+6Ch]
		mov	[ebp+var_1E0], ecx
		lea	ecx, [eax+172h]
		add	eax, 2A0h
		mov	[ebp+var_1D8], ecx
		push	eax
		push	[ebp+arg_10]
		xor	ecx, ecx
		mov	[ebp+var_1E4], eax
		push	edi
		mov	[ebp+var_1F0], ecx
		mov	dword ptr [ebp+LCData],	ecx
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	loc_40DAB3
		xor	edx, edx
		cmp	word ptr [esi],	43h
		jnz	short loc_40D7AD
		cmp	[esi+2], dx
		jnz	short loc_40D7AD
		mov	esi, [ebp+var_1E8]
		push	offset aC	; "C"
		push	[ebp+arg_8]
		push	esi
		call	sub_40C3CA
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_40DAB3
		test	ebx, ebx
		jz	short loc_40D7A6
		mov	[ebx], eax

loc_40D7A6:				; CODE XREF: sub_40D6E2+C0j
		mov	eax, esi
		jmp	loc_40D98E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D7AD:				; CODE XREF: sub_40D6E2+97j
					; sub_40D6E2+9Dj
		mov	ebx, esi
		lea	ecx, [ebx+2]

loc_40D7B2:				; CODE XREF: sub_40D6E2+D9j
		mov	ax, [ebx]
		add	ebx, 2
		cmp	ax, dx
		jnz	short loc_40D7B2
		sub	ebx, ecx
		sar	ebx, 1
		cmp	ebx, 83h
		jnb	short loc_40D83F
		mov	eax, [ebp+var_1D8]
		mov	ecx, esi

loc_40D7D1:				; CODE XREF: sub_40D6E2+10Fj
		mov	dx, [eax]
		cmp	dx, [ecx]
		jnz	short loc_40D7F7
		test	dx, dx
		jz	short loc_40D7F3
		mov	dx, [eax+2]
		cmp	dx, [ecx+2]
		jnz	short loc_40D7F7
		add	eax, 4
		add	ecx, 4
		test	dx, dx
		jnz	short loc_40D7D1

loc_40D7F3:				; CODE XREF: sub_40D6E2+FAj
		xor	eax, eax
		jmp	short loc_40D7FC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D7F7:				; CODE XREF: sub_40D6E2+F5j
					; sub_40D6E2+104j
		sbb	eax, eax
		or	eax, 1

loc_40D7FC:				; CODE XREF: sub_40D6E2+113j
		test	eax, eax
		jz	loc_40DA64
		mov	eax, [ebp+var_1E0]
		mov	ecx, esi

loc_40D80C:				; CODE XREF: sub_40D6E2+14Aj
		mov	dx, [eax]
		cmp	dx, [ecx]
		jnz	short loc_40D832
		test	dx, dx
		jz	short loc_40D82E
		mov	dx, [eax+2]
		cmp	dx, [ecx+2]
		jnz	short loc_40D832
		add	eax, 4
		add	ecx, 4
		test	dx, dx
		jnz	short loc_40D80C

loc_40D82E:				; CODE XREF: sub_40D6E2+135j
		xor	eax, eax
		jmp	short loc_40D837
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D832:				; CODE XREF: sub_40D6E2+130j
					; sub_40D6E2+13Fj
		sbb	eax, eax
		or	eax, 1

loc_40D837:				; CODE XREF: sub_40D6E2+14Ej
		test	eax, eax
		jz	loc_40DA64

loc_40D83F:				; CODE XREF: sub_40D6E2+E5j
		call	sub_40FD42
		xor	ecx, ecx
		test	al, al
		lea	eax, [ebp+var_1D0]
		setz	cl
		push	esi
		push	eax
		mov	[ebp+var_1EC], ecx
		call	sub_40D4F3
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	loc_40D8F3
		cmp	[ebp+var_1EC], 0
		lea	eax, [ebp+var_1D0]
		push	eax
		push	[ebp+var_1D4]
		push	eax
		jz	short loc_40D886
		call	sub_41904D
		jmp	short loc_40D88B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D886:				; CODE XREF: sub_40D6E2+19Bj
		call	sub_4186DE

loc_40D88B:				; CODE XREF: sub_40D6E2+1A2j
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_40D8F3
		lea	eax, [ebp+var_1D0]
		push	eax
		push	83h
		push	[ebp+var_1D8]
		call	sub_40D483
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_40D8EB
		lea	ecx, [ebp+var_B0]
		lea	edx, [ecx+2]

loc_40D8B9:				; CODE XREF: sub_40D6E2+1E4j
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, word ptr [ebp+var_1F0]
		jnz	short loc_40D8B9
		sub	ecx, edx
		sar	ecx, 1
		lea	eax, [ecx+1]
		push	eax
		lea	eax, [ebp+var_B0]
		push	eax
		push	[ebp+arg_10]
		push	edi
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	loc_40DAB3

loc_40D8EB:				; CODE XREF: sub_40D6E2+1CCj
		lea	edi, [ebx+1]
		jmp	loc_40DA32
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D8F3:				; CODE XREF: sub_40D6E2+180j
					; sub_40D6E2+1AEj
		cmp	ebx, 83h
		jnb	loc_40DA9C
		cmp	word ptr [ebp+var_1D0],	0
		jz	loc_40DA9C
		lea	eax, [ebp+var_1D0]
		push	eax
		call	sub_40FC3D
		test	eax, eax
		jz	loc_40DA9C
		cmp	word ptr [ebp+var_D0], 0
		jz	short loc_40D99F
		lea	eax, [ebp+var_D0]
		push	offset aUtf8	; "utf8"
		push	eax
		call	sub_415625
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_40D9C1
		lea	eax, [ebp+var_D0]
		push	offset aUtf8_0	; "utf-8"
		push	eax
		call	sub_415625
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_40D9C1
		mov	ecx, edi
		xor	ebx, ebx
		lea	edx, [ecx+2]

loc_40D960:				; CODE XREF: sub_40D6E2+287j
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, bx
		jnz	short loc_40D960

loc_40D96B:				; CODE XREF: sub_40D6E2+3CCj
		sub	ecx, edx
		sar	ecx, 1
		lea	eax, [ecx+1]
		push	eax
		push	edi
		push	55h
		push	[ebp+var_1E4]
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	loc_40DAB3

loc_40D98C:				; CODE XREF: sub_40D6E2+38j
		xor	eax, eax

loc_40D98E:				; CODE XREF: sub_40D6E2+C6j
					; sub_40D6E2+3B5j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40D99F:				; CODE XREF: sub_40D6E2+247j
		push	2		; cchData
		lea	eax, [ebp+LCData]
		push	eax		; lpLCData
		push	20001004h	; LCType
		push	esi		; int
		call	sub_40FB77
		test	eax, eax
		jz	short loc_40D9C1
		mov	eax, dword ptr [ebp+LCData]
		test	eax, eax
		jnz	short loc_40D9CC

loc_40D9C1:				; CODE XREF: sub_40D6E2+25Ej
					; sub_40D6E2+275j ...
		mov	eax, 0FDE9h
		mov	dword ptr [ebp+LCData],	eax

loc_40D9CC:				; CODE XREF: sub_40D6E2+2DDj
		mov	ecx, [ebp+var_1D4]
		lea	edi, [ebx+1]
		push	edi
		push	esi
		push	83h
		push	[ebp+var_1D8]
		movzx	eax, ax
		mov	[ecx], eax
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	loc_40DAB3
		push	edi
		push	esi
		push	[ebp+arg_10]
		push	[ebp+var_1F4]
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	loc_40DAB3
		push	edi
		lea	eax, [ebp+var_1D0]
		push	eax
		push	55h
		push	[ebp+var_1E4]
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	loc_40DAB3

loc_40DA32:				; CODE XREF: sub_40D6E2+20Cj
		xor	eax, eax
		cmp	[esi], ax
		jz	short loc_40DA59
		mov	eax, 83h
		cmp	ebx, eax
		jnb	short loc_40DA59
		push	edi
		push	esi
		push	eax
		push	[ebp+var_1E0]
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	short loc_40DAB3
		jmp	short loc_40DA64
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DA59:				; CODE XREF: sub_40D6E2+355j
					; sub_40D6E2+35Ej
		mov	eax, [ebp+var_1E0]
		xor	ecx, ecx
		mov	[eax], cx

loc_40DA64:				; CODE XREF: sub_40D6E2+11Cj
					; sub_40D6E2+157j ...
		mov	ecx, [ebp+var_1F8]
		test	ecx, ecx
		jz	short loc_40DA78
		mov	eax, [ebp+var_1D4]
		mov	eax, [eax]
		mov	[ecx], eax

loc_40DA78:				; CODE XREF: sub_40D6E2+38Aj
		mov	ebx, [ebp+var_1D8]
		mov	esi, [ebp+var_1E8]
		push	ebx
		push	[ebp+arg_8]
		push	esi
		call	sub_40C3CA
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_40DAB3
		mov	eax, ebx
		jmp	loc_40D98E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DA9C:				; CODE XREF: sub_40D6E2+217j
					; sub_40D6E2+225j ...
		mov	ecx, edi
		xor	ebx, ebx
		lea	edx, [ecx+2]

loc_40DAA3:				; CODE XREF: sub_40D6E2+3CAj
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, bx
		jnz	short loc_40DAA3
		jmp	loc_40D96B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DAB3:				; CODE XREF: sub_40D6E2+8Bj
					; sub_40D6E2+B8j ...
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	sub_409E62
		int	3		; Trap to Debugger
sub_40D6E2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40DAC0	proc near		; CODE XREF: sub_40D483+38p
					; sub_40D483+59p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		xor	ebx, ebx
		push	esi
		mov	esi, ebx
		cmp	[ebp+arg_8], ebx
		jle	short loc_40DAF2
		push	edi
		lea	edi, [ebp+arg_8]

loc_40DAD4:				; CODE XREF: sub_40DAC0+2Fj
		lea	edi, [edi+4]
		push	dword ptr [edi]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_4157F7
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_40DAF6
		inc	esi
		cmp	esi, [ebp+arg_8]
		jl	short loc_40DAD4
		pop	edi

loc_40DAF2:				; CODE XREF: sub_40DAC0+Ej
		pop	esi
		pop	ebx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DAF6:				; CODE XREF: sub_40DAC0+29j
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		call	sub_409E62
		int	3		; Trap to Debugger
sub_40DAC0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40DB01	proc near		; CODE XREF: sub_40A10F+11p
					; sub_40A10F+7Ap

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		and	[ebp+var_C], 0
		and	[ebp+var_10], 0
		cmp	[ebp+arg_0], 5
		jbe	short loc_40DB2B
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		xor	eax, eax
		jmp	short loc_40DB82
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DB2B:				; CODE XREF: sub_40DB01+14j
		call	sub_40F3FC
		mov	[ebp+var_8], eax
		call	sub_40FD4D
		call	sub_417F0D
		mov	eax, [ebp+var_8]
		lea	ecx, [ebp-1]
		or	dword ptr [eax+350h], 10h
		lea	eax, [ebp+var_8]
		mov	[ebp+var_14], eax
		lea	eax, [ebp+var_10]
		mov	[ebp+var_28], eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_24], eax
		lea	eax, [ebp+var_C]
		mov	[ebp+var_20], eax
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+arg_4]
		mov	[ebp+var_18], eax
		lea	eax, [ebp+var_14]
		push	eax
		lea	eax, [ebp+var_28]
		push	eax
		lea	eax, [ebp-1]
		push	eax
		call	sub_40D1A3
		mov	eax, [ebp+var_C]

loc_40DB82:				; CODE XREF: sub_40DB01+28j
		mov	esp, ebp
		pop	ebp
		retn
sub_40DB01	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40DB86	proc near		; CODE XREF: sub_40DD23+2C3p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		xor	esi, esi
		inc	esi
		push	6A6h
		mov	[ebp+var_8], esi
		call	sub_40FDE5
		mov	ebx, eax
		xor	eax, eax
		pop	ecx
		test	ebx, ebx
		jz	loc_40DCC4
		push	edi
		lea	edi, [ebx+4]
		mov	[edi], ax
		mov	[ebx], esi
		mov	esi, [ebp+arg_0]
		lea	eax, [esi+30h]
		push	dword ptr [eax]
		mov	[ebp+var_C], eax
		push	offset asc_421818 ; "="
		push	ds:off_421754
		push	3
		push	351h
		push	edi
		call	sub_40DAC0
		mov	eax, offset off_421754
		add	esp, 18h
		mov	[ebp+var_4], eax

loc_40DBE4:				; CODE XREF: sub_40DB86+EEj
		push	offset asc_421814 ; ";"
		push	351h
		push	edi
		call	sub_4157F7
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_40DD16
		mov	eax, [ebp+var_C]
		lea	ecx, [eax+10h]
		mov	eax, [eax]
		mov	[ebp+var_C], ecx
		mov	ecx, [ecx]
		mov	[ebp+var_10], ecx

loc_40DC0F:				; CODE XREF: sub_40DB86+A9j
		mov	dx, [eax]
		cmp	dx, [ecx]
		jnz	short loc_40DC35
		test	dx, dx
		jz	short loc_40DC31
		mov	dx, [eax+2]
		cmp	dx, [ecx+2]
		jnz	short loc_40DC35
		add	eax, 4
		add	ecx, 4
		test	dx, dx
		jnz	short loc_40DC0F

loc_40DC31:				; CODE XREF: sub_40DB86+94j
		xor	eax, eax
		jmp	short loc_40DC3A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DC35:				; CODE XREF: sub_40DB86+8Fj
					; sub_40DB86+9Ej
		sbb	eax, eax
		or	eax, 1

loc_40DC3A:				; CODE XREF: sub_40DB86+ADj
		push	[ebp+var_10]
		neg	eax
		push	offset asc_421818 ; "="
		sbb	eax, eax
		not	eax
		and	[ebp+var_8], eax
		mov	eax, [ebp+var_C]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_4]
		add	eax, 0Ch
		mov	[ebp+var_4], eax
		push	dword ptr [eax]
		push	3
		push	351h
		push	edi
		call	sub_40DAC0
		mov	eax, [ebp+var_4]
		add	esp, 18h
		cmp	eax, offset off_421784
		jl	loc_40DBE4
		cmp	[ebp+var_8], 0
		jnz	short loc_40DCCA
		mov	ecx, [esi+28h]
		or	edi, 0FFFFFFFFh
		test	ecx, ecx
		jz	short loc_40DC9B
		mov	eax, edi
		lock xadd [ecx], eax
		jnz	short loc_40DC9B
		push	dword ptr [esi+28h] ; lpMem
		call	sub_40F0A8
		pop	ecx

loc_40DC9B:				; CODE XREF: sub_40DB86+102j
					; sub_40DB86+10Aj
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_40DCB2
		lock xadd [eax], edi
		dec	edi
		jnz	short loc_40DCB2
		push	dword ptr [esi+24h] ; lpMem
		call	sub_40F0A8
		pop	ecx

loc_40DCB2:				; CODE XREF: sub_40DB86+11Aj
					; sub_40DB86+121j
		and	dword ptr [esi+24h], 0
		lea	eax, [ebx+4]
		and	dword ptr [esi+1Ch], 0
		mov	[esi+28h], ebx
		mov	[esi+20h], eax

loc_40DCC3:				; CODE XREF: sub_40DB86+18Ej
		pop	edi

loc_40DCC4:				; CODE XREF: sub_40DB86+21j
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DCCA:				; CODE XREF: sub_40DB86+F8j
		push	ebx		; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	ecx, [esi+28h]
		or	edi, 0FFFFFFFFh
		test	ecx, ecx
		jz	short loc_40DCEC
		mov	eax, edi
		lock xadd [ecx], eax
		jnz	short loc_40DCEC
		push	dword ptr [esi+28h] ; lpMem
		call	sub_40F0A8
		pop	ecx

loc_40DCEC:				; CODE XREF: sub_40DB86+153j
					; sub_40DB86+15Bj
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_40DD03
		lock xadd [eax], edi
		dec	edi
		jnz	short loc_40DD03
		push	dword ptr [esi+24h] ; lpMem
		call	sub_40F0A8
		pop	ecx

loc_40DD03:				; CODE XREF: sub_40DB86+16Bj
					; sub_40DB86+172j
		xor	eax, eax
		mov	[esi+24h], eax
		mov	[esi+1Ch], eax
		mov	[esi+28h], eax
		mov	[esi+20h], eax
		mov	eax, [esi+40h]
		jmp	short loc_40DCC3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DD16:				; CODE XREF: sub_40DB86+73j
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	sub_409E62
		int	3		; Trap to Debugger
sub_40DB86	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40DD23	proc near		; CODE XREF: sub_40D2F1+24p

var_1D0		= dword	ptr -1D0h
var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
var_1C4		= dword	ptr -1C4h
var_1C0		= dword	ptr -1C0h
var_1BC		= dword	ptr -1BCh
var_1B8		= dword	ptr -1B8h
var_10C		= dword	ptr -10Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 1D0h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		push	ebx
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_1C8], edi
		test	eax, eax
		jz	short loc_40DD6F
		test	esi, esi
		jz	short loc_40DD62
		push	esi
		push	eax
		push	edi
		call	sub_40E00F
		add	esp, 0Ch
		jmp	loc_40DFEC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DD62:				; CODE XREF: sub_40DD23+2Dj
		add	eax, 2
		add	eax, eax
		mov	eax, [edi+eax*8]
		jmp	loc_40DFEC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DD6F:				; CODE XREF: sub_40DD23+29j
		xor	eax, eax
		mov	[ebp+var_1C4], 1
		mov	[ebp+var_1CC], eax
		mov	ebx, eax
		mov	[ebp+var_1BC], ebx
		test	esi, esi
		jz	loc_40DFE5
		cmp	word ptr [esi],	4Ch
		jnz	loc_40DF03
		cmp	word ptr [esi+2], 43h
		jnz	loc_40DF03
		cmp	word ptr [esi+4], 5Fh
		jnz	loc_40DF03

loc_40DDB1:				; CODE XREF: sub_40DD23+1CBj
		push	offset asc_42180C ; "=;"
		push	esi
		call	sub_417BF4
		mov	ebx, eax
		mov	[ebp+var_1D0], ebx
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_40DEFC
		sub	eax, esi
		sar	eax, 1
		mov	[ebp+var_1C4], eax
		jz	loc_40DEFC
		push	3Bh
		pop	eax
		cmp	[ebx], ax
		jz	loc_40DEFC
		mov	edi, [ebp+var_1C4]
		mov	ebx, offset off_421754
		mov	[ebp+var_1C0], 1

loc_40DDFF:				; CODE XREF: sub_40DD23+117j
		push	edi
		push	esi
		push	dword ptr [ebx]
		call	sub_40E958
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_40DE2B
		mov	ecx, [ebx]
		lea	edx, [ecx+2]

loc_40DE14:				; CODE XREF: sub_40DD23+FEj
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, word ptr [ebp+var_1CC]
		jnz	short loc_40DE14
		sub	ecx, edx
		sar	ecx, 1
		cmp	edi, ecx
		jz	short loc_40DE3C

loc_40DE2B:				; CODE XREF: sub_40DD23+EAj
		inc	[ebp+var_1C0]
		add	ebx, 0Ch
		cmp	ebx, offset off_421784
		jle	short loc_40DDFF

loc_40DE3C:				; CODE XREF: sub_40DD23+106j
		mov	ebx, [ebp+var_1D0]
		add	ebx, 2
		push	offset asc_421814 ; ";"
		push	ebx
		call	sub_417B99
		mov	edi, [ebp+var_1C8]
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_40DE6A
		push	3Bh
		pop	eax
		cmp	[ebx], ax
		jnz	loc_40DEFC

loc_40DE6A:				; CODE XREF: sub_40DD23+139j
		cmp	[ebp+var_1C0], 5
		jg	short loc_40DED2
		push	esi
		push	ebx
		lea	eax, [ebp+var_10C]
		push	83h
		push	eax
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	loc_40E002
		lea	eax, [esi+esi]
		cmp	eax, 106h
		jnb	loc_40DFFD
		xor	ecx, ecx
		mov	word ptr [ebp+eax+var_10C], cx
		lea	eax, [ebp+var_10C]
		push	eax
		push	[ebp+var_1C0]
		push	edi
		call	sub_40E00F
		mov	ecx, [ebp+var_1BC]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_40DED8
		inc	ecx
		mov	[ebp+var_1BC], ecx
		jmp	short loc_40DED8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DED2:				; CODE XREF: sub_40DD23+14Ej
		mov	ecx, [ebp+var_1BC]

loc_40DED8:				; CODE XREF: sub_40DD23+1A4j
					; sub_40DD23+1ADj
		lea	esi, [ebx+esi*2]
		movzx	eax, word ptr [esi]
		mov	edx, eax
		test	ax, ax
		jz	short loc_40DEEB
		add	esi, 2
		movzx	edx, word ptr [esi]

loc_40DEEB:				; CODE XREF: sub_40DD23+1C0j
		test	dx, dx
		jnz	loc_40DDB1
		test	ecx, ecx
		jnz	loc_40DFE5

loc_40DEFC:				; CODE XREF: sub_40DD23+A5j
					; sub_40DD23+B5j ...
		xor	eax, eax
		jmp	loc_40DFEC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DF03:				; CODE XREF: sub_40DD23+72j
					; sub_40DD23+7Dj ...
		push	eax
		push	55h
		lea	eax, [ebp+var_1B8]
		push	eax
		push	83h
		lea	eax, [ebp+var_10C]
		push	eax
		push	esi
		call	sub_40D6E2
		add	esp, 18h
		test	eax, eax
		jz	loc_40DFEC
		xor	ecx, ecx
		lea	edx, [edi+20h]
		mov	esi, ecx
		mov	[ebp+var_1BC], edx

loc_40DF37:				; CODE XREF: sub_40DD23+2B0j
		test	esi, esi
		jz	loc_40DFC0
		mov	ecx, [edx]
		lea	eax, [ebp+var_10C]

loc_40DF47:				; CODE XREF: sub_40DD23+25Dj
		mov	di, [eax]
		cmp	di, [ecx]
		mov	edi, [ebp+var_1C8]
		jnz	short loc_40DF88
		cmp	word ptr [eax],	0
		jz	short loc_40DF82
		mov	dx, [eax+2]
		cmp	dx, [ecx+2]
		mov	word ptr [ebp+var_1C0+2], dx
		mov	edx, [ebp+var_1BC]
		jnz	short loc_40DF88
		add	eax, 4
		add	ecx, 4
		cmp	word ptr [ebp+var_1C0+2], 0
		jnz	short loc_40DF47

loc_40DF82:				; CODE XREF: sub_40DD23+236j
		xor	ecx, ecx
		mov	eax, ecx
		jmp	short loc_40DF8F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DF88:				; CODE XREF: sub_40DD23+230j
					; sub_40DD23+24Dj
		sbb	eax, eax
		or	eax, 1
		xor	ecx, ecx

loc_40DF8F:				; CODE XREF: sub_40DD23+263j
		test	eax, eax
		jz	short loc_40DFBF
		lea	eax, [ebp+var_10C]
		push	eax
		push	esi
		push	edi
		call	sub_40E00F
		mov	edx, [ebp+var_1BC]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_40DFB3
		inc	ebx
		xor	ecx, ecx
		jmp	short loc_40DFC0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DFB3:				; CODE XREF: sub_40DD23+289j
		xor	ecx, ecx
		mov	eax, ecx
		mov	[ebp+var_1C4], eax
		jmp	short loc_40DFC6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DFBF:				; CODE XREF: sub_40DD23+26Ej
		inc	ebx

loc_40DFC0:				; CODE XREF: sub_40DD23+216j
					; sub_40DD23+28Ej
		mov	eax, [ebp+var_1C4]

loc_40DFC6:				; CODE XREF: sub_40DD23+29Aj
		inc	esi
		add	edx, 10h
		mov	[ebp+var_1BC], edx
		cmp	esi, 5
		jle	loc_40DF37
		test	eax, eax
		jnz	short loc_40DFE5
		test	ebx, ebx
		jnz	short loc_40DFE5
		mov	eax, ecx
		jmp	short loc_40DFEC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DFE5:				; CODE XREF: sub_40DD23+68j
					; sub_40DD23+1D3j ...
		push	edi
		call	sub_40DB86
		pop	ecx

loc_40DFEC:				; CODE XREF: sub_40DD23+3Aj
					; sub_40DD23+47j ...
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40DFFD:				; CODE XREF: sub_40DD23+176j
		call	sub_405B79

loc_40E002:				; CODE XREF: sub_40DD23+168j
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	sub_409E62
		int	3		; Trap to Debugger
sub_40DD23	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E00F	proc near		; CODE XREF: sub_40DD23+32p
					; sub_40DD23+194p ...

var_2E4		= dword	ptr -2E4h
var_2E0		= dword	ptr -2E0h
var_2DC		= dword	ptr -2DCh
lpMem		= dword	ptr -2D8h
var_2D4		= dword	ptr -2D4h
var_2D0		= dword	ptr -2D0h
var_2CC		= dword	ptr -2CCh
var_2C8		= dword	ptr -2C8h
var_2C4		= dword	ptr -2C4h
var_2BE		= word ptr -2BEh
var_2BC		= dword	ptr -2BCh
var_2B8		= dword	ptr -2B8h
CharType	= word ptr -20Ch
var_10C		= dword	ptr -10Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 2E4h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_2DC], ebx
		call	sub_40F3FC
		add	eax, 278h
		mov	[ebp+var_2D0], eax
		lea	eax, [ebp+var_2C4]
		push	eax
		push	55h
		lea	eax, [ebp+var_2B8]
		push	eax
		push	83h
		lea	eax, [ebp+var_10C]
		push	eax
		push	esi
		call	sub_40D6E2
		add	esp, 18h
		test	eax, eax
		jz	loc_40E345
		lea	esi, [ebx+2]
		shl	esi, 4
		lea	eax, [ebp+var_10C]
		mov	[ebp+var_2C8], esi
		mov	edx, [esi+edi]
		mov	ecx, edx

loc_40E08A:				; CODE XREF: sub_40E00F+BBj
		mov	si, [eax]
		and	[ebp+var_2BC], 0
		cmp	si, [ecx]
		mov	esi, [ebp+var_2C8]
		jnz	short loc_40E0D4
		cmp	word ptr [eax],	0
		jz	short loc_40E0CC
		mov	si, [eax+2]
		cmp	si, [ecx+2]
		mov	[ebp+var_2BE], si
		mov	esi, [ebp+var_2C8]
		jnz	short loc_40E0D4
		add	eax, 4
		add	ecx, 4
		cmp	[ebp+var_2BE], 0
		jnz	short loc_40E08A

loc_40E0CC:				; CODE XREF: sub_40E00F+94j
		mov	eax, [ebp+var_2BC]
		jmp	short loc_40E0D9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E0D4:				; CODE XREF: sub_40E00F+8Ej
					; sub_40E00F+ABj
		sbb	eax, eax
		or	eax, 1

loc_40E0D9:				; CODE XREF: sub_40E00F+C3j
		test	eax, eax
		jnz	short loc_40E0E4
		mov	eax, edx
		jmp	loc_40E347
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E0E4:				; CODE XREF: sub_40E00F+CCj
		lea	ecx, [ebp+var_10C]
		lea	edx, [ecx+2]

loc_40E0ED:				; CODE XREF: sub_40E00F+EBj
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, word ptr [ebp+var_2BC]
		jnz	short loc_40E0ED
		sub	ecx, edx
		sar	ecx, 1
		lea	eax, [ecx+1]
		mov	[ebp+var_2CC], eax
		lea	eax, ds:4[eax*2]
		push	eax
		call	sub_40FDE5
		mov	[ebp+lpMem], eax
		pop	ecx
		test	eax, eax
		jz	loc_40E345
		mov	ecx, [esi+edi]
		add	eax, 4
		mov	[ebp+var_2D4], ecx
		mov	ecx, [edi+ebx*4+0A0h]
		mov	[ebp+var_2E0], ecx
		mov	ecx, [edi+8]
		mov	[ebp+var_2E4], ecx
		lea	ecx, [ebp+var_10C]
		push	ecx
		push	[ebp+var_2CC]
		mov	[ebp-2C0h], eax
		push	eax
		call	sub_40C3CA
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_40E3C7
		cmp	word ptr [ebp+var_10C],	43h
		mov	eax, [ebp-2C0h]
		mov	[esi+edi], eax
		jnz	short loc_40E192
		cmp	word ptr [ebp+var_10C+2], 0
		jnz	short loc_40E192
		mov	ecx, [ebp+var_2BC]
		mov	eax, ecx
		jmp	short loc_40E1A5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E192:				; CODE XREF: sub_40E00F+16Dj
					; sub_40E00F+177j
		lea	eax, [ebp+var_2B8]
		push	eax
		call	sub_40D3EF
		pop	ecx
		mov	ecx, [ebp+var_2BC]

loc_40E1A5:				; CODE XREF: sub_40E00F+181j
		mov	[edi+ebx*4+0A0h], eax
		cmp	ebx, 2
		jnz	loc_40E2CF
		mov	esi, [ebp+var_2D0]
		mov	edx, ecx
		mov	eax, [ebp+var_2C4]
		mov	ecx, esi
		mov	[edi+8], eax
		mov	[ebp-2C0h], esi
		mov	eax, [esi+20h]
		mov	[ebp+var_2CC], eax
		mov	eax, [esi+24h]
		mov	[ebp+var_2C4], eax

loc_40E1E0:				; CODE XREF: sub_40E00F+21Bj
		mov	eax, [edi+8]
		cmp	eax, [ecx]
		jz	short loc_40E22E
		mov	esi, [ebp-2C0h]
		inc	edx
		mov	eax, [ecx]
		mov	ebx, [ebp+var_2CC]
		mov	ecx, [ecx+4]
		mov	[esi], ebx
		mov	ebx, [ebp+var_2C4]
		mov	[ebp+var_2C4], ecx
		mov	ecx, esi
		add	ecx, 8
		mov	[esi+4], ebx
		mov	ebx, [ebp+var_2DC]
		mov	esi, [ebp+var_2D0]
		mov	[ebp+var_2CC], eax
		mov	[ebp-2C0h], ecx
		cmp	edx, 5
		jl	short loc_40E1E0
		jmp	short loc_40E251
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E22E:				; CODE XREF: sub_40E00F+1D6j
		test	edx, edx
		jz	short loc_40E251
		mov	eax, [esi+edx*8]
		mov	[esi], eax
		mov	eax, [esi+edx*8+4]
		mov	[esi+4], eax
		mov	eax, [ebp+var_2CC]
		mov	[esi+edx*8], eax
		mov	eax, [ebp+var_2C4]
		mov	[esi+edx*8+4], eax

loc_40E251:				; CODE XREF: sub_40E00F+21Dj
					; sub_40E00F+221j
		cmp	edx, 5
		jnz	short loc_40E2C7
		push	1		; int
		push	dword ptr [edi+8] ; int
		lea	eax, [ebp+CharType]
		push	eax		; lpCharType
		push	7Fh		; cchMultiByte
		push	offset dword_4216C8 ; lpMultiByteStr
		push	1		; dwInfoType
		push	[ebp+var_2BC]	; int
		call	sub_41086F
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_40E2B9
		mov	eax, [ebp+var_2BC]

loc_40E283:				; CODE XREF: sub_40E00F+285j
		mov	ecx, 1FFh
		and	[ebp+eax*2+CharType], cx
		inc	eax
		cmp	eax, 7Fh
		jb	short loc_40E283
		push	0FEh
		push	off_42C1E4
		lea	eax, [ebp+CharType]
		push	eax
		call	sub_40754D
		xor	ecx, ecx
		add	esp, 0Ch
		test	eax, eax
		setz	cl
		jmp	short loc_40E2BF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E2B9:				; CODE XREF: sub_40E00F+26Cj
		mov	ecx, [ebp+var_2BC]

loc_40E2BF:				; CODE XREF: sub_40E00F+2A8j
		mov	[esi+4], ecx
		mov	eax, [edi+8]
		mov	[esi], eax

loc_40E2C7:				; CODE XREF: sub_40E00F+245j
		mov	eax, [esi+4]
		mov	[edi+18h], eax
		jmp	short loc_40E2ED
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E2CF:				; CODE XREF: sub_40E00F+1A0j
		cmp	ebx, 1
		jnz	short loc_40E2DF
		mov	eax, [ebp+var_2C4]
		mov	[edi+10h], eax
		jmp	short loc_40E2ED
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E2DF:				; CODE XREF: sub_40E00F+2C3j
		cmp	ebx, 5
		jnz	short loc_40E2ED
		mov	eax, [ebp+var_2C4]
		mov	[edi+14h], eax

loc_40E2ED:				; CODE XREF: sub_40E00F+2BEj
					; sub_40E00F+2CEj ...
		imul	eax, ebx, 0Ch
		push	edi
		mov	esi, ds:off_421750[eax]
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		pop	ecx
		mov	ecx, [ebp+var_2D4]
		test	eax, eax
		jz	short loc_40E358
		mov	eax, [ebp+var_2C8]
		mov	[eax+edi], ecx
		push	dword ptr [edi+ebx*4+0A0h] ; lpMem
		call	sub_40F0A8
		mov	ecx, [ebp+lpMem]
		mov	eax, [ebp+var_2E0]
		push	ecx		; lpMem
		mov	[edi+ebx*4+0A0h], eax
		call	sub_40F0A8
		mov	eax, [ebp+var_2E4]
		pop	ecx
		pop	ecx
		mov	[edi+8], eax

loc_40E345:				; CODE XREF: sub_40E00F+5Ej
					; sub_40E00F+110j
		xor	eax, eax

loc_40E347:				; CODE XREF: sub_40E00F+D0j
					; sub_40E00F+3B6j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E358:				; CODE XREF: sub_40E00F+2FBj
		cmp	ecx, offset dword_42C2C0
		jz	short loc_40E3AA
		mov	esi, ebx
		or	ecx, 0FFFFFFFFh
		add	esi, esi
		mov	eax, [edi+esi*8+28h]
		lock xadd [eax], ecx
		jnz	short loc_40E3AA
		push	dword ptr [edi+esi*8+28h] ; lpMem
		call	sub_40F0A8
		push	dword ptr [edi+esi*8+24h] ; lpMem
		call	sub_40F0A8
		push	dword ptr [edi+ebx*4+0A0h] ; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+var_2C8]
		add	esp, 0Ch
		mov	ecx, [ebp+var_2BC]
		mov	[eax+edi], ecx
		mov	[edi+ebx*4+0A0h], ecx
		jmp	short loc_40E3B0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E3AA:				; CODE XREF: sub_40E00F+34Fj
					; sub_40E00F+360j
		mov	eax, [ebp+var_2C8]

loc_40E3B0:				; CODE XREF: sub_40E00F+399j
		mov	ecx, [ebp+lpMem]
		add	ebx, ebx
		mov	dword ptr [ecx], 1
		mov	eax, [eax+edi]
		mov	[edi+ebx*8+28h], ecx
		jmp	short loc_40E347
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E3C7:				; CODE XREF: sub_40E00F+156j
		mov	eax, [ebp+var_2BC]
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	sub_409E62
		int	3		; Trap to Debugger
sub_40E00F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40E3D8	proc near		; CODE XREF: sub_40FDE5:loc_40FDFAp
					; sub_40FE33:loc_40FE57p ...
		mov	eax, dword_42D850
		nop
		retn
sub_40E3D8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E3DF	proc near		; CODE XREF: sub_405477+Bp

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_40E405
		cmp	eax, 1
		jz	short loc_40E405
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E405:				; CODE XREF: sub_40E3DF+Aj
					; sub_40E3DF+Fj
		mov	ecx, offset dword_42D850
		xchg	eax, [ecx]
		pop	ebp
		retn
sub_40E3DF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40E40E	proc near		; CODE XREF: sub_4053C4+13p
		mov	eax, offset dword_42D854
		retn
sub_40E40E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40E414	proc near		; CODE XREF: sub_40E6D3+26p
		push	0Ch
		push	offset dword_42B1F8
		call	sub_405FF0
		and	dword ptr [ebp-1Ch], 0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	ecx, [ebp+0Ch]
		call	sub_40E5E1
		mov	esi, eax
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40E459
		mov	eax, esi
		call	sub_406036
		retn	0Ch
sub_40E414	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40E456	proc near		; DATA XREF: .rdata:0042B210o
		mov	esi, [ebp-1Ch]
sub_40E456	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40E459	proc near		; CODE XREF: sub_40E414+33p
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_409F1F
		pop	ecx
		retn
sub_40E459	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40E465	proc near		; CODE XREF: sub_40E72B+2Cp
		push	0Ch
		push	offset dword_42B1D8
		call	sub_405FF0
		and	dword ptr [ebp-1Ch], 0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	ecx, [ebp+0Ch]
		call	sub_40E4B6
		mov	esi, eax
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40E4AA
		mov	eax, esi
		call	sub_406036
		retn	0Ch
sub_40E465	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40E4A7	proc near		; DATA XREF: .rdata:0042B1F0o
		mov	esi, [ebp-1Ch]
sub_40E4A7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40E4AA	proc near		; CODE XREF: sub_40E465+33p
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_409F1F
		pop	ecx
		retn
sub_40E4AA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E4B6	proc near		; CODE XREF: sub_40E465+22p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	eax, ecx
		mov	[ebp+var_8], eax
		push	ebx
		push	esi
		mov	eax, [eax]
		push	edi
		mov	esi, [eax]
		test	esi, esi
		jz	loc_40E5D7
		mov	eax, dword_42C06C
		mov	ecx, eax
		mov	ebx, [esi]
		and	ecx, 1Fh
		mov	edi, [esi+4]
		xor	ebx, eax
		mov	esi, [esi+8]
		xor	edi, eax
		xor	esi, eax
		ror	edi, cl
		ror	esi, cl
		ror	ebx, cl
		cmp	edi, esi
		jnz	loc_40E595
		sub	esi, ebx
		mov	eax, 200h
		sar	esi, 2
		cmp	esi, eax
		ja	short loc_40E508
		mov	eax, esi

loc_40E508:				; CODE XREF: sub_40E4B6+4Ej
		lea	edi, [eax+esi]
		test	edi, edi
		jnz	short loc_40E512
		push	20h
		pop	edi

loc_40E512:				; CODE XREF: sub_40E4B6+57j
		cmp	edi, esi
		jb	short loc_40E533
		push	4
		push	edi
		push	ebx
		call	sub_419244
		push	0		; lpMem
		mov	[ebp+var_4], eax
		call	sub_40F0A8
		mov	ecx, [ebp+var_4]
		add	esp, 10h
		test	ecx, ecx
		jnz	short loc_40E557

loc_40E533:				; CODE XREF: sub_40E4B6+5Ej
		push	4
		lea	edi, [esi+4]
		push	edi
		push	ebx
		call	sub_419244
		push	0		; lpMem
		mov	[ebp+var_4], eax
		call	sub_40F0A8
		mov	ecx, [ebp+var_4]
		add	esp, 10h
		test	ecx, ecx
		jz	loc_40E5D7

loc_40E557:				; CODE XREF: sub_40E4B6+7Bj
		lea	eax, [ecx+esi*4]
		mov	ebx, ecx
		mov	[ebp+var_4], eax
		lea	esi, [ecx+edi*4]
		mov	eax, dword_42C06C
		mov	edi, [ebp+var_4]
		mov	ecx, edi
		mov	[ebp+var_C], eax
		mov	eax, esi
		sub	eax, edi
		add	eax, 3
		shr	eax, 2
		cmp	esi, edi
		sbb	edx, edx
		not	edx
		and	edx, eax
		jz	short loc_40E595
		mov	edi, [ebp+var_C]
		xor	eax, eax

loc_40E588:				; CODE XREF: sub_40E4B6+DAj
		inc	eax
		mov	[ecx], edi
		lea	ecx, [ecx+4]
		cmp	eax, edx
		jnz	short loc_40E588
		mov	edi, [ebp+var_4]

loc_40E595:				; CODE XREF: sub_40E4B6+3Cj
					; sub_40E4B6+CBj
		mov	eax, [ebp+var_8]
		mov	eax, [eax+4]
		push	dword ptr [eax]
		call	sub_40C7DB
		push	ebx
		mov	[edi], eax
		call	sub_405615
		mov	ebx, [ebp+var_8]
		mov	ecx, [ebx]
		mov	ecx, [ecx]
		mov	[ecx], eax
		lea	eax, [edi+4]
		push	eax
		call	sub_405615
		mov	ecx, [ebx]
		push	esi
		mov	ecx, [ecx]
		mov	[ecx+4], eax
		call	sub_405615
		mov	ecx, [ebx]
		add	esp, 10h
		mov	ecx, [ecx]
		mov	[ecx+8], eax
		xor	eax, eax
		jmp	short loc_40E5DA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E5D7:				; CODE XREF: sub_40E4B6+16j
					; sub_40E4B6+9Bj
		or	eax, 0FFFFFFFFh

loc_40E5DA:				; CODE XREF: sub_40E4B6+11Fj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_40E4B6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E5E1	proc near		; CODE XREF: sub_40E414+22p

var_14		= dword	ptr -14h
lpMem		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		mov	ebx, ecx
		push	edi
		mov	[ebp+var_14], ebx
		mov	eax, [ebx]
		mov	edi, [eax]
		test	edi, edi
		jnz	short loc_40E600
		or	eax, 0FFFFFFFFh
		jmp	loc_40E6B7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E600:				; CODE XREF: sub_40E5E1+15j
		mov	edx, dword_42C06C
		mov	ecx, edx
		push	esi
		mov	esi, [edi]
		and	ecx, 1Fh
		mov	edi, [edi+4]
		xor	esi, edx
		xor	edi, edx
		ror	esi, cl
		ror	edi, cl
		test	esi, esi
		jz	loc_40E6B4
		cmp	esi, 0FFFFFFFFh
		jz	loc_40E6B4
		mov	[ebp+var_4], edx
		mov	[ebp+var_C], edi

loc_40E630:				; CODE XREF: sub_40E5E1+ABj
		mov	[ebp+var_8], esi

loc_40E633:				; CODE XREF: sub_40E5E1+5Ej
					; sub_40E5E1+A1j
		sub	edi, 4
		cmp	edi, esi
		jb	short loc_40E68E
		mov	eax, [edi]
		cmp	eax, [ebp+var_4]
		jz	short loc_40E633
		xor	eax, edx
		mov	edx, [ebp+var_4]
		ror	eax, cl
		mov	ecx, eax
		mov	[edi], edx
		mov	[ebp+lpMem], eax
		call	ds:off_41D12C
		call	[ebp+lpMem]
		mov	eax, [ebx]
		mov	edx, dword_42C06C
		mov	ecx, edx
		and	ecx, 1Fh
		mov	eax, [eax]
		mov	ebx, [eax]
		mov	eax, [eax+4]
		xor	ebx, edx
		ror	ebx, cl
		xor	eax, edx
		ror	eax, cl
		cmp	ebx, [ebp+var_8]
		mov	[ebp+lpMem], ebx
		mov	ebx, [ebp+var_14]
		jnz	short loc_40E684
		cmp	eax, [ebp+var_C]
		jz	short loc_40E633

loc_40E684:				; CODE XREF: sub_40E5E1+9Cj
		mov	esi, [ebp+lpMem]
		mov	edi, eax
		mov	[ebp+var_C], eax
		jmp	short loc_40E630
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E68E:				; CODE XREF: sub_40E5E1+57j
		cmp	esi, 0FFFFFFFFh
		jz	short loc_40E6A0
		push	esi		; lpMem
		call	sub_40F0A8
		mov	edx, dword_42C06C
		pop	ecx

loc_40E6A0:				; CODE XREF: sub_40E5E1+B0j
		mov	eax, [ebx]
		mov	eax, [eax]
		mov	[eax], edx
		mov	eax, [ebx]
		mov	eax, [eax]
		mov	[eax+4], edx
		mov	eax, [ebx]
		mov	eax, [eax]
		mov	[eax+8], edx

loc_40E6B4:				; CODE XREF: sub_40E5E1+3Aj
					; sub_40E5E1+43j
		xor	eax, eax
		pop	esi

loc_40E6B7:				; CODE XREF: sub_40E5E1+1Aj
		pop	edi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_40E5E1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E6BD	proc near		; CODE XREF: sub_40585F+1Dp

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]
		push	offset dword_42D858
		call	sub_40E72B
		pop	ecx
		pop	ecx
		pop	ebp
		retn
sub_40E6BD	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E6D3	proc near		; CODE XREF: sub_40CEE2:loc_40CF4Ap

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	2
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_C], eax
		lea	ecx, [ebp-1]
		pop	eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_10], eax
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		call	sub_40E414
		mov	esp, ebp
		pop	ebp
		retn
sub_40E6D3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E702	proc near		; CODE XREF: sub_4056E1+32p
					; sub_4056E1+41p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jnz	short loc_40E713
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E713:				; CODE XREF: sub_40E702+Aj
		mov	eax, [ecx]
		cmp	eax, [ecx+8]
		jnz	short loc_40E727
		mov	eax, dword_42C06C
		mov	[ecx], eax
		mov	[ecx+4], eax
		mov	[ecx+8], eax

loc_40E727:				; CODE XREF: sub_40E702+16j
		xor	eax, eax
		pop	ebp
		retn
sub_40E702	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E72B	proc near		; CODE XREF: sub_40585F+29p
					; sub_40E6BD+Dp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		lea	ecx, [ebp-1]
		push	2
		lea	eax, [ebp+arg_4]
		mov	[ebp+var_10], eax
		pop	eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_14]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		call	sub_40E465
		mov	esp, ebp
		pop	ebp
		retn
sub_40E72B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40E760	proc near		; DATA XREF: .rdata:off_421848o
		mov	dword_42D94C, offset off_42C200
		mov	al, 1
		retn
sub_40E760	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40E76D	proc near		; DATA XREF: .rdata:004218C0o

var_4		= dword	ptr -4

		push	offset dword_42D858
		call	sub_40E702
		mov	[esp+4+var_4], offset dword_42D864
		call	sub_40E702
		pop	ecx
		mov	al, 1
		retn
sub_40E76D	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
byte_40E787	db 0E8h			; DATA XREF: .rdata:004218BCo
dword_40E788	dd 0FFFFE64Eh, 8BC301B0h, 358B56FFh ; DATA XREF: .rdata:00421850o
		dd offset dword_42C06C
dword_40E798	dd 0B624E856h, 0E856FFFFh, 0FFFFDE3Ah, 6B44E856h, 0E8560000h
		dd 0FFFFE062h, 0E90CE856h, 0C483FFFFh, 5E01B014h, 0E8006AC3h
		dd 0FFFF9EFCh, 0FF8BC359h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	ebp
		mov	ebp, esp
		push	ecx
		push	offset dword_42DC3C
		lea	ecx, [ebp-1]
		call	sub_40E82F
		mov	al, 1
		mov	esp, ebp
		pop	ebp
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40E7DF	proc near		; DATA XREF: .rdata:004218ACo
		mov	edi, edi
		push	esi
		push	dword_42DB54	; lpMem
		call	sub_40F0A8
		push	dword_42DB58	; lpMem
		xor	esi, esi
		mov	dword_42DB54, esi
		call	sub_40F0A8
		push	dword_42D83C	; lpMem
		mov	dword_42DB58, esi
		call	sub_40F0A8
		push	dword_42D840	; lpMem
		mov	dword_42D83C, esi
		call	sub_40F0A8
		add	esp, 10h
		mov	dword_42D840, esi
		mov	al, 1
		pop	esi
		retn
sub_40E7DF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E82F	proc near		; CODE XREF: .text:0040E7D4p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		or	ecx, 0FFFFFFFFh
		mov	eax, [esi]
		lock xadd [eax], ecx
		jnz	short loc_40E858
		push	edi
		mov	edi, offset dword_42C498
		cmp	[esi], edi
		jz	short loc_40E857
		push	dword ptr [esi]	; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	[esi], edi

loc_40E857:				; CODE XREF: sub_40E82F+1Cj
		pop	edi

loc_40E858:				; CODE XREF: sub_40E82F+12j
		pop	esi
		pop	ebp
		retn	4
sub_40E82F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40E85D	proc near		; CODE XREF: sub_4056A8:loc_4056CAp
		push	offset off_4218C8
		push	offset off_421848
		call	sub_4192CC
		pop	ecx
		pop	ecx
		retn
sub_40E85D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E86F	proc near		; CODE XREF: sub_405837+15p

arg_0		= byte ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		jz	short loc_40E88C
		cmp	lpMem, 0
		jz	short loc_40E888
		call	sub_40AE36

loc_40E888:				; CODE XREF: sub_40E86F+12j
		mov	al, 1
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E88C:				; CODE XREF: sub_40E86F+9j
		push	offset off_4218C8
		push	offset off_421848
		call	sub_419334
		pop	ecx
		pop	ecx
		pop	ebp
		retn
sub_40E86F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E89F	proc near		; CODE XREF: sub_405D6F+Cp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_8]
		mov	eax, [ebp+arg_4]
		and	ecx, 0FFF7FFFFh
		and	eax, ecx
		push	esi
		mov	esi, [ebp+arg_0]
		test	eax, 0FCF0FCE0h
		jz	short loc_40E8E1
		test	esi, esi
		jz	short loc_40E8CE
		push	0
		push	0
		call	sub_41940C
		pop	ecx
		pop	ecx
		mov	[esi], eax

loc_40E8CE:				; CODE XREF: sub_40E89F+20j
		call	sub_40BD71
		push	16h
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		mov	eax, esi
		jmp	short loc_40E8FB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E8E1:				; CODE XREF: sub_40E89F+1Cj
		push	ecx
		push	[ebp+arg_4]
		test	esi, esi
		jz	short loc_40E8F2
		call	sub_41940C
		mov	[esi], eax
		jmp	short loc_40E8F7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E8F2:				; CODE XREF: sub_40E89F+48j
		call	sub_41940C

loc_40E8F7:				; CODE XREF: sub_40E89F+51j
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_40E8FB:				; CODE XREF: sub_40E89F+40j
		pop	esi
		pop	ebp
		retn
sub_40E89F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E8FE	proc near		; CODE XREF: sub_40670A+35p
					; sub_40CBF2+77p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		push	esi
		test	edx, edx
		jz	short loc_40E91C
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	short loc_40E91C
		mov	esi, [ebp+arg_8]
		test	esi, esi
		jnz	short loc_40E930
		mov	byte ptr [edx],	0

loc_40E91C:				; CODE XREF: sub_40E8FE+Bj
					; sub_40E8FE+12j
		call	sub_40BD71
		push	16h

loc_40E923:				; CODE XREF: sub_40E8FE+54j
		pop	esi
		mov	[eax], esi
		call	sub_409E35

loc_40E92B:				; CODE XREF: sub_40E8FE+58j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E930:				; CODE XREF: sub_40E8FE+19j
		push	edi
		mov	edi, edx
		sub	esi, edx

loc_40E935:				; CODE XREF: sub_40E8FE+44j
		mov	al, [esi+edi]
		mov	[edi], al
		inc	edi
		test	al, al
		jz	short loc_40E944
		sub	ecx, 1
		jnz	short loc_40E935

loc_40E944:				; CODE XREF: sub_40E8FE+3Fj
		pop	edi
		test	ecx, ecx
		jnz	short loc_40E954
		mov	[edx], cl
		call	sub_40BD71
		push	22h
		jmp	short loc_40E923
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E954:				; CODE XREF: sub_40E8FE+49j
		xor	esi, esi
		jmp	short loc_40E92B
sub_40E8FE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E958	proc near		; CODE XREF: sub_4097E2+5Ap
					; sub_4097E2+6Ep ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jnz	short loc_40E966
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E966:				; CODE XREF: sub_40E958+Aj
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		push	esi

loc_40E96D:				; CODE XREF: sub_40E958+2Dj
		sub	eax, 1
		jz	short loc_40E987
		movzx	esi, word ptr [edx]
		test	si, si
		jz	short loc_40E987
		cmp	si, [ecx]
		jnz	short loc_40E987
		add	edx, 2
		add	ecx, 2
		jmp	short loc_40E96D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E987:				; CODE XREF: sub_40E958+18j
					; sub_40E958+20j ...
		movzx	eax, word ptr [edx]
		movzx	ecx, word ptr [ecx]
		sub	eax, ecx
		pop	esi
		pop	ebp
		retn
sub_40E958	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E992	proc near		; CODE XREF: sub_40E9C3+5ECp

arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		test	[ebp+arg_0], 4
		jnz	short loc_40E9B2
		test	[ebp+arg_0], 1
		jz	short loc_40E9BF
		test	[ebp+arg_0], 2
		jz	short loc_40E9B6
		cmp	[ebp+arg_4], 80000000h
		jbe	short loc_40E9BF

loc_40E9B2:				; CODE XREF: sub_40E992+9j
					; sub_40E992+2Bj
		mov	al, 1
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40E9B6:				; CODE XREF: sub_40E992+15j
		cmp	[ebp+arg_4], 7FFFFFFFh
		ja	short loc_40E9B2

loc_40E9BF:				; CODE XREF: sub_40E992+Fj
					; sub_40E992+1Ej
		xor	al, al
		pop	ebp
		retn
sub_40E992	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40E9C3	proc near		; CODE XREF: sub_40F005+19p

var_1C		= dword	ptr -1Ch
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		lea	ecx, [ebp+arg_4]
		push	ebx
		call	sub_40BDB2
		test	al, al
		jz	short loc_40E9F9
		mov	eax, [ebp+arg_C]
		test	eax, eax
		jz	short loc_40EA0E
		cmp	eax, 2
		jl	short loc_40E9E9
		cmp	eax, 24h
		jle	short loc_40EA0E

loc_40E9E9:				; CODE XREF: sub_40E9C3+1Fj
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35

loc_40E9F9:				; CODE XREF: sub_40E9C3+13j
		xor	ebx, ebx

loc_40E9FB:				; CODE XREF: sub_40E9C3+62Dj
					; sub_40E9C3+63Dj
		mov	edx, [ebp+arg_8]
		test	edx, edx
		jz	short loc_40EA07
		mov	ecx, [ebp+arg_4]
		mov	[edx], ecx

loc_40EA07:				; CODE XREF: sub_40E9C3+3Dj
		mov	eax, ebx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EA0E:				; CODE XREF: sub_40E9C3+1Aj
					; sub_40E9C3+24j
		push	esi
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_1C]
		call	sub_40A217
		mov	eax, [ebp+arg_4]
		xor	esi, esi
		mov	[ebp+var_8], esi
		mov	[ebp+var_C], eax
		jmp	short loc_40EA2A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EA27:				; CODE XREF: sub_40E9C3+7Cj
		mov	eax, [ebp+arg_4]

loc_40EA2A:				; CODE XREF: sub_40E9C3+62j
		movzx	esi, word ptr [eax]
		add	eax, 2
		push	8
		push	esi
		mov	[ebp+arg_4], eax
		call	sub_413301
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_40EA27
		movzx	ebx, [ebp+arg_10]
		push	edi
		cmp	si, 2Dh
		jnz	short loc_40EA51
		or	ebx, 2
		jmp	short loc_40EA57
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EA51:				; CODE XREF: sub_40E9C3+87j
		cmp	si, 2Bh
		jnz	short loc_40EA65

loc_40EA57:				; CODE XREF: sub_40E9C3+8Cj
		mov	edi, [ebp+arg_4]
		movzx	esi, word ptr [edi]
		add	edi, 2
		mov	[ebp+arg_4], edi
		jmp	short loc_40EA68
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EA65:				; CODE XREF: sub_40E9C3+92j
		mov	edi, [ebp+arg_4]

loc_40EA68:				; CODE XREF: sub_40E9C3+A0j
		mov	eax, [ebp+arg_C]
		movzx	edx, si
		mov	[ebp+var_4], 19h
		push	30h
		pop	ecx
		test	eax, eax
		jz	short loc_40EA85
		cmp	eax, 10h
		jnz	loc_40ECBC

loc_40EA85:				; CODE XREF: sub_40E9C3+B7j
		cmp	si, cx
		jb	loc_40EC2F
		push	3Ah
		pop	eax
		cmp	si, ax
		jnb	short loc_40EAA0

loc_40EA96:				; CODE XREF: sub_40E9C3+FFj
					; sub_40E9C3+115j ...
		movzx	eax, si
		sub	eax, ecx
		jmp	loc_40EC2A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EAA0:				; CODE XREF: sub_40E9C3+D1j
		mov	ecx, 0FF10h
		cmp	si, cx
		jnb	loc_40EC19
		mov	ecx, 660h
		cmp	si, cx
		jb	loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	short loc_40EA96
		mov	ecx, 6F0h
		cmp	si, cx
		jb	loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	short loc_40EA96
		mov	ecx, 966h
		cmp	si, cx
		jb	loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	short loc_40EA96
		lea	ecx, [eax+76h]
		cmp	si, cx
		jb	loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	short loc_40EA96
		lea	ecx, [eax+76h]
		cmp	si, cx
		jb	loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	loc_40EA96
		lea	ecx, [eax+76h]
		cmp	si, cx
		jb	loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	loc_40EA96
		lea	ecx, [eax+76h]
		cmp	si, cx
		jb	loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	loc_40EA96
		mov	ecx, 0C66h
		cmp	si, cx
		jb	loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	loc_40EA96
		lea	ecx, [eax+76h]
		cmp	si, cx
		jb	loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	loc_40EA96
		lea	ecx, [eax+76h]
		cmp	si, cx
		jb	loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	loc_40EA96
		mov	ecx, 0E50h
		cmp	si, cx
		jb	loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	loc_40EA96
		lea	ecx, [eax+76h]
		cmp	si, cx
		jb	short loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	loc_40EA96
		add	ecx, 50h
		cmp	si, cx
		jb	short loc_40EC2F
		add	eax, 50h
		cmp	si, ax
		jb	loc_40EA96
		mov	ecx, 1040h
		cmp	si, cx
		jb	short loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	loc_40EA96
		mov	ecx, 17E0h
		cmp	si, cx
		jb	short loc_40EC2F
		lea	eax, [ecx+0Ah]
		cmp	si, ax
		jb	loc_40EA96
		add	ecx, 30h
		cmp	si, cx
		jb	short loc_40EC2F
		add	eax, 30h
		cmp	si, ax
		jnb	short loc_40EC2F
		jmp	loc_40EA96
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EC19:				; CODE XREF: sub_40E9C3+E5j
		mov	eax, 0FF1Ah
		cmp	si, ax
		jb	loc_40EA96
		or	eax, 0FFFFFFFFh

loc_40EC2A:				; CODE XREF: sub_40E9C3+D8j
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_40EC68

loc_40EC2F:				; CODE XREF: sub_40E9C3+C5j
					; sub_40E9C3+F3j ...
		push	41h
		pop	eax
		cmp	ax, si
		ja	short loc_40EC47
		push	5Ah
		pop	eax
		cmp	si, ax
		ja	short loc_40EC47
		lea	eax, [edx-61h]
		movzx	ecx, ax
		jmp	short loc_40EC53
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EC47:				; CODE XREF: sub_40E9C3+272j
					; sub_40E9C3+27Aj
		lea	eax, [esi-61h]
		movzx	ecx, ax
		cmp	ax, word ptr [ebp+var_4]
		ja	short loc_40EC65

loc_40EC53:				; CODE XREF: sub_40E9C3+282j
		push	19h
		mov	eax, edx
		pop	edx
		cmp	cx, dx
		ja	short loc_40EC60
		add	eax, 0FFFFFFE0h

loc_40EC60:				; CODE XREF: sub_40E9C3+298j
		add	eax, 0FFFFFFC9h
		jmp	short loc_40EC68
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EC65:				; CODE XREF: sub_40E9C3+28Ej
		or	eax, 0FFFFFFFFh

loc_40EC68:				; CODE XREF: sub_40E9C3+26Aj
					; sub_40E9C3+2A0j
		test	eax, eax
		jz	short loc_40EC7B
		cmp	[ebp+arg_C], 0
		jnz	short loc_40ECBC
		mov	[ebp+arg_C], 0Ah
		jmp	short loc_40ECBC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EC7B:				; CODE XREF: sub_40E9C3+2A7j
		movzx	eax, word ptr [edi]
		lea	ecx, [edi+2]
		mov	[ebp+arg_4], ecx
		cmp	eax, 78h
		jz	short loc_40ECA6
		cmp	eax, 58h
		jz	short loc_40ECA6
		cmp	[ebp+arg_C], 0
		jnz	short loc_40EC9B
		mov	[ebp+arg_C], 8

loc_40EC9B:				; CODE XREF: sub_40E9C3+2CFj
		push	eax
		lea	ecx, [ebp+arg_4]
		call	sub_40BD84
		jmp	short loc_40ECBC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40ECA6:				; CODE XREF: sub_40E9C3+2C4j
					; sub_40E9C3+2C9j
		cmp	[ebp+arg_C], 0
		jnz	short loc_40ECB3
		mov	[ebp+arg_C], 10h

loc_40ECB3:				; CODE XREF: sub_40E9C3+2E7j
		movzx	esi, word ptr [ecx]
		add	ecx, 2
		mov	[ebp+arg_4], ecx

loc_40ECBC:				; CODE XREF: sub_40E9C3+BCj
					; sub_40E9C3+2ADj ...
		or	eax, 0FFFFFFFFh
		xor	edx, edx
		div	[ebp+arg_C]
		mov	edi, eax

loc_40ECC6:				; CODE XREF: sub_40E9C3+5C9j
		push	30h
		pop	eax
		movzx	ecx, si
		cmp	si, ax
		jb	loc_40EF2A
		push	3Ah
		pop	eax
		cmp	si, ax
		jnb	short loc_40ECE8
		movzx	eax, si
		sub	eax, 30h
		jmp	loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40ECE8:				; CODE XREF: sub_40E9C3+318j
		mov	eax, 0FF10h
		cmp	si, ax
		jnb	loc_40EF0E
		mov	eax, 660h
		cmp	si, ax
		jb	loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40ED19
		movzx	eax, si
		sub	eax, 660h
		jmp	loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40ED19:				; CODE XREF: sub_40E9C3+347j
		mov	eax, 6F0h
		cmp	si, ax
		jb	loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40ED3C
		movzx	eax, si
		sub	eax, 6F0h
		jmp	loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40ED3C:				; CODE XREF: sub_40E9C3+36Aj
		mov	eax, 966h
		cmp	si, ax
		jb	loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40ED5F
		movzx	eax, si
		sub	eax, 966h
		jmp	loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40ED5F:				; CODE XREF: sub_40E9C3+38Dj
		mov	eax, 9E6h
		cmp	si, ax
		jb	loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40ED82
		movzx	eax, si
		sub	eax, 9E6h
		jmp	loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40ED82:				; CODE XREF: sub_40E9C3+3B0j
		mov	eax, 0A66h
		cmp	si, ax
		jb	loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40EDA5
		movzx	eax, si
		sub	eax, 0A66h
		jmp	loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EDA5:				; CODE XREF: sub_40E9C3+3D3j
		mov	eax, 0AE6h
		cmp	si, ax
		jb	loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40EDC8
		movzx	eax, si
		sub	eax, 0AE6h
		jmp	loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EDC8:				; CODE XREF: sub_40E9C3+3F6j
		mov	eax, 0B66h
		cmp	si, ax
		jb	loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40EDEB
		movzx	eax, si
		sub	eax, 0B66h
		jmp	loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EDEB:				; CODE XREF: sub_40E9C3+419j
		mov	eax, 0C66h
		cmp	si, ax
		jb	loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40EE0E
		movzx	eax, si
		sub	eax, 0C66h
		jmp	loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EE0E:				; CODE XREF: sub_40E9C3+43Cj
		mov	eax, 0CE6h
		cmp	si, ax
		jb	loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40EE31
		movzx	eax, si
		sub	eax, 0CE6h
		jmp	loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EE31:				; CODE XREF: sub_40E9C3+45Fj
		mov	eax, 0D66h
		cmp	si, ax
		jb	loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40EE54
		movzx	eax, si
		sub	eax, 0D66h
		jmp	loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EE54:				; CODE XREF: sub_40E9C3+482j
		mov	eax, 0E50h
		cmp	si, ax
		jb	loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40EE77
		movzx	eax, si
		sub	eax, 0E50h
		jmp	loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EE77:				; CODE XREF: sub_40E9C3+4A5j
		mov	eax, 0ED0h
		cmp	si, ax
		jb	loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40EE9A
		movzx	eax, si
		sub	eax, 0ED0h
		jmp	loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EE9A:				; CODE XREF: sub_40E9C3+4C8j
		mov	eax, 0F20h
		cmp	si, ax
		jb	loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40EEBA
		movzx	eax, si
		sub	eax, 0F20h
		jmp	short loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EEBA:				; CODE XREF: sub_40E9C3+4EBj
		mov	eax, 1040h
		cmp	si, ax
		jb	short loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40EED6
		movzx	eax, si
		sub	eax, 1040h
		jmp	short loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EED6:				; CODE XREF: sub_40E9C3+507j
		mov	eax, 17E0h
		cmp	si, ax
		jb	short loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40EEF2
		movzx	eax, si
		sub	eax, 17E0h
		jmp	short loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EEF2:				; CODE XREF: sub_40E9C3+523j
		mov	eax, 1810h
		cmp	si, ax
		jb	short loc_40EF2A
		add	eax, 0Ah
		cmp	si, ax
		jnb	short loc_40EF2A
		movzx	eax, si
		sub	eax, 1810h
		jmp	short loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EF0E:				; CODE XREF: sub_40E9C3+32Dj
		mov	eax, 0FF1Ah
		cmp	si, ax
		jnb	short loc_40EF22
		movzx	eax, si
		sub	eax, 0FF10h
		jmp	short loc_40EF25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EF22:				; CODE XREF: sub_40E9C3+553j
		or	eax, 0FFFFFFFFh

loc_40EF25:				; CODE XREF: sub_40E9C3+320j
					; sub_40E9C3+351j ...
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_40EF57

loc_40EF2A:				; CODE XREF: sub_40E9C3+30Cj
					; sub_40E9C3+33Bj ...
		push	41h
		pop	eax
		cmp	ax, si
		ja	short loc_40EF3A
		push	5Ah
		pop	eax
		cmp	si, ax
		jbe	short loc_40EF43

loc_40EF3A:				; CODE XREF: sub_40E9C3+56Dj
		lea	eax, [esi-61h]
		cmp	ax, word ptr [ebp+var_4]
		ja	short loc_40EF54

loc_40EF43:				; CODE XREF: sub_40E9C3+575j
		lea	eax, [esi-61h]
		cmp	ax, word ptr [ebp+var_4]
		ja	short loc_40EF4F
		add	ecx, 0FFFFFFE0h

loc_40EF4F:				; CODE XREF: sub_40E9C3+587j
		lea	eax, [ecx-37h]
		jmp	short loc_40EF57
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EF54:				; CODE XREF: sub_40E9C3+57Ej
		or	eax, 0FFFFFFFFh

loc_40EF57:				; CODE XREF: sub_40E9C3+565j
					; sub_40E9C3+58Fj
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40EF91
		cmp	eax, [ebp+arg_C]
		jnb	short loc_40EF91
		mov	ecx, [ebp+var_8]
		cmp	ecx, edi
		jb	short loc_40EF72
		jnz	short loc_40EF6E
		cmp	eax, edx
		jbe	short loc_40EF72

loc_40EF6E:				; CODE XREF: sub_40E9C3+5A5j
		push	0Ch
		jmp	short loc_40EF7D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EF72:				; CODE XREF: sub_40E9C3+5A3j
					; sub_40E9C3+5A9j
		imul	ecx, [ebp+arg_C]
		push	8
		add	ecx, eax
		mov	[ebp+var_8], ecx

loc_40EF7D:				; CODE XREF: sub_40E9C3+5ADj
		mov	ecx, [ebp+arg_4]
		pop	eax
		movzx	esi, word ptr [ecx]
		add	ecx, 2
		mov	[ebp+arg_4], ecx
		or	ebx, eax
		jmp	loc_40ECC6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EF91:				; CODE XREF: sub_40E9C3+597j
					; sub_40E9C3+59Cj
		push	esi
		lea	ecx, [ebp+arg_4]
		call	sub_40BD84
		pop	edi
		test	bl, 8
		jnz	short loc_40EFAA
		mov	eax, [ebp+var_C]
		xor	ebx, ebx
		mov	[ebp+arg_4], eax
		jmp	short loc_40EFEB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EFAA:				; CODE XREF: sub_40E9C3+5DBj
		mov	esi, [ebp+var_8]
		push	esi
		push	ebx
		call	sub_40E992
		pop	ecx
		pop	ecx
		test	al, al
		jz	short loc_40EFE2
		call	sub_40BD71
		mov	dword ptr [eax], 22h
		test	bl, 1
		jnz	short loc_40EFCF
		or	esi, 0FFFFFFFFh
		jmp	short loc_40EFE9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EFCF:				; CODE XREF: sub_40E9C3+605j
		test	bl, 2
		jz	short loc_40EFDB
		mov	ebx, 80000000h
		jmp	short loc_40EFEB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EFDB:				; CODE XREF: sub_40E9C3+60Fj
		mov	ebx, 7FFFFFFFh
		jmp	short loc_40EFEB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40EFE2:				; CODE XREF: sub_40E9C3+5F5j
		test	bl, 2
		jz	short loc_40EFE9
		neg	esi

loc_40EFE9:				; CODE XREF: sub_40E9C3+60Aj
					; sub_40E9C3+622j
		mov	ebx, esi

loc_40EFEB:				; CODE XREF: sub_40E9C3+5E5j
					; sub_40E9C3+616j ...
		cmp	[ebp+var_10], 0
		pop	esi
		jz	loc_40E9FB
		mov	eax, [ebp+var_1C]
		and	dword ptr [eax+350h], 0FFFFFFFDh
		jmp	loc_40E9FB
sub_40E9C3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40F005	proc near		; CODE XREF: sub_418528+DFp
					; sub_418E72+A9p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		mov	eax, [ebp+arg_0]
		push	1
		push	0Ah
		push	ecx
		push	ecx
		mov	ecx, esp
		push	0
		and	dword ptr [ecx+4], 0
		mov	[ecx], eax
		call	sub_40E9C3
		add	esp, 14h
		mov	esp, ebp
		pop	ebp
		retn
sub_40F005	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		push	ebx
		push	esi
		mov	ecx, [esp+0Ch]
		mov	edx, [esp+10h]
		mov	ebx, [esp+14h]
		test	ebx, 0FFFFFFFFh
		jz	short loc_40F096
		sub	ecx, edx
		test	edx, 3
		jz	short loc_40F067

loc_40F050:				; CODE XREF: .text:0040F065j
					; .text:0040F074j ...
		movzx	eax, byte ptr [ecx+edx]
		cmp	al, [edx]
		jnz	short loc_40F0A0
		test	eax, eax
		jz	short loc_40F096
		inc	edx
		sub	ebx, 1
		jbe	short loc_40F096
		test	dl, 3
		jnz	short loc_40F050

loc_40F067:				; CODE XREF: .text:0040F04Ej
					; .text:0040F094j
		lea	eax, [ecx+edx]
		and	eax, 0FFFh
		cmp	eax, 0FFCh
		ja	short loc_40F050
		mov	eax, [ecx+edx]
		cmp	eax, [edx]
		jnz	short loc_40F050
		sub	ebx, 4
		jbe	short loc_40F096
		lea	esi, [eax-1010101h]
		add	edx, 4
		not	eax
		and	eax, esi
		test	eax, 80808080h
		jz	short loc_40F067

loc_40F096:				; CODE XREF: .text:0040F044j
					; .text:0040F05Aj ...
		xor	eax, eax
		pop	esi
		pop	ebx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	short loc_40F0A0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_40F0A0:				; CODE XREF: .text:0040F056j
					; .text:0040F09Bj
		sbb	eax, eax
		or	eax, 1
		pop	esi
		pop	ebx
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_40F0A8(LPVOID	lpMem)
sub_40F0A8	proc near		; CODE XREF: sub_409C2E+13p
					; sub_409FA9+B1p ...

lpMem		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+lpMem], 0
		jz	short loc_40F0E0
		push	[ebp+lpMem]	; lpMem
		push	0		; dwFlags
		push	hHeap		; hHeap
		call	ds:HeapFree
		test	eax, eax
		jnz	short loc_40F0E0
		push	esi
		call	sub_40BD71
		mov	esi, eax
		call	ds:GetLastError
		push	eax
		call	sub_40BCF8
		pop	ecx
		mov	[esi], eax
		pop	esi

loc_40F0E0:				; CODE XREF: sub_40F0A8+9j
					; sub_40F0A8+1Ej
		pop	ebp
		retn
sub_40F0A8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F0E2	proc near		; CODE XREF: sub_40F226+69p
		push	8
		push	offset dword_42B218
		call	sub_405FF0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	eax, [ebp+0Ch]
		mov	eax, [eax]
		mov	eax, [eax]
		mov	eax, [eax+48h]
		lock inc dword ptr [eax]
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40F11E
		call	sub_406036
		retn	0Ch
sub_40F0E2	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F11E	proc near		; CODE XREF: sub_40F0E2+2Fp
					; DATA XREF: .rdata:0042B230o
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_409F1F
		pop	ecx
		retn
sub_40F11E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F12A	proc near		; CODE XREF: sub_40F2E2+A3p
		push	8
		push	offset dword_42B258
		call	sub_405FF0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	eax, [ebp+0Ch]
		mov	eax, [eax]
		mov	eax, [eax]
		mov	ecx, [eax+48h]
		test	ecx, ecx
		jz	short loc_40F16B
		or	eax, 0FFFFFFFFh
		lock xadd [ecx], eax
		jnz	short loc_40F16B
		cmp	ecx, offset dword_42C498
		jz	short loc_40F16B
		push	ecx		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_40F16B:				; CODE XREF: sub_40F12A+27j
					; sub_40F12A+30j ...
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40F17F
		call	sub_406036
		retn	0Ch
sub_40F12A	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F17F	proc near		; CODE XREF: sub_40F12A+48p
					; DATA XREF: .rdata:0042B270o
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_409F1F
		pop	ecx
		retn
sub_40F17F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F18B	proc near		; CODE XREF: sub_40F2E2+C6p
		push	8
		push	offset dword_42B278
		call	sub_405FF0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		push	0
		mov	eax, [ebp+0Ch]
		mov	eax, [eax]
		push	dword ptr [eax]
		call	sub_40F3B1
		pop	ecx
		pop	ecx
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40F1CA
		call	sub_406036
		retn	0Ch
sub_40F18B	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F1CA	proc near		; CODE XREF: sub_40F18B+32p
					; DATA XREF: .rdata:0042B290o
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_409F1F
		pop	ecx
		retn
sub_40F1CA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F1D6	proc near		; CODE XREF: sub_40F226+92p
		push	8
		push	offset dword_42B238
		call	sub_405FF0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	ecx, [ebp+0Ch]
		mov	eax, [ecx+4]
		mov	eax, [eax]
		push	dword ptr [eax]
		mov	eax, [ecx]
		push	dword ptr [eax]
		call	sub_40F3B1
		pop	ecx
		pop	ecx
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40F21A
		call	sub_406036
		retn	0Ch
sub_40F1D6	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F21A	proc near		; CODE XREF: sub_40F1D6+37p
					; DATA XREF: .rdata:0042B250o
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_409F1F
		pop	ecx
		retn
sub_40F21A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40F226	proc near		; CODE XREF: sub_40F3FC+91p
					; sub_40F4B9+7Dp ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, [ebp+arg_0]
		xor	ecx, ecx
		inc	ecx
		push	43h
		mov	[eax+18h], ecx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], offset	dword_421600
		mov	eax, [ebp+arg_0]
		mov	[eax+350h], ecx
		mov	eax, [ebp+arg_0]
		pop	ecx
		push	5
		mov	dword ptr [eax+48h], offset dword_42C498
		mov	eax, [ebp+arg_0]
		mov	[eax+6Ch], cx
		mov	eax, [ebp+arg_0]
		mov	[eax+172h], cx
		lea	ecx, [ebp-1]
		mov	eax, [ebp+arg_0]
		and	dword ptr [eax+34Ch], 0
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_10], eax
		pop	eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_14], eax
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+var_14]
		push	eax
		call	sub_40F0E2
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_C], eax
		lea	ecx, [ebp-1]
		push	4
		lea	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		pop	eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		lea	eax, [ebp+var_14]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		call	sub_40F1D6
		mov	esp, ebp
		pop	ebp
		retn
sub_40F226	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __stdcall	sub_40F2C1(LPVOID lpMem)
sub_40F2C1	proc near		; DATA XREF: sub_40F608o

lpMem		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+lpMem], 0
		jz	short loc_40F2DE
		push	[ebp+lpMem]
		call	sub_40F2E2
		push	[ebp+lpMem]	; lpMem
		call	sub_40F0A8
		pop	ecx
		pop	ecx

loc_40F2DE:				; CODE XREF: sub_40F2C1+9j
		pop	ebp
		retn	4
sub_40F2C1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40F2E2	proc near		; CODE XREF: sub_40F2C1+Ep

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		sub	esp, 10h
		mov	ecx, [eax]
		cmp	ecx, offset dword_421600
		jz	short loc_40F301
		push	ecx		; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+arg_0]
		pop	ecx

loc_40F301:				; CODE XREF: sub_40F2E2+13j
		push	dword ptr [eax+3Ch] ; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax+30h] ; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax+34h] ; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax+38h] ; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax+28h] ; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax+2Ch] ; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax+40h] ; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax+44h] ; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax+360h] ; lpMem
		call	sub_40F0A8
		add	esp, 24h
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_C], eax
		lea	ecx, [ebp-1]
		push	5
		pop	eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_10], eax
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		call	sub_40F12A
		push	4
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_C], eax
		lea	ecx, [ebp-1]
		pop	eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_8], eax
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		call	sub_40F18B
		mov	esp, ebp
		pop	ebp
		retn
sub_40F2E2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40F3B1	proc near		; CODE XREF: sub_40F18B+24p
					; sub_40F1D6+29p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		cmp	dword ptr [esi+4Ch], 0
		jz	short loc_40F3E8
		push	dword ptr [esi+4Ch]
		call	sub_417E8C
		mov	eax, [esi+4Ch]
		pop	ecx
		cmp	eax, dword_42D94C
		jz	short loc_40F3E8
		cmp	eax, offset off_42C200
		jz	short loc_40F3E8
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_40F3E8
		push	eax
		call	sub_417CBF
		pop	ecx

loc_40F3E8:				; CODE XREF: sub_40F3B1+Dj
					; sub_40F3B1+21j ...
		mov	eax, [ebp+arg_4]
		mov	[esi+4Ch], eax
		pop	esi
		test	eax, eax
		jz	short loc_40F3FA
		push	eax
		call	sub_417C42
		pop	ecx

loc_40F3FA:				; CODE XREF: sub_40F3B1+40j
		pop	ebp
		retn
sub_40F3B1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F3FC	proc near		; CODE XREF: sub_409C4B+Cp
					; sub_409FA9+23p ...
		mov	edi, edi
		push	ebx
		push	esi
		push	edi
		call	ds:GetLastError
		mov	esi, eax
		mov	eax, dword_42C1F0
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40F42F
		push	eax
		call	sub_40FAF6
		mov	edi, eax
		test	edi, edi
		jz	short loc_40F42A
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_40F49C

loc_40F424:				; CODE XREF: sub_40F3FC+3Dj
		xor	ebx, ebx

loc_40F426:				; CODE XREF: sub_40F3FC+68j
		mov	edi, ebx
		jmp	short loc_40F49E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F42A:				; CODE XREF: sub_40F3FC+21j
		mov	eax, dword_42C1F0

loc_40F42F:				; CODE XREF: sub_40F3FC+15j
		push	0FFFFFFFFh
		push	eax
		call	sub_40FB35
		test	eax, eax
		jz	short loc_40F424
		push	364h
		push	1
		call	sub_40FE33
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_40F466
		xor	ebx, ebx
		push	ebx
		push	dword_42C1F0
		call	sub_40FB35
		push	ebx		; lpMem

loc_40F45E:				; CODE XREF: sub_40F3FC+89j
		call	sub_40F0A8
		pop	ecx
		jmp	short loc_40F426
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F466:				; CODE XREF: sub_40F3FC+51j
		push	edi
		push	dword_42C1F0
		call	sub_40FB35
		test	eax, eax
		jnz	short loc_40F487
		xor	ebx, ebx
		push	ebx
		push	dword_42C1F0
		call	sub_40FB35
		push	edi
		jmp	short loc_40F45E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F487:				; CODE XREF: sub_40F3FC+78j
		push	offset dword_42D94C
		push	edi
		call	sub_40F226
		push	0		; lpMem
		call	sub_40F0A8
		add	esp, 0Ch

loc_40F49C:				; CODE XREF: sub_40F3FC+26j
		mov	ebx, edi

loc_40F49E:				; CODE XREF: sub_40F3FC+2Cj
		push	esi		; dwErrCode
		call	ds:SetLastError
		neg	edi
		sbb	edi, edi
		and	edi, ebx
		jz	short loc_40F4B3
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F4B3:				; CODE XREF: sub_40F3FC+AFj
		call	sub_40C069
		int	3		; Trap to Debugger
sub_40F3FC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F4B9	proc near		; CODE XREF: sub_4166AF+27p
		mov	eax, dword_42C1F0
		push	esi
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40F4DC
		push	eax
		call	sub_40FAF6
		mov	esi, eax
		test	esi, esi
		jz	short loc_40F4D7
		cmp	esi, 0FFFFFFFFh
		jz	short loc_40F54D
		jmp	short loc_40F545
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F4D7:				; CODE XREF: sub_40F4B9+15j
		mov	eax, dword_42C1F0

loc_40F4DC:				; CODE XREF: sub_40F4B9+9j
		push	0FFFFFFFFh
		push	eax
		call	sub_40FB35
		test	eax, eax
		jz	short loc_40F54D
		push	364h
		push	1
		call	sub_40FE33
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_40F511
		push	eax
		push	dword_42C1F0
		call	sub_40FB35
		push	esi		; lpMem

loc_40F509:				; CODE XREF: sub_40F4B9+75j
		call	sub_40F0A8
		pop	ecx
		jmp	short loc_40F54D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F511:				; CODE XREF: sub_40F4B9+41j
		push	esi
		push	dword_42C1F0
		call	sub_40FB35
		test	eax, eax
		jnz	short loc_40F530
		push	eax
		push	dword_42C1F0
		call	sub_40FB35
		push	esi
		jmp	short loc_40F509
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F530:				; CODE XREF: sub_40F4B9+66j
		push	offset dword_42D94C
		push	esi
		call	sub_40F226
		push	0		; lpMem
		call	sub_40F0A8
		add	esp, 0Ch

loc_40F545:				; CODE XREF: sub_40F4B9+1Cj
		test	esi, esi
		jz	short loc_40F54D
		mov	eax, esi
		pop	esi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F54D:				; CODE XREF: sub_40F4B9+1Aj
					; sub_40F4B9+2Dj ...
		call	sub_40C069
		int	3		; Trap to Debugger
sub_40F4B9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F553	proc near		; CODE XREF: sub_409DD1+6p sub_40BD5Ep ...
		mov	edi, edi
		push	ebx
		push	esi
		push	edi
		call	ds:GetLastError
		mov	esi, eax
		mov	eax, dword_42C1F0
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40F586
		push	eax
		call	sub_40FAF6
		mov	edi, eax
		test	edi, edi
		jz	short loc_40F581
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_40F5F3

loc_40F57B:				; CODE XREF: sub_40F553+3Dj
		xor	ebx, ebx

loc_40F57D:				; CODE XREF: sub_40F553+68j
		mov	edi, ebx
		jmp	short loc_40F5F5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F581:				; CODE XREF: sub_40F553+21j
		mov	eax, dword_42C1F0

loc_40F586:				; CODE XREF: sub_40F553+15j
		push	0FFFFFFFFh
		push	eax
		call	sub_40FB35
		test	eax, eax
		jz	short loc_40F57B
		push	364h
		push	1
		call	sub_40FE33
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_40F5BD
		xor	ebx, ebx
		push	ebx
		push	dword_42C1F0
		call	sub_40FB35
		push	ebx		; lpMem

loc_40F5B5:				; CODE XREF: sub_40F553+89j
		call	sub_40F0A8
		pop	ecx
		jmp	short loc_40F57D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F5BD:				; CODE XREF: sub_40F553+51j
		push	edi
		push	dword_42C1F0
		call	sub_40FB35
		test	eax, eax
		jnz	short loc_40F5DE
		xor	ebx, ebx
		push	ebx
		push	dword_42C1F0
		call	sub_40FB35
		push	edi
		jmp	short loc_40F5B5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F5DE:				; CODE XREF: sub_40F553+78j
		push	offset dword_42D94C
		push	edi
		call	sub_40F226
		push	0		; lpMem
		call	sub_40F0A8
		add	esp, 0Ch

loc_40F5F3:				; CODE XREF: sub_40F553+26j
		mov	ebx, edi

loc_40F5F5:				; CODE XREF: sub_40F553+2Cj
		push	esi		; dwErrCode
		call	ds:SetLastError
		neg	edi
		sbb	edi, edi
		and	edi, ebx
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_40F553	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F608	proc near		; DATA XREF: .rdata:00421880o
		push	offset sub_40F2C1
		call	sub_40FA78
		mov	dword_42C1F0, eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_40F61F

loc_40F61C:				; CODE XREF: sub_40F608+27j
		xor	al, al
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F61F:				; CODE XREF: sub_40F608+12j
		call	sub_40F553
		test	eax, eax
		jnz	short loc_40F631
		push	eax
		call	sub_40F634
		pop	ecx
		jmp	short loc_40F61C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F631:				; CODE XREF: sub_40F608+1Ej
		mov	al, 1
		retn
sub_40F608	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F634	proc near		; CODE XREF: sub_40F608+21p
					; DATA XREF: .rdata:00421884o
		mov	eax, dword_42C1F0
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40F64B
		push	eax
		call	sub_40FAB7
		or	dword_42C1F0, 0FFFFFFFFh

loc_40F64B:				; CODE XREF: sub_40F634+8j
		mov	al, 1
		retn
sub_40F634	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; BOOL __stdcall LocaleEnumProc(LPWSTR)
LocaleEnumProc	proc near		; DATA XREF: sub_40F65B+33o

arg_0		= dword	ptr  8

; FUNCTION CHUNK AT 0040F6CD SIZE 0000002F BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		xor	ecx, ecx
		pop	ebp
		jmp	loc_40F6CD
LocaleEnumProc	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F65B	proc near		; CODE XREF: sub_40FA22+4Ap
		push	0Ch
		push	offset dword_42B298
		call	sub_405FF0
		and	dword ptr [ebp-1Ch], 0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	eax, [ebp+0Ch]
		mov	eax, [eax]
		push	dword ptr [eax]
		call	sub_40C7DB
		pop	ecx
		mov	dword_42D948, eax
		push	1		; dwFlags
		push	offset LocaleEnumProc ;	lpLocaleEnumProc
		call	ds:EnumSystemLocalesW
		mov	esi, eax
		mov	eax, dword_42C06C
		mov	dword_42D948, eax
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_40F6C1
		mov	eax, esi
		call	sub_406036
		retn	0Ch
sub_40F65B	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F6BE	proc near		; DATA XREF: .rdata:0042B2B0o
		mov	esi, [ebp-1Ch]
sub_40F6BE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F6C1	proc near		; CODE XREF: sub_40F65B+54p
		mov	ecx, [ebp+10h]
		push	dword ptr [ecx]
		call	sub_409F1F
		pop	ecx
		retn
sub_40F6C1	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR LocaleEnumProc

loc_40F6CD:				; CODE XREF: LocaleEnumProc+8j
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, dword_42C06C
		mov	ecx, esi
		xor	esi, dword_42D948
		and	ecx, 1Fh
		push	0
		push	0
		push	[ebp+arg_0]
		ror	esi, cl
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		pop	esi
		pop	ebp
		retn	4
; END OF FUNCTION CHUNK	FOR LocaleEnumProc

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F6FC	proc near		; CODE XREF: sub_40F9A6+3p sub_40FD4Dp
		push	offset aArefileapisans ; "AreFileApisANSI"
		push	offset dword_421DE8 ; int
		push	offset aArefileapisans ; "AreFileApisANSI"
		push	0		; int
		call	sub_40F8E3
		add	esp, 10h
		retn
sub_40F6FC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F716	proc near		; CODE XREF: sub_40F9C5+6p sub_40FD42p ...
		push	offset aComparestringe ; "CompareStringEx"
		push	offset dword_421DFC ; int
		push	offset aComparestringe ; "CompareStringEx"
		push	1		; int
		call	sub_40F8E3
		add	esp, 10h
		retn
sub_40F716	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F730	proc near		; CODE XREF: sub_40FA22+9p
					; sub_40FD4D+Ap
		push	offset aEnumsystemloca ; "EnumSystemLocalesEx"
		push	offset dword_421E14 ; int
		push	offset aEnumsystemloca ; "EnumSystemLocalesEx"
		push	2		; int
		call	sub_40F8E3
		add	esp, 10h
		retn
sub_40F730	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F74A	proc near		; CODE XREF: sub_40FD4D+Fp
		push	offset aGetdateformate ; "GetDateFormatEx"
		push	offset dword_421E7C ; int
		push	offset aGetdateformate ; "GetDateFormatEx"
		push	8		; int
		call	sub_40F8E3
		add	esp, 10h
		retn
sub_40F74A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F764	proc near		; CODE XREF: sub_40FB77+6p
					; sub_40FD4D+14p
		push	offset aGetlocaleinfoe ; "GetLocaleInfoEx"
		push	offset dword_421E94 ; int
		push	offset aGetlocaleinfoe ; "GetLocaleInfoEx"
		push	0Bh		; int
		call	sub_40F8E3
		add	esp, 10h
		retn
sub_40F764	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F77E	proc near		; CODE XREF: sub_40FD4D+19p
		push	offset aGettimeformate ; "GetTimeFormatEx"
		push	offset dword_421EAC ; int
		push	offset aGettimeformate ; "GetTimeFormatEx"
		push	0Eh		; int
		call	sub_40F8E3
		add	esp, 10h
		retn
sub_40F77E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F798	proc near		; CODE XREF: sub_40FBB6+6p
					; sub_40FD4D+1Ep
		push	offset aGetuserdefault ; "GetUserDefaultLocaleName"
		push	offset dword_421EC4 ; int
		push	offset aGetuserdefault ; "GetUserDefaultLocaleName"
		push	0Fh		; int
		call	sub_40F8E3
		add	esp, 10h
		retn
sub_40F798	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F7B2	proc near		; CODE XREF: sub_40FC3D+6p
					; sub_40FD4D+23p
		push	offset aIsvalidlocalen ; "IsValidLocaleName"
		push	offset dword_421F0C ; int
		push	offset aIsvalidlocalen ; "IsValidLocaleName"
		push	13h		; int
		call	sub_40F8E3
		add	esp, 10h
		retn
sub_40F7B2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F7CC	proc near		; CODE XREF: sub_40FC75+6p
					; sub_40FD4D+2Dp
		push	offset aLcidtolocalena ; "LCIDToLocaleName"
		push	offset dword_421F40 ; int
		push	offset aLcidtolocalena ; "LCIDToLocaleName"
		push	15h		; int
		call	sub_40F8E3
		add	esp, 10h
		retn
sub_40F7CC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F7E6	proc near		; CODE XREF: sub_40FCB4+6p
					; sub_40FD4D+28p
		push	offset aLcmapstringex ;	"LCMapStringEx"
		push	offset dword_421F28 ; int
		push	offset aLcmapstringex ;	"LCMapStringEx"
		push	14h		; int
		call	sub_40F8E3
		add	esp, 10h
		retn
sub_40F7E6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F800	proc near		; CODE XREF: sub_40FD11+6p
					; sub_40FD4D+32j
		push	offset aLocalenametolc ; "LocaleNameToLCID"
		push	offset dword_421F5C ; int
		push	offset aLocalenametolc ; "LocaleNameToLCID"
		push	16h		; int
		call	sub_40F8E3
		add	esp, 10h
		retn
sub_40F800	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40F81A	proc near		; CODE XREF: sub_40F8E3+3Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		jmp	loc_40F8CD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F82B:				; CODE XREF: sub_40F81A+B6j
		mov	ebx, [edi]
		lea	eax, dword_42D870[ebx*4]
		mov	esi, [eax]
		mov	[ebp+var_4], eax
		nop
		test	esi, esi
		jz	short loc_40F849
		cmp	esi, 0FFFFFFFFh
		jz	loc_40F8CA
		jmp	short loc_40F8C6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F849:				; CODE XREF: sub_40F81A+22j
		mov	ebx, ds:off_4218C8[ebx*4]
		push	800h		; dwFlags
		push	0		; hFile
		push	ebx		; lpLibFileName
		call	ds:LoadLibraryExW
		mov	esi, eax
		test	esi, esi
		jnz	short loc_40F8B4
		call	ds:GetLastError
		cmp	eax, 57h
		jnz	short loc_40F8A4
		push	7
		push	offset aApiMs_0	; "api-ms-"
		push	ebx
		call	sub_40E958
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_40F8A4
		push	7
		push	offset aExtMs_0	; "ext-ms-"
		push	ebx
		call	sub_40E958
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_40F8A4
		push	esi		; dwFlags
		push	esi		; hFile
		push	ebx		; lpLibFileName
		call	ds:LoadLibraryExW
		mov	esi, eax
		jmp	short loc_40F8A6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F8A4:				; CODE XREF: sub_40F81A+53j
					; sub_40F81A+67j ...
		xor	esi, esi

loc_40F8A6:				; CODE XREF: sub_40F81A+88j
		test	esi, esi
		jnz	short loc_40F8B4
		mov	ecx, [ebp+var_4]
		or	eax, 0FFFFFFFFh
		xchg	eax, [ecx]
		jmp	short loc_40F8CA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F8B4:				; CODE XREF: sub_40F81A+48j
					; sub_40F81A+8Ej
		mov	ecx, [ebp+var_4]
		mov	eax, esi
		xchg	eax, [ecx]
		test	eax, eax
		jz	short loc_40F8C6
		push	esi		; hLibModule
		call	ds:FreeLibrary

loc_40F8C6:				; CODE XREF: sub_40F81A+2Dj
					; sub_40F81A+A3j
		test	esi, esi
		jnz	short loc_40F8DF

loc_40F8CA:				; CODE XREF: sub_40F81A+27j
					; sub_40F81A+98j
		add	edi, 4

loc_40F8CD:				; CODE XREF: sub_40F81A+Cj
		cmp	edi, [ebp+arg_4]
		jnz	loc_40F82B
		xor	eax, eax

loc_40F8D8:				; CODE XREF: sub_40F81A+C7j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F8DF:				; CODE XREF: sub_40F81A+AEj
		mov	eax, esi
		jmp	short loc_40F8D8
sub_40F81A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_40F8E3(int,LPCSTR lpProcName,int,int)
sub_40F8E3	proc near		; CODE XREF: sub_40F6FC+11p
					; sub_40F716+11p ...

arg_0		= dword	ptr  8
lpProcName	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	ebx
		push	edi
		lea	ebx, dword_42D8C0[eax*4]
		mov	eax, [ebx]
		nop
		mov	edx, dword_42C06C
		or	edi, 0FFFFFFFFh
		mov	ecx, edx
		xor	edx, eax
		and	ecx, 1Fh
		ror	edx, cl
		cmp	edx, edi
		jnz	short loc_40F911
		xor	eax, eax
		jmp	short loc_40F962
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F911:				; CODE XREF: sub_40F8E3+28j
		test	edx, edx
		jz	short loc_40F919
		mov	eax, edx
		jmp	short loc_40F962
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F919:				; CODE XREF: sub_40F8E3+30j
		push	esi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		call	sub_40F81A
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_40F948
		push	[ebp+lpProcName] ; lpProcName
		push	eax		; hModule
		call	ds:GetProcAddress
		mov	esi, eax
		test	esi, esi
		jz	short loc_40F948
		push	esi
		call	sub_405615
		pop	ecx
		xchg	eax, [ebx]
		mov	eax, esi
		jmp	short loc_40F961
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F948:				; CODE XREF: sub_40F8E3+46j
					; sub_40F8E3+56j
		mov	eax, dword_42C06C
		push	20h
		and	eax, 1Fh
		pop	ecx
		sub	ecx, eax
		ror	edi, cl
		xor	edi, dword_42C06C
		xchg	edi, [ebx]
		xor	eax, eax

loc_40F961:				; CODE XREF: sub_40F8E3+63j
		pop	esi

loc_40F962:				; CODE XREF: sub_40F8E3+2Cj
					; sub_40F8E3+34j
		pop	edi
		pop	ebx
		pop	ebp
		retn
sub_40F8E3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40F966	proc near		; CODE XREF: sub_416D99+1Ep

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		push	offset aApppolicygetpr ; "AppPolicyGetProcessTerminationMethod"
		push	offset dword_421F78 ; int
		push	offset aApppolicygetpr ; "AppPolicyGetProcessTerminationMethod"
		push	1Ch		; int
		call	sub_40F8E3
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_40F99C
		push	[ebp+arg_0]
		mov	ecx, esi
		push	0FFFFFFFAh
		call	ds:off_41D12C
		call	esi
		jmp	short loc_40F9A1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F99C:				; CODE XREF: sub_40F966+23j
		mov	eax, 0C0000225h

loc_40F9A1:				; CODE XREF: sub_40F966+34j
		pop	esi
		pop	ebp
		retn	4
sub_40F966	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40F9A6	proc near		; CODE XREF: sub_415F26+1Fp
		mov	edi, edi
		push	esi
		call	sub_40F6FC
		mov	esi, eax
		test	esi, esi
		jz	short loc_40F9C0
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		pop	esi
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F9C0:				; CODE XREF: sub_40F9A6+Cj
		xor	eax, eax
		inc	eax
		pop	esi
		retn
sub_40F9A6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __stdcall	sub_40F9C5(int,DWORD dwCmpFlags,LPCWSTR	lpString1,int cchCount1,LPCWSTR	lpString2,int cchCount2,int,int,int)
sub_40F9C5	proc near		; CODE XREF: sub_41B29F+24Dp

arg_0		= dword	ptr  8
dwCmpFlags	= dword	ptr  0Ch
lpString1	= dword	ptr  10h
cchCount1	= dword	ptr  14h
lpString2	= dword	ptr  18h
cchCount2	= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		call	sub_40F716
		mov	esi, eax
		test	esi, esi
		jz	short loc_40F9FD
		push	[ebp+arg_20]
		mov	ecx, esi
		push	[ebp+arg_1C]
		push	[ebp+arg_18]
		push	[ebp+cchCount2]
		push	[ebp+lpString2]
		push	[ebp+cchCount1]
		push	[ebp+lpString1]
		push	[ebp+dwCmpFlags]
		push	[ebp+arg_0]
		call	ds:off_41D12C
		call	esi
		jmp	short loc_40FA1D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40F9FD:				; CODE XREF: sub_40F9C5+Fj
		push	[ebp+cchCount2]	; cchCount2
		push	[ebp+lpString2]	; lpString2
		push	[ebp+cchCount1]	; cchCount1
		push	[ebp+lpString1]	; lpString1
		push	[ebp+dwCmpFlags] ; dwCmpFlags
		push	0
		push	[ebp+arg_0]
		call	sub_40FD11
		push	eax		; Locale
		call	ds:CompareStringW

loc_40FA1D:				; CODE XREF: sub_40F9C5+36j
		pop	esi
		pop	ebp
		retn	24h
sub_40F9C5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40FA22	proc near		; CODE XREF: sub_41805D+6Fp
					; sub_4180F8+46p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		call	sub_40F730
		mov	esi, eax
		test	esi, esi
		jz	short loc_40FA4E
		push	[ebp+arg_C]
		mov	ecx, esi
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	ds:off_41D12C
		call	esi
		jmp	short loc_40FA71
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FA4E:				; CODE XREF: sub_40FA22+12j
		push	4
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_C], eax
		lea	ecx, [ebp-1]
		pop	eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_10], eax
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		call	sub_40F65B

loc_40FA71:				; CODE XREF: sub_40FA22+2Aj
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	10h
sub_40FA22	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40FA78	proc near		; CODE XREF: sub_40F608+5p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		push	offset aFlsalloc_0 ; "FlsAlloc"
		push	offset dword_421E30 ; int
		push	offset aFlsalloc_0 ; "FlsAlloc"
		push	3		; int
		call	sub_40F8E3
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_40FAAC
		push	[ebp+arg_0]
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		jmp	short loc_40FAB2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FAAC:				; CODE XREF: sub_40FA78+23j
		call	ds:TlsAlloc	; Allocate a thread local storage (TLS)	index

loc_40FAB2:				; CODE XREF: sub_40FA78+32j
		pop	esi
		pop	ebp
		retn	4
sub_40FA78	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40FAB7	proc near		; CODE XREF: sub_40F634+Bp

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		push	offset aFlsfree_0 ; "FlsFree"
		push	offset dword_421E44 ; int
		push	offset aFlsfree_0 ; "FlsFree"
		push	4		; int
		call	sub_40F8E3
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_40FAEE
		push	[ebp+arg_0]
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		pop	esi
		pop	ebp
		retn	4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FAEE:				; CODE XREF: sub_40FAB7+23j
		pop	esi
		pop	ebp
		jmp	ds:TlsFree	; Release a thread local storage (TLS) index
sub_40FAB7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40FAF6	proc near		; CODE XREF: sub_40F3FC+18p
					; sub_40F4B9+Cp ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		push	offset aFlsgetvalue_0 ;	"FlsGetValue"
		push	offset dword_421E54 ; int
		push	offset aFlsgetvalue_0 ;	"FlsGetValue"
		push	5		; int
		call	sub_40F8E3
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_40FB2D
		push	[ebp+arg_0]
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		pop	esi
		pop	ebp
		retn	4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FB2D:				; CODE XREF: sub_40FAF6+23j
		pop	esi
		pop	ebp
		jmp	ds:TlsGetValue
sub_40FAF6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40FB35	proc near		; CODE XREF: sub_40F3FC+36p
					; sub_40F3FC+5Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		push	offset aFlssetvalue_0 ;	"FlsSetValue"
		push	offset dword_421E68 ; int
		push	offset aFlssetvalue_0 ;	"FlsSetValue"
		push	6		; int
		call	sub_40F8E3
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_40FB6F
		push	[ebp+arg_4]
		mov	ecx, esi
		push	[ebp+arg_0]
		call	ds:off_41D12C
		call	esi
		pop	esi
		pop	ebp
		retn	8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FB6F:				; CODE XREF: sub_40FB35+23j
		pop	esi
		pop	ebp
		jmp	ds:TlsSetValue
sub_40FB35	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __stdcall	sub_40FB77(int,LCTYPE LCType,LPWSTR lpLCData,int cchData)
sub_40FB77	proc near		; CODE XREF: sub_40D6E2+2CCp
					; sub_4105DC+33p ...

arg_0		= dword	ptr  8
LCType		= dword	ptr  0Ch
lpLCData	= dword	ptr  10h
cchData		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		call	sub_40F764
		push	[ebp+cchData]	; cchData
		mov	esi, eax
		push	[ebp+lpLCData]	; lpLCData
		push	[ebp+LCType]	; LCType
		test	esi, esi
		jz	short loc_40FBA0
		push	[ebp+arg_0]
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		jmp	short loc_40FBB1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FBA0:				; CODE XREF: sub_40FB77+18j
		push	0
		push	[ebp+arg_0]
		call	sub_40FD11
		push	eax		; Locale
		call	ds:GetLocaleInfoW

loc_40FBB1:				; CODE XREF: sub_40FB77+27j
		pop	esi
		pop	ebp
		retn	10h
sub_40FB77	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40FBB6	proc near		; CODE XREF: sub_417FD4+29p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		call	sub_40F798
		mov	esi, eax
		test	esi, esi
		jz	short loc_40FBD9
		push	[ebp+arg_4]
		mov	ecx, esi
		push	[ebp+arg_0]
		call	ds:off_41D12C
		call	esi
		jmp	short loc_40FBED
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FBD9:				; CODE XREF: sub_40FBB6+Fj
		push	0
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	ds:GetUserDefaultLCID
		push	eax
		call	sub_40FC75

loc_40FBED:				; CODE XREF: sub_40FBB6+21j
		pop	esi
		pop	ebp
		retn	8
sub_40FBB6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __stdcall	sub_40FBF2(LPCRITICAL_SECTION lpCriticalSection,DWORD dwSpinCount,int)
sub_40FBF2	proc near		; CODE XREF: .text:00409EA9p
					; sub_40A8E5+7Dp ...

lpCriticalSection= dword ptr  8
dwSpinCount	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		push	offset aInitializecr_0 ; "InitializeCriticalSectionEx"
		push	offset asc_421EE8 ; "\a"
		push	offset aInitializecr_0 ; "InitializeCriticalSectionEx"
		push	12h		; int
		call	sub_40F8E3
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_40FC2C
		push	[ebp+arg_8]
		mov	ecx, esi
		push	[ebp+dwSpinCount]
		push	[ebp+lpCriticalSection]
		call	ds:off_41D12C
		call	esi
		jmp	short loc_40FC38
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FC2C:				; CODE XREF: sub_40FBF2+23j
		push	[ebp+dwSpinCount] ; dwSpinCount
		push	[ebp+lpCriticalSection]	; lpCriticalSection
		call	ds:InitializeCriticalSectionAndSpinCount

loc_40FC38:				; CODE XREF: sub_40FBF2+38j
		pop	esi
		pop	ebp
		retn	0Ch
sub_40FBF2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40FC3D	proc near		; CODE XREF: sub_40D6E2+232p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		call	sub_40F7B2
		mov	esi, eax
		test	esi, esi
		jz	short loc_40FC5D
		push	[ebp+arg_0]
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		jmp	short loc_40FC70
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FC5D:				; CODE XREF: sub_40FC3D+Fj
		push	1		; dwFlags
		push	0
		push	[ebp+arg_0]
		call	sub_40FD11
		push	eax		; Locale
		call	ds:IsValidLocale

loc_40FC70:				; CODE XREF: sub_40FC3D+1Ej
		pop	esi
		pop	ebp
		retn	4
sub_40FC3D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40FC75	proc near		; CODE XREF: sub_40FBB6+32p
					; sub_41904D+188p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		call	sub_40F7CC
		mov	esi, eax
		test	esi, esi
		jz	short loc_40FC9E
		push	[ebp+arg_C]
		mov	ecx, esi
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	ds:off_41D12C
		call	esi
		jmp	short loc_40FCAF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FC9E:				; CODE XREF: sub_40FC75+Fj
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_41985D
		add	esp, 0Ch

loc_40FCAF:				; CODE XREF: sub_40FC75+27j
		pop	esi
		pop	ebp
		retn	10h
sub_40FC75	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __stdcall	sub_40FCB4(int,DWORD dwMapFlags,LPCWSTR	lpSrcStr,int cchSrc,LPWSTR lpDestStr,int cchDest,int,int,int)
sub_40FCB4	proc near		; CODE XREF: sub_410974+E7p
					; sub_410974+124p ...

arg_0		= dword	ptr  8
dwMapFlags	= dword	ptr  0Ch
lpSrcStr	= dword	ptr  10h
cchSrc		= dword	ptr  14h
lpDestStr	= dword	ptr  18h
cchDest		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		call	sub_40F7E6
		mov	esi, eax
		test	esi, esi
		jz	short loc_40FCEC
		push	[ebp+arg_20]
		mov	ecx, esi
		push	[ebp+arg_1C]
		push	[ebp+arg_18]
		push	[ebp+cchDest]
		push	[ebp+lpDestStr]
		push	[ebp+cchSrc]
		push	[ebp+lpSrcStr]
		push	[ebp+dwMapFlags]
		push	[ebp+arg_0]
		call	ds:off_41D12C
		call	esi
		jmp	short loc_40FD0C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FCEC:				; CODE XREF: sub_40FCB4+Fj
		push	[ebp+cchDest]	; cchDest
		push	[ebp+lpDestStr]	; lpDestStr
		push	[ebp+cchSrc]	; cchSrc
		push	[ebp+lpSrcStr]	; lpSrcStr
		push	[ebp+dwMapFlags] ; dwMapFlags
		push	0
		push	[ebp+arg_0]
		call	sub_40FD11
		push	eax		; Locale
		call	ds:LCMapStringW

loc_40FD0C:				; CODE XREF: sub_40FCB4+36j
		pop	esi
		pop	ebp
		retn	24h
sub_40FCB4	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40FD11	proc near		; CODE XREF: sub_40F9C5+4Cp
					; sub_40FB77+2Ep ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		call	sub_40F800
		mov	esi, eax
		test	esi, esi
		jz	short loc_40FD34
		push	[ebp+arg_4]
		mov	ecx, esi
		push	[ebp+arg_0]
		call	ds:off_41D12C
		call	esi
		jmp	short loc_40FD3D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FD34:				; CODE XREF: sub_40FD11+Fj
		push	[ebp+arg_0]
		call	sub_419907
		pop	ecx

loc_40FD3D:				; CODE XREF: sub_40FD11+21j
		pop	esi
		pop	ebp
		retn	8
sub_40FD11	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40FD42	proc near		; CODE XREF: sub_40D6E2:loc_40D83Fp
		call	sub_40F716
		test	eax, eax
		setnz	al
		retn
sub_40FD42	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40FD4D	proc near		; CODE XREF: sub_409F36p sub_40A1AC+8p ...
		call	sub_40F6FC
		call	sub_40F716
		call	sub_40F730
		call	sub_40F74A
		call	sub_40F764
		call	sub_40F77E
		call	sub_40F798
		call	sub_40F7B2
		call	sub_40F7E6
		call	sub_40F7CC
		jmp	sub_40F800
sub_40FD4D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_40FD84	proc near		; DATA XREF: .rdata:00421858o
		mov	ecx, offset dword_42D948
		mov	eax, offset dword_42D8C0
		xor	edx, edx
		cmp	ecx, eax
		push	esi
		mov	esi, dword_42C06C
		sbb	ecx, ecx
		and	ecx, 0FFFFFFDEh
		add	ecx, 22h

loc_40FDA1:				; CODE XREF: sub_40FD84+25j
		inc	edx
		mov	[eax], esi
		lea	eax, [eax+4]
		cmp	edx, ecx
		jnz	short loc_40FDA1
		mov	al, 1
		pop	esi
		retn
sub_40FD84	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40FDAF	proc near		; DATA XREF: .rdata:0042185Co

arg_0		= byte ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		jnz	short loc_40FDE1
		push	esi
		mov	esi, offset dword_42D870

loc_40FDC0:				; CODE XREF: sub_40FDAF+2Fj
		cmp	dword ptr [esi], 0
		jz	short loc_40FDD5
		cmp	dword ptr [esi], 0FFFFFFFFh
		jz	short loc_40FDD2
		push	dword ptr [esi]	; hLibModule
		call	ds:FreeLibrary

loc_40FDD2:				; CODE XREF: sub_40FDAF+19j
		and	dword ptr [esi], 0

loc_40FDD5:				; CODE XREF: sub_40FDAF+14j
		add	esi, 4
		cmp	esi, offset dword_42D8C0
		jnz	short loc_40FDC0
		pop	esi

loc_40FDE1:				; CODE XREF: sub_40FDAF+9j
		mov	al, 1
		pop	ebp
		retn
sub_40FDAF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40FDE5	proc near		; CODE XREF: sub_409F4D+6j
					; sub_409FA9+76p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		cmp	esi, 0FFFFFFE0h
		ja	short loc_40FE23
		test	esi, esi
		jnz	short loc_40FE0E
		inc	esi
		jmp	short loc_40FE0E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FDFA:				; CODE XREF: sub_40FDE5+3Aj
		call	sub_40E3D8
		test	eax, eax
		jz	short loc_40FE23
		push	esi
		call	sub_40C5ED
		pop	ecx
		test	eax, eax
		jz	short loc_40FE23

loc_40FE0E:				; CODE XREF: sub_40FDE5+10j
					; sub_40FDE5+13j
		push	esi		; dwBytes
		push	0		; dwFlags
		push	hHeap		; hHeap
		call	ds:HeapAlloc
		test	eax, eax
		jz	short loc_40FDFA
		jmp	short loc_40FE30
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FE23:				; CODE XREF: sub_40FDE5+Cj
					; sub_40FDE5+1Cj ...
		call	sub_40BD71
		mov	dword ptr [eax], 0Ch
		xor	eax, eax

loc_40FE30:				; CODE XREF: sub_40FDE5+3Cj
		pop	esi
		pop	ebp
		retn
sub_40FDE5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_40FE33	proc near		; CODE XREF: sub_40A10F+47p
					; sub_40A1E6+6j ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jz	short loc_40FE4C
		push	0FFFFFFE0h
		xor	edx, edx
		pop	eax
		div	esi
		cmp	eax, [ebp+arg_4]
		jb	short loc_40FE80

loc_40FE4C:				; CODE XREF: sub_40FE33+Bj
		imul	esi, [ebp+arg_4]
		test	esi, esi
		jnz	short loc_40FE6B
		inc	esi
		jmp	short loc_40FE6B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FE57:				; CODE XREF: sub_40FE33+49j
		call	sub_40E3D8
		test	eax, eax
		jz	short loc_40FE80
		push	esi
		call	sub_40C5ED
		pop	ecx
		test	eax, eax
		jz	short loc_40FE80

loc_40FE6B:				; CODE XREF: sub_40FE33+1Fj
					; sub_40FE33+22j
		push	esi		; dwBytes
		push	8		; dwFlags
		push	hHeap		; hHeap
		call	ds:HeapAlloc
		test	eax, eax
		jz	short loc_40FE57
		jmp	short loc_40FE8D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FE80:				; CODE XREF: sub_40FE33+17j
					; sub_40FE33+2Bj ...
		call	sub_40BD71
		mov	dword ptr [eax], 0Ch
		xor	eax, eax

loc_40FE8D:				; CODE XREF: sub_40FE33+4Bj
		pop	esi
		pop	ebp
		retn
sub_40FE33	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_40FE90(int,LPCSTR lpMultiByteStr,int,int)
sub_40FE90	proc near		; CODE XREF: sub_410035+70p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
lpMultiByteStr	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	ebx
		mov	ebx, [ebp+arg_8]
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		xor	esi, esi
		test	edi, edi
		jz	short loc_40FEB4
		xor	eax, eax
		test	ebx, ebx
		jz	loc_41002E
		mov	[edi], ax

loc_40FEB4:				; CODE XREF: sub_40FE90+15j
		cmp	[ebp+lpMultiByteStr], esi
		jnz	short loc_40FED1
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		jmp	loc_41002E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FED1:				; CODE XREF: sub_40FE90+27j
		push	[ebp+arg_C]
		lea	ecx, [ebp+var_1C]
		call	sub_40A217
		mov	eax, [ebp+var_18]
		mov	ecx, [eax+8]
		cmp	ecx, 0FDE9h
		jnz	short loc_40FF09
		lea	eax, [ebp+var_C]
		mov	[ebp+var_C], esi
		push	eax
		push	ebx
		lea	eax, [ebp+lpMultiByteStr]
		mov	[ebp+var_8], esi
		push	eax
		push	edi
		call	sub_4199A1
		add	esp, 10h

loc_40FF02:				; CODE XREF: sub_40FE90+133j
		mov	esi, eax
		jmp	loc_41001C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FF09:				; CODE XREF: sub_40FE90+58j
		test	edi, edi
		jz	loc_40FFDB
		cmp	[eax+0A8h], esi
		jnz	short loc_40FF42
		test	ebx, ebx
		jz	loc_41001C
		mov	ecx, [ebp+lpMultiByteStr]

loc_40FF24:				; CODE XREF: sub_40FE90+ABj
		movzx	eax, byte ptr [esi+ecx]
		mov	[edi], ax
		cmp	byte ptr [esi+ecx], 0
		jz	loc_41001C
		inc	esi
		add	edi, 2
		cmp	esi, ebx
		jb	short loc_40FF24
		jmp	loc_41001C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FF42:				; CODE XREF: sub_40FE90+87j
		push	ebx		; cchWideChar
		push	edi		; lpWideCharStr
		or	esi, 0FFFFFFFFh
		push	esi		; cchMultiByte
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		push	9		; int
		push	ecx		; CodePage
		call	sub_4154FC
		add	esp, 18h
		test	eax, eax
		jnz	loc_410019
		call	ds:GetLastError
		cmp	eax, 7Ah
		jnz	short loc_40FFC9
		mov	ecx, [ebp+lpMultiByteStr]
		mov	eax, ecx
		mov	[ebp+var_4], eax
		mov	edx, ebx
		test	ebx, ebx
		jz	short loc_40FFAB

loc_40FF77:				; CODE XREF: sub_40FE90+116j
		mov	cl, [eax]
		dec	edx
		mov	[ebp+var_8], edx
		test	cl, cl
		jz	short loc_40FFA8
		lea	eax, [ebp+var_18]
		push	eax
		movzx	eax, cl
		push	eax
		call	sub_4157BB
		pop	ecx
		test	eax, eax
		mov	eax, [ebp+var_4]
		pop	ecx
		jz	short loc_40FF9D
		inc	eax
		cmp	byte ptr [eax],	0
		jz	short loc_40FFC9

loc_40FF9D:				; CODE XREF: sub_40FE90+105j
		mov	edx, [ebp+var_8]
		inc	eax
		mov	[ebp+var_4], eax
		test	edx, edx
		jnz	short loc_40FF77

loc_40FFA8:				; CODE XREF: sub_40FE90+EFj
		mov	ecx, [ebp+lpMultiByteStr]

loc_40FFAB:				; CODE XREF: sub_40FE90+E5j
		push	ebx		; cchWideChar
		push	edi		; lpWideCharStr
		sub	eax, ecx
		push	eax		; cchMultiByte
		mov	eax, [ebp+var_18]
		push	ecx		; lpMultiByteStr
		push	1		; int
		push	dword ptr [eax+8] ; CodePage
		call	sub_4154FC
		add	esp, 18h
		test	eax, eax
		jnz	loc_40FF02

loc_40FFC9:				; CODE XREF: sub_40FE90+D7j
					; sub_40FE90+10Bj
		call	sub_40BD71
		mov	dword ptr [eax], 2Ah
		xor	eax, eax
		mov	[edi], ax
		jmp	short loc_41001C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FFDB:				; CODE XREF: sub_40FE90+7Bj
		cmp	[eax+0A8h], esi
		jnz	short loc_40FFF4
		mov	esi, [ebp+lpMultiByteStr]
		lea	ecx, [esi+1]

loc_40FFE9:				; CODE XREF: sub_40FE90+15Ej
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_40FFE9
		sub	esi, ecx
		jmp	short loc_41001C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_40FFF4:				; CODE XREF: sub_40FE90+151j
		push	esi		; cchWideChar
		push	esi		; lpWideCharStr
		or	esi, 0FFFFFFFFh
		push	esi		; cchMultiByte
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		push	9		; int
		push	ecx		; CodePage
		call	sub_4154FC
		add	esp, 18h
		test	eax, eax
		jnz	short loc_410019
		call	sub_40BD71
		mov	dword ptr [eax], 2Ah
		jmp	short loc_41001C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410019:				; CODE XREF: sub_40FE90+C8j
					; sub_40FE90+17Aj
		lea	esi, [eax-1]

loc_41001C:				; CODE XREF: sub_40FE90+74j
					; sub_40FE90+8Bj ...
		cmp	[ebp+var_10], 0
		jz	short loc_41002C
		mov	ecx, [ebp+var_1C]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_41002C:				; CODE XREF: sub_40FE90+190j
		mov	eax, esi

loc_41002E:				; CODE XREF: sub_40FE90+1Bj
					; sub_40FE90+3Cj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_40FE90	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_410035(int,int,int,LPCSTR lpMultiByteStr,int,int)
sub_410035	proc near		; CODE XREF: sub_410117+16p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
lpMultiByteStr	= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		mov	ebx, [ebp+arg_8]
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		xor	esi, esi
		test	edi, edi
		jnz	short loc_410087
		test	ebx, ebx
		jnz	short loc_41008B

loc_410050:				; CODE XREF: sub_410035+54j
		test	edi, edi
		jz	short loc_410059
		xor	eax, eax
		mov	[edi], ax

loc_410059:				; CODE XREF: sub_410035+1Dj
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_410062
		mov	[eax], esi

loc_410062:				; CODE XREF: sub_410035+29j
		push	[ebp+arg_14]
		lea	ecx, [ebp+var_10]
		call	sub_40A217
		mov	eax, ebx
		cmp	[ebp+arg_10], ebx
		ja	short loc_410077
		mov	eax, [ebp+arg_10]

loc_410077:				; CODE XREF: sub_410035+3Dj
		cmp	eax, 7FFFFFFFh
		jbe	short loc_41009C
		call	sub_40BD71
		push	16h
		jmp	short loc_4100DF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410087:				; CODE XREF: sub_410035+15j
		test	ebx, ebx
		jnz	short loc_410050

loc_41008B:				; CODE XREF: sub_410035+19j
		call	sub_40BD71
		push	16h
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		jmp	short loc_41010E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41009C:				; CODE XREF: sub_410035+47j
		lea	ecx, [ebp+var_C]
		push	ecx		; int
		push	eax		; int
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		push	edi		; int
		call	sub_40FE90
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_4100C4
		test	edi, edi
		jz	short loc_4100BB
		xor	eax, eax
		mov	[edi], ax

loc_4100BB:				; CODE XREF: sub_410035+7Fj
		call	sub_40BD71
		mov	esi, [eax]
		jmp	short loc_4100FE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4100C4:				; CODE XREF: sub_410035+7Bj
		inc	eax
		test	edi, edi
		jz	short loc_4100F5
		cmp	eax, ebx
		jbe	short loc_4100EE
		cmp	[ebp+arg_10], 0FFFFFFFFh
		jz	short loc_4100E9
		xor	eax, eax
		mov	[edi], ax
		call	sub_40BD71
		push	22h

loc_4100DF:				; CODE XREF: sub_410035+50j
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		jmp	short loc_4100FE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4100E9:				; CODE XREF: sub_410035+9Cj
		push	50h
		mov	eax, ebx
		pop	esi

loc_4100EE:				; CODE XREF: sub_410035+96j
		xor	ecx, ecx
		mov	[edi+eax*2-2], cx

loc_4100F5:				; CODE XREF: sub_410035+92j
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jz	short loc_4100FE
		mov	[ecx], eax

loc_4100FE:				; CODE XREF: sub_410035+8Dj
					; sub_410035+B2j ...
		cmp	[ebp+var_4], 0
		jz	short loc_41010E
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_41010E:				; CODE XREF: sub_410035+65j
					; sub_410035+CDj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_410035	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_410117(int,int,int,LPCSTR lpMultiByteStr,int)
sub_410117	proc near		; CODE XREF: sub_40A10F+2Cp
					; sub_40A10F+5Ep

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
lpMultiByteStr	= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	0		; int
		push	[ebp+arg_10]	; int
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	[ebp+arg_0]	; int
		call	sub_410035
		add	esp, 18h
		pop	ebp
		retn
sub_410117	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_410137	proc near		; CODE XREF: sub_4103E0+64p
		push	30h
		mov	eax, offset loc_41C597
		call	sub_405909
		mov	edi, [ebp+8]
		xor	esi, esi
		mov	eax, [ebp+0Ch]
		mov	ebx, [ebp+10h]
		mov	[ebp-28h], edi
		mov	[ebp-1Ch], eax
		mov	[ebp-20h], esi
		test	edi, edi
		jz	short loc_410166
		test	ebx, ebx
		jnz	short loc_410166
		xor	eax, eax
		jmp	loc_4103DA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410166:				; CODE XREF: sub_410137+22j
					; sub_410137+26j
		test	eax, eax
		jnz	short loc_410182
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		jmp	loc_4103DA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410182:				; CODE XREF: sub_410137+31j
		push	dword ptr [ebp+14h]
		lea	ecx, [ebp-3Ch]
		call	sub_40A217
		mov	eax, [ebp-38h]
		mov	[ebp-4], esi
		mov	ecx, [eax+8]
		cmp	ecx, 0FDE9h
		jnz	short loc_4101BD
		lea	eax, [ebp-2Ch]
		mov	[ebp-2Ch], esi
		push	eax
		push	ebx
		lea	eax, [ebp-1Ch]
		mov	[ebp-28h], esi
		push	eax
		push	edi
		call	sub_419A9E
		add	esp, 10h
		mov	esi, eax
		jmp	loc_410391
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4101BD:				; CODE XREF: sub_410137+65j
		test	edi, edi
		jz	loc_410364
		cmp	[eax+0A8h], esi
		jnz	short loc_410207
		test	ebx, ebx
		jz	loc_410391
		mov	ecx, [ebp-1Ch]
		mov	edx, 0FFh

loc_4101DD:				; CODE XREF: sub_410137+C9j
		cmp	[ecx], dx
		ja	loc_410354
		mov	al, [ecx]
		mov	[edi+esi], al
		movzx	eax, word ptr [ecx]
		add	ecx, 2
		mov	[ebp-1Ch], ecx
		test	ax, ax
		jz	loc_410391
		inc	esi
		cmp	esi, ebx
		jb	short loc_4101DD
		jmp	loc_410391
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410207:				; CODE XREF: sub_410137+94j
		cmp	dword ptr [eax+4], 1
		jnz	short loc_41026E
		test	ebx, ebx
		jz	short loc_410234
		mov	eax, [ebp-1Ch]
		mov	edx, ebx

loc_410216:				; CODE XREF: sub_410137+EAj
		cmp	[eax], si
		jz	short loc_410223
		add	eax, 2
		sub	edx, 1
		jnz	short loc_410216

loc_410223:				; CODE XREF: sub_410137+E2j
		test	edx, edx
		jz	short loc_410234
		cmp	[eax], si
		jnz	short loc_410234
		mov	ebx, eax
		sub	ebx, [ebp-1Ch]
		sar	ebx, 1
		inc	ebx

loc_410234:				; CODE XREF: sub_410137+D8j
					; sub_410137+EEj ...
		lea	eax, [ebp-20h]
		push	eax		; int
		push	esi		; int
		push	ebx		; cchMultiByte
		push	edi		; lpMultiByteStr
		push	ebx		; cchWideChar
		push	dword ptr [ebp-1Ch] ; lpWideCharStr
		push	esi		; int
		push	ecx		; CodePage
		call	sub_415578
		mov	esi, eax
		add	esp, 20h
		test	esi, esi
		jz	loc_410354
		cmp	dword ptr [ebp-20h], 0
		jnz	loc_410354
		cmp	byte ptr [edi+esi-1], 0
		jnz	loc_410391
		dec	esi
		jmp	loc_410391
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41026E:				; CODE XREF: sub_410137+D4j
		lea	eax, [ebp-20h]
		push	eax		; int
		push	esi		; int
		push	ebx		; cchMultiByte
		push	edi		; lpMultiByteStr
		push	0FFFFFFFFh	; cchWideChar
		push	dword ptr [ebp-1Ch] ; lpWideCharStr
		push	esi		; int
		push	ecx		; CodePage
		call	sub_415578
		mov	edi, eax
		add	esp, 20h
		test	edi, edi
		jz	short loc_41029C
		cmp	dword ptr [ebp-20h], 0
		jnz	loc_410354
		lea	esi, [edi-1]
		jmp	loc_410391
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41029C:				; CODE XREF: sub_410137+151j
		cmp	dword ptr [ebp-20h], 0
		jnz	loc_410354
		call	ds:GetLastError
		cmp	eax, 7Ah
		jnz	loc_410354
		test	ebx, ebx
		jz	loc_4103C8
		mov	eax, [ebp-1Ch]

loc_4102C0:				; CODE XREF: sub_410137+215j
		mov	edx, [ebp-38h]
		mov	ecx, [edx+4]
		cmp	ecx, 5
		jle	short loc_4102CE
		push	5
		pop	ecx

loc_4102CE:				; CODE XREF: sub_410137+192j
		lea	ebx, [ebp-20h]
		push	ebx		; int
		push	esi		; int
		push	ecx		; cchMultiByte
		lea	ecx, [ebp-18h]
		push	ecx		; lpMultiByteStr
		push	1		; cchWideChar
		push	eax		; lpWideCharStr
		push	esi		; int
		push	dword ptr [edx+8] ; CodePage
		call	sub_415578
		mov	ebx, [ebp+10h]
		mov	edx, eax
		add	esp, 20h
		test	edx, edx
		jz	loc_4103BA
		cmp	dword ptr [ebp-20h], 0
		jnz	loc_4103BA
		test	edx, edx
		js	loc_4103BA
		cmp	edx, 5
		ja	loc_4103BA
		lea	eax, [edx+edi]
		cmp	eax, ebx
		ja	loc_4103C8
		mov	eax, esi
		mov	[ebp-24h], eax
		test	edx, edx
		jle	short loc_410341
		mov	ecx, [ebp-28h]

loc_410326:				; CODE XREF: sub_410137+208j
		mov	al, [ebp+eax-18h]
		mov	[ecx+edi], al
		test	al, al
		jz	loc_4103C8
		mov	eax, [ebp-24h]
		inc	eax
		inc	edi
		mov	[ebp-24h], eax
		cmp	eax, edx
		jl	short loc_410326

loc_410341:				; CODE XREF: sub_410137+1EAj
		mov	eax, [ebp-1Ch]
		add	eax, 2
		mov	[ebp-1Ch], eax
		cmp	edi, ebx
		jb	loc_4102C0
		jmp	short loc_4103C8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410354:				; CODE XREF: sub_410137+A9j
					; sub_410137+116j ...
		call	sub_40BD71
		or	esi, 0FFFFFFFFh
		mov	dword ptr [eax], 2Ah
		jmp	short loc_410391
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410364:				; CODE XREF: sub_410137+88j
		cmp	[eax+0A8h], esi
		jnz	short loc_410395
		mov	ecx, [ebp-1Ch]
		movzx	eax, word ptr [ecx]
		test	ax, ax
		jz	short loc_410391
		mov	edi, eax
		mov	edx, 0FFh

loc_41037E:				; CODE XREF: sub_410137+258j
		cmp	di, dx
		ja	short loc_4103BA
		add	ecx, 2
		inc	esi
		movzx	eax, word ptr [ecx]
		mov	edi, eax
		test	ax, ax
		jnz	short loc_41037E

loc_410391:				; CODE XREF: sub_410137+81j
					; sub_410137+98j ...
		mov	edi, esi
		jmp	short loc_4103C8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410395:				; CODE XREF: sub_410137+233j
		lea	eax, [ebp-20h]
		push	eax		; int
		push	esi		; int
		push	esi		; cchMultiByte
		push	esi		; lpMultiByteStr
		push	0FFFFFFFFh	; cchWideChar
		push	dword ptr [ebp-1Ch] ; lpWideCharStr
		push	esi		; int
		push	ecx		; CodePage
		call	sub_415578
		add	esp, 20h
		test	eax, eax
		jz	short loc_4103BA
		cmp	dword ptr [ebp-20h], 0
		jnz	short loc_4103BA
		lea	edi, [eax-1]
		jmp	short loc_4103C8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4103BA:				; CODE XREF: sub_410137+1B7j
					; sub_410137+1C1j ...
		call	sub_40BD71
		or	edi, 0FFFFFFFFh
		mov	dword ptr [eax], 2Ah

loc_4103C8:				; CODE XREF: sub_410137+180j
					; sub_410137+1DDj ...
		cmp	byte ptr [ebp-30h], 0
		jz	short loc_4103D8
		mov	ecx, [ebp-3Ch]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_4103D8:				; CODE XREF: sub_410137+295j
		mov	eax, edi

loc_4103DA:				; CODE XREF: sub_410137+2Aj
					; sub_410137+46j
		call	sub_4058C4
		retn
sub_410137	endp ; sp = -4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4103E0	proc near		; CODE XREF: sub_409FA9+48p
					; sub_409FA9+92p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, [ebp+arg_4]
		xor	eax, eax
		mov	[ebp+var_4], eax
		push	edi
		mov	edi, [ebp+arg_8]
		test	esi, esi
		jz	short loc_410425
		test	edi, edi
		jz	short loc_410429

loc_4103FB:				; CODE XREF: sub_4103E0+47j
		test	esi, esi
		jz	short loc_410401
		mov	[esi], al

loc_410401:				; CODE XREF: sub_4103E0+1Dj
		push	ebx
		mov	ebx, [ebp+arg_0]
		test	ebx, ebx
		jz	short loc_41040B
		mov	[ebx], eax

loc_41040B:				; CODE XREF: sub_4103E0+27j
		mov	eax, edi
		cmp	[ebp+arg_10], edi
		ja	short loc_410415
		mov	eax, [ebp+arg_10]

loc_410415:				; CODE XREF: sub_4103E0+30j
		cmp	eax, 7FFFFFFFh
		jbe	short loc_41043C
		call	sub_40BD71
		push	16h
		jmp	short loc_41047E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410425:				; CODE XREF: sub_4103E0+15j
		test	edi, edi
		jz	short loc_4103FB

loc_410429:				; CODE XREF: sub_4103E0+19j
		call	sub_40BD71
		push	16h
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		mov	eax, esi
		jmp	short loc_4104A7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41043C:				; CODE XREF: sub_4103E0+3Aj
		push	[ebp+arg_14]
		push	eax
		push	[ebp+arg_C]
		push	esi
		call	sub_410137
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_410461
		test	esi, esi
		jz	short loc_410458
		mov	byte ptr [esi],	0

loc_410458:				; CODE XREF: sub_4103E0+73j
		call	sub_40BD71
		mov	eax, [eax]
		jmp	short loc_4104A6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410461:				; CODE XREF: sub_4103E0+6Fj
		inc	eax
		test	esi, esi
		jz	short loc_41049B
		cmp	eax, edi
		jbe	short loc_410491
		cmp	[ebp+arg_10], 0FFFFFFFFh
		jz	short loc_41048A
		mov	byte ptr [esi],	0
		cmp	edi, eax
		ja	short loc_41048A
		call	sub_40BD71
		push	22h

loc_41047E:				; CODE XREF: sub_4103E0+43j
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		mov	eax, esi
		jmp	short loc_4104A6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41048A:				; CODE XREF: sub_4103E0+8Ej
					; sub_4103E0+95j
		push	50h
		mov	eax, edi
		pop	ecx
		jmp	short loc_410494
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410491:				; CODE XREF: sub_4103E0+88j
		mov	ecx, [ebp+var_4]

loc_410494:				; CODE XREF: sub_4103E0+AFj
		mov	byte ptr [eax+esi-1], 0
		jmp	short loc_41049E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41049B:				; CODE XREF: sub_4103E0+84j
		mov	ecx, [ebp+var_4]

loc_41049E:				; CODE XREF: sub_4103E0+B9j
		test	ebx, ebx
		jz	short loc_4104A4
		mov	[ebx], eax

loc_4104A4:				; CODE XREF: sub_4103E0+C0j
		mov	eax, ecx

loc_4104A6:				; CODE XREF: sub_4103E0+7Fj
					; sub_4103E0+A8j
		pop	ebx

loc_4104A7:				; CODE XREF: sub_4103E0+5Aj
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_4103E0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4104AD	proc near		; CODE XREF: sub_40A1F1+16p
					; sub_40A217+51p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		mov	eax, [esi]
		cmp	eax, dword_42D94C
		jz	short loc_4104D7
		mov	ecx, [ebp+arg_0]
		mov	eax, dword_42C1F4
		test	[ecx+350h], eax
		jnz	short loc_4104D7
		call	sub_417F0D
		mov	[esi], eax

loc_4104D7:				; CODE XREF: sub_4104AD+11j
					; sub_4104AD+21j
		pop	esi
		pop	ebp
		retn
sub_4104AD	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4104DA	proc near		; CODE XREF: sub_40A217+59p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		mov	eax, [esi]
		cmp	eax, dword_42DC3C
		jz	short loc_410504
		mov	ecx, [ebp+arg_0]
		mov	eax, dword_42C1F4
		test	[ecx+350h], eax
		jnz	short loc_410504
		call	sub_4166F7
		mov	[esi], eax

loc_410504:				; CODE XREF: sub_4104DA+11j
					; sub_4104DA+21j
		pop	esi
		pop	ebp
		retn
sub_4104DA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_410507	proc near		; CODE XREF: sub_40A2F4+1Bp

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= byte ptr -14h
MultiByteStr	= byte ptr -10h
var_E		= byte ptr -0Eh
CharType	= word ptr -0Ch
var_8		= word ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	[ebp+arg_8]
		mov	ebx, [ebp+arg_0]
		lea	ecx, [ebp+var_20]
		call	sub_40A217
		cmp	ebx, 0FFFFFFFFh
		jl	short loc_410540
		cmp	ebx, 0FFh
		jg	short loc_410540
		mov	eax, [ebp+var_1C]
		mov	eax, [eax]
		movzx	eax, word ptr [eax+ebx*2]
		jmp	short loc_4105BA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410540:				; CODE XREF: sub_410507+24j
					; sub_410507+2Cj
		mov	eax, ebx
		lea	ecx, [ebp+var_1C]
		sar	eax, 8
		mov	[ebp+var_24], eax
		push	ecx
		movzx	eax, al
		push	eax
		call	sub_4157BB
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_41056E
		mov	eax, [ebp+var_24]
		mov	[ebp+MultiByteStr], al
		xor	eax, eax
		push	2
		mov	[ebp-0Fh], bl
		mov	[ebp+var_E], al
		pop	ecx
		jmp	short loc_410579
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41056E:				; CODE XREF: sub_410507+52j
		xor	eax, eax
		mov	[ebp+MultiByteStr], bl
		xor	ecx, ecx
		mov	[ebp-0Fh], al
		inc	ecx

loc_410579:				; CODE XREF: sub_410507+65j
		mov	dword ptr [ebp+CharType], eax
		mov	[ebp+var_8], ax
		mov	eax, [ebp+var_1C]
		push	1		; int
		push	dword ptr [eax+8] ; int
		lea	eax, [ebp+CharType]
		push	eax		; lpCharType
		push	ecx		; cchMultiByte
		lea	eax, [ebp+MultiByteStr]
		push	eax		; lpMultiByteStr
		lea	eax, [ebp+var_1C]
		push	1		; dwInfoType
		push	eax		; int
		call	sub_41086F
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_4105B6
		cmp	[ebp+var_14], al
		jz	short loc_4105B2
		mov	eax, [ebp+var_20]
		and	dword ptr [eax+350h], 0FFFFFFFDh

loc_4105B2:				; CODE XREF: sub_410507+9Fj
		xor	eax, eax
		jmp	short loc_4105CD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4105B6:				; CODE XREF: sub_410507+9Aj
		movzx	eax, [ebp+CharType]

loc_4105BA:				; CODE XREF: sub_410507+37j
		and	eax, [ebp+arg_4]
		cmp	[ebp+var_14], 0
		jz	short loc_4105CD
		mov	ecx, [ebp+var_20]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_4105CD:				; CODE XREF: sub_410507+ADj
					; sub_410507+BAj
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_410507	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_4105DC(int,int,LCTYPE	LCType,int,int cchMultiByte)
sub_4105DC	proc near		; CODE XREF: sub_4106BD+4Ep
					; sub_4106BD+C1p ...

var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= byte ptr -0Ch
CodePage	= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
LCType		= dword	ptr  10h
arg_C		= dword	ptr  14h
cchMultiByte	= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		push	edi
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_18]
		call	sub_40A217
		mov	eax, [ebp+var_14]
		xor	edi, edi
		push	edi		; cchData
		push	edi		; lpLCData
		push	[ebp+LCType]	; LCType
		mov	eax, [eax+8]
		push	[ebp+arg_4]	; int
		mov	[ebp+CodePage],	eax
		call	sub_40FB77
		mov	ebx, eax
		test	ebx, ebx
		jz	short loc_410697
		lea	eax, [ebx+ebx]
		lea	ecx, [eax+8]
		cmp	eax, ecx
		sbb	eax, eax
		and	eax, ecx
		jz	short loc_41065A
		cmp	eax, 400h
		ja	short loc_410642
		call	sub_405980
		mov	esi, esp
		test	esi, esi
		jz	short loc_410690
		mov	dword ptr [esi], 0CCCCh
		jmp	short loc_410655
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410642:				; CODE XREF: sub_4105DC+51j
		push	eax
		call	sub_40FDE5
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_410690
		mov	dword ptr [esi], 0DDDDh

loc_410655:				; CODE XREF: sub_4105DC+64j
		add	esi, 8
		jmp	short loc_41065C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41065A:				; CODE XREF: sub_4105DC+4Aj
		mov	esi, edi

loc_41065C:				; CODE XREF: sub_4105DC+7Cj
		test	esi, esi
		jz	short loc_410690
		push	ebx		; cchData
		push	esi		; lpLCData
		push	[ebp+LCType]	; LCType
		push	[ebp+arg_4]	; int
		call	sub_40FB77
		test	eax, eax
		jz	short loc_410690
		mov	eax, [ebp+cchMultiByte]
		push	edi		; int
		push	edi		; int
		push	eax		; cchMultiByte
		neg	eax
		sbb	eax, eax
		and	eax, [ebp+arg_C]
		push	eax		; lpMultiByteStr
		push	0FFFFFFFFh	; cchWideChar
		push	esi		; lpWideCharStr
		push	edi		; int
		push	[ebp+CodePage]	; CodePage
		call	sub_415578
		add	esp, 20h
		mov	edi, eax

loc_410690:				; CODE XREF: sub_4105DC+5Cj
					; sub_4105DC+71j ...
		push	esi
		call	sub_404C80
		pop	ecx

loc_410697:				; CODE XREF: sub_4105DC+3Cj
		cmp	[ebp+var_C], 0
		jz	short loc_4106A7
		mov	eax, [ebp+var_18]
		and	dword ptr [eax+350h], 0FFFFFFFDh

loc_4106A7:				; CODE XREF: sub_4105DC+BFj
		mov	eax, edi
		lea	esp, [ebp-24h]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_4105DC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_4106BD(int,int,int,LCTYPE LCType,int)
sub_4106BD	proc near		; CODE XREF: sub_40A4A8+53p
					; sub_417151+CFp ...

var_90		= dword	ptr -90h
cchData		= dword	ptr -8Ch
LCData		= word ptr -88h
var_84		= dword	ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
LCType		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 90h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		push	ebx
		mov	ebx, [ebp+arg_10]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		xor	edi, edi
		mov	[ebp+var_90], ecx
		mov	dword ptr [ebp+LCData],	esi
		mov	[ebx], edi
		cmp	eax, 1
		jnz	loc_4107DC
		push	80h		; cchMultiByte
		lea	eax, [ebp+var_84]
		push	eax		; int
		push	[ebp+LCType]	; LCType
		push	esi		; int
		push	ecx		; int
		call	sub_4105DC
		add	esp, 14h
		mov	[ebp+cchData], eax
		test	eax, eax
		jz	short loc_410763
		push	1
		push	eax
		call	sub_40FE33
		push	edi		; lpMem
		mov	[ebx], eax
		call	sub_40F0A8
		add	esp, 0Ch
		cmp	[ebx], edi
		jz	loc_410850
		mov	ecx, [ebp+cchData]
		lea	eax, [ecx-1]
		push	eax
		lea	eax, [ebp+var_84]
		push	eax
		push	ecx
		push	dword ptr [ebx]
		call	sub_419C51
		add	esp, 10h
		test	eax, eax
		jnz	loc_410864

loc_41075C:				; CODE XREF: sub_4106BD+18Ej
		xor	eax, eax
		jmp	loc_410853
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410763:				; CODE XREF: sub_4106BD+5Ej
		call	ds:GetLastError
		cmp	eax, 7Ah
		jnz	loc_410850
		push	edi		; cchMultiByte
		push	edi		; int
		push	[ebp+LCType]	; LCType
		push	esi		; int
		push	[ebp+var_90]	; int
		call	sub_4105DC
		add	esp, 14h
		mov	[ebp+cchData], eax
		test	eax, eax
		jz	loc_410850
		push	1
		push	eax
		call	sub_40FE33
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_4107CE
		push	[ebp+cchData]	; cchMultiByte
		push	esi		; int
		push	[ebp+LCType]	; LCType
		push	dword ptr [ebp+LCData] ; int
		push	[ebp+var_90]	; int
		call	sub_4105DC
		add	esp, 14h

loc_4107C2:				; CODE XREF: sub_4106BD+15Ej
		test	eax, eax
		jz	short loc_4107CE
		mov	eax, esi
		mov	esi, edi
		mov	[ebx], eax
		jmp	short loc_4107D1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4107CE:				; CODE XREF: sub_4106BD+E5j
					; sub_4106BD+107j ...
		or	edi, 0FFFFFFFFh

loc_4107D1:				; CODE XREF: sub_4106BD+10Fj
		push	esi		; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	eax, edi
		jmp	short loc_410853
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4107DC:				; CODE XREF: sub_4106BD+37j
		cmp	eax, 2
		jnz	short loc_41081D
		push	edi		; cchData
		push	edi		; lpLCData
		push	[ebp+LCType]	; LCType
		push	esi		; int
		call	sub_40FB77
		mov	[ebp+cchData], eax
		test	eax, eax
		jz	short loc_410850
		push	2
		push	eax
		call	sub_40FE33
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_4107CE
		push	[ebp+cchData]	; cchData
		push	esi		; lpLCData
		push	[ebp+LCType]	; LCType
		push	dword ptr [ebp+LCData] ; int
		call	sub_40FB77
		jmp	short loc_4107C2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41081D:				; CODE XREF: sub_4106BD+122j
		test	eax, eax
		jnz	short loc_410850
		push	2		; cchData
		lea	eax, [ebp+LCData]
		mov	dword ptr [ebp+LCData],	edi
		push	eax		; lpLCData
		mov	eax, [ebp+LCType]
		or	eax, 20000000h
		push	eax		; LCType
		push	esi		; int
		call	sub_40FB77
		test	eax, eax
		jz	short loc_410850
		mov	al, byte ptr [ebp+LCData]
		mov	[ebx], al
		jmp	loc_41075C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410850:				; CODE XREF: sub_4106BD+75j
					; sub_4106BD+AFj ...
		or	eax, 0FFFFFFFFh

loc_410853:				; CODE XREF: sub_4106BD+A1j
					; sub_4106BD+11Dj
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410864:				; CODE XREF: sub_4106BD+99j
		push	edi
		push	edi
		push	edi
		push	edi
		push	edi
		call	sub_409E62
		int	3		; Trap to Debugger
sub_4106BD	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_41086F(int,DWORD dwInfoType,LPCSTR lpMultiByteStr,int	cchMultiByte,LPWORD lpCharType,int,int)
sub_41086F	proc near		; CODE XREF: sub_40A4A8+209p
					; sub_40E00F+262p ...

var_28		= dword	ptr -28h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= byte ptr -10h
cchWideChar	= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
dwInfoType	= dword	ptr  0Ch
lpMultiByteStr	= dword	ptr  10h
cchMultiByte	= dword	ptr  14h
lpCharType	= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		push	edi
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_1C]
		call	sub_40A217
		mov	ebx, [ebp+arg_14]
		test	ebx, ebx
		jnz	short loc_41089C
		mov	eax, [ebp+var_18]
		mov	ebx, [eax+8]

loc_41089C:				; CODE XREF: sub_41086F+25j
		xor	eax, eax
		xor	edi, edi
		cmp	[ebp+arg_18], eax
		push	edi		; cchWideChar
		push	edi		; lpWideCharStr
		push	[ebp+cchMultiByte] ; cchMultiByte
		setnz	al
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		lea	eax, ds:1[eax*8]
		push	eax		; int
		push	ebx		; CodePage
		call	sub_4154FC
		add	esp, 18h
		mov	[ebp+cchWideChar], eax
		test	eax, eax
		jz	loc_41094E
		lea	edx, [eax+eax]
		lea	ecx, [edx+8]
		mov	[ebp+var_8], edx
		cmp	edx, ecx
		sbb	eax, eax
		and	eax, ecx
		jz	short loc_410910
		cmp	eax, 400h
		ja	short loc_4108F5
		call	sub_405980
		mov	esi, esp
		test	esi, esi
		jz	short loc_41090B
		mov	dword ptr [esi], 0CCCCh
		jmp	short loc_410908
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4108F5:				; CODE XREF: sub_41086F+71j
		push	eax
		call	sub_40FDE5
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_41090B
		mov	dword ptr [esi], 0DDDDh

loc_410908:				; CODE XREF: sub_41086F+84j
		add	esi, 8

loc_41090B:				; CODE XREF: sub_41086F+7Cj
					; sub_41086F+91j
		mov	edx, [ebp+var_8]
		jmp	short loc_410912
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410910:				; CODE XREF: sub_41086F+6Aj
		mov	esi, edi

loc_410912:				; CODE XREF: sub_41086F+9Fj
		test	esi, esi
		jz	short loc_410947
		push	edx
		push	edi
		push	esi
		call	sub_407330
		push	[ebp+cchWideChar] ; cchWideChar
		push	esi		; lpWideCharStr
		push	[ebp+cchMultiByte] ; cchMultiByte
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		push	1		; int
		push	ebx		; CodePage
		call	sub_4154FC
		add	esp, 24h
		test	eax, eax
		jz	short loc_410947
		push	[ebp+lpCharType] ; lpCharType
		push	eax		; cchSrc
		push	esi		; lpSrcStr
		push	[ebp+dwInfoType] ; dwInfoType
		call	ds:GetStringTypeW
		mov	edi, eax

loc_410947:				; CODE XREF: sub_41086F+A5j
					; sub_41086F+C6j
		push	esi
		call	sub_404C80
		pop	ecx

loc_41094E:				; CODE XREF: sub_41086F+55j
		cmp	[ebp+var_10], 0
		jz	short loc_41095E
		mov	eax, [ebp+var_1C]
		and	dword ptr [eax+350h], 0FFFFFFFDh

loc_41095E:				; CODE XREF: sub_41086F+E3j
		mov	eax, edi
		lea	esp, [ebp-28h]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_41086F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_410974(int,int,DWORD dwMapFlags,LPCSTR lpMultiByteStr,int,LPWSTR lpDestStr,int cchDest,UINT CodePage,int)
sub_410974	proc near		; CODE XREF: sub_410B60+2Fp

var_14		= dword	ptr -14h
cchSrc		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
dwMapFlags	= dword	ptr  10h
lpMultiByteStr	= dword	ptr  14h
arg_10		= dword	ptr  18h
lpDestStr	= dword	ptr  1Ch
cchDest		= dword	ptr  20h
CodePage	= dword	ptr  24h
arg_20		= dword	ptr  28h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		mov	esi, [ebp+arg_10]
		push	edi
		test	esi, esi
		jle	short loc_4109A3
		push	esi
		push	[ebp+lpMultiByteStr]
		call	sub_40C0AD
		pop	ecx
		cmp	eax, esi
		pop	ecx
		lea	esi, [eax+1]
		jl	short loc_4109A3
		mov	esi, eax

loc_4109A3:				; CODE XREF: sub_410974+19j
					; sub_410974+2Bj
		mov	edi, [ebp+CodePage]
		test	edi, edi
		jnz	short loc_4109B5
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	edi, [eax+8]
		mov	[ebp+CodePage],	edi

loc_4109B5:				; CODE XREF: sub_410974+34j
		xor	eax, eax
		cmp	[ebp+arg_20], eax
		push	0		; cchWideChar
		push	0		; lpWideCharStr
		setnz	al
		push	esi		; cchMultiByte
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		lea	eax, ds:1[eax*8]
		push	eax		; int
		push	edi		; CodePage
		call	sub_4154FC
		mov	edx, eax
		add	esp, 18h
		mov	[ebp+cchSrc], edx
		test	edx, edx
		jz	loc_410B3B
		lea	eax, [edx+edx]
		lea	ecx, [eax+8]
		cmp	eax, ecx
		sbb	eax, eax
		and	eax, ecx
		jz	short loc_410A26
		cmp	eax, 400h
		ja	short loc_410A0B
		call	sub_405980
		mov	ebx, esp
		test	ebx, ebx
		jz	short loc_410A21
		mov	dword ptr [ebx], 0CCCCh
		jmp	short loc_410A1E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410A0B:				; CODE XREF: sub_410974+82j
		push	eax
		call	sub_40FDE5
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jz	short loc_410A21
		mov	dword ptr [ebx], 0DDDDh

loc_410A1E:				; CODE XREF: sub_410974+95j
		add	ebx, 8

loc_410A21:				; CODE XREF: sub_410974+8Dj
					; sub_410974+A2j
		mov	edx, [ebp+cchSrc]
		jmp	short loc_410A28
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410A26:				; CODE XREF: sub_410974+7Bj
		xor	ebx, ebx

loc_410A28:				; CODE XREF: sub_410974+B0j
		test	ebx, ebx
		jz	loc_410B30
		push	edx		; cchWideChar
		push	ebx		; lpWideCharStr
		push	esi		; cchMultiByte
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		push	1		; int
		push	edi		; CodePage
		call	sub_4154FC
		add	esp, 18h
		test	eax, eax
		jz	loc_410B30
		mov	edi, [ebp+cchSrc]
		xor	eax, eax
		push	eax		; int
		push	eax		; int
		push	eax		; int
		push	eax		; cchDest
		push	eax		; lpDestStr
		push	edi		; cchSrc
		push	ebx		; lpSrcStr
		push	[ebp+dwMapFlags] ; dwMapFlags
		push	[ebp+arg_4]	; int
		call	sub_40FCB4
		mov	esi, eax
		test	esi, esi
		jz	loc_410B30
		mov	edx, 400h
		test	[ebp+dwMapFlags], edx
		jz	short loc_410AAC
		mov	eax, [ebp+cchDest]
		test	eax, eax
		jz	loc_410B32
		cmp	esi, eax
		jg	loc_410B30
		xor	ecx, ecx
		push	ecx		; int
		push	ecx		; int
		push	ecx		; int
		push	eax		; cchDest
		push	[ebp+lpDestStr]	; lpDestStr
		push	edi		; cchSrc
		push	ebx		; lpSrcStr
		push	[ebp+dwMapFlags] ; dwMapFlags
		push	[ebp+arg_4]	; int
		call	sub_40FCB4
		mov	esi, eax
		test	esi, esi
		jnz	loc_410B32
		jmp	loc_410B30
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410AAC:				; CODE XREF: sub_410974+FEj
		lea	eax, [esi+esi]
		lea	ecx, [eax+8]
		cmp	eax, ecx
		sbb	eax, eax
		and	eax, ecx
		jz	short loc_410AE9
		cmp	eax, edx
		ja	short loc_410AD1
		call	sub_405980
		mov	edi, esp
		test	edi, edi
		jz	short loc_410B29
		mov	dword ptr [edi], 0CCCCh
		jmp	short loc_410AE4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410AD1:				; CODE XREF: sub_410974+148j
		push	eax
		call	sub_40FDE5
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_410B29
		mov	dword ptr [edi], 0DDDDh

loc_410AE4:				; CODE XREF: sub_410974+15Bj
		add	edi, 8
		jmp	short loc_410AEB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410AE9:				; CODE XREF: sub_410974+144j
		xor	edi, edi

loc_410AEB:				; CODE XREF: sub_410974+173j
		test	edi, edi
		jz	short loc_410B29
		push	0		; int
		push	0		; int
		push	0		; int
		push	esi		; cchDest
		push	edi		; lpDestStr
		push	[ebp+cchSrc]	; cchSrc
		push	ebx		; lpSrcStr
		push	[ebp+dwMapFlags] ; dwMapFlags
		push	[ebp+arg_4]	; int
		call	sub_40FCB4
		test	eax, eax
		jz	short loc_410B29
		xor	eax, eax
		push	eax		; int
		push	eax		; int
		cmp	[ebp+cchDest], eax
		jnz	short loc_410B4F
		push	eax		; cchMultiByte
		push	eax		; lpMultiByteStr

loc_410B15:				; CODE XREF: sub_410974+1E1j
		push	esi		; cchWideChar
		push	edi		; lpWideCharStr
		push	eax		; int
		push	[ebp+CodePage]	; CodePage
		call	sub_415578
		mov	esi, eax
		add	esp, 20h
		test	esi, esi
		jnz	short loc_410B57

loc_410B29:				; CODE XREF: sub_410974+153j
					; sub_410974+168j ...
		push	edi
		call	sub_404C80
		pop	ecx

loc_410B30:				; CODE XREF: sub_410974+B6j
					; sub_410974+CFj ...
		xor	esi, esi

loc_410B32:				; CODE XREF: sub_410974+105j
					; sub_410974+12Dj ...
		push	ebx
		call	sub_404C80
		pop	ecx
		mov	eax, esi

loc_410B3B:				; CODE XREF: sub_410974+69j
		lea	esp, [ebp-14h]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410B4F:				; CODE XREF: sub_410974+19Dj
		push	[ebp+cchDest]
		push	[ebp+lpDestStr]
		jmp	short loc_410B15
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410B57:				; CODE XREF: sub_410974+1B3j
		push	edi
		call	sub_404C80
		pop	ecx
		jmp	short loc_410B32
sub_410974	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_410B60(int,int,DWORD dwMapFlags,LPCSTR lpMultiByteStr,int,LPWSTR lpDestStr,int cchDest,UINT CodePage,int)
sub_410B60	proc near		; CODE XREF: sub_40A4A8+1ADp
					; sub_40A4A8+1DFp ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
dwMapFlags	= dword	ptr  10h
lpMultiByteStr	= dword	ptr  14h
arg_10		= dword	ptr  18h
lpDestStr	= dword	ptr  1Ch
cchDest		= dword	ptr  20h
CodePage	= dword	ptr  24h
arg_20		= dword	ptr  28h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_10]
		call	sub_40A217
		push	[ebp+arg_20]	; int
		lea	eax, [ebp+var_C]
		push	[ebp+CodePage]	; CodePage
		push	[ebp+cchDest]	; cchDest
		push	[ebp+lpDestStr]	; lpDestStr
		push	[ebp+arg_10]	; int
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		push	[ebp+dwMapFlags] ; dwMapFlags
		push	[ebp+arg_4]	; int
		push	eax		; int
		call	sub_410974
		add	esp, 24h
		cmp	[ebp+var_4], 0
		jz	short loc_410BA7
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_410BA7:				; CODE XREF: sub_410B60+3Bj
		mov	esp, ebp
		pop	ebp
		retn
sub_410B60	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_410BAB	proc near		; CODE XREF: sub_40A9BD+8p
		push	10h
		push	offset dword_42B2E0
		call	sub_405FF0
		and	dword ptr [ebp-1Ch], 0
		push	8
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		push	3
		pop	esi

loc_410BCA:				; CODE XREF: sub_410BAB+81j
		mov	[ebp-20h], esi
		cmp	esi, dword_42D6EC
		jz	short loc_410C2E
		mov	eax, lpMem
		mov	eax, [eax+esi*4]
		test	eax, eax
		jz	short loc_410C2B
		mov	eax, [eax+0Ch]
		nop
		shr	eax, 0Dh
		test	al, 1
		jz	short loc_410C02
		mov	eax, lpMem
		push	dword ptr [eax+esi*4]
		call	sub_40AAEE
		pop	ecx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_410C02
		inc	dword ptr [ebp-1Ch]

loc_410C02:				; CODE XREF: sub_410BAB+3Fj
					; sub_410BAB+52j
		mov	eax, lpMem
		mov	eax, [eax+esi*4]
		add	eax, 20h
		push	eax		; lpCriticalSection
		call	ds:DeleteCriticalSection
		mov	eax, lpMem
		push	dword ptr [eax+esi*4] ;	lpMem
		call	sub_40F0A8
		pop	ecx
		mov	eax, lpMem
		and	dword ptr [eax+esi*4], 0

loc_410C2B:				; CODE XREF: sub_410BAB+34j
		inc	esi
		jmp	short loc_410BCA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410C2E:				; CODE XREF: sub_410BAB+28j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_410C43
		mov	eax, [ebp-1Ch]
		call	sub_406036
		retn
sub_410BAB	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_410C43	proc near		; CODE XREF: sub_410BAB+8Ap
					; DATA XREF: .rdata:0042B2F8o
		push	8
		call	sub_409F1F
		pop	ecx
		retn
sub_410C43	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_410C4C	proc near		; CODE XREF: sub_40A9BD+17p
					; sub_40AA77+3Ap ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		lea	edi, [esi+0Ch]
		mov	eax, [edi]
		nop
		shr	eax, 0Dh
		test	al, 1
		jz	short loc_410C88
		mov	eax, [edi]
		nop
		shr	eax, 6
		test	al, 1
		jz	short loc_410C88
		push	dword ptr [esi+4] ; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	eax, 0FFFFFEBFh
		lock and [edi],	eax
		xor	eax, eax
		mov	[esi+4], eax
		mov	[esi], eax
		mov	[esi+8], eax

loc_410C88:				; CODE XREF: sub_410C4C+15j
					; sub_410C4C+1Fj
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_410C4C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_410C8C	proc near		; CODE XREF: sub_410DF8+27p

StartupInfo	= _STARTUPINFOW	ptr -48h
var_4		= dword	ptr -4

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		lea	eax, [ebp+StartupInfo]
		push	eax		; lpStartupInfo
		call	ds:GetStartupInfoW
		cmp	[ebp+StartupInfo.cbReserved2], 0
		jz	loc_410D40
		push	ebx
		mov	ebx, [ebp+StartupInfo.lpReserved2]
		test	ebx, ebx
		jz	loc_410D3F
		push	esi
		mov	esi, [ebx]
		lea	eax, [ebx+4]
		add	eax, esi
		mov	[ebp+var_4], eax
		mov	eax, 2000h
		cmp	esi, eax
		jl	short loc_410CCB
		mov	esi, eax

loc_410CCB:				; CODE XREF: sub_410C8C+3Bj
		push	esi
		call	sub_416E7E
		mov	eax, dword_42DB50
		pop	ecx
		cmp	esi, eax
		jle	short loc_410CDD
		mov	esi, eax

loc_410CDD:				; CODE XREF: sub_410C8C+4Dj
		push	edi
		xor	edi, edi
		test	esi, esi
		jz	short loc_410D3D
		mov	eax, [ebp+var_4]

loc_410CE7:				; CODE XREF: sub_410C8C+AFj
		mov	ecx, [eax]
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_410D32
		cmp	ecx, 0FFFFFFFEh
		jz	short loc_410D32
		mov	dl, [edi+ebx+4]
		test	dl, 1
		jz	short loc_410D32
		test	dl, 8
		jnz	short loc_410D0C
		push	ecx		; hFile
		call	ds:GetFileType
		test	eax, eax
		jz	short loc_410D2F

loc_410D0C:				; CODE XREF: sub_410C8C+73j
		mov	eax, edi
		mov	ecx, edi
		and	eax, 3Fh
		sar	ecx, 6
		imul	edx, eax, 38h
		mov	eax, [ebp+var_4]
		add	edx, dword_42D950[ecx*4]
		mov	eax, [eax]
		mov	[edx+18h], eax
		mov	al, [edi+ebx+4]
		mov	[edx+28h], al

loc_410D2F:				; CODE XREF: sub_410C8C+7Ej
		mov	eax, [ebp+var_4]

loc_410D32:				; CODE XREF: sub_410C8C+60j
					; sub_410C8C+65j ...
		inc	edi
		add	eax, 4
		mov	[ebp+var_4], eax
		cmp	edi, esi
		jnz	short loc_410CE7

loc_410D3D:				; CODE XREF: sub_410C8C+56j
		pop	edi
		pop	esi

loc_410D3F:				; CODE XREF: sub_410C8C+23j
		pop	ebx

loc_410D40:				; CODE XREF: sub_410C8C+17j
		mov	esp, ebp
		pop	ebp
		retn
sub_410C8C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_410D44	proc near		; CODE XREF: sub_410DF8+2Cp
		mov	edi, edi
		push	ebx
		push	esi
		push	edi
		xor	edi, edi

loc_410D4B:				; CODE XREF: sub_410D44+AAj
		mov	eax, edi
		mov	ecx, edi
		and	eax, 3Fh
		sar	ecx, 6
		imul	esi, eax, 38h
		add	esi, dword_42D950[ecx*4]
		cmp	dword ptr [esi+18h], 0FFFFFFFFh
		jz	short loc_410D71
		cmp	dword ptr [esi+18h], 0FFFFFFFEh
		jz	short loc_410D71
		or	byte ptr [esi+28h], 80h
		jmp	short loc_410DEA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410D71:				; CODE XREF: sub_410D44+1Fj
					; sub_410D44+25j
		mov	eax, edi
		mov	byte ptr [esi+28h], 81h
		sub	eax, 0
		jz	short loc_410D8C
		sub	eax, 1
		jz	short loc_410D88
		sub	eax, 1
		push	0FFFFFFF4h
		jmp	short loc_410D8E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410D88:				; CODE XREF: sub_410D44+3Bj
		push	0FFFFFFF5h
		jmp	short loc_410D8E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410D8C:				; CODE XREF: sub_410D44+36j
		push	0FFFFFFF6h

loc_410D8E:				; CODE XREF: sub_410D44+42j
					; sub_410D44+46j
		pop	eax
		push	eax		; nStdHandle
		call	ds:GetStdHandle
		mov	ebx, eax
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_410DAA
		test	ebx, ebx
		jz	short loc_410DAA
		push	ebx		; hFile
		call	ds:GetFileType
		jmp	short loc_410DAC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410DAA:				; CODE XREF: sub_410D44+57j
					; sub_410D44+5Bj
		xor	eax, eax

loc_410DAC:				; CODE XREF: sub_410D44+64j
		test	eax, eax
		jz	short loc_410DCC
		movzx	eax, al
		mov	[esi+18h], ebx
		cmp	eax, 2
		jnz	short loc_410DC1
		or	byte ptr [esi+28h], 40h
		jmp	short loc_410DEA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410DC1:				; CODE XREF: sub_410D44+75j
		cmp	eax, 3
		jnz	short loc_410DEA
		or	byte ptr [esi+28h], 8
		jmp	short loc_410DEA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410DCC:				; CODE XREF: sub_410D44+6Aj
		or	byte ptr [esi+28h], 40h
		mov	dword ptr [esi+18h], 0FFFFFFFEh
		mov	eax, lpMem
		test	eax, eax
		jz	short loc_410DEA
		mov	eax, [eax+edi*4]
		mov	dword ptr [eax+10h], 0FFFFFFFEh

loc_410DEA:				; CODE XREF: sub_410D44+2Bj
					; sub_410D44+7Bj ...
		inc	edi
		cmp	edi, 3
		jnz	loc_410D4B
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_410D44	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_410DF8	proc near		; DATA XREF: .rdata:00421888o
		push	0Ch
		push	offset dword_42B300
		call	sub_405FF0
		push	7
		call	sub_409ED7
		pop	ecx
		xor	ebx, ebx
		mov	[ebp-19h], bl
		mov	[ebp-4], ebx
		push	ebx
		call	sub_416E7E
		pop	ecx
		test	eax, eax
		jnz	short loc_410E2E
		call	sub_410C8C
		call	sub_410D44
		mov	bl, 1
		mov	[ebp-19h], bl

loc_410E2E:				; CODE XREF: sub_410DF8+25j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_410E45
		mov	al, bl
		call	sub_406036
		retn
sub_410DF8	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_410E42	proc near		; DATA XREF: .rdata:0042B318o
		mov	bl, [ebp-19h]
sub_410E42	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_410E45	proc near		; CODE XREF: sub_410DF8+3Dp
		push	7
		call	sub_409F1F
		pop	ecx
		retn
sub_410E45	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
unk_410E4E	db  8Bh	; 		; DATA XREF: .rdata:0042188Co
		db 0FFh
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	esi
		xor	esi, esi

loc_410E53:				; CODE XREF: .text:00410E74j
		mov	eax, dword_42D950[esi]
		test	eax, eax
		jz	short loc_410E6B
		push	eax
		call	sub_416E49
		and	dword_42D950[esi], 0
		pop	ecx

loc_410E6B:				; CODE XREF: .text:00410E5Bj
		add	esi, 4
		cmp	esi, 200h
		jb	short loc_410E53
		mov	al, 1
		pop	esi
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_410E7A	proc near		; CODE XREF: sub_410EFC+68p
		push	0Ch
		push	offset dword_42B320
		call	sub_405FF0
		and	dword ptr [ebp-1Ch], 0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_416F12
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	eax, [ebp+0Ch]
		mov	eax, [eax]
		mov	esi, [eax]
		mov	edx, esi
		sar	edx, 6
		mov	eax, esi
		and	eax, 3Fh
		imul	ecx, eax, 38h
		mov	eax, dword_42D950[edx*4]
		test	byte ptr [eax+ecx+28h],	1
		jz	short loc_410EC6
		push	esi
		call	sub_410F8B
		pop	ecx
		mov	esi, eax
		jmp	short loc_410ED4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410EC6:				; CODE XREF: sub_410E7A+3Fj
		call	sub_40BD71
		mov	dword ptr [eax], 9
		or	esi, 0FFFFFFFFh

loc_410ED4:				; CODE XREF: sub_410E7A+4Aj
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_410EF0
		mov	eax, esi
		call	sub_406036
		retn	0Ch
sub_410E7A	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_410EED	proc near		; DATA XREF: .rdata:0042B338o
		mov	esi, [ebp-1Ch]
sub_410EED	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_410EF0	proc near		; CODE XREF: sub_410E7A+64p
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_416F35
		pop	ecx
		retn
sub_410EF0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_410EFC	proc near		; CODE XREF: sub_40AA77+46p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, [ebp+arg_0]
		cmp	esi, 0FFFFFFFEh
		jnz	short loc_410F22
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 9
		jmp	short loc_410F83
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410F22:				; CODE XREF: sub_410EFC+Fj
		test	esi, esi
		js	short loc_410F6B
		cmp	esi, dword_42DB50
		jnb	short loc_410F6B
		mov	eax, esi
		mov	edx, esi
		and	eax, 3Fh
		sar	edx, 6
		imul	ecx, eax, 38h
		mov	eax, dword_42D950[edx*4]
		test	byte ptr [eax+ecx+28h],	1
		jz	short loc_410F6B
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_8], esi
		mov	[ebp+var_C], eax
		lea	ecx, [ebp-1]
		lea	eax, [ebp+var_8]
		mov	[ebp+var_10], esi
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		call	sub_410E7A
		jmp	short loc_410F86
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410F6B:				; CODE XREF: sub_410EFC+28j
					; sub_410EFC+30j ...
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 9
		call	sub_409E35

loc_410F83:				; CODE XREF: sub_410EFC+24j
		or	eax, 0FFFFFFFFh

loc_410F86:				; CODE XREF: sub_410EFC+6Dj
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_410EFC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_410F8B	proc near		; CODE XREF: sub_410E7A+42p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		push	edi
		call	sub_416FE9
		pop	ecx
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_410FA5

loc_410FA1:				; CODE XREF: sub_410F8B+4Cj
					; sub_410F8B+5Ej
		xor	esi, esi
		jmp	short loc_410FF3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_410FA5:				; CODE XREF: sub_410F8B+14j
		mov	eax, dword_42D950
		cmp	edi, 1
		jnz	short loc_410FB8
		test	byte ptr [eax+98h], 1
		jnz	short loc_410FC3

loc_410FB8:				; CODE XREF: sub_410F8B+22j
		cmp	edi, 2
		jnz	short loc_410FD9
		test	byte ptr [eax+60h], 1
		jz	short loc_410FD9

loc_410FC3:				; CODE XREF: sub_410F8B+2Bj
		push	2
		call	sub_416FE9
		push	1
		mov	esi, eax
		call	sub_416FE9
		pop	ecx
		pop	ecx
		cmp	eax, esi
		jz	short loc_410FA1

loc_410FD9:				; CODE XREF: sub_410F8B+30j
					; sub_410F8B+36j
		push	edi
		call	sub_416FE9
		pop	ecx
		push	eax		; hObject
		call	ds:CloseHandle
		test	eax, eax
		jnz	short loc_410FA1
		call	ds:GetLastError
		mov	esi, eax

loc_410FF3:				; CODE XREF: sub_410F8B+18j
		push	edi
		call	sub_416F58
		pop	ecx
		mov	ecx, edi
		and	edi, 3Fh
		sar	ecx, 6
		imul	edx, edi, 38h
		mov	ecx, dword_42D950[ecx*4]
		mov	byte ptr [ecx+edx+28h],	0
		test	esi, esi
		jz	short loc_411021
		push	esi
		call	sub_40BD3B
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_411023
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411021:				; CODE XREF: sub_410F8B+88j
		xor	eax, eax

loc_411023:				; CODE XREF: sub_410F8B+94j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_410F8B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_411027	proc near		; CODE XREF: sub_40AA77+40p
					; sub_40AD89+31p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_411048
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411048:				; CODE XREF: sub_411027+Aj
		mov	eax, [eax+10h]
		nop
		pop	ebp
		retn
sub_411027	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41104E	proc near		; CODE XREF: sub_40AA77+6Bp
					; sub_40AAEE+37p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	ecx, ecx
		mov	[eax], ecx
		mov	eax, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	eax, [ebp+arg_0]
		mov	[eax+8], ecx
		mov	eax, [ebp+arg_0]
		or	dword ptr [eax+10h], 0FFFFFFFFh
		mov	eax, [ebp+arg_0]
		mov	[eax+14h], ecx
		mov	eax, [ebp+arg_0]
		mov	[eax+18h], ecx
		mov	eax, [ebp+arg_0]
		mov	[eax+1Ch], ecx
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		xchg	ecx, [eax]
		pop	ebp
		retn
sub_41104E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_411089	proc near		; CODE XREF: sub_411121+60p
		push	0Ch
		push	offset dword_42B340
		call	sub_405FF0
		xor	esi, esi
		mov	[ebp-1Ch], esi
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_416F12
		pop	ecx
		mov	[ebp-4], esi
		mov	eax, [ebp+0Ch]
		mov	eax, [eax]
		mov	edi, [eax]
		mov	edx, edi
		sar	edx, 6
		mov	eax, edi
		and	eax, 3Fh
		imul	ecx, eax, 38h
		mov	eax, dword_42D950[edx*4]
		test	byte ptr [eax+ecx+28h],	1
		jz	short loc_4110EB
		push	edi
		call	sub_416FE9
		pop	ecx
		push	eax		; hFile
		call	ds:FlushFileBuffers
		test	eax, eax
		jnz	short loc_4110F9
		call	sub_40BD5E
		mov	esi, eax
		call	ds:GetLastError
		mov	[esi], eax

loc_4110EB:				; CODE XREF: sub_411089+3Fj
		call	sub_40BD71
		mov	dword ptr [eax], 9
		or	esi, 0FFFFFFFFh

loc_4110F9:				; CODE XREF: sub_411089+51j
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_411115
		mov	eax, esi
		call	sub_406036
		retn	0Ch
sub_411089	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_411112	proc near		; DATA XREF: .rdata:0042B358o
		mov	esi, [ebp-1Ch]
sub_411112	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_411115	proc near		; CODE XREF: sub_411089+7Ap
		mov	ecx, [ebp+10h]
		push	dword ptr [ecx]
		call	sub_416F35
		pop	ecx
		retn
sub_411115	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_411121	proc near		; CODE XREF: sub_40ADEE+33p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, [ebp+arg_0]
		cmp	esi, 0FFFFFFFEh
		jnz	short loc_41113F
		call	sub_40BD71
		mov	dword ptr [eax], 9
		jmp	short loc_411198
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41113F:				; CODE XREF: sub_411121+Fj
		test	esi, esi
		js	short loc_411188
		cmp	esi, dword_42DB50
		jnb	short loc_411188
		mov	eax, esi
		mov	edx, esi
		and	eax, 3Fh
		sar	edx, 6
		imul	ecx, eax, 38h
		mov	eax, dword_42D950[edx*4]
		test	byte ptr [eax+ecx+28h],	1
		jz	short loc_411188
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_8], esi
		mov	[ebp+var_C], eax
		lea	ecx, [ebp-1]
		lea	eax, [ebp+var_8]
		mov	[ebp+var_10], esi
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		call	sub_411089
		jmp	short loc_41119B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411188:				; CODE XREF: sub_411121+20j
					; sub_411121+28j ...
		call	sub_40BD71
		mov	dword ptr [eax], 9
		call	sub_409E35

loc_411198:				; CODE XREF: sub_411121+1Cj
		or	eax, 0FFFFFFFFh

loc_41119B:				; CODE XREF: sub_411121+65j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_411121	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4111A0	proc near		; CODE XREF: sub_411A0D+D4p

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
CodePage	= dword	ptr -78h
var_74		= dword	ptr -74h
hFile		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
NumberOfBytesWritten= dword ptr	-60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
WideCharStr	= word ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_38		= byte ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2B		= byte ptr -2Bh
cchWideChar	= dword	ptr -28h
var_24		= dword	ptr -24h
var_1D		= byte ptr -1Dh
MultiByteStr	= byte ptr -1Ch
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 8Ch
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, eax
		mov	edx, [ebp+arg_8]
		and	eax, 3Fh
		push	ebx
		push	esi
		imul	esi, eax, 38h
		sar	ecx, 6
		push	edi
		mov	[ebp+var_6C], edx
		mov	[ebp+var_50], ecx
		mov	eax, dword_42D950[ecx*4]
		mov	[ebp+var_4C], esi
		mov	eax, [esi+eax+18h]
		mov	esi, [ebp+arg_C]
		add	esi, edx
		mov	[ebp+hFile], eax
		mov	[ebp+var_64], esi
		call	ds:GetConsoleCP
		xor	ebx, ebx
		mov	[ebp+CodePage],	eax
		push	ebx
		lea	ecx, [ebp+var_44]
		call	sub_40A217
		mov	ecx, [ebp+var_40]
		lea	edi, [ebp+var_5C]
		xor	eax, eax
		stosd
		mov	ecx, [ecx+8]
		mov	[ebp+var_7C], ecx
		stosd
		stosd
		mov	edi, [ebp+var_6C]
		mov	[ebp+var_24], edi
		cmp	edi, esi
		jnb	loc_411521
		mov	esi, [ebp+var_58]

loc_41121E:				; CODE XREF: sub_4111A0+2F7j
		mov	al, [edi]
		mov	[ebp+var_2B], al
		mov	eax, [ebp+var_50]
		mov	dword ptr [ebp+WideCharStr], ebx
		mov	[ebp+cchWideChar], 1
		mov	eax, dword_42D950[eax*4]
		mov	[ebp+var_30], eax
		cmp	ecx, 0FDE9h
		jnz	loc_411373
		mov	edx, [ebp+var_4C]
		add	eax, 2Eh
		add	eax, edx
		mov	ecx, ebx
		mov	[ebp+var_68], eax

loc_411253:				; CODE XREF: sub_4111A0+BCj
		cmp	[eax+ecx], bl
		jz	short loc_41125E
		inc	ecx
		cmp	ecx, 5
		jl	short loc_411253

loc_41125E:				; CODE XREF: sub_4111A0+B6j
		mov	edi, [ebp+var_64]
		mov	eax, [ebp+var_24]
		sub	edi, eax
		mov	[ebp+cchWideChar], ecx
		test	ecx, ecx
		jle	loc_411313
		mov	eax, [ebp+var_30]
		movzx	eax, byte ptr [edx+eax+2Eh]
		movsx	eax, byte_42C300[eax]
		inc	eax
		mov	[ebp+var_34], eax
		sub	eax, ecx
		mov	[ebp+var_30], eax
		cmp	eax, edi
		jg	loc_41149C
		mov	edx, ebx
		test	ecx, ecx
		jle	short loc_4112A9
		mov	esi, [ebp+var_68]

loc_41129A:				; CODE XREF: sub_4111A0+104j
		mov	al, [esi+edx]
		mov	byte ptr [ebp+edx+var_C], al
		inc	edx
		cmp	edx, ecx
		jl	short loc_41129A
		mov	eax, [ebp+var_30]

loc_4112A9:				; CODE XREF: sub_4111A0+F5j
		mov	edi, [ebp+var_24]
		test	eax, eax
		jle	short loc_4112C5
		push	[ebp+var_30]
		lea	eax, [ebp+var_C]
		add	eax, ecx
		push	edi
		push	eax
		call	loc_4067C0
		mov	ecx, [ebp+cchWideChar]
		add	esp, 0Ch

loc_4112C5:				; CODE XREF: sub_4111A0+10Ej
		test	ecx, ecx
		jle	short loc_4112EA
		mov	edx, [ebp+cchWideChar]
		mov	edi, ebx
		mov	esi, [ebp+var_4C]

loc_4112D1:				; CODE XREF: sub_4111A0+145j
		mov	eax, [ebp+var_50]
		lea	ecx, [esi+edi]
		inc	edi
		mov	eax, dword_42D950[eax*4]
		mov	[ecx+eax+2Eh], bl
		cmp	edi, edx
		jl	short loc_4112D1
		mov	edi, [ebp+var_24]

loc_4112EA:				; CODE XREF: sub_4111A0+127j
		lea	eax, [ebp+var_C]
		mov	[ebp+var_84], ebx
		mov	[ebp+var_74], eax
		lea	ecx, [ebp+var_84]
		xor	eax, eax
		mov	[ebp+var_80], ebx
		cmp	[ebp+var_34], 4
		push	ecx
		setz	al
		inc	eax
		mov	[ebp+cchWideChar], eax
		push	eax
		lea	eax, [ebp+var_74]
		jmp	short loc_411352
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411313:				; CODE XREF: sub_4111A0+CBj
		movzx	eax, byte ptr [eax]
		movsx	ecx, byte_42C300[eax]
		inc	ecx
		mov	[ebp+var_30], ecx
		cmp	ecx, edi
		jg	loc_4114D1
		mov	edi, [ebp+var_24]
		xor	eax, eax
		cmp	ecx, 4
		mov	[ebp+var_8C], ebx
		lea	ecx, [ebp+var_8C]
		mov	[ebp+var_88], ebx
		setz	al
		mov	[ebp+var_34], edi
		inc	eax
		push	ecx
		mov	[ebp+cchWideChar], eax
		push	eax
		lea	eax, [ebp+var_34]

loc_411352:				; CODE XREF: sub_4111A0+171j
		push	eax
		lea	eax, [ebp+WideCharStr]
		push	eax
		call	sub_4199A1
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	loc_411521
		mov	eax, [ebp+var_30]
		dec	eax
		add	edi, eax
		jmp	loc_4113F5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411373:				; CODE XREF: sub_4111A0+A0j
		mov	ecx, [ebp+var_4C]
		mov	dl, [ecx+eax+2Dh]
		test	dl, 4
		jz	short loc_41139D
		mov	al, [ecx+eax+2Eh]
		and	dl, 0FBh
		mov	byte ptr [ebp+var_14], al
		mov	al, [edi]
		mov	byte ptr [ebp+var_14+1], al
		mov	eax, [ebp+var_30]
		push	2
		mov	[ecx+eax+2Dh], dl
		lea	eax, [ebp+var_14]
		push	eax
		jmp	short loc_4113E0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41139D:				; CODE XREF: sub_4111A0+1DDj
		mov	al, [edi]
		mov	[ebp+var_1D], al
		call	sub_40A1F1
		movzx	ecx, [ebp+var_1D]
		cmp	[eax+ecx*2], bx
		jge	short loc_4113DD
		lea	eax, [edi+1]
		mov	[ebp+var_34], eax
		cmp	eax, [ebp+var_64]
		jnb	loc_4114F5
		push	2		; int
		lea	eax, [ebp+WideCharStr]
		push	edi		; int
		push	eax		; lpWideCharStr
		call	sub_413EBA
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_411521
		mov	edi, [ebp+var_34]
		jmp	short loc_4113F5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4113DD:				; CODE XREF: sub_4111A0+20Fj
		push	1		; int
		push	edi		; int

loc_4113E0:				; CODE XREF: sub_4111A0+1FBj
		lea	eax, [ebp+WideCharStr]
		push	eax		; lpWideCharStr
		call	sub_413EBA
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_411521

loc_4113F5:				; CODE XREF: sub_4111A0+1CEj
					; sub_4111A0+23Bj
		push	ebx		; int
		push	ebx		; int
		push	5		; cchMultiByte
		lea	eax, [ebp+MultiByteStr]
		inc	edi
		push	eax		; lpMultiByteStr
		push	[ebp+cchWideChar] ; cchWideChar
		lea	eax, [ebp+WideCharStr]
		mov	[ebp+var_24], edi
		push	eax		; lpWideCharStr
		push	ebx		; int
		push	[ebp+CodePage]	; CodePage
		call	sub_415578
		add	esp, 20h
		mov	[ebp+var_34], eax
		test	eax, eax
		jz	loc_411521
		push	ebx		; lpOverlapped
		lea	ecx, [ebp+NumberOfBytesWritten]
		push	ecx		; lpNumberOfBytesWritten
		push	eax		; nNumberOfBytesToWrite
		lea	eax, [ebp+MultiByteStr]
		push	eax		; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:WriteFile
		test	eax, eax
		jz	loc_411518
		mov	esi, [ebp+var_54]
		sub	esi, [ebp+var_6C]
		mov	eax, [ebp+var_34]
		add	esi, edi
		mov	[ebp+var_58], esi
		cmp	[ebp+NumberOfBytesWritten], eax
		jb	loc_411521
		cmp	[ebp+var_2B], 0Ah
		jnz	short loc_41148B
		push	0Dh
		pop	eax
		push	ebx		; lpOverlapped
		mov	[ebp-2Ch], ax
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesWritten
		push	1		; nNumberOfBytesToWrite
		lea	eax, [ebp-2Ch]
		push	eax		; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:WriteFile
		test	eax, eax
		jz	loc_411518
		cmp	[ebp+NumberOfBytesWritten], 1
		jb	loc_411521
		inc	[ebp+var_54]
		inc	esi
		mov	[ebp+var_58], esi

loc_41148B:				; CODE XREF: sub_4111A0+2B5j
		cmp	edi, [ebp+var_64]
		jnb	loc_411521
		mov	ecx, [ebp+var_7C]
		jmp	loc_41121E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41149C:				; CODE XREF: sub_4111A0+EBj
		test	edi, edi
		jle	short loc_4114C6
		mov	esi, [ebp+var_24]

loc_4114A3:				; CODE XREF: sub_4111A0+321j
		mov	eax, [ebp+var_50]
		add	edx, ebx
		add	edx, ecx
		mov	ecx, dword_42D950[eax*4]
		mov	al, [ebx+esi]
		inc	ebx
		mov	[edx+ecx+2Eh], al
		mov	ecx, [ebp+cchWideChar]
		mov	edx, [ebp+var_4C]
		cmp	ebx, edi
		jl	short loc_4114A3

loc_4114C3:				; CODE XREF: sub_4111A0+353j
		mov	esi, [ebp+var_58]

loc_4114C6:				; CODE XREF: sub_4111A0+2FEj
					; sub_4111A0+333j
		add	esi, edi

loc_4114C8:				; CODE XREF: sub_4111A0+376j
		cmp	[ebp+var_38], 0
		mov	[ebp+var_58], esi
		jmp	short loc_411524
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4114D1:				; CODE XREF: sub_4111A0+183j
		test	edi, edi
		jle	short loc_4114C6
		mov	esi, [ebp+var_24]

loc_4114D8:				; CODE XREF: sub_4111A0+351j
		mov	eax, [ebp+var_50]
		add	edx, ebx
		mov	ecx, dword_42D950[eax*4]
		mov	al, [ebx+esi]
		inc	ebx
		mov	[edx+ecx+2Eh], al
		mov	edx, [ebp+var_4C]
		cmp	ebx, edi
		jl	short loc_4114D8
		jmp	short loc_4114C3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4114F5:				; CODE XREF: sub_4111A0+21Aj
		mov	edx, [ebp+var_50]
		mov	ecx, [ebp+var_4C]
		mov	bl, [ebp+var_1D]
		mov	eax, dword_42D950[edx*4]
		mov	[ecx+eax+2Eh], bl
		mov	eax, dword_42D950[edx*4]
		or	byte ptr [ecx+eax+2Dh],	4
		inc	esi
		jmp	short loc_4114C8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411518:				; CODE XREF: sub_4111A0+294j
					; sub_4111A0+2D4j
		call	ds:GetLastError
		mov	[ebp+var_5C], eax

loc_411521:				; CODE XREF: sub_4111A0+75j
					; sub_4111A0+1C2j ...
		cmp	[ebp+var_38], bl

loc_411524:				; CODE XREF: sub_4111A0+32Fj
		jz	short loc_411530
		mov	eax, [ebp+var_44]
		and	dword ptr [eax+350h], 0FFFFFFFDh

loc_411530:				; CODE XREF: sub_4111A0:loc_411524j
		mov	eax, [ebp+arg_0]
		lea	esi, [ebp+var_5C]
		mov	ecx, [ebp+var_4]
		mov	edi, eax
		xor	ecx, ebp
		movsd
		movsd
		movsd
		pop	edi
		pop	esi
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_4111A0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41154C	proc near		; CODE XREF: sub_411A0D+B9p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		xor	eax, eax
		push	edi
		mov	edi, esi
		stosd
		stosd
		stosd
		mov	edi, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		add	eax, edi
		mov	[ebp+var_4], eax
		cmp	edi, eax
		jnb	short loc_4115AD

loc_41156E:				; CODE XREF: sub_41154C+55j
		movzx	ebx, word ptr [edi]
		push	ebx		; Buffer
		call	sub_419CB2
		pop	ecx
		cmp	ax, bx
		jnz	short loc_4115A5
		add	dword ptr [esi+4], 2
		cmp	ebx, 0Ah
		jnz	short loc_41159B
		push	0Dh
		pop	ebx
		push	ebx		; Buffer
		call	sub_419CB2
		pop	ecx
		cmp	ax, bx
		jnz	short loc_4115A5
		inc	dword ptr [esi+4]
		inc	dword ptr [esi+8]

loc_41159B:				; CODE XREF: sub_41154C+38j
		add	edi, 2
		cmp	edi, [ebp+var_4]
		jb	short loc_41156E
		jmp	short loc_4115AD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4115A5:				; CODE XREF: sub_41154C+2Fj
					; sub_41154C+47j
		call	ds:GetLastError
		mov	[esi], eax

loc_4115AD:				; CODE XREF: sub_41154C+20j
					; sub_41154C+57j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_41154C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4115B6	proc near		; CODE XREF: sub_411A0D+95p

Mode		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	esi
		call	sub_419C5C
		pop	ecx
		test	eax, eax
		jz	short loc_411621
		mov	edi, esi
		and	esi, 3Fh
		sar	edi, 6
		imul	esi, 38h
		mov	eax, dword_42D950[edi*4]
		cmp	byte ptr [eax+esi+28h],	0
		jge	short loc_411621
		call	sub_40F3FC
		mov	eax, [eax+4Ch]
		cmp	dword ptr [eax+0A8h], 0
		jnz	short loc_411604
		mov	eax, dword_42D950[edi*4]
		cmp	byte ptr [eax+esi+29h],	0
		jz	short loc_411621

loc_411604:				; CODE XREF: sub_4115B6+3Ej
		lea	eax, [ebp+Mode]
		push	eax		; lpMode
		mov	eax, dword_42D950[edi*4]
		push	dword ptr [eax+esi+18h]	; hConsoleHandle
		call	ds:GetConsoleMode
		test	eax, eax
		jz	short loc_411621
		mov	al, 1
		jmp	short loc_411623
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411621:				; CODE XREF: sub_4115B6+14j
					; sub_4115B6+2Dj ...
		xor	al, al

loc_411623:				; CODE XREF: sub_4115B6+69j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_4115B6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_411629	proc near		; CODE XREF: sub_411A0D+130p

var_140C	= dword	ptr -140Ch
NumberOfBytesWritten= dword ptr	-1408h
Buffer		= dword	ptr -1404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, 140Ch
		call	sub_4061F0
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		mov	eax, ecx
		mov	edx, [ebp+arg_C]
		and	ecx, 3Fh
		sar	eax, 6
		imul	ecx, 38h
		push	ebx
		mov	ebx, [ebp+arg_0]
		mov	eax, dword_42D950[eax*4]
		push	esi
		push	edi
		mov	edi, ebx
		mov	eax, [eax+ecx+18h]
		mov	ecx, [ebp+arg_8]
		add	edx, ecx
		mov	[ebp+NumberOfBytesWritten], eax
		xor	eax, eax
		stosd
		mov	[ebp+var_140C],	edx
		stosd
		stosd
		cmp	ecx, edx
		jnb	short loc_4116F3
		mov	edi, [ebp+NumberOfBytesWritten]

loc_411686:				; CODE XREF: sub_411629+BEj
		lea	esi, [ebp+Buffer]

loc_41168C:				; CODE XREF: sub_411629+7Dj
		cmp	ecx, edx
		jnb	short loc_4116A8
		mov	al, [ecx]
		inc	ecx
		cmp	al, 0Ah
		jnz	short loc_41169E
		inc	dword ptr [ebx+8]
		mov	byte ptr [esi],	0Dh
		inc	esi

loc_41169E:				; CODE XREF: sub_411629+6Cj
		mov	[esi], al
		inc	esi
		lea	eax, [ebp-5]
		cmp	esi, eax
		jb	short loc_41168C

loc_4116A8:				; CODE XREF: sub_411629+65j
		lea	eax, [ebp+Buffer]
		mov	[ebp+arg_8], ecx
		sub	esi, eax
		lea	eax, [ebp+NumberOfBytesWritten]
		push	0		; lpOverlapped
		push	eax		; lpNumberOfBytesWritten
		push	esi		; nNumberOfBytesToWrite
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	edi		; hFile
		call	ds:WriteFile
		test	eax, eax
		jz	short loc_4116EB
		mov	eax, [ebp+NumberOfBytesWritten]
		add	[ebx+4], eax
		cmp	eax, esi
		jb	short loc_4116F3
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+var_140C]
		cmp	ecx, edx
		jb	short loc_411686
		jmp	short loc_4116F3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4116EB:				; CODE XREF: sub_411629+A4j
		call	ds:GetLastError
		mov	[ebx], eax

loc_4116F3:				; CODE XREF: sub_411629+55j
					; sub_411629+B1j ...
		mov	ecx, [ebp+var_4]
		mov	eax, ebx
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_411629	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_411706	proc near		; CODE XREF: sub_411A0D+110p

var_1410	= dword	ptr -1410h
NumberOfBytesWritten= dword ptr	-140Ch
hFile		= dword	ptr -1408h
Buffer		= dword	ptr -1404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, 1410h
		call	sub_4061F0
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		mov	eax, ecx
		mov	edx, [ebp+arg_C]
		and	ecx, 3Fh
		sar	eax, 6
		imul	ecx, 38h
		push	ebx
		mov	ebx, [ebp+arg_0]
		mov	eax, dword_42D950[eax*4]
		push	esi
		push	edi
		mov	edi, ebx
		mov	eax, [eax+ecx+18h]
		mov	ecx, [ebp+arg_8]
		add	edx, ecx
		mov	[ebp+hFile], eax
		xor	eax, eax
		stosd
		mov	[ebp+var_1410],	edx
		stosd
		stosd
		jmp	short loc_4117D0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41175B:				; CODE XREF: sub_411706+CCj
		lea	esi, [ebp+Buffer]

loc_411761:				; CODE XREF: sub_411706+82j
		cmp	ecx, edx
		jnb	short loc_41178A
		movzx	eax, word ptr [ecx]
		add	ecx, 2
		cmp	eax, 0Ah
		jnz	short loc_41177D
		add	dword ptr [ebx+8], 2
		push	0Dh
		pop	edi
		mov	[esi], di
		add	esi, 2

loc_41177D:				; CODE XREF: sub_411706+68j
		mov	[esi], ax
		add	esi, 2
		lea	eax, [ebp-6]
		cmp	esi, eax
		jb	short loc_411761

loc_41178A:				; CODE XREF: sub_411706+5Dj
		mov	edi, [ebp+hFile]
		lea	eax, [ebp+Buffer]
		sub	esi, eax
		mov	[ebp+arg_8], ecx
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesWritten]
		and	esi, 0FFFFFFFEh
		push	eax		; lpNumberOfBytesWritten
		push	esi		; nNumberOfBytesToWrite
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	edi		; hFile
		call	ds:WriteFile
		test	eax, eax
		jz	short loc_4117D6
		mov	eax, [ebp+NumberOfBytesWritten]
		add	[ebx+4], eax
		cmp	eax, esi
		jb	short loc_4117DE
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+var_1410]

loc_4117D0:				; CODE XREF: sub_411706+53j
		cmp	ecx, edx
		jb	short loc_41175B
		jmp	short loc_4117DE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4117D6:				; CODE XREF: sub_411706+B2j
		call	ds:GetLastError
		mov	[ebx], eax

loc_4117DE:				; CODE XREF: sub_411706+BFj
					; sub_411706+CEj
		mov	ecx, [ebp+var_4]
		mov	eax, ebx
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_411706	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4117F1	proc near		; CODE XREF: sub_411A0D+120p

var_1418	= dword	ptr -1418h
NumberOfBytesWritten= dword ptr	-1414h
hFile		= dword	ptr -1410h
var_140C	= dword	ptr -140Ch
MultiByteStr	= byte ptr -1408h
WideCharStr	= word ptr -6B0h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, 1418h
		call	sub_4061F0
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		mov	eax, ecx
		mov	edx, [ebp+arg_8]
		and	ecx, 3Fh
		sar	eax, 6
		imul	ecx, 38h
		push	ebx
		push	esi
		mov	eax, dword_42D950[eax*4]
		mov	esi, [ebp+arg_0]
		push	edi
		mov	edi, esi
		mov	eax, [eax+ecx+18h]
		mov	ecx, [ebp+arg_C]
		mov	[ebp+hFile], eax
		add	ecx, edx
		xor	eax, eax
		mov	[ebp+var_140C],	ecx
		stosd
		stosd
		stosd
		mov	edi, edx
		cmp	edx, ecx
		jnb	loc_411912

loc_41184E:				; CODE XREF: sub_4117F1+111j
		mov	esi, [ebp+var_140C]
		lea	eax, [ebp+WideCharStr]

loc_41185A:				; CODE XREF: sub_4117F1+8Cj
		cmp	edi, esi
		jnb	short loc_41187F
		movzx	ecx, word ptr [edi]
		add	edi, 2
		cmp	ecx, 0Ah
		jnz	short loc_411872
		push	0Dh
		pop	edx
		mov	[eax], dx
		add	eax, 2

loc_411872:				; CODE XREF: sub_4117F1+76j
		mov	[eax], cx
		add	eax, 2
		lea	ecx, [ebp+var_8]
		cmp	eax, ecx
		jb	short loc_41185A

loc_41187F:				; CODE XREF: sub_4117F1+6Bj
		push	0		; int
		push	0		; int
		push	0D55h		; cchMultiByte
		lea	ecx, [ebp+MultiByteStr]
		push	ecx		; lpMultiByteStr
		lea	ecx, [ebp+WideCharStr]
		sub	eax, ecx
		sar	eax, 1
		push	eax		; cchWideChar
		mov	eax, ecx
		push	eax		; lpWideCharStr
		push	0		; int
		push	0FDE9h		; CodePage
		call	sub_415578
		mov	esi, [ebp+arg_0]
		add	esp, 20h
		mov	[ebp+var_1418],	eax
		test	eax, eax
		jz	short loc_41190A
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_4118F4

loc_4118BF:				; CODE XREF: sub_4117F1+101j
		push	0		; lpOverlapped
		lea	ecx, [ebp+NumberOfBytesWritten]
		sub	eax, ebx
		push	ecx		; lpNumberOfBytesWritten
		push	eax		; nNumberOfBytesToWrite
		lea	eax, [ebp+MultiByteStr]
		add	eax, ebx
		push	eax		; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:WriteFile
		test	eax, eax
		jz	short loc_41190A
		add	ebx, [ebp+NumberOfBytesWritten]
		mov	eax, [ebp+var_1418]
		cmp	ebx, eax
		jb	short loc_4118BF

loc_4118F4:				; CODE XREF: sub_4117F1+CCj
		mov	eax, edi
		sub	eax, [ebp+arg_8]
		mov	[esi+4], eax
		cmp	edi, [ebp+var_140C]
		jb	loc_41184E
		jmp	short loc_411912
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41190A:				; CODE XREF: sub_4117F1+C6j
					; sub_4117F1+F1j
		call	ds:GetLastError
		mov	[esi], eax

loc_411912:				; CODE XREF: sub_4117F1+57j
					; sub_4117F1+117j
		mov	ecx, [ebp+var_4]
		mov	eax, esi
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_4117F1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_411925	proc near		; CODE XREF: sub_40AD89+38p
					; sub_40B80B+10Ap ...

; FUNCTION CHUNK AT 004119EC SIZE 00000021 BYTES

		push	10h
		push	offset dword_42B360
		call	sub_405FF0
		mov	esi, [ebp+8]
		cmp	esi, 0FFFFFFFEh
		jnz	short loc_411951
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 9
		jmp	loc_411A04
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411951:				; CODE XREF: sub_411925+12j
		test	esi, esi
		js	loc_4119EC
		cmp	esi, dword_42DB50
		jnb	loc_4119EC
		mov	ebx, esi
		sar	ebx, 6
		mov	eax, esi
		and	eax, 3Fh
		imul	ecx, eax, 38h
		mov	[ebp-20h], ecx
		mov	eax, dword_42D950[ebx*4]
		test	byte ptr [eax+ecx+28h],	1
		jz	short loc_4119EC
		push	esi
		call	sub_416F12
		pop	ecx
		or	edi, 0FFFFFFFFh
		mov	[ebp-1Ch], edi
		and	dword ptr [ebp-4], 0
		mov	eax, dword_42D950[ebx*4]
		mov	ecx, [ebp-20h]
		test	byte ptr [eax+ecx+28h],	1
		jnz	short loc_4119BA
		call	sub_40BD71
		mov	dword ptr [eax], 9
		call	sub_40BD5E
		and	dword ptr [eax], 0
		jmp	short loc_4119CE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4119BA:				; CODE XREF: sub_411925+7Ej
		push	dword ptr [ebp+10h]
		push	dword ptr [ebp+0Ch]
		push	esi
		call	sub_411A0D
		add	esp, 0Ch
		mov	edi, eax
		mov	[ebp-1Ch], edi

loc_4119CE:				; CODE XREF: sub_411925+93j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_4119E4
		mov	eax, edi
		jmp	short loc_411A07
sub_411925	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4119DE	proc near		; DATA XREF: .rdata:0042B378o
		mov	esi, [ebp+8]
		mov	edi, [ebp-1Ch]
sub_4119DE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4119E4	proc near		; CODE XREF: sub_411925+B0p
		push	esi
		call	sub_416F35
		pop	ecx
		retn
sub_4119E4	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_411925

loc_4119EC:				; CODE XREF: sub_411925+2Ej
					; sub_411925+3Aj ...
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 9
		call	sub_409E35

loc_411A04:				; CODE XREF: sub_411925+27j
		or	eax, 0FFFFFFFFh

loc_411A07:				; CODE XREF: sub_411925+B7j
		call	sub_406036
		retn
; END OF FUNCTION CHUNK	FOR sub_411925

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_411A0D	proc near		; CODE XREF: sub_411925+9Cp

var_28		= dword	ptr -28h
NumberOfBytesWritten= dword ptr	-24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
nNumberOfBytesToWrite= dword ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
lpBuffer	= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	ecx, [ebp+arg_8]
		mov	eax, [ebp+arg_4]
		mov	[ebp+lpBuffer],	eax
		mov	[ebp+nNumberOfBytesToWrite], ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		test	ecx, ecx
		jz	loc_411BE8
		test	eax, eax
		jnz	short loc_411A53

loc_411A33:				; CODE XREF: sub_411A0D+74j
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35

loc_411A4B:				; CODE XREF: sub_411A0D+19Aj
					; sub_411A0D+1A6j ...
		or	eax, 0FFFFFFFFh
		jmp	loc_411BEA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411A53:				; CODE XREF: sub_411A0D+24j
		mov	eax, esi
		mov	edx, esi
		sar	edx, 6
		and	eax, 3Fh
		imul	edi, eax, 38h
		mov	[ebp+var_8], edx
		mov	edx, dword_42D950[edx*4]
		mov	[ebp+var_C], edi
		mov	bl, [edx+edi+29h]
		cmp	bl, 2
		jz	short loc_411A7B
		cmp	bl, 1
		jnz	short loc_411A83

loc_411A7B:				; CODE XREF: sub_411A0D+67j
		mov	eax, ecx
		not	eax
		test	al, 1
		jz	short loc_411A33

loc_411A83:				; CODE XREF: sub_411A0D+6Cj
		test	byte ptr [edx+edi+28h],	20h
		jz	short loc_411A99
		push	2
		push	0
		push	0
		push	esi
		call	sub_413137
		add	esp, 10h

loc_411A99:				; CODE XREF: sub_411A0D+7Bj
		xor	eax, eax
		lea	edi, [ebp+var_1C]
		stosd
		push	esi
		stosd
		stosd
		call	sub_4115B6
		pop	ecx
		test	al, al
		jz	short loc_411AEB
		test	bl, bl
		jz	short loc_411AD5
		dec	bl
		cmp	bl, 1
		mov	ebx, [ebp+lpBuffer]
		ja	loc_411B7A
		push	[ebp+nNumberOfBytesToWrite]
		lea	eax, [ebp+var_28]
		push	ebx
		push	eax
		call	sub_41154C
		add	esp, 0Ch

loc_411ACE:				; CODE XREF: sub_411A0D+DCj
		mov	esi, eax
		jmp	loc_411B74
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411AD5:				; CODE XREF: sub_411A0D+A1j
		push	[ebp+nNumberOfBytesToWrite]
		mov	ebx, [ebp+lpBuffer]
		lea	eax, [ebp+var_28]
		push	ebx
		push	esi
		push	eax
		call	sub_4111A0

loc_411AE6:				; CODE XREF: sub_411A0D+115j
					; sub_411A0D+125j ...
		add	esp, 10h
		jmp	short loc_411ACE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411AEB:				; CODE XREF: sub_411A0D+9Dj
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+var_C]
		mov	eax, dword_42D950[ecx*4]
		cmp	byte ptr [eax+edx+28h],	0
		jge	short loc_411B44
		movsx	eax, bl
		mov	ebx, [ebp+lpBuffer]
		sub	eax, 0
		jz	short loc_411B34
		sub	eax, 1
		jz	short loc_411B24
		sub	eax, 1
		jnz	short loc_411B80
		push	[ebp+nNumberOfBytesToWrite]
		lea	eax, [ebp+var_28]
		push	ebx
		push	esi
		push	eax
		call	sub_411706
		jmp	short loc_411AE6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411B24:				; CODE XREF: sub_411A0D+100j
		push	[ebp+nNumberOfBytesToWrite]
		lea	eax, [ebp+var_28]
		push	ebx
		push	esi
		push	eax
		call	sub_4117F1
		jmp	short loc_411AE6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411B34:				; CODE XREF: sub_411A0D+FBj
		push	[ebp+nNumberOfBytesToWrite]
		lea	eax, [ebp+var_28]
		push	ebx
		push	esi
		push	eax
		call	sub_411629
		jmp	short loc_411AE6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411B44:				; CODE XREF: sub_411A0D+F0j
		mov	ecx, [eax+edx+18h]
		lea	edi, [ebp+var_28]
		mov	ebx, [ebp+lpBuffer]
		xor	eax, eax
		stosd
		push	0		; lpOverlapped
		stosd
		stosd
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesWritten
		push	[ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		push	ebx		; lpBuffer
		push	ecx		; hFile
		call	ds:WriteFile
		test	eax, eax
		jnz	short loc_411B71
		call	ds:GetLastError
		mov	[ebp+var_28], eax

loc_411B71:				; CODE XREF: sub_411A0D+159j
		lea	esi, [ebp+var_28]

loc_411B74:				; CODE XREF: sub_411A0D+C3j
		lea	edi, [ebp+var_1C]
		movsd
		movsd
		movsd

loc_411B7A:				; CODE XREF: sub_411A0D+ABj
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+var_C]

loc_411B80:				; CODE XREF: sub_411A0D+105j
		mov	eax, [ebp+var_18]
		test	eax, eax
		jnz	short loc_411BE3
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	short loc_411BB8
		push	5
		pop	esi
		cmp	eax, esi
		jnz	short loc_411BAC
		call	sub_40BD71
		mov	dword ptr [eax], 9
		call	sub_40BD5E
		mov	[eax], esi
		jmp	loc_411A4B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411BAC:				; CODE XREF: sub_411A0D+186j
		push	eax
		call	sub_40BD3B
		pop	ecx
		jmp	loc_411A4B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411BB8:				; CODE XREF: sub_411A0D+17Fj
		mov	eax, dword_42D950[ecx*4]
		test	byte ptr [eax+edx+28h],	40h
		jz	short loc_411BCB
		cmp	byte ptr [ebx],	1Ah
		jz	short loc_411BE8

loc_411BCB:				; CODE XREF: sub_411A0D+1B7j
		call	sub_40BD71
		mov	dword ptr [eax], 1Ch
		call	sub_40BD5E
		and	dword ptr [eax], 0
		jmp	loc_411A4B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411BE3:				; CODE XREF: sub_411A0D+178j
		sub	eax, [ebp+var_14]
		jmp	short loc_411BEA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411BE8:				; CODE XREF: sub_411A0D+1Cj
					; sub_411A0D+1BCj
		xor	eax, eax

loc_411BEA:				; CODE XREF: sub_411A0D+41j
					; sub_411A0D+1D9j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_411A0D	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_411D7B

loc_411BF1:				; CODE XREF: sub_411D7B+6j
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		test	eax, eax
		jnz	short loc_411C16
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		jmp	loc_411D78
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411C16:				; CODE XREF: sub_411D7B-17Fj
		mov	eax, [eax+0Ch]
		push	ebx
		nop
		xor	ebx, ebx
		shr	eax, 0Dh
		inc	ebx
		test	al, bl
		jz	loc_411D74
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		nop
		shr	eax, 0Ch
		test	al, bl
		jnz	loc_411D74
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		nop
		shr	eax, 1
		test	al, bl
		mov	eax, [ebp+arg_0]
		jz	short loc_411C59
		push	10h
		pop	ecx
		add	eax, 0Ch
		lock or	[eax], ecx
		jmp	loc_411D74
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411C59:				; CODE XREF: sub_411D7B-132j
		add	eax, 0Ch
		lock or	[eax], ebx
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		nop
		test	eax, 4C0h
		jnz	short loc_411C76
		push	[ebp+arg_0]
		call	sub_41323F
		pop	ecx

loc_411C76:				; CODE XREF: sub_411D7B-110j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[eax], ecx
		mov	esi, [ebp+arg_0]
		push	dword ptr [esi+18h]
		push	dword ptr [esi+4]
		push	esi
		call	sub_411027
		pop	ecx
		push	eax
		call	sub_412AE0
		mov	[esi+8], eax
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+8]
		test	edx, edx
		jz	loc_411D59
		cmp	edx, 0FFFFFFFFh
		jz	loc_411D59
		mov	eax, [eax+0Ch]
		nop
		test	al, 6
		jnz	short loc_411D18
		push	[ebp+arg_0]
		call	sub_411027
		pop	ecx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_411CFE
		push	[ebp+arg_0]
		call	sub_411027
		pop	ecx
		cmp	eax, 0FFFFFFFEh
		jz	short loc_411CFE
		mov	esi, [ebp+arg_0]
		push	edi
		push	esi
		call	sub_411027
		mov	edi, eax
		push	esi
		sar	edi, 6
		call	sub_411027
		pop	ecx
		and	eax, 3Fh
		pop	ecx
		imul	ecx, eax, 38h
		mov	eax, dword_42D950[edi*4]
		pop	edi
		add	eax, ecx
		jmp	short loc_411D03
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411CFE:				; CODE XREF: sub_411D7B-B6j
					; sub_411D7B-A8j
		mov	eax, offset dword_42C2C8

loc_411D03:				; CODE XREF: sub_411D7B-7Fj
		mov	al, [eax+28h]
		and	al, 82h
		cmp	al, 82h
		jnz	short loc_411D18
		mov	eax, [ebp+arg_0]
		push	20h
		pop	ecx
		add	eax, 0Ch
		lock or	[eax], ecx

loc_411D18:				; CODE XREF: sub_411D7B-C4j
					; sub_411D7B-71j
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+18h], 200h
		jnz	short loc_411D4A
		mov	eax, [eax+0Ch]
		nop
		shr	eax, 6
		test	al, bl
		jz	short loc_411D47
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		nop
		shr	eax, 8
		test	al, bl
		jnz	short loc_411D47
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+18h], 1000h

loc_411D47:				; CODE XREF: sub_411D7B-4Ej
					; sub_411D7B-40j
		mov	eax, [ebp+arg_0]

loc_411D4A:				; CODE XREF: sub_411D7B-59j
		dec	dword ptr [eax+8]
		mov	ecx, [eax]
		mov	dl, [ecx]
		inc	ecx
		mov	[eax], ecx
		movzx	eax, dl
		jmp	short loc_411D77
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411D59:				; CODE XREF: sub_411D7B-D9j
					; sub_411D7B-D0j
		xor	ecx, ecx
		test	edx, edx
		setnz	cl
		add	eax, 0Ch
		lea	ecx, ds:8[ecx*8]
		lock or	[eax], ecx
		mov	ecx, [ebp+arg_0]
		and	dword ptr [ecx+8], 0

loc_411D74:				; CODE XREF: sub_411D7B-158j
					; sub_411D7B-146j ...
		or	eax, 0FFFFFFFFh

loc_411D77:				; CODE XREF: sub_411D7B-24j
		pop	ebx

loc_411D78:				; CODE XREF: sub_411D7B-16Aj
		pop	esi
		pop	ebp
		retn
; END OF FUNCTION CHUNK	FOR sub_411D7B

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_411D7B	proc near		; CODE XREF: sub_40AE96+28p
					; sub_40B154+15Ep

arg_0		= dword	ptr  8

; FUNCTION CHUNK AT 00411BF1 SIZE 0000018A BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_411BF1
sub_411D7B	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_41235F

loc_411D86:				; CODE XREF: sub_41235F+6j
		push	10h
		push	offset dword_42B380
		call	sub_405FF0
		cmp	[ebp+arg_0], 0
		jnz	short loc_411DAF
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	edx, 0FFFFFFFFh
		mov	eax, edx
		jmp	short loc_411DE6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411DAF:				; CODE XREF: sub_41235F-5C9j
		xor	esi, esi
		mov	[ebp+var_20], esi
		mov	[ebp+var_1C], esi
		push	[ebp+arg_0]
		call	sub_40AA4F
		pop	ecx
		mov	[ebp+var_4], esi
		push	[ebp+arg_0]
		call	sub_411DFC
		pop	ecx
		mov	esi, eax
		mov	[ebp+var_20], esi
		mov	edi, edx
		mov	[ebp+var_1C], edi
		mov	[ebp+var_4], 0FFFFFFFEh
		call	sub_411DF2
		mov	eax, esi
		mov	edx, edi

loc_411DE6:				; CODE XREF: sub_41235F-5B2j
		call	sub_406036
		retn
; END OF FUNCTION CHUNK	FOR sub_41235F

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_411DEC	proc near		; DATA XREF: .rdata:0042B398o
		mov	edi, [ebp-1Ch]
		mov	esi, [ebp-20h]
sub_411DEC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_411DF2	proc near		; CODE XREF: sub_41235F-582p
		push	dword ptr [ebp+8]
		call	sub_40AA63
		pop	ecx
		retn
sub_411DF2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_411DFC	proc near		; CODE XREF: sub_41235F-599p
					; sub_41236A+6j

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		cmp	[ebp+arg_0], 0
		jnz	short loc_411E24
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		or	edx, eax
		jmp	loc_411F81
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411E24:				; CODE XREF: sub_411DFC+Cj
		push	ebx
		push	edi
		push	[ebp+arg_0]
		call	sub_411027
		pop	ecx
		mov	ecx, [ebp+arg_0]
		xor	ebx, ebx
		mov	edi, eax
		cmp	[ecx+8], ebx
		jge	short loc_411E3E
		mov	[ecx+8], ebx

loc_411E3E:				; CODE XREF: sub_411DFC+3Dj
		push	esi
		push	1
		push	ebx
		push	ebx
		push	edi
		call	sub_41311C
		mov	ecx, edx
		add	esp, 10h
		mov	[ebp+var_8], ecx
		mov	esi, eax
		mov	[ebp+var_14], esi
		cmp	ecx, ebx
		jg	short loc_411E68
		jl	loc_411F2A
		cmp	esi, ebx
		jb	loc_411F2A

loc_411E68:				; CODE XREF: sub_411DFC+5Cj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		nop
		test	al, 0C0h
		jnz	short loc_411E87
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		cdq
		sub	esi, eax
		mov	eax, esi
		sbb	ecx, edx
		mov	edx, ecx
		jmp	loc_411F7E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411E87:				; CODE XREF: sub_411DFC+75j
		mov	eax, edi
		and	edi, 3Fh
		sar	eax, 6
		imul	ecx, edi, 38h
		mov	[ebp+var_C], eax
		mov	eax, dword_42D950[eax*4]
		mov	[ebp+var_10], ecx
		mov	al, [ecx+eax+29h]
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [ebp+var_4], al
		mov	eax, [ecx]
		sub	eax, [ecx+4]
		mov	ecx, [ecx+0Ch]
		cdq
		mov	edi, eax
		mov	ebx, edx
		nop
		test	cl, 3
		jz	short loc_411F11
		cmp	byte ptr [ebp+var_4], 1
		mov	ecx, [ebp+var_C]
		mov	edx, [ebp+var_10]
		jnz	short loc_411EEA
		mov	eax, dword_42D950[ecx*4]
		test	byte ptr [edx+eax+2Dh],	2
		jz	short loc_411EEA
		push	[ebp+var_8]
		push	esi
		push	[ebp+arg_0]
		call	sub_412146
		add	esp, 0Ch
		jmp	loc_411F7E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411EEA:				; CODE XREF: sub_411DFC+CAj
					; sub_411DFC+D8j
		mov	eax, dword_42D950[ecx*4]
		cmp	byte ptr [edx+eax+28h],	0
		jge	short loc_411F31
		mov	esi, [ebp+arg_0]
		push	[ebp+var_4]
		push	dword ptr [esi]
		push	dword ptr [esi+4]
		call	sub_4122E1
		add	esp, 0Ch
		add	edi, eax
		adc	ebx, edx
		jmp	short loc_411F34
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411F11:				; CODE XREF: sub_411DFC+BEj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		nop
		shr	eax, 2
		test	al, 1
		jnz	short loc_411F31
		call	sub_40BD71
		mov	dword ptr [eax], 16h

loc_411F2A:				; CODE XREF: sub_411DFC+5Ej
					; sub_411DFC+66j
		or	eax, 0FFFFFFFFh
		or	edx, eax
		jmp	short loc_411F7E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411F31:				; CODE XREF: sub_411DFC+FAj
					; sub_411DFC+121j
		mov	esi, [ebp+arg_0]

loc_411F34:				; CODE XREF: sub_411DFC+113j
		mov	ecx, [ebp+var_14]
		mov	eax, ecx
		mov	edx, [ebp+var_8]
		or	eax, edx
		jnz	short loc_411F44
		mov	edx, ebx
		jmp	short loc_411F7C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411F44:				; CODE XREF: sub_411DFC+142j
		mov	eax, [esi+0Ch]
		nop
		test	al, 1
		jz	short loc_411F5D
		push	ebx
		push	edi
		push	edx
		push	ecx
		push	[ebp+arg_0]
		call	sub_411F85
		add	esp, 14h
		jmp	short loc_411F7E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411F5D:				; CODE XREF: sub_411DFC+14Ej
		cmp	byte ptr [ebp+var_4], 1
		jnz	short loc_411F78
		push	0
		push	2
		push	ebx
		push	edi
		call	sub_41BB70
		mov	ecx, [ebp+var_14]
		mov	ebx, edx
		mov	edx, [ebp+var_8]
		mov	edi, eax

loc_411F78:				; CODE XREF: sub_411DFC+165j
		add	edi, ecx
		adc	edx, ebx

loc_411F7C:				; CODE XREF: sub_411DFC+146j
		mov	eax, edi

loc_411F7E:				; CODE XREF: sub_411DFC+86j
					; sub_411DFC+E9j ...
		pop	esi
		pop	edi
		pop	ebx

loc_411F81:				; CODE XREF: sub_411DFC+23j
		mov	esp, ebp
		pop	ebp
		retn
sub_411DFC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_411F85	proc near		; CODE XREF: sub_411DFC+157p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	ebx
		push	esi
		push	edi
		push	[ebp+arg_0]
		call	sub_411027
		mov	esi, eax
		xor	edi, edi
		pop	ecx
		sar	eax, 6
		mov	ecx, esi
		and	ecx, 3Fh
		mov	[ebp+var_20], eax
		imul	ecx, 38h
		mov	[ebp+var_4], edi
		mov	eax, dword_42D950[eax*4]
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], ecx
		mov	cl, [eax+ecx+29h]
		xor	eax, eax
		inc	eax
		mov	byte ptr [ebp+var_14], cl
		cmp	cl, al
		jnz	short loc_411FD1
		push	2
		pop	ebx
		mov	[ebp+var_C], ebx
		jmp	short loc_411FD4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411FD1:				; CODE XREF: sub_411F85+42j
		mov	[ebp+var_C], eax

loc_411FD4:				; CODE XREF: sub_411F85+4Aj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_10], ecx
		test	ecx, ecx
		jnz	short loc_411FEC
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		jmp	loc_41213F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_411FEC:				; CODE XREF: sub_411F85+5Aj
		mov	ecx, [eax]
		sub	ecx, [eax+4]
		mov	ebx, [ebp+var_18]
		mov	eax, ecx
		cdq
		mov	ecx, eax
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_10]
		cdq
		add	ecx, eax
		mov	eax, [ebp+var_8]
		mov	[ebp+var_10], ecx
		adc	eax, edx
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_8], eax
		cmp	byte ptr [edx+ebx+28h],	0
		mov	ebx, [ebp+var_C]
		jl	short loc_41202E
		push	[ebp+var_4]
		push	ebx
		push	eax
		push	ecx
		call	sub_41BB70
		push	[ebp+var_4]
		push	ebx
		jmp	loc_412126
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41202E:				; CODE XREF: sub_411F85+93j
		push	2
		push	edi
		push	edi
		push	esi
		call	sub_41311C
		add	esp, 10h
		cmp	eax, [ebp+arg_4]
		jnz	short loc_41208C
		cmp	edx, [ebp+arg_8]
		jnz	short loc_41208C
		mov	esi, [ebp+arg_0]
		push	[ebp+var_14]
		mov	eax, [ebp+var_10]
		mov	ecx, [esi+4]
		add	eax, ecx
		push	eax
		push	ecx
		call	sub_4122E1
		mov	ebx, eax
		add	esp, 0Ch
		add	ebx, [ebp+var_10]
		mov	eax, [esi+0Ch]
		adc	edx, [ebp+var_8]
		nop
		xor	ecx, ecx
		shr	eax, 5
		inc	ecx
		test	al, cl
		jz	loc_412113
		mov	al, byte ptr [ebp+var_14]
		cmp	al, cl
		jz	short loc_412082
		cmp	al, 2
		jnz	short loc_412085

loc_412082:				; CODE XREF: sub_411F85+F7j
		push	2
		pop	ecx

loc_412085:				; CODE XREF: sub_411F85+FBj
		add	ebx, ecx
		jmp	loc_412111
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41208C:				; CODE XREF: sub_411F85+B9j
					; sub_411F85+BEj
		push	edi
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	esi
		call	sub_41311C
		and	eax, edx
		add	esp, 10h
		or	edx, 0FFFFFFFFh
		cmp	eax, edx
		jnz	short loc_4120AC
		mov	eax, edx
		jmp	loc_41213F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4120AC:				; CODE XREF: sub_411F85+11Ej
		cmp	[ebp+var_8], edi
		jg	short loc_4120E0
		mov	ebx, 200h
		jl	short loc_4120BD
		cmp	[ebp+var_10], ebx
		ja	short loc_4120E0

loc_4120BD:				; CODE XREF: sub_411F85+131j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		nop
		xor	ecx, ecx
		shr	eax, 6
		inc	ecx
		test	al, cl
		jz	short loc_4120E0
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		nop
		shr	eax, 8
		test	al, cl
		jnz	short loc_4120E0
		mov	edx, edi
		jmp	short loc_4120E9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4120E0:				; CODE XREF: sub_411F85+12Aj
					; sub_411F85+136j ...
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+18h]
		cdq
		mov	ebx, eax

loc_4120E9:				; CODE XREF: sub_411F85+159j
		mov	ecx, [ebp+var_20]
		mov	eax, [ebp+var_18]
		mov	ecx, dword_42D950[ecx*4]
		test	byte ptr [ecx+eax+28h],	4
		jz	short loc_412113
		mov	cl, byte ptr [ebp+var_14]
		xor	eax, eax
		inc	eax
		cmp	cl, al
		jz	short loc_41210C
		cmp	cl, 2
		jnz	short loc_41210F

loc_41210C:				; CODE XREF: sub_411F85+180j
		push	2
		pop	eax

loc_41210F:				; CODE XREF: sub_411F85+185j
		add	ebx, eax

loc_412111:				; CODE XREF: sub_411F85+102j
		adc	edx, edi

loc_412113:				; CODE XREF: sub_411F85+ECj
					; sub_411F85+176j
		push	[ebp+var_4]
		push	[ebp+var_C]
		push	edx
		push	ebx
		call	sub_41BB70
		push	[ebp+var_4]
		push	[ebp+var_C]

loc_412126:				; CODE XREF: sub_411F85+A4j
		push	[ebp+arg_10]
		mov	edi, edx
		mov	esi, eax
		push	[ebp+arg_C]
		call	sub_41BB70
		sub	eax, esi
		sbb	edx, edi
		add	eax, [ebp+arg_4]
		adc	edx, [ebp+arg_8]

loc_41213F:				; CODE XREF: sub_411F85+62j
					; sub_411F85+122j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_411F85	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_412146	proc near		; CODE XREF: sub_411DFC+E1p

var_1018	= dword	ptr -1018h
var_1014	= dword	ptr -1014h
NumberOfBytesRead= dword ptr -1010h
var_100C	= dword	ptr -100Ch
var_1008	= dword	ptr -1008h
Buffer		= dword	ptr -1004h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, 1018h
		call	sub_4061F0
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	[ebp+arg_0]
		call	sub_411027
		pop	ecx
		mov	ecx, [ebp+arg_0]
		mov	ebx, eax
		cmp	dword ptr [ecx+8], 0
		jnz	short loc_41217F
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		jmp	loc_4122D2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41217F:				; CODE XREF: sub_412146+2Cj
		mov	eax, [ecx]
		sub	eax, [ecx+4]
		push	esi
		push	edi
		push	0
		cdq
		push	2
		push	edx
		push	eax
		call	sub_41BB70
		mov	ecx, ebx
		mov	[ebp+var_1008],	eax
		and	ecx, 3Fh
		mov	[ebp+var_1014],	edx
		mov	esi, ebx
		imul	edi, ecx, 38h
		sar	esi, 6
		push	0
		mov	ecx, dword_42D950[esi*4]
		push	dword ptr [edi+ecx+24h]
		push	dword ptr [edi+ecx+20h]
		push	ebx
		call	sub_41311C
		mov	ecx, dword_42D950[esi*4]
		add	esp, 10h
		mov	[ebp+var_100C],	eax
		mov	eax, edx
		mov	edx, [ebp+var_100C]
		mov	[ebp+var_1018],	eax
		cmp	edx, [edi+ecx+20h]
		jnz	loc_4122CB
		cmp	eax, [edi+ecx+24h]
		jnz	loc_4122CB
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfBytesRead
		push	1000h		; nNumberOfBytesToRead
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	dword ptr [edi+ecx+18h]	; hFile
		call	ds:ReadFile
		test	eax, eax
		jz	loc_4122CB
		push	0
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	ebx
		call	sub_41311C
		add	esp, 10h
		test	edx, edx
		jl	loc_4122CB
		jg	short loc_41223E
		test	eax, eax
		jb	loc_4122CB

loc_41223E:				; CODE XREF: sub_412146+EEj
		mov	ebx, [ebp+var_1014]
		mov	eax, [ebp+NumberOfBytesRead]
		test	ebx, ebx
		jg	short loc_4122CB
		jl	short loc_412258
		cmp	[ebp+var_1008],	eax
		ja	short loc_4122CB

loc_412258:				; CODE XREF: sub_412146+108j
		lea	edi, [ebp+Buffer]
		xor	edx, edx
		add	edi, eax
		lea	ecx, [ebp+Buffer]
		xor	esi, esi
		cmp	[ebp+var_1008],	edx
		jnz	short loc_412276
		test	ebx, ebx
		jz	short loc_4122B2

loc_412276:				; CODE XREF: sub_412146+12Aj
					; sub_412146+166j ...
		cmp	ecx, edi
		jnb	short loc_4122B2
		mov	al, [ecx]
		cmp	al, 0Dh
		jnz	short loc_412293
		lea	eax, [edi-1]
		cmp	ecx, eax
		jnb	short loc_41229F
		lea	eax, [ecx+1]
		cmp	byte ptr [eax],	0Ah
		jnz	short loc_41229F
		mov	ecx, eax
		jmp	short loc_41229F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412293:				; CODE XREF: sub_412146+138j
		movzx	eax, al
		movsx	eax, byte_42C300[eax]
		add	ecx, eax

loc_41229F:				; CODE XREF: sub_412146+13Fj
					; sub_412146+147j ...
		add	esi, 1
		adc	edx, 0
		inc	ecx
		cmp	esi, [ebp+var_1008]
		jnz	short loc_412276
		cmp	edx, ebx
		jnz	short loc_412276

loc_4122B2:				; CODE XREF: sub_412146+12Ej
					; sub_412146+132j
		lea	eax, [ebp+Buffer]
		sub	ecx, eax
		mov	eax, ecx
		cdq
		add	eax, [ebp+var_100C]
		adc	edx, [ebp+var_1018]
		jmp	short loc_4122D0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4122CB:				; CODE XREF: sub_412146+9Ej
					; sub_412146+A8j ...
		or	edx, 0FFFFFFFFh
		mov	eax, edx

loc_4122D0:				; CODE XREF: sub_412146+183j
		pop	edi
		pop	esi

loc_4122D2:				; CODE XREF: sub_412146+34j
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_412146	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4122E1	proc near		; CODE XREF: sub_411DFC+107p
					; sub_411F85+D0p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	al, [ebp+arg_8]
		push	ebx
		push	esi
		push	edi
		cmp	al, 1
		jz	short loc_412322
		cmp	al, 2
		jz	short loc_412322
		mov	ecx, [ebp+arg_0]
		xor	esi, esi
		mov	eax, [ebp+arg_4]
		xor	edx, edx
		xor	ebx, ebx
		sub	eax, ecx
		cmp	[ebp+arg_4], ecx
		sbb	edi, edi
		not	edi
		and	edi, eax
		jz	short loc_41231E

loc_41230D:				; CODE XREF: sub_4122E1+3Bj
		cmp	byte ptr [ecx],	0Ah
		jnz	short loc_412318
		add	esi, 1
		adc	edx, 0

loc_412318:				; CODE XREF: sub_4122E1+2Fj
		inc	ecx
		inc	ebx
		cmp	ebx, edi
		jnz	short loc_41230D

loc_41231E:				; CODE XREF: sub_4122E1+2Aj
		mov	eax, esi
		jmp	short loc_41235A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412322:				; CODE XREF: sub_4122E1+Dj
					; sub_4122E1+11j
		mov	esi, [ebp+arg_0]
		xor	ecx, ecx
		mov	eax, [ebp+arg_4]
		xor	edx, edx
		sub	eax, esi
		xor	ebx, ebx
		inc	eax
		shr	eax, 1
		cmp	[ebp+arg_4], esi
		sbb	edi, edi
		not	edi
		and	edi, eax
		jz	short loc_412352

loc_41233E:				; CODE XREF: sub_4122E1+6Fj
		cmp	word ptr [esi],	0Ah
		jnz	short loc_41234A
		add	ecx, 1
		adc	edx, 0

loc_41234A:				; CODE XREF: sub_4122E1+61j
		add	esi, 2
		inc	ebx
		cmp	ebx, edi
		jnz	short loc_41233E

loc_412352:				; CODE XREF: sub_4122E1+5Bj
		shld	edx, ecx, 1
		add	ecx, ecx
		mov	eax, ecx

loc_41235A:				; CODE XREF: sub_4122E1+3Fj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_4122E1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41235F	proc near		; CODE XREF: sub_40AFD0+40p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

; FUNCTION CHUNK AT 00411D86 SIZE 00000066 BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_411D86
sub_41235F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41236A	proc near		; CODE XREF: sub_40B67C+59p
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	sub_411DFC
sub_41236A	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_4125DD

loc_412375:				; CODE XREF: sub_4125DD+6j
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	edi
		push	[ebp+arg_4]
		call	sub_411027
		pop	ecx
		mov	ecx, [ebp+arg_4]
		mov	edi, eax
		mov	ecx, [ecx+0Ch]
		nop
		test	cl, 6
		jnz	short loc_4123B1
		call	sub_40BD71
		mov	dword ptr [eax], 9

loc_41239D:				; CODE XREF: sub_4125DD-213j
		mov	eax, [ebp+arg_4]

loc_4123A0:				; CODE XREF: sub_4125DD-1F1j
		push	10h
		pop	ecx
		add	eax, 0Ch
		lock or	[eax], ecx
		or	eax, 0FFFFFFFFh
		jmp	loc_412487
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4123B1:				; CODE XREF: sub_4125DD-24Dj
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+0Ch]
		nop
		shr	eax, 0Ch
		test	al, 1
		jz	short loc_4123CC
		call	sub_40BD71
		mov	dword ptr [eax], 22h
		jmp	short loc_41239D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4123CC:				; CODE XREF: sub_4125DD-220j
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+0Ch]
		nop
		test	al, 1
		jz	short loc_4123FF
		push	[ebp+arg_4]
		call	sub_412556
		pop	ecx
		mov	ecx, [ebp+arg_4]
		and	dword ptr [ecx+8], 0
		test	al, al
		mov	eax, [ebp+arg_4]
		jz	short loc_4123A0
		mov	ecx, [eax+4]
		mov	[eax], ecx
		mov	eax, [ebp+arg_4]
		push	0FFFFFFFEh
		pop	ecx
		add	eax, 0Ch
		lock and [eax],	ecx

loc_4123FF:				; CODE XREF: sub_4125DD-208j
		mov	eax, [ebp+arg_4]
		push	ebx
		push	2
		pop	ebx
		add	eax, 0Ch
		lock or	[eax], ebx
		mov	eax, [ebp+arg_4]
		push	0FFFFFFF7h
		pop	ecx
		add	eax, 0Ch
		lock and [eax],	ecx
		mov	eax, [ebp+arg_4]
		and	dword ptr [eax+8], 0
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+0Ch]
		nop
		test	eax, 4C0h
		jnz	short loc_412460
		push	esi
		mov	esi, [ebp+arg_4]
		push	1
		call	sub_40A9AD
		pop	ecx
		cmp	esi, eax
		jz	short loc_41244B
		mov	esi, [ebp+arg_4]
		push	ebx
		call	sub_40A9AD
		pop	ecx
		cmp	esi, eax
		jnz	short loc_412456

loc_41244B:				; CODE XREF: sub_4125DD-1A2j
		push	edi
		call	sub_419C5C
		pop	ecx
		test	eax, eax
		jnz	short loc_41245F

loc_412456:				; CODE XREF: sub_4125DD-194j
		push	[ebp+arg_4]
		call	sub_41323F
		pop	ecx

loc_41245F:				; CODE XREF: sub_4125DD-189j
		pop	esi

loc_412460:				; CODE XREF: sub_4125DD-1B2j
		push	[ebp+arg_4]
		mov	ebx, [ebp+arg_0]
		push	ebx
		call	sub_41248A
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_412483
		mov	eax, [ebp+arg_4]
		push	10h
		pop	ecx
		add	eax, 0Ch
		lock or	[eax], ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_412486
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412483:				; CODE XREF: sub_4125DD-16Dj
		movzx	eax, bl

loc_412486:				; CODE XREF: sub_4125DD-15Cj
		pop	ebx

loc_412487:				; CODE XREF: sub_4125DD-231j
		pop	edi
		pop	ebp
		retn
; END OF FUNCTION CHUNK	FOR sub_4125DD

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41248A	proc near		; CODE XREF: sub_4125DD-176p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		push	[ebp+arg_4]
		call	sub_411027
		pop	ecx
		mov	ecx, [ebp+arg_4]
		mov	edx, eax
		mov	ecx, [ecx+0Ch]
		nop
		test	cl, 0C0h
		jz	loc_41253C
		mov	ecx, [ebp+arg_4]
		xor	edi, edi
		mov	eax, [ecx+4]
		mov	esi, [ecx]
		sub	esi, eax
		inc	eax
		mov	[ecx], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+18h]
		dec	ecx
		mov	[eax+8], ecx
		test	esi, esi
		jle	short loc_4124ED
		mov	eax, [ebp+arg_4]
		push	esi
		push	dword ptr [eax+4]
		push	edx
		call	sub_411925
		add	esp, 0Ch
		mov	edi, eax

loc_4124DB:				; CODE XREF: sub_41248A+8Cj
					; sub_41248A+A0j
		mov	eax, [ebp+arg_4]
		cmp	edi, esi
		mov	ecx, [eax+4]
		mov	al, byte ptr [ebp+arg_0]
		mov	[ecx], al
		setz	al
		jmp	short loc_412552
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4124ED:				; CODE XREF: sub_41248A+3Dj
		cmp	edx, 0FFFFFFFFh
		jz	short loc_41250D
		cmp	edx, 0FFFFFFFEh
		jz	short loc_41250D
		mov	eax, edx
		mov	ecx, edx
		and	eax, 3Fh
		sar	ecx, 6
		imul	eax, 38h
		add	eax, dword_42D950[ecx*4]
		jmp	short loc_412512
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41250D:				; CODE XREF: sub_41248A+66j
					; sub_41248A+6Bj
		mov	eax, offset dword_42C2C8

loc_412512:				; CODE XREF: sub_41248A+81j
		test	byte ptr [eax+28h], 20h
		jz	short loc_4124DB
		push	2
		push	edi
		push	edi
		push	edx
		call	sub_41311C
		and	eax, edx
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_4124DB
		mov	eax, [ebp+arg_4]
		push	10h
		pop	ecx
		add	eax, 0Ch
		lock or	[eax], ecx
		mov	al, 1
		jmp	short loc_412552
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41253C:				; CODE XREF: sub_41248A+1Cj
		push	1
		lea	eax, [ebp+arg_0]
		push	eax
		push	edx
		call	sub_411925
		add	esp, 0Ch
		dec	eax
		neg	eax
		sbb	al, al
		inc	al

loc_412552:				; CODE XREF: sub_41248A+61j
					; sub_41248A+B0j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_41248A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_412556	proc near		; CODE XREF: sub_4125DD-203p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		sub	esp, 10h
		mov	eax, [eax+0Ch]
		nop
		shr	eax, 3
		test	al, 1
		jz	short loc_412570
		mov	al, 1
		jmp	short loc_4125D9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412570:				; CODE XREF: sub_412556+14j
		mov	eax, [ebp+arg_0]
		push	ebx
		push	esi
		mov	eax, [eax+0Ch]
		nop
		test	al, 0C0h
		mov	eax, [ebp+arg_0]
		jz	short loc_412587
		mov	ecx, [eax]
		cmp	ecx, [eax+4]
		jz	short loc_4125D5

loc_412587:				; CODE XREF: sub_412556+28j
		mov	eax, [eax+10h]
		nop
		push	eax
		call	sub_416FE9
		mov	esi, eax
		pop	ecx
		cmp	esi, 0FFFFFFFFh
		jz	short loc_4125D5
		xor	ebx, ebx
		lea	eax, [ebp+var_8]
		inc	ebx
		push	ebx
		push	eax
		push	0
		push	0
		push	esi
		call	ds:SetFilePointerEx
		test	eax, eax
		jz	short loc_4125D5
		lea	eax, [ebp+var_10]
		push	eax
		push	esi
		call	ds:GetFileSizeEx
		test	eax, eax
		jz	short loc_4125D5
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_10]
		jnz	short loc_4125CF
		mov	eax, [ebp+var_4]
		cmp	eax, [ebp+var_C]
		jz	short loc_4125D1

loc_4125CF:				; CODE XREF: sub_412556+6Fj
		xor	bl, bl

loc_4125D1:				; CODE XREF: sub_412556+77j
		mov	al, bl
		jmp	short loc_4125D7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4125D5:				; CODE XREF: sub_412556+2Fj
					; sub_412556+41j ...
		xor	al, al

loc_4125D7:				; CODE XREF: sub_412556+7Dj
		pop	esi
		pop	ebx

loc_4125D9:				; CODE XREF: sub_412556+18j
		mov	esp, ebp
		pop	ebp
		retn
sub_412556	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4125DD	proc near		; CODE XREF: sub_40B02B+12p
					; sub_40B80B+134p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

; FUNCTION CHUNK AT 00412375 SIZE 00000115 BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_412375
sub_4125DD	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4125E8	proc near		; CODE XREF: sub_41290C+12p

var_1C		= dword	ptr -1Ch
NumberOfBytesRead= dword ptr -18h
hFile		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, eax
		push	ebx
		mov	ebx, [ebp+arg_4]
		and	eax, 3Fh
		push	esi
		sar	ecx, 6
		push	edi
		imul	edi, eax, 38h
		mov	[ebp+var_C], ecx
		mov	eax, dword_42D950[ecx*4]
		mov	edx, [edi+eax+18h]
		mov	[ebp+hFile], edx
		mov	edx, [ebp+arg_8]
		test	edx, edx
		jz	short loc_412628
		cmp	byte ptr [ebx],	0Ah
		jnz	short loc_412628
		or	byte ptr [edi+eax+28h],	4
		jmp	short loc_41262D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412628:				; CODE XREF: sub_4125E8+32j
					; sub_4125E8+37j
		and	byte ptr [edi+eax+28h],	0FBh

loc_41262D:				; CODE XREF: sub_4125E8+3Ej
		lea	eax, [ebx+edx]
		mov	[ebp+var_8], ebx
		mov	[ebp+var_10], eax
		mov	esi, ebx
		cmp	ebx, eax
		jnb	loc_41273A
		mov	eax, ebx

loc_412642:				; CODE XREF: sub_4125E8+12Fj
		mov	dl, [eax]
		cmp	dl, 1Ah
		jz	loc_41271F
		inc	eax
		cmp	dl, 0Dh
		jz	short loc_41265E
		mov	[esi], dl
		inc	esi
		mov	[ebp+var_8], eax
		jmp	loc_412714
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41265E:				; CODE XREF: sub_4125E8+69j
		cmp	eax, [ebp+var_10]
		jnb	short loc_412689
		mov	cl, [eax]
		lea	edx, [esi+1]
		xor	eax, eax
		cmp	cl, 0Ah
		setz	al
		inc	eax
		add	[ebp+var_8], eax
		cmp	cl, 0Ah
		setz	al
		dec	al
		and	al, 3
		add	al, 0Ah
		mov	[esi], al
		mov	esi, edx
		jmp	loc_41270E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412689:				; CODE XREF: sub_4125E8+79j
		push	0		; lpOverlapped
		mov	[ebp+var_8], eax
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfBytesRead
		push	1		; nNumberOfBytesToRead
		lea	eax, [ebp-1]
		push	eax		; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:ReadFile
		test	eax, eax
		jz	short loc_41270A
		cmp	[ebp+NumberOfBytesRead], 0
		jz	short loc_41270A
		mov	ecx, [ebp+var_C]
		mov	eax, dword_42D950[ecx*4]
		test	byte ptr [edi+eax+28h],	48h
		jz	short loc_4126E3
		mov	dl, [ebp+var_1]
		lea	eax, [esi+1]
		mov	[ebp+var_1C], eax
		cmp	dl, 0Ah
		jnz	short loc_4126CE
		mov	[esi], dl
		jmp	short loc_4126DF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4126CE:				; CODE XREF: sub_4125E8+E0j
		mov	byte ptr [esi],	0Dh
		mov	eax, dword_42D950[ecx*4]
		mov	[edi+eax+2Ah], dl
		mov	eax, [ebp+var_1C]

loc_4126DF:				; CODE XREF: sub_4125E8+E4j
		mov	esi, eax
		jmp	short loc_412711
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4126E3:				; CODE XREF: sub_4125E8+D2j
		cmp	[ebp+var_1], 0Ah
		jnz	short loc_4126F3
		cmp	esi, ebx
		jnz	short loc_4126F3
		mov	byte ptr [esi],	0Ah
		inc	esi
		jmp	short loc_412711
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4126F3:				; CODE XREF: sub_4125E8+FFj
					; sub_4125E8+103j
		push	1
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		push	[ebp+arg_0]
		call	sub_413137
		add	esp, 10h
		cmp	[ebp+var_1], 0Ah
		jz	short loc_41270E

loc_41270A:				; CODE XREF: sub_4125E8+BBj
					; sub_4125E8+C1j
		mov	byte ptr [esi],	0Dh
		inc	esi

loc_41270E:				; CODE XREF: sub_4125E8+9Cj
					; sub_4125E8+120j
		mov	ecx, [ebp+var_C]

loc_412711:				; CODE XREF: sub_4125E8+F9j
					; sub_4125E8+109j
		mov	eax, [ebp+var_8]

loc_412714:				; CODE XREF: sub_4125E8+71j
		cmp	eax, [ebp+var_10]
		jb	loc_412642
		jmp	short loc_41273A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41271F:				; CODE XREF: sub_4125E8+5Fj
		mov	ecx, dword_42D950[ecx*4]
		mov	al, [ecx+edi+28h]
		test	al, 40h
		jnz	short loc_412736
		or	al, 2
		mov	[ecx+edi+28h], al
		jmp	short loc_41273A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412736:				; CODE XREF: sub_4125E8+144j
		mov	byte ptr [esi],	1Ah
		inc	esi

loc_41273A:				; CODE XREF: sub_4125E8+52j
					; sub_4125E8+135j ...
		sub	esi, ebx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_4125E8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_412745	proc near		; CODE XREF: sub_412BEA:loc_412F3Cp

var_28		= dword	ptr -28h
NumberOfBytesRead= dword ptr -24h
hFile		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
Buffer		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	ecx, eax
		push	ebx
		mov	ebx, [ebp+arg_4]
		and	eax, 3Fh
		push	esi
		sar	ecx, 6
		push	edi
		imul	edi, eax, 38h
		mov	[ebp+var_C], ecx
		mov	eax, dword_42D950[ecx*4]
		mov	[ebp+var_10], 0Ah
		mov	edx, [edi+eax+18h]
		mov	[ebp+hFile], edx
		mov	edx, [ebp+arg_8]
		test	edx, edx
		jz	short loc_41278F
		push	0Ah
		pop	esi
		cmp	[ebx], si
		jnz	short loc_41278F
		or	byte ptr [edi+eax+28h],	4
		jmp	short loc_412794
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41278F:				; CODE XREF: sub_412745+39j
					; sub_412745+41j
		and	byte ptr [edi+eax+28h],	0FBh

loc_412794:				; CODE XREF: sub_412745+48j
		lea	eax, [ebx+edx*2]
		mov	[ebp+var_8], ebx
		mov	[ebp+var_14], eax
		mov	esi, ebx
		cmp	ebx, eax
		jnb	loc_4128FE
		mov	[ebp+var_18], 1Ah
		mov	eax, ebx
		mov	[ebp+var_1C], 0Dh

loc_4127B7:				; CODE XREF: sub_412745+191j
		movzx	edx, word ptr [eax]
		cmp	dx, word ptr [ebp+var_18]
		jz	loc_4128DE
		add	eax, 2
		cmp	dx, word ptr [ebp+var_1C]
		jz	short loc_4127DB
		mov	[esi], dx
		add	esi, 2
		mov	[ebp+var_8], eax
		jmp	loc_4128D3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4127DB:				; CODE XREF: sub_412745+86j
		cmp	eax, [ebp+var_14]
		jnb	short loc_41280D
		movzx	ecx, word ptr [eax]
		xor	eax, eax
		cmp	cx, word ptr [ebp+var_10]
		push	0Ah
		setz	al
		lea	eax, ds:2[eax*2]
		add	[ebp+var_8], eax
		xor	eax, eax
		cmp	cx, word ptr [ebp+var_10]
		pop	ecx
		setz	al
		dec	eax
		and	eax, 3
		add	eax, ecx
		jmp	loc_4128C7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41280D:				; CODE XREF: sub_412745+99j
		push	0		; lpOverlapped
		mov	[ebp+var_8], eax
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfBytesRead
		push	2		; nNumberOfBytesToRead
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:ReadFile
		test	eax, eax
		jz	loc_4128C4
		cmp	[ebp+NumberOfBytesRead], 0
		jz	loc_4128C4
		mov	ecx, [ebp+var_C]
		mov	eax, dword_42D950[ecx*4]
		test	byte ptr [edi+eax+28h],	48h
		jz	short loc_412895
		mov	dx, word ptr [ebp+Buffer]
		lea	eax, [esi+2]
		mov	[ebp+var_28], eax
		cmp	dx, word ptr [ebp+var_10]
		jnz	short loc_412860
		push	0Ah
		pop	edx
		mov	[esi], dx
		jmp	short loc_412891
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412860:				; CODE XREF: sub_412745+111j
		push	0Dh
		pop	eax
		mov	[esi], ax
		mov	eax, dword_42D950[ecx*4]
		push	0Ah
		mov	[edi+eax+2Ah], dl
		mov	eax, dword_42D950[ecx*4]
		shr	dx, 8
		mov	[edi+eax+2Bh], dl
		mov	eax, dword_42D950[ecx*4]
		pop	edx
		mov	[edi+eax+2Ch], dl
		mov	eax, [ebp+var_28]

loc_412891:				; CODE XREF: sub_412745+119j
		mov	esi, eax
		jmp	short loc_4128D0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412895:				; CODE XREF: sub_412745+101j
		push	0Ah
		pop	eax
		cmp	word ptr [ebp+Buffer], ax
		jnz	short loc_4128AA
		cmp	esi, ebx
		jnz	short loc_4128AA
		mov	[esi], ax
		add	esi, 2
		jmp	short loc_4128D0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4128AA:				; CODE XREF: sub_412745+157j
					; sub_412745+15Bj
		push	1
		push	0FFFFFFFFh
		push	0FFFFFFFEh
		push	[ebp+arg_0]
		call	sub_413137
		add	esp, 10h
		push	0Ah
		pop	eax
		cmp	word ptr [ebp+Buffer], ax
		jz	short loc_4128CD

loc_4128C4:				; CODE XREF: sub_412745+E2j
					; sub_412745+ECj
		push	0Dh
		pop	eax

loc_4128C7:				; CODE XREF: sub_412745+C3j
		mov	[esi], ax
		add	esi, 2

loc_4128CD:				; CODE XREF: sub_412745+17Dj
		mov	ecx, [ebp+var_C]

loc_4128D0:				; CODE XREF: sub_412745+14Ej
					; sub_412745+163j
		mov	eax, [ebp+var_8]

loc_4128D3:				; CODE XREF: sub_412745+91j
		cmp	eax, [ebp+var_14]
		jb	loc_4127B7
		jmp	short loc_4128FE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4128DE:				; CODE XREF: sub_412745+79j
		mov	ecx, dword_42D950[ecx*4]
		mov	al, [ecx+edi+28h]
		test	al, 40h
		jnz	short loc_4128F5
		or	al, 2
		mov	[ecx+edi+28h], al
		jmp	short loc_4128FE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4128F5:				; CODE XREF: sub_412745+1A6j
		push	1Ah
		pop	eax
		mov	[esi], ax
		add	esi, 2

loc_4128FE:				; CODE XREF: sub_412745+5Cj
					; sub_412745+197j ...
		sub	esi, ebx
		and	esi, 0FFFFFFFEh
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_412745	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_41290C(int,int,int,LPWSTR lpWideCharStr,int cchWideChar)
sub_41290C	proc near		; CODE XREF: sub_412BEA+32Fp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
lpWideCharStr	= dword	ptr  14h
cchWideChar	= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	[ebp+arg_8]
		mov	ebx, [ebp+arg_4]
		push	ebx
		push	[ebp+arg_0]
		call	sub_4125E8
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jz	loc_412A60
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		and	eax, 3Fh
		sar	edx, 6
		push	edi
		imul	edi, eax, 38h
		mov	[ebp+var_4], edx
		mov	eax, dword_42D950[edx*4]
		mov	[ebp+var_8], eax
		cmp	byte ptr [edi+eax+29h],	0
		jnz	short loc_41295B
		mov	eax, ecx
		jmp	loc_412A5F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41295B:				; CODE XREF: sub_41290C+46j
		lea	eax, [ecx+ebx]
		push	esi
		lea	esi, [eax-1]
		mov	cl, [esi]
		test	cl, cl
		js	short loc_41296F
		mov	esi, eax
		jmp	loc_412A0A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41296F:				; CODE XREF: sub_41290C+5Aj
		xor	edx, edx
		movzx	eax, cl
		inc	edx
		jmp	short loc_412985
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412977:				; CODE XREF: sub_41290C+80j
		cmp	edx, 4
		ja	short loc_41298E
		cmp	esi, ebx
		jb	short loc_41298E
		dec	esi
		inc	edx
		movzx	eax, byte ptr [esi]

loc_412985:				; CODE XREF: sub_41290C+69j
		cmp	byte_42C300[eax], 0
		jz	short loc_412977

loc_41298E:				; CODE XREF: sub_41290C+6Ej
					; sub_41290C+72j
		mov	cl, [esi]
		movzx	eax, cl
		movsx	eax, byte_42C300[eax]
		test	eax, eax
		jnz	short loc_4129AE
		call	sub_40BD71
		mov	dword ptr [eax], 2Ah
		jmp	loc_412A36
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4129AE:				; CODE XREF: sub_41290C+90j
		inc	eax
		cmp	eax, edx
		jnz	short loc_4129B7
		add	esi, edx
		jmp	short loc_412A0A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4129B7:				; CODE XREF: sub_41290C+A5j
		mov	eax, [ebp+var_8]
		test	byte ptr [edi+eax+28h],	48h
		jz	short loc_4129F6
		inc	esi
		mov	[edi+eax+2Ah], cl
		cmp	edx, 2
		jb	short loc_4129DC
		mov	ecx, [ebp+var_4]
		mov	al, [esi]
		inc	esi
		mov	ecx, dword_42D950[ecx*4]
		mov	[edi+ecx+2Bh], al

loc_4129DC:				; CODE XREF: sub_41290C+BDj
		cmp	edx, 3
		jnz	short loc_4129F2
		mov	eax, [ebp+var_4]
		mov	ecx, dword_42D950[eax*4]
		mov	al, [esi]
		inc	esi
		mov	[edi+ecx+2Ch], al

loc_4129F2:				; CODE XREF: sub_41290C+D3j
		sub	esi, edx
		jmp	short loc_412A0A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4129F6:				; CODE XREF: sub_41290C+B3j
		neg	edx
		mov	eax, edx
		push	1
		cdq
		push	edx
		push	eax
		push	[ebp+arg_0]
		call	sub_413137
		add	esp, 10h

loc_412A0A:				; CODE XREF: sub_41290C+5Ej
					; sub_41290C+A9j ...
		push	[ebp+cchWideChar] ; cchWideChar
		sub	esi, ebx
		push	[ebp+lpWideCharStr] ; lpWideCharStr
		push	esi		; cchMultiByte
		push	ebx		; lpMultiByteStr
		push	0		; int
		push	0FDE9h		; CodePage
		call	sub_4154FC
		mov	ebx, eax
		add	esp, 18h
		test	ebx, ebx
		jnz	short loc_412A3B
		call	ds:GetLastError
		push	eax
		call	sub_40BD3B
		pop	ecx

loc_412A36:				; CODE XREF: sub_41290C+9Dj
		or	eax, 0FFFFFFFFh
		jmp	short loc_412A5E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412A3B:				; CODE XREF: sub_41290C+11Bj
		mov	eax, [ebp+var_4]
		cmp	ebx, esi
		setz	cl
		dec	cl
		mov	edx, dword_42D950[eax*4]
		and	cl, 2
		mov	al, [edi+edx+2Dh]
		and	al, 0FDh
		or	cl, al
		lea	eax, [ebx+ebx]
		mov	[edi+edx+2Dh], cl

loc_412A5E:				; CODE XREF: sub_41290C+12Dj
		pop	esi

loc_412A5F:				; CODE XREF: sub_41290C+4Aj
		pop	edi

loc_412A60:				; CODE XREF: sub_41290C+1Ej
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_41290C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_412A65	proc near		; CODE XREF: sub_412BEA+348p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		mov	ecx, edi
		mov	esi, edi
		lea	edx, [edi+eax*2]
		cmp	edi, edx
		jnb	short loc_412AD5
		push	ebx

loc_412A7E:				; CODE XREF: sub_412A65+51j
		movzx	eax, word ptr [ecx]
		cmp	eax, 1Ah
		jz	short loc_412ABA
		cmp	eax, 0Dh
		jnz	short loc_412AA4
		lea	ebx, [ecx+2]
		cmp	ebx, edx
		jnb	short loc_412AA4
		push	0Ah
		pop	eax
		cmp	[ebx], ax
		movzx	eax, word ptr [ecx]
		jnz	short loc_412AA4
		push	0Ah
		pop	eax
		push	4
		jmp	short loc_412AA9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412AA4:				; CODE XREF: sub_412A65+24j
					; sub_412A65+2Bj ...
		movzx	eax, ax
		push	2

loc_412AA9:				; CODE XREF: sub_412A65+3Dj
		pop	ebx
		add	ecx, ebx
		mov	[esi], ax
		lea	ebx, [esi+2]
		mov	esi, ebx
		cmp	ecx, edx
		jb	short loc_412A7E
		jmp	short loc_412AD4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412ABA:				; CODE XREF: sub_412A65+1Fj
		mov	eax, [ebp+arg_0]
		mov	ecx, eax
		and	eax, 3Fh
		sar	ecx, 6
		imul	edx, eax, 38h
		mov	ecx, dword_42D950[ecx*4]
		or	byte ptr [ecx+edx+28h],	2

loc_412AD4:				; CODE XREF: sub_412A65+53j
		pop	ebx

loc_412AD5:				; CODE XREF: sub_412A65+16j
		sub	esi, edi
		and	esi, 0FFFFFFFEh
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_412A65	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_412AE0	proc near		; CODE XREF: sub_411D7B-ECp

; FUNCTION CHUNK AT 00412BC9 SIZE 00000021 BYTES

		push	10h
		push	offset dword_42B3A0
		call	sub_405FF0
		mov	esi, [ebp+8]
		cmp	esi, 0FFFFFFFEh
		jnz	short loc_412B0C
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 9
		jmp	loc_412BE1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412B0C:				; CODE XREF: sub_412AE0+12j
		test	esi, esi
		js	loc_412BC9
		cmp	esi, dword_42DB50
		jnb	loc_412BC9
		mov	ebx, esi
		sar	ebx, 6
		mov	eax, esi
		and	eax, 3Fh
		imul	ecx, eax, 38h
		mov	[ebp-20h], ecx
		mov	eax, dword_42D950[ebx*4]
		test	byte ptr [ecx+eax+28h],	1
		jz	loc_412BC9
		cmp	dword ptr [ebp+10h], 7FFFFFFFh
		jbe	short loc_412B60
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		jmp	short loc_412BDC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412B60:				; CODE XREF: sub_412AE0+69j
		push	esi
		call	sub_416F12
		pop	ecx
		or	edi, 0FFFFFFFFh
		mov	[ebp-1Ch], edi
		and	dword ptr [ebp-4], 0
		mov	eax, dword_42D950[ebx*4]
		mov	ecx, [ebp-20h]
		test	byte ptr [ecx+eax+28h],	1
		jnz	short loc_412B97
		call	sub_40BD71
		mov	dword ptr [eax], 9
		call	sub_40BD5E
		and	dword ptr [eax], 0
		jmp	short loc_412BAB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412B97:				; CODE XREF: sub_412AE0+A0j
		push	dword ptr [ebp+10h] ; int
		push	dword ptr [ebp+0Ch] ; lpWideCharStr
		push	esi		; int
		call	sub_412BEA
		add	esp, 0Ch
		mov	edi, eax
		mov	[ebp-1Ch], edi

loc_412BAB:				; CODE XREF: sub_412AE0+B5j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_412BC1
		mov	eax, edi
		jmp	short loc_412BE4
sub_412AE0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_412BBB	proc near		; DATA XREF: .rdata:0042B3B8o
		mov	esi, [ebp+8]
		mov	edi, [ebp-1Ch]
sub_412BBB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_412BC1	proc near		; CODE XREF: sub_412AE0+D2p
		push	esi
		call	sub_416F35
		pop	ecx
		retn
sub_412BC1	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_412AE0

loc_412BC9:				; CODE XREF: sub_412AE0+2Ej
					; sub_412AE0+3Aj ...
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 9

loc_412BDC:				; CODE XREF: sub_412AE0+7Ej
		call	sub_409E35

loc_412BE1:				; CODE XREF: sub_412AE0+27j
		or	eax, 0FFFFFFFFh

loc_412BE4:				; CODE XREF: sub_412AE0+D9j
		call	sub_406036
		retn
; END OF FUNCTION CHUNK	FOR sub_412AE0

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_412BEA(int,LPWSTR lpWideCharStr,int)
sub_412BEA	proc near		; CODE XREF: sub_40B154+140p
					; sub_412AE0+BEp

Mode		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
NumberOfBytesRead= dword ptr -1Ch
hFile		= dword	ptr -18h
lpBuffer	= dword	ptr -14h
var_10		= dword	ptr -10h
nNumberOfBytesToRead= dword ptr	-0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8
lpWideCharStr	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	edi
		cmp	ebx, 0FFFFFFFEh
		jnz	short loc_412C14
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 9
		jmp	loc_412F93
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412C14:				; CODE XREF: sub_412BEA+10j
		test	ebx, ebx
		js	loc_412F7B
		cmp	ebx, dword_42DB50
		jnb	loc_412F7B
		mov	eax, ebx
		mov	ecx, ebx
		sar	ecx, 6
		and	eax, 3Fh
		imul	edi, eax, 38h
		mov	[ebp+var_8], ecx
		mov	eax, dword_42D950[ecx*4]
		xor	ecx, ecx
		inc	ecx
		mov	[ebp+var_10], edi
		mov	[ebp+var_20], ecx
		mov	dl, [eax+edi+28h]
		test	dl, cl
		jz	loc_412F7B
		mov	ecx, [ebp+arg_8]
		cmp	ecx, 7FFFFFFFh
		jbe	short loc_412C77

loc_412C5F:				; CODE XREF: sub_412BEA+A2j
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		jmp	loc_412F8E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412C77:				; CODE XREF: sub_412BEA+73j
		test	ecx, ecx
		jz	loc_412F77
		test	dl, 2
		jnz	loc_412F77
		cmp	[ebp+lpWideCharStr], 0
		jz	short loc_412C5F
		mov	edx, [eax+edi+18h]
		mov	[ebp+hFile], edx
		mov	dl, [eax+edi+29h]
		mov	[ebp+var_1], dl
		push	esi
		movsx	edx, dl
		xor	esi, esi
		sub	edx, 1
		jz	short loc_412CF6
		sub	edx, 1
		jz	short loc_412CBA
		mov	edx, [ebp+lpWideCharStr]
		mov	[ebp+nNumberOfBytesToRead], ecx
		mov	[ebp+lpBuffer],	edx
		jmp	loc_412D7A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412CBA:				; CODE XREF: sub_412BEA+C0j
		mov	eax, ecx
		not	eax
		test	al, 1
		jnz	short loc_412CDE

loc_412CC2:				; CODE XREF: sub_412BEA+112j
		call	sub_40BD5E
		and	[eax], esi
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		jmp	loc_412EAE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412CDE:				; CODE XREF: sub_412BEA+D6j
		mov	edi, [ebp+var_8]
		mov	edx, [ebp+lpWideCharStr]
		mov	[ebp+nNumberOfBytesToRead], ecx
		mov	[ebp+lpBuffer],	edx
		mov	eax, dword_42D950[edi*4]
		jmp	loc_412D7A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412CF6:				; CODE XREF: sub_412BEA+BBj
		mov	eax, ecx
		not	eax
		test	al, 1
		jz	short loc_412CC2
		push	4
		pop	eax
		shr	ecx, 1
		mov	[ebp+nNumberOfBytesToRead], eax
		cmp	ecx, eax
		jb	short loc_412D0F
		mov	eax, ecx
		mov	[ebp+nNumberOfBytesToRead], ecx

loc_412D0F:				; CODE XREF: sub_412BEA+11Ej
		push	eax
		call	sub_40FDE5
		push	0		; lpMem
		mov	esi, eax
		call	sub_40F0A8
		push	0		; lpMem
		call	sub_40F0A8
		add	esp, 0Ch
		mov	[ebp+lpBuffer],	esi
		test	esi, esi
		jnz	short loc_412D4A
		call	sub_40BD71
		mov	dword ptr [eax], 0Ch
		call	sub_40BD5E
		mov	dword ptr [eax], 8
		jmp	loc_412EAE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412D4A:				; CODE XREF: sub_412BEA+143j
		push	1
		push	0
		push	0
		push	ebx
		call	sub_413137
		mov	ecx, [ebp+var_8]
		add	esp, 10h
		mov	ecx, dword_42D950[ecx*4]
		mov	[edi+ecx+20h], eax
		mov	eax, [ebp+var_8]
		mov	[edi+ecx+24h], edx
		mov	edx, esi
		mov	ecx, [ebp+nNumberOfBytesToRead]
		mov	eax, dword_42D950[eax*4]

loc_412D7A:				; CODE XREF: sub_412BEA+CBj
					; sub_412BEA+107j
		mov	ebx, [ebp+var_10]
		xor	edi, edi
		mov	[ebp+var_24], edx
		test	byte ptr [ebx+eax+28h],	48h
		mov	ebx, [ebp+arg_0]
		jz	loc_412E4F
		mov	ebx, [ebp+var_10]
		mov	al, [ebx+eax+2Ah]
		mov	ebx, [ebp+arg_0]
		cmp	al, 0Ah
		jz	loc_412E4F
		test	ecx, ecx
		jz	loc_412E4F
		mov	ebx, [ebp+var_10]
		inc	edi
		mov	[edx], al
		inc	edx
		mov	eax, [ebp+var_8]
		dec	ecx
		cmp	[ebp+var_1], 0
		mov	[ebp+lpBuffer],	edx
		mov	[ebp+nNumberOfBytesToRead], ecx
		mov	eax, dword_42D950[eax*4]
		mov	byte ptr [ebx+eax+2Ah],	0Ah
		mov	ebx, [ebp+arg_0]
		jz	short loc_412E4F
		mov	eax, [ebp+var_8]
		mov	ebx, [ebp+var_10]
		mov	eax, dword_42D950[eax*4]
		mov	al, [ebx+eax+2Bh]
		mov	ebx, [ebp+arg_0]
		cmp	al, 0Ah
		jz	short loc_412E4F
		test	ecx, ecx
		jz	short loc_412E4F
		mov	ebx, [ebp+var_10]
		mov	[edx], al
		inc	edx
		mov	eax, [ebp+var_8]
		dec	ecx
		cmp	[ebp+var_1], 1
		push	2
		mov	[ebp+lpBuffer],	edx
		mov	eax, dword_42D950[eax*4]
		pop	edi
		mov	[ebp+nNumberOfBytesToRead], ecx
		mov	byte ptr [ebx+eax+2Bh],	0Ah
		mov	ebx, [ebp+arg_0]
		jnz	short loc_412E4F
		mov	eax, [ebp+var_8]
		mov	ebx, [ebp+var_10]
		mov	eax, dword_42D950[eax*4]
		mov	al, [ebx+eax+2Ch]
		mov	ebx, [ebp+arg_0]
		cmp	al, 0Ah
		jz	short loc_412E4F
		test	ecx, ecx
		jz	short loc_412E4F
		mov	[edx], al
		inc	edx
		mov	eax, [ebp+var_8]
		dec	ecx
		mov	[ebp+nNumberOfBytesToRead], ecx
		mov	ecx, [ebp+var_10]
		push	3
		mov	eax, dword_42D950[eax*4]
		mov	[ebp+lpBuffer],	edx
		pop	edi
		mov	byte ptr [ecx+eax+2Ch],	0Ah

loc_412E4F:				; CODE XREF: sub_412BEA+1A0j
					; sub_412BEA+1B2j ...
		push	ebx
		call	sub_419C5C
		pop	ecx
		test	eax, eax
		jz	short loc_412ECB
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_10]
		mov	eax, dword_42D950[eax*4]
		cmp	byte ptr [ecx+eax+28h],	0
		jge	short loc_412ECB
		lea	eax, [ebp+Mode]
		push	eax		; lpMode
		push	[ebp+hFile]	; hConsoleHandle
		call	ds:GetConsoleMode
		test	eax, eax
		jz	short loc_412ECB
		cmp	[ebp+var_1], 2
		jnz	short loc_412ECF
		push	0		; lpReserved
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfCharsRead
		mov	eax, [ebp+nNumberOfBytesToRead]
		shr	eax, 1
		push	eax		; nNumberOfCharsToRead
		push	[ebp+lpBuffer]	; lpBuffer
		push	[ebp+hFile]	; hConsoleInput
		call	ds:ReadConsoleW
		test	eax, eax
		jnz	short loc_412EC0
		call	ds:GetLastError

loc_412EA7:				; CODE XREF: sub_412BEA+380j
		push	eax
		call	sub_40BD3B
		pop	ecx

loc_412EAE:				; CODE XREF: sub_412BEA+EFj
					; sub_412BEA+15Bj ...
		or	edi, 0FFFFFFFFh

loc_412EB1:				; CODE XREF: sub_412BEA+31Cj
					; sub_412BEA+339j ...
		push	esi		; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	eax, edi
		pop	esi
		jmp	loc_412F96
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412EC0:				; CODE XREF: sub_412BEA+2B5j
		mov	eax, [ebp+NumberOfBytesRead]
		mov	ecx, [ebp+arg_8]
		lea	edi, [edi+eax*2]
		jmp	short loc_412EF4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412ECB:				; CODE XREF: sub_412BEA+26Ej
					; sub_412BEA+282j ...
		mov	byte ptr [ebp+var_20], 0

loc_412ECF:				; CODE XREF: sub_412BEA+299j
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfBytesRead
		mov	eax, [ebp+nNumberOfBytesToRead]
		push	eax		; nNumberOfBytesToRead
		push	[ebp+lpBuffer]	; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:ReadFile
		test	eax, eax
		jz	short loc_412F43
		mov	ecx, [ebp+arg_8]
		cmp	[ebp+NumberOfBytesRead], ecx
		ja	short loc_412F43
		add	edi, [ebp+NumberOfBytesRead]

loc_412EF4:				; CODE XREF: sub_412BEA+2DFj
		mov	eax, [ebp+var_8]
		mov	edx, [ebp+var_10]
		mov	eax, dword_42D950[eax*4]
		cmp	byte ptr [edx+eax+28h],	0
		jge	short loc_412EB1
		cmp	[ebp+var_1], 2
		jz	short loc_412F25
		shr	ecx, 1
		push	ecx		; cchWideChar
		push	[ebp+lpWideCharStr] ; lpWideCharStr
		push	edi		; int
		push	[ebp+lpBuffer]	; int
		push	ebx		; int
		call	sub_41290C
		add	esp, 14h

loc_412F21:				; CODE XREF: sub_412BEA+350j
		mov	edi, eax
		jmp	short loc_412EB1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412F25:				; CODE XREF: sub_412BEA+322j
		shr	edi, 1
		cmp	byte ptr [ebp+var_20], 0
		push	edi
		push	[ebp+var_24]
		push	ebx
		jz	short loc_412F3C
		call	sub_412A65

loc_412F37:				; CODE XREF: sub_412BEA+357j
		add	esp, 0Ch
		jmp	short loc_412F21
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412F3C:				; CODE XREF: sub_412BEA+346j
		call	sub_412745
		jmp	short loc_412F37
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412F43:				; CODE XREF: sub_412BEA+2FDj
					; sub_412BEA+305j
		call	ds:GetLastError
		push	5
		pop	edi
		cmp	eax, edi
		jnz	short loc_412F67
		call	sub_40BD71
		mov	dword ptr [eax], 9
		call	sub_40BD5E
		mov	[eax], edi
		jmp	loc_412EAE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412F67:				; CODE XREF: sub_412BEA+364j
		cmp	eax, 6Dh
		jnz	loc_412EA7
		xor	edi, edi
		jmp	loc_412EB1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412F77:				; CODE XREF: sub_412BEA+8Fj
					; sub_412BEA+98j
		xor	eax, eax
		jmp	short loc_412F96
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412F7B:				; CODE XREF: sub_412BEA+2Cj
					; sub_412BEA+38j ...
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 9

loc_412F8E:				; CODE XREF: sub_412BEA+88j
		call	sub_409E35

loc_412F93:				; CODE XREF: sub_412BEA+25j
		or	eax, 0FFFFFFFFh

loc_412F96:				; CODE XREF: sub_412BEA+2D1j
					; sub_412BEA+38Fj
		pop	edi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_412BEA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_412F9C	proc near		; CODE XREF: sub_41311C+11p

; FUNCTION CHUNK AT 00413079 SIZE 00000025 BYTES

		push	18h
		push	offset dword_42B3C0
		call	sub_405FF0
		mov	edi, [ebp+8]
		cmp	edi, 0FFFFFFFEh
		jnz	short loc_412FC8
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 9
		jmp	loc_413091
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_412FC8:				; CODE XREF: sub_412F9C+12j
		test	edi, edi
		js	loc_413079
		cmp	edi, dword_42DB50
		jnb	loc_413079
		mov	ecx, edi
		sar	ecx, 6
		mov	[ebp-1Ch], ecx
		mov	eax, edi
		and	eax, 3Fh
		imul	edx, eax, 38h
		mov	[ebp-20h], edx
		mov	eax, dword_42D950[ecx*4]
		test	byte ptr [eax+edx+28h],	1
		jz	short loc_413079
		push	edi
		call	sub_416F12
		pop	ecx
		or	esi, 0FFFFFFFFh
		mov	[ebp-28h], esi
		mov	ebx, esi
		mov	[ebp-24h], ebx
		and	dword ptr [ebp-4], 0
		mov	eax, [ebp-1Ch]
		mov	eax, dword_42D950[eax*4]
		mov	ecx, [ebp-20h]
		test	byte ptr [eax+ecx+28h],	1
		jnz	short loc_41303C
		call	sub_40BD71
		mov	dword ptr [eax], 9
		call	sub_40BD5E
		and	dword ptr [eax], 0
		jmp	short loc_413058
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41303C:				; CODE XREF: sub_412F9C+89j
		push	dword ptr [ebp+14h]
		push	dword ptr [ebp+10h]
		push	dword ptr [ebp+0Ch]
		push	edi
		call	sub_41309E
		add	esp, 10h
		mov	esi, eax
		mov	[ebp-28h], esi
		mov	ebx, edx
		mov	[ebp-24h], ebx

loc_413058:				; CODE XREF: sub_412F9C+9Ej
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_413071
		mov	edx, ebx
		jmp	short loc_413096
sub_412F9C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_413068	proc near		; DATA XREF: .rdata:0042B3D8o
		mov	edi, [ebp+8]
		mov	ebx, [ebp-24h]
		mov	esi, [ebp-28h]
sub_413068	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_413071	proc near		; CODE XREF: sub_412F9C+C3p
		push	edi
		call	sub_416F35
		pop	ecx
		retn
sub_413071	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_412F9C

loc_413079:				; CODE XREF: sub_412F9C+2Ej
					; sub_412F9C+3Aj ...
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 9
		call	sub_409E35

loc_413091:				; CODE XREF: sub_412F9C+27j
		or	esi, 0FFFFFFFFh
		mov	edx, esi

loc_413096:				; CODE XREF: sub_412F9C+CAj
		mov	eax, esi
		call	sub_406036
		retn
; END OF FUNCTION CHUNK	FOR sub_412F9C

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41309E	proc near		; CODE XREF: sub_412F9C+AAp
					; sub_413137+11p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	esi
		call	sub_416FE9
		or	edi, 0FFFFFFFFh
		pop	ecx
		cmp	eax, edi
		jnz	short loc_4130C9
		call	sub_40BD71
		mov	dword ptr [eax], 9

loc_4130C3:				; CODE XREF: sub_41309E+50j
					; sub_41309E+5Cj
		mov	eax, edi
		mov	edx, edi
		jmp	short loc_413116
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4130C9:				; CODE XREF: sub_41309E+18j
		push	[ebp+arg_C]
		lea	ecx, [ebp+var_8]
		push	ecx
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	eax
		call	ds:SetFilePointerEx
		test	eax, eax
		jnz	short loc_4130F0
		call	ds:GetLastError
		push	eax
		call	sub_40BD3B
		pop	ecx
		jmp	short loc_4130C3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4130F0:				; CODE XREF: sub_41309E+41j
		mov	eax, [ebp+var_8]
		mov	edx, [ebp+var_4]
		and	eax, edx
		cmp	eax, edi
		jz	short loc_4130C3
		mov	eax, [ebp+var_8]
		mov	ecx, esi
		and	esi, 3Fh
		sar	ecx, 6
		imul	esi, 38h
		mov	ecx, dword_42D950[ecx*4]
		and	byte ptr [ecx+esi+28h],	0FDh

loc_413116:				; CODE XREF: sub_41309E+29j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_41309E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41311C	proc near		; CODE XREF: sub_411DFC+48p
					; sub_411F85+AEp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_412F9C
		add	esp, 10h
		pop	ebp
		retn
sub_41311C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413137	proc near		; CODE XREF: sub_40B5A3+64p
					; sub_40B67C+C4p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_41309E
		add	esp, 10h
		pop	ebp
		retn
sub_413137	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413152	proc near		; CODE XREF: sub_40B7C6+Fp

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	esi
		call	sub_411027
		push	eax
		call	sub_419C5C
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_4131FE
		push	1
		call	sub_40A9AD
		pop	ecx
		push	2
		pop	ebx
		cmp	esi, eax
		jnz	short loc_413189
		mov	edi, offset dword_42DB54
		jmp	short loc_413199
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413189:				; CODE XREF: sub_413152+2Ej
		push	ebx
		call	sub_40A9AD
		pop	ecx
		cmp	esi, eax
		jnz	short loc_4131FE
		mov	edi, offset dword_42DB58

loc_413199:				; CODE XREF: sub_413152+35j
		inc	dword_42D6F4
		lea	ecx, [esi+0Ch]
		mov	eax, [ecx]
		nop
		test	eax, 4C0h
		jnz	short loc_4131FE
		mov	eax, 282h
		lock or	[ecx], eax
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_4131E7
		push	1000h
		call	sub_40FDE5
		push	0		; lpMem
		mov	[edi], eax
		call	sub_40F0A8
		mov	eax, [edi]
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_4131E7
		lea	ecx, [esi+14h]
		mov	[esi+8], ebx
		mov	[esi+4], ecx
		mov	[esi], ecx
		mov	[esi+18h], ebx

loc_4131E3:				; CODE XREF: sub_413152+AAj
		mov	al, 1
		jmp	short loc_413200
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4131E7:				; CODE XREF: sub_413152+66j
					; sub_413152+81j
		mov	[esi+4], eax
		mov	eax, [edi]
		mov	[esi], eax
		mov	dword ptr [esi+8], 1000h
		mov	dword ptr [esi+18h], 1000h
		jmp	short loc_4131E3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4131FE:				; CODE XREF: sub_413152+1Bj
					; sub_413152+40j ...
		xor	al, al

loc_413200:				; CODE XREF: sub_413152+93j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_413152	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413205	proc near		; CODE XREF: sub_40B7C6+35p

arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		jz	short loc_41323D
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		lea	edi, [esi+0Ch]
		mov	eax, [edi]
		nop
		shr	eax, 9
		test	al, 1
		jz	short loc_41323B
		push	esi
		call	sub_40AD89
		pop	ecx
		mov	eax, 0FFFFFD7Fh
		lock and [edi],	eax
		xor	eax, eax
		mov	[esi+18h], eax
		mov	[esi+4], eax
		mov	[esi], eax

loc_41323B:				; CODE XREF: sub_413205+1Bj
		pop	edi
		pop	esi

loc_41323D:				; CODE XREF: sub_413205+9j
		pop	ebp
		retn
sub_413205	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41323F	proc near		; CODE XREF: sub_40BB95+ADp
					; sub_411D7B-10Bp ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		inc	dword_42D6F4
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	edi, 1000h
		push	edi
		call	sub_40FDE5
		push	0		; lpMem
		mov	[esi+4], eax
		call	sub_40F0A8
		cmp	dword ptr [esi+4], 0
		lea	eax, [esi+0Ch]
		pop	ecx
		pop	ecx
		jz	short loc_413277
		push	40h
		pop	ecx
		lock or	[eax], ecx
		jmp	short loc_413288
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413277:				; CODE XREF: sub_41323F+2Ej
		mov	ecx, 400h
		lock or	[eax], ecx
		lea	eax, [esi+14h]
		push	2
		mov	[esi+4], eax
		pop	edi

loc_413288:				; CODE XREF: sub_41323F+36j
		mov	[esi+18h], edi
		mov	eax, [esi+4]
		and	dword ptr [esi+8], 0
		pop	edi
		mov	[esi], eax
		pop	esi
		pop	ebp
		retn
sub_41323F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413298	proc near		; CODE XREF: sub_419244+44p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_0]
		test	edi, edi
		jnz	short loc_4132B0
		push	[ebp+arg_4]
		call	sub_40FDE5
		pop	ecx
		jmp	short loc_4132D4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4132B0:				; CODE XREF: sub_413298+Bj
		push	esi
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jnz	short loc_4132C1
		push	edi		; lpMem
		call	sub_40F0A8
		pop	ecx
		jmp	short loc_4132D1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4132C1:				; CODE XREF: sub_413298+1Ej
		cmp	esi, 0FFFFFFE0h
		jbe	short loc_4132EB

loc_4132C6:				; CODE XREF: sub_413298+46j
					; sub_413298+51j
		call	sub_40BD71
		mov	dword ptr [eax], 0Ch

loc_4132D1:				; CODE XREF: sub_413298+27j
		xor	eax, eax

loc_4132D3:				; CODE XREF: sub_413298+67j
		pop	esi

loc_4132D4:				; CODE XREF: sub_413298+16j
		pop	edi
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4132D7:				; CODE XREF: sub_413298+65j
		call	sub_40E3D8
		test	eax, eax
		jz	short loc_4132C6
		push	esi
		call	sub_40C5ED
		pop	ecx
		test	eax, eax
		jz	short loc_4132C6

loc_4132EB:				; CODE XREF: sub_413298+2Cj
		push	esi		; dwBytes
		push	edi		; lpMem
		push	0		; dwFlags
		push	hHeap		; hHeap
		call	ds:HeapReAlloc
		test	eax, eax
		jz	short loc_4132D7
		jmp	short loc_4132D3
sub_413298	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413301	proc near		; CODE XREF: sub_40E9C3+73p
					; sub_41A0EE+60p

SrcStr		= word ptr -8
CharType	= word ptr -4
arg_0		= word ptr  8
arg_4		= word ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	ax, [ebp+arg_0]
		mov	ecx, 0FFFFh
		push	esi
		mov	si, [ebp+arg_4]
		movzx	edx, si
		cmp	ax, cx
		jz	short loc_413365
		mov	ecx, 100h
		cmp	ax, cx
		jnb	short loc_413338
		movzx	ecx, ax
		mov	eax, off_42C0C4
		movzx	eax, word ptr [eax+ecx*2]
		and	eax, edx
		jmp	short loc_413367
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413338:				; CODE XREF: sub_413301+25j
		mov	[ebp+SrcStr], ax
		xor	eax, eax
		mov	[ebp+CharType],	ax
		lea	eax, [ebp+CharType]
		push	eax		; lpCharType
		push	1		; cchSrc
		lea	eax, [ebp+SrcStr]
		push	eax		; lpSrcStr
		push	1		; dwInfoType
		call	sub_419CE6
		add	esp, 10h
		test	eax, eax
		jz	short loc_413365
		movzx	eax, [ebp+CharType]
		movzx	ecx, si
		and	eax, ecx
		jmp	short loc_413367
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413365:				; CODE XREF: sub_413301+1Bj
					; sub_413301+57j
		xor	eax, eax

loc_413367:				; CODE XREF: sub_413301+35j
					; sub_413301+62j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_413301	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41336C	proc near		; CODE XREF: sub_4133A0+69p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		test	al, 20h
		jz	short loc_41337C
		push	5
		jmp	short loc_413393
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41337C:				; CODE XREF: sub_41336C+Aj
		test	al, 8
		jz	short loc_413385
		xor	eax, eax
		inc	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413385:				; CODE XREF: sub_41336C+12j
		test	al, 4
		jz	short loc_41338D
		push	2
		jmp	short loc_413393
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41338D:				; CODE XREF: sub_41336C+1Bj
		test	al, 1
		jz	short loc_413396
		push	3

loc_413393:				; CODE XREF: sub_41336C+Ej
					; sub_41336C+1Fj
		pop	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413396:				; CODE XREF: sub_41336C+23j
		movzx	eax, al
		and	eax, 2
		add	eax, eax
		pop	ebp
		retn
sub_41336C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4133A0	proc near		; CODE XREF: .text:loc_41B878p

var_B4		= qword	ptr -0B4h
var_AC		= qword	ptr -0ACh
var_A4		= qword	ptr -0A4h
var_9C		= dword	ptr -9Ch
Arguments	= dword	ptr -80h
var_40		= dword	ptr -40h
var_4		= dword	ptr -4

		mov	edi, edi
		push	ebx
		mov	ebx, esp
		push	ecx
		push	ecx
		and	esp, 0FFFFFFF0h
		add	esp, 4
		push	ebp
		mov	ebp, [ebx+4]
		mov	[esp+8+var_4], ebp
		mov	ebp, esp
		sub	esp, 88h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	esi
		mov	esi, [ebx+20h]
		lea	eax, [ebx+18h]
		push	edi
		push	esi
		push	eax
		push	dword ptr [ebx+8]
		call	sub_41346E
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_413406
		and	[ebp+var_40], 0FFFFFFFEh
		push	eax		; int
		lea	eax, [ebx+18h]
		push	eax		; int
		lea	eax, [ebx+10h]
		push	eax		; int
		push	dword ptr [ebx+0Ch] ; int
		lea	eax, [ebx+20h]
		push	dword ptr [ebx+8] ; int
		push	eax		; int
		lea	eax, [ebp+Arguments]
		push	eax		; Arguments
		call	sub_41367E
		mov	esi, [ebx+20h]
		add	esp, 1Ch

loc_413406:				; CODE XREF: sub_4133A0+3Ej
		push	dword ptr [ebx+8]
		call	sub_41336C
		pop	ecx
		mov	edi, eax
		call	sub_40C7FA
		test	al, al
		jz	short loc_413443
		test	edi, edi
		jz	short loc_413443
		fld	qword ptr [ebx+18h]
		push	esi
		sub	esp, 18h
		fstp	[esp+0B4h+var_A4]
		fldz
		fstp	[esp+0B4h+var_AC]
		fld	qword ptr [ebx+10h]
		fstp	[esp+0B4h+var_B4]
		push	dword ptr [ebx+0Ch]
		push	edi
		call	sub_4139A3
		add	esp, 24h
		jmp	short loc_41345B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413443:				; CODE XREF: sub_4133A0+78j
					; sub_4133A0+7Cj
		push	edi
		call	sub_413974
		mov	[esp+9Ch+var_9C], 0FFFFh
		push	esi
		call	sub_413C39
		fld	qword ptr [ebx+18h]
		pop	ecx
		pop	ecx

loc_41345B:				; CODE XREF: sub_4133A0+A1j
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		mov	esp, ebx
		pop	ebx
		retn
sub_4133A0	endp ; sp =  4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41346E	proc near		; CODE XREF: sub_4133A0+34p
					; sub_419FCE+71p

var_28		= qword	ptr -28h
var_10		= qword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		mov	esi, ebx
		and	esi, 1Fh
		test	bl, 8
		jz	short loc_41349B
		test	[ebp+arg_8], 1
		jz	short loc_41349B
		push	1
		call	sub_413C65
		pop	ecx
		and	esi, 0FFFFFFF7h
		jmp	loc_413638
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41349B:				; CODE XREF: sub_41346E+15j
					; sub_41346E+1Bj
		mov	eax, ebx
		and	eax, dword ptr [ebp+arg_8]
		test	al, 4
		jz	short loc_4134B4
		push	4
		call	sub_413C65
		pop	ecx
		and	esi, 0FFFFFFFBh
		jmp	loc_413638
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4134B4:				; CODE XREF: sub_41346E+34j
		test	bl, 1
		jz	loc_413557
		test	[ebp+arg_8], 8
		jz	loc_413557
		push	8
		call	sub_413C65
		mov	eax, dword ptr [ebp+arg_8]
		pop	ecx
		mov	ecx, 0C00h
		and	eax, ecx
		jz	short loc_41352F
		cmp	eax, 400h
		jz	short loc_413519
		cmp	eax, 800h
		jz	short loc_413503
		cmp	eax, ecx
		jnz	short loc_41354F
		mov	ecx, [ebp+arg_4]
		fldz
		fcomp	qword ptr [ecx]
		fnstsw	ax
		fld	ds:dbl_422620
		test	ah, 5
		jnp	short loc_41354D
		jmp	short loc_41354B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413503:				; CODE XREF: sub_41346E+79j
		mov	ecx, [ebp+arg_4]
		fldz
		fcomp	qword ptr [ecx]
		fnstsw	ax
		test	ah, 5
		jnp	short loc_41353D
		fld	ds:dbl_422620
		jmp	short loc_41354B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413519:				; CODE XREF: sub_41346E+72j
		mov	ecx, [ebp+arg_4]
		fldz
		fcomp	qword ptr [ecx]
		fnstsw	ax
		test	ah, 5
		jp	short loc_413545
		fld	ds:dbl_422620
		jmp	short loc_41354D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41352F:				; CODE XREF: sub_41346E+6Bj
		mov	ecx, [ebp+arg_4]
		fldz
		fcomp	qword ptr [ecx]
		fnstsw	ax
		test	ah, 5
		jp	short loc_413545

loc_41353D:				; CODE XREF: sub_41346E+A1j
		fld	ds:dbl_422618
		jmp	short loc_41354D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413545:				; CODE XREF: sub_41346E+B7j
					; sub_41346E+CDj
		fld	ds:dbl_422618

loc_41354B:				; CODE XREF: sub_41346E+93j
					; sub_41346E+A9j
		fchs

loc_41354D:				; CODE XREF: sub_41346E+91j
					; sub_41346E+BFj ...
		fstp	qword ptr [ecx]

loc_41354F:				; CODE XREF: sub_41346E+7Dj
		and	esi, 0FFFFFFFEh
		jmp	loc_413638
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413557:				; CODE XREF: sub_41346E+49j
					; sub_41346E+53j
		test	bl, 2
		jz	loc_413638
		test	[ebp+arg_8], 10h
		jz	loc_413638
		mov	eax, [ebp+arg_4]
		push	edi
		mov	edi, ebx
		shr	edi, 4
		fld	qword ptr [eax]
		and	edi, 1
		fldz
		fucomp	st(1)
		fnstsw	ax
		test	ah, 44h
		jnp	loc_413623
		lea	eax, [ebp+var_4]
		push	eax
		push	ecx
		push	ecx
		fstp	[esp+28h+var_28]
		call	sub_413A45
		mov	edx, [ebp+var_4]
		add	esp, 0Ch
		add	edx, 0FFFFFA00h
		fst	[ebp+var_10]
		fldz
		cmp	edx, 0FFFFFBCEh
		jge	short loc_4135B5
		xor	edi, edi
		fmulp	st(1), st
		inc	edi
		jmp	short loc_41361C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4135B5:				; CODE XREF: sub_41346E+13Ej
		fcompp	st(1), st
		fnstsw	ax
		test	ah, 41h
		jnz	short loc_4135C7
		mov	[ebp+var_4], 1
		jmp	short loc_4135CB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4135C7:				; CODE XREF: sub_41346E+14Ej
		and	[ebp+var_4], 0

loc_4135CB:				; CODE XREF: sub_41346E+157j
		mov	eax, dword ptr [ebp+var_10+6]
		mov	ecx, 0FFFFFC03h
		and	eax, 0Fh
		or	eax, 10h
		mov	word ptr [ebp+var_10+6], ax
		cmp	edx, ecx
		jge	short loc_413611
		mov	eax, dword ptr [ebp+var_10]
		sub	ecx, edx
		mov	edx, dword ptr [ebp+var_10+4]

loc_4135E9:				; CODE XREF: sub_41346E+1A1j
		test	byte ptr [ebp+var_10], 1
		jz	short loc_4135F4
		test	edi, edi
		jnz	short loc_4135F4
		inc	edi

loc_4135F4:				; CODE XREF: sub_41346E+17Fj
					; sub_41346E+183j
		shr	eax, 1
		test	byte ptr [ebp+var_10+4], 1
		mov	dword ptr [ebp+var_10],	eax
		jz	short loc_413607
		or	eax, 80000000h
		mov	dword ptr [ebp+var_10],	eax

loc_413607:				; CODE XREF: sub_41346E+18Fj
		shr	edx, 1
		mov	dword ptr [ebp+var_10+4], edx
		sub	ecx, 1
		jnz	short loc_4135E9

loc_413611:				; CODE XREF: sub_41346E+171j
		cmp	[ebp+var_4], 0
		fld	[ebp+var_10]
		jz	short loc_41361C
		fchs

loc_41361C:				; CODE XREF: sub_41346E+145j
					; sub_41346E+1AAj
		mov	eax, [ebp+arg_4]
		fstp	qword ptr [eax]
		jmp	short loc_413628
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413623:				; CODE XREF: sub_41346E+113j
		xor	edi, edi
		fstp	st
		inc	edi

loc_413628:				; CODE XREF: sub_41346E+1B3j
		test	edi, edi
		pop	edi
		jz	short loc_413635
		push	10h
		call	sub_413C65
		pop	ecx

loc_413635:				; CODE XREF: sub_41346E+1BDj
		and	esi, 0FFFFFFFDh

loc_413638:				; CODE XREF: sub_41346E+28j
					; sub_41346E+41j ...
		test	bl, 10h
		jz	short loc_41364E
		test	[ebp+arg_8], 20h
		jz	short loc_41364E
		push	20h
		call	sub_413C65
		pop	ecx
		and	esi, 0FFFFFFEFh

loc_41364E:				; CODE XREF: sub_41346E+1CDj
					; sub_41346E+1D3j
		xor	eax, eax
		test	esi, esi
		pop	esi
		setz	al
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_41346E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_41365B(DWORD Arguments,int,int,int,int,int)
sub_41365B	proc near		; CODE XREF: sub_419FCE+BCp

Arguments	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	0		; int
		push	[ebp+arg_14]	; int
		push	[ebp+arg_10]	; int
		push	[ebp+arg_C]	; int
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	[ebp+Arguments]	; Arguments
		call	sub_41367E
		add	esp, 1Ch
		pop	ebp
		retn
sub_41365B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_41367E(DWORD Arguments,int,int,int,int,int,int)
sub_41367E	proc near		; CODE XREF: sub_4133A0+5Bp
					; sub_41365B+19p

Arguments	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+Arguments]
		xor	ecx, ecx
		push	ebx
		xor	ebx, ebx
		inc	ebx
		mov	[eax+4], ecx
		mov	eax, [ebp+Arguments]
		push	edi
		mov	edi, 0C000000Dh
		mov	[eax+8], ecx
		mov	eax, [ebp+Arguments]
		mov	[eax+0Ch], ecx
		mov	ecx, [ebp+arg_8]
		test	cl, 10h
		jz	short loc_4136B4
		mov	eax, [ebp+Arguments]
		mov	edi, 0C000008Fh
		or	[eax+4], ebx

loc_4136B4:				; CODE XREF: sub_41367E+29j
		test	cl, 2
		jz	short loc_4136C5
		mov	eax, [ebp+Arguments]
		mov	edi, 0C0000093h
		or	dword ptr [eax+4], 2

loc_4136C5:				; CODE XREF: sub_41367E+39j
		test	cl, 1
		jz	short loc_4136D6
		mov	eax, [ebp+Arguments]
		mov	edi, 0C0000091h
		or	dword ptr [eax+4], 4

loc_4136D6:				; CODE XREF: sub_41367E+4Aj
		test	cl, 4
		jz	short loc_4136E7
		mov	eax, [ebp+Arguments]
		mov	edi, 0C000008Eh
		or	dword ptr [eax+4], 8

loc_4136E7:				; CODE XREF: sub_41367E+5Bj
		test	cl, 8
		jz	short loc_4136F8
		mov	eax, [ebp+Arguments]
		mov	edi, 0C0000090h
		or	dword ptr [eax+4], 10h

loc_4136F8:				; CODE XREF: sub_41367E+6Cj
		mov	ecx, [ebp+Arguments]
		push	esi
		mov	esi, [ebp+arg_4]
		mov	eax, [esi]
		shl	eax, 4
		not	eax
		xor	eax, [ecx+8]
		and	eax, 10h
		xor	[ecx+8], eax
		mov	ecx, [ebp+Arguments]
		mov	eax, [esi]
		add	eax, eax
		not	eax
		xor	eax, [ecx+8]
		and	eax, 8
		xor	[ecx+8], eax
		mov	ecx, [ebp+Arguments]
		mov	eax, [esi]
		shr	eax, 1
		not	eax
		xor	eax, [ecx+8]
		and	eax, 4
		xor	[ecx+8], eax
		mov	ecx, [ebp+Arguments]
		mov	eax, [esi]
		shr	eax, 3
		not	eax
		xor	eax, [ecx+8]
		and	eax, 2
		xor	[ecx+8], eax
		mov	eax, [esi]
		mov	ecx, [ebp+Arguments]
		shr	eax, 5
		not	eax
		xor	eax, [ecx+8]
		and	eax, ebx
		xor	[ecx+8], eax
		call	sub_413CC0
		mov	edx, eax
		test	dl, 1
		jz	short loc_41376B
		mov	ecx, [ebp+Arguments]
		or	dword ptr [ecx+0Ch], 10h

loc_41376B:				; CODE XREF: sub_41367E+E4j
		test	dl, 4
		jz	short loc_413777
		mov	eax, [ebp+Arguments]
		or	dword ptr [eax+0Ch], 8

loc_413777:				; CODE XREF: sub_41367E+F0j
		test	dl, 8
		jz	short loc_413783
		mov	eax, [ebp+Arguments]
		or	dword ptr [eax+0Ch], 4

loc_413783:				; CODE XREF: sub_41367E+FCj
		test	dl, 10h
		jz	short loc_41378F
		mov	eax, [ebp+Arguments]
		or	dword ptr [eax+0Ch], 2

loc_41378F:				; CODE XREF: sub_41367E+108j
		test	dl, 20h
		jz	short loc_41379A
		mov	eax, [ebp+Arguments]
		or	[eax+0Ch], ebx

loc_41379A:				; CODE XREF: sub_41367E+114j
		mov	eax, [esi]
		mov	ecx, 0C00h
		and	eax, ecx
		jz	short loc_4137DA
		cmp	eax, 400h
		jz	short loc_4137CE
		cmp	eax, 800h
		jz	short loc_4137BF
		cmp	eax, ecx
		jnz	short loc_4137E0
		mov	eax, [ebp+Arguments]
		or	dword ptr [eax], 3
		jmp	short loc_4137E0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4137BF:				; CODE XREF: sub_41367E+133j
		mov	ecx, [ebp+Arguments]
		mov	eax, [ecx]
		and	eax, 0FFFFFFFEh
		or	eax, 2

loc_4137CA:				; CODE XREF: sub_41367E+15Aj
		mov	[ecx], eax
		jmp	short loc_4137E0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4137CE:				; CODE XREF: sub_41367E+12Cj
		mov	ecx, [ebp+Arguments]
		mov	eax, [ecx]
		and	eax, 0FFFFFFFDh
		or	eax, ebx
		jmp	short loc_4137CA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4137DA:				; CODE XREF: sub_41367E+125j
		mov	eax, [ebp+Arguments]
		and	dword ptr [eax], 0FFFFFFFCh

loc_4137E0:				; CODE XREF: sub_41367E+137j
					; sub_41367E+13Fj ...
		mov	eax, [esi]
		mov	ecx, 300h
		and	eax, ecx
		jz	short loc_41380B
		cmp	eax, 200h
		jz	short loc_4137FE
		cmp	eax, ecx
		jnz	short loc_413818
		mov	eax, [ebp+Arguments]
		and	dword ptr [eax], 0FFFFFFE3h
		jmp	short loc_413818
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4137FE:				; CODE XREF: sub_41367E+172j
		mov	ecx, [ebp+Arguments]
		mov	eax, [ecx]
		and	eax, 0FFFFFFE7h
		or	eax, 4
		jmp	short loc_413816
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41380B:				; CODE XREF: sub_41367E+16Bj
		mov	ecx, [ebp+Arguments]
		mov	eax, [ecx]
		and	eax, 0FFFFFFEBh
		or	eax, 8

loc_413816:				; CODE XREF: sub_41367E+18Bj
		mov	[ecx], eax

loc_413818:				; CODE XREF: sub_41367E+176j
					; sub_41367E+17Ej
		mov	eax, [ebp+Arguments]
		mov	ecx, [ebp+arg_C]
		shl	ecx, 5
		xor	ecx, [eax]
		and	ecx, 1FFE0h
		xor	[eax], ecx
		mov	eax, [ebp+Arguments]
		or	[eax+20h], ebx
		cmp	[ebp+arg_18], 0
		jz	short loc_413863
		mov	eax, [ebp+Arguments]
		and	dword ptr [eax+20h], 0FFFFFFE1h
		mov	eax, [ebp+arg_10]
		fld	dword ptr [eax]
		mov	eax, [ebp+Arguments]
		fstp	dword ptr [eax+10h]
		mov	eax, [ebp+Arguments]
		or	[eax+60h], ebx
		mov	eax, [ebp+Arguments]
		mov	ebx, [ebp+arg_14]
		and	dword ptr [eax+60h], 0FFFFFFE1h
		mov	eax, [ebp+Arguments]
		fld	dword ptr [ebx]
		fstp	dword ptr [eax+50h]
		jmp	short loc_41389D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413863:				; CODE XREF: sub_41367E+1B7j
		mov	ecx, [ebp+Arguments]
		mov	eax, [ecx+20h]
		and	eax, 0FFFFFFE3h
		or	eax, 2
		mov	[ecx+20h], eax
		mov	eax, [ebp+arg_10]
		fld	qword ptr [eax]
		mov	eax, [ebp+Arguments]
		fstp	qword ptr [eax+10h]
		mov	eax, [ebp+Arguments]
		or	[eax+60h], ebx
		mov	ecx, [ebp+Arguments]
		mov	ebx, [ebp+arg_14]
		mov	eax, [ecx+60h]
		and	eax, 0FFFFFFE3h
		or	eax, 2
		mov	[ecx+60h], eax
		mov	eax, [ebp+Arguments]
		fld	qword ptr [ebx]
		fstp	qword ptr [eax+50h]

loc_41389D:				; CODE XREF: sub_41367E+1E3j
		call	sub_413C26
		lea	eax, [ebp+Arguments]
		push	eax		; lpArguments
		push	1		; nNumberOfArguments
		push	0		; dwExceptionFlags
		push	edi		; dwExceptionCode
		call	ds:RaiseException
		mov	ecx, [ebp+Arguments]
		mov	eax, [ecx+8]
		test	al, 10h
		jz	short loc_4138C1
		and	dword ptr [esi], 0FFFFFFFEh
		mov	eax, [ecx+8]

loc_4138C1:				; CODE XREF: sub_41367E+23Bj
		test	al, 8
		jz	short loc_4138CB
		and	dword ptr [esi], 0FFFFFFFBh
		mov	eax, [ecx+8]

loc_4138CB:				; CODE XREF: sub_41367E+245j
		test	al, 4
		jz	short loc_4138D5
		and	dword ptr [esi], 0FFFFFFF7h
		mov	eax, [ecx+8]

loc_4138D5:				; CODE XREF: sub_41367E+24Fj
		test	al, 2
		jz	short loc_4138DF
		and	dword ptr [esi], 0FFFFFFEFh
		mov	eax, [ecx+8]

loc_4138DF:				; CODE XREF: sub_41367E+259j
		test	al, 1
		jz	short loc_4138E6
		and	dword ptr [esi], 0FFFFFFDFh

loc_4138E6:				; CODE XREF: sub_41367E+263j
		mov	eax, [ecx]
		mov	edx, 0FFFFF3FFh
		and	eax, 3
		sub	eax, 0
		jz	short loc_41392A
		sub	eax, 1
		jz	short loc_41391C
		sub	eax, 1
		jz	short loc_41390C
		sub	eax, 1
		jnz	short loc_41392C
		or	dword ptr [esi], 0C00h
		jmp	short loc_41392C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41390C:				; CODE XREF: sub_41367E+27Fj
		mov	eax, [esi]
		and	eax, 0FFFFFBFFh
		or	eax, 800h

loc_413918:				; CODE XREF: sub_41367E+2AAj
		mov	[esi], eax
		jmp	short loc_41392C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41391C:				; CODE XREF: sub_41367E+27Aj
		mov	eax, [esi]
		and	eax, 0FFFFF7FFh
		or	eax, 400h
		jmp	short loc_413918
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41392A:				; CODE XREF: sub_41367E+275j
		and	[esi], edx

loc_41392C:				; CODE XREF: sub_41367E+284j
					; sub_41367E+28Cj ...
		mov	eax, [ecx]
		shr	eax, 2
		and	eax, 7
		sub	eax, 0
		jz	short loc_413952
		sub	eax, 1
		jz	short loc_413947
		sub	eax, 1
		jnz	short loc_41395D
		and	[esi], edx
		jmp	short loc_41395D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413947:				; CODE XREF: sub_41367E+2BEj
		mov	eax, [esi]
		and	eax, edx
		or	eax, 200h
		jmp	short loc_41395B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413952:				; CODE XREF: sub_41367E+2B9j
		mov	eax, [esi]
		and	eax, edx
		or	eax, 300h

loc_41395B:				; CODE XREF: sub_41367E+2D2j
		mov	[esi], eax

loc_41395D:				; CODE XREF: sub_41367E+2C3j
					; sub_41367E+2C7j
		cmp	[ebp+arg_18], 0
		pop	esi
		jz	short loc_41396B
		fld	dword ptr [ecx+50h]
		fstp	dword ptr [ebx]
		jmp	short loc_413970
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41396B:				; CODE XREF: sub_41367E+2E4j
		fld	qword ptr [ecx+50h]
		fstp	qword ptr [ebx]

loc_413970:				; CODE XREF: sub_41367E+2EBj
		pop	edi
		pop	ebx
		pop	ebp
		retn
sub_41367E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413974	proc near		; CODE XREF: sub_4133A0+A4p
					; sub_4139A3+77p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		cmp	eax, 1
		jz	short loc_413996
		add	eax, 0FFFFFFFEh
		cmp	eax, 1
		ja	short loc_4139A1
		call	sub_40BD71
		mov	dword ptr [eax], 22h
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413996:				; CODE XREF: sub_413974+Bj
		call	sub_40BD71
		mov	dword ptr [eax], 21h

loc_4139A1:				; CODE XREF: sub_413974+13j
		pop	ebp
		retn
sub_413974	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4139A3	proc near		; CODE XREF: sub_4133A0+99p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= qword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= qword	ptr  20h
arg_20		= dword	ptr  28h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		sub	esp, 20h
		xor	ecx, ecx
		mov	eax, ecx

loc_4139B2:				; CODE XREF: sub_4139A3+1Cj
		cmp	ds:dword_422468[eax*8],	edx
		jz	short loc_4139C3
		inc	eax
		cmp	eax, 1Dh
		jl	short loc_4139B2
		jmp	short loc_4139CA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4139C3:				; CODE XREF: sub_4139A3+16j
		mov	ecx, ds:off_42246C[eax*8]

loc_4139CA:				; CODE XREF: sub_4139A3+1Ej
		mov	[ebp+var_1C], ecx
		test	ecx, ecx
		jz	short loc_413A26
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_18], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_14]
		push	esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_C], eax
		mov	eax, dword ptr [ebp+arg_18]
		push	0FFFFh
		push	[ebp+arg_20]
		mov	dword ptr [ebp+var_8], eax
		mov	eax, dword ptr [ebp+arg_18+4]
		mov	[ebp+var_20], esi
		mov	dword ptr [ebp+var_8+4], eax
		call	sub_413C39
		lea	eax, [ebp+var_20]
		push	eax
		call	sub_40C821
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_413A20
		push	esi
		call	sub_413974
		pop	ecx

loc_413A20:				; CODE XREF: sub_4139A3+74j
		fld	[ebp+var_8]
		pop	esi
		jmp	short loc_413A41
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413A26:				; CODE XREF: sub_4139A3+2Cj
		push	0FFFFh
		push	[ebp+arg_20]
		call	sub_413C39
		push	[ebp+arg_0]
		call	sub_413974
		fld	[ebp+arg_18]
		add	esp, 0Ch

loc_413A41:				; CODE XREF: sub_4139A3+81j
		mov	esp, ebp
		pop	ebp
		retn
sub_4139A3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413A45	proc near		; CODE XREF: sub_41346E+122p

var_14		= qword	ptr -14h
arg_0		= qword	ptr  8
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		fld	[ebp+arg_0]
		fldz
		fucom	st(1)
		fnstsw	ax
		push	esi
		test	ah, 44h
		jp	short loc_413A62
		fstp	st(1)
		xor	esi, esi
		jmp	loc_413B1B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413A62:				; CODE XREF: sub_413A45+12j
		push	edi
		mov	di, word ptr [ebp+arg_0+6]
		movzx	eax, di
		test	eax, 7FF0h
		jnz	loc_413AF7
		mov	ecx, dword ptr [ebp+arg_0+4]
		mov	edx, dword ptr [ebp+arg_0]
		test	ecx, 0FFFFFh
		jnz	short loc_413A87
		test	edx, edx
		jz	short loc_413AF7

loc_413A87:				; CODE XREF: sub_413A45+3Cj
		fcompp	st(1), st
		mov	esi, 0FFFFFC03h
		fnstsw	ax
		push	ebx
		xor	ebx, ebx
		test	ah, 41h
		jnz	short loc_413A99
		inc	ebx

loc_413A99:				; CODE XREF: sub_413A45+51j
		test	byte ptr [ebp+arg_0+6],	10h
		jnz	short loc_413AC6

loc_413A9F:				; CODE XREF: sub_413A45+78j
		add	ecx, ecx
		mov	eax, ecx
		mov	dword ptr [ebp+arg_0+4], ecx
		shr	eax, 10h
		test	edx, edx
		jns	short loc_413AB8
		or	ecx, 1
		mov	eax, ecx
		mov	dword ptr [ebp+arg_0+4], ecx
		shr	eax, 10h

loc_413AB8:				; CODE XREF: sub_413A45+66j
		add	edx, edx
		dec	esi
		test	al, 10h
		jz	short loc_413A9F
		mov	di, word ptr [ebp+arg_0+6]
		mov	dword ptr [ebp+arg_0], edx

loc_413AC6:				; CODE XREF: sub_413A45+58j
		mov	eax, 0FFEFh
		and	di, ax
		test	ebx, ebx
		movzx	eax, di
		mov	word ptr [ebp+arg_0+6],	di
		pop	ebx
		jz	short loc_413AE3
		or	eax, 8000h
		mov	word ptr [ebp+arg_0+6],	ax

loc_413AE3:				; CODE XREF: sub_413A45+93j
		fld	[ebp+arg_0]
		push	0
		push	ecx
		push	ecx
		fstp	[esp+14h+var_14]
		call	sub_413B23
		add	esp, 0Ch
		jmp	short loc_413B1A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413AF7:				; CODE XREF: sub_413A45+2Aj
					; sub_413A45+40j
		push	0
		push	ecx
		fstp	st
		push	ecx
		fstp	[esp+14h+var_14]
		call	sub_413B23
		movzx	esi, di
		add	esp, 0Ch
		shr	esi, 4
		and	esi, 7FFh
		sub	esi, 3FEh

loc_413B1A:				; CODE XREF: sub_413A45+B0j
		pop	edi

loc_413B1B:				; CODE XREF: sub_413A45+18j
		mov	eax, [ebp+arg_8]
		mov	[eax], esi
		pop	esi
		pop	ebp
		retn
sub_413A45	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413B23	proc near		; CODE XREF: sub_413A45+A8p
					; sub_413A45+BBp

var_8		= qword	ptr -8
arg_6		= word ptr  0Eh
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	ecx, [ebp+arg_8]
		movzx	eax, [ebp+arg_6]
		fld	qword ptr [ebp+8]
		and	eax, 800Fh
		fstp	[ebp+var_8]
		lea	ecx, [ecx+3FEh]
		shl	ecx, 4
		or	ecx, eax
		mov	word ptr [ebp+var_8+6],	cx
		fld	[ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn
sub_413B23	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413B52	proc near		; CODE XREF: sub_413CD2+21p
					; .text:0041B845p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_4], 7FF00000h
		mov	eax, [ebp+arg_0]
		jnz	short loc_413B6A
		test	eax, eax
		jnz	short loc_413B7C
		inc	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413B6A:				; CODE XREF: sub_413B52+Fj
		cmp	[ebp+arg_4], 0FFF00000h
		jnz	short loc_413B7C
		test	eax, eax
		jnz	short loc_413B7C
		push	2

loc_413B79:				; CODE XREF: sub_413B52+3Dj
					; sub_413B52+58j
		pop	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413B7C:				; CODE XREF: sub_413B52+13j
					; sub_413B52+1Fj ...
		mov	cx, word ptr [ebp+arg_4+2]
		mov	edx, 7FF8h
		and	cx, dx
		cmp	cx, dx
		jnz	short loc_413B91
		push	3
		jmp	short loc_413B79
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413B91:				; CODE XREF: sub_413B52+39j
		mov	edx, 7FF0h
		cmp	cx, dx
		jnz	short loc_413BAC
		test	[ebp+arg_4], 7FFFFh
		jnz	short loc_413BA8
		test	eax, eax
		jz	short loc_413BAC

loc_413BA8:				; CODE XREF: sub_413B52+50j
		push	4
		jmp	short loc_413B79
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413BAC:				; CODE XREF: sub_413B52+47j
					; sub_413B52+54j
		xor	eax, eax
		pop	ebp
		retn
sub_413B52	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_413BB0	proc near		; CODE XREF: sub_41940C+235p
		push	8
		push	offset dword_42B3E0
		call	sub_405FF0
		cmp	dword_42D4E4, 1
		jl	short loc_413C20
		mov	eax, [ebp+8]
		test	al, 40h
		jz	short loc_413C16
		cmp	dword_42C400, 0
		jz	short loc_413C16
		and	dword ptr [ebp-4], 0
		ldmxcsr	dword ptr [ebp+8]

loc_413BDD:				; CODE XREF: sub_413BB0+64j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		jmp	short loc_413C20
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413BE6:				; DATA XREF: .rdata:0042B3F4o
		mov	eax, [ebp-14h]
		mov	eax, [eax]
		cmp	dword ptr [eax], 0C0000005h
		jz	short loc_413BFE
		cmp	dword ptr [eax], 0C000001Dh
		jz	short loc_413BFE
		xor	eax, eax
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413BFE:				; CODE XREF: sub_413BB0+41j
					; sub_413BB0+49j
		xor	eax, eax
		inc	eax
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413C02:				; DATA XREF: .rdata:0042B3F8o
		mov	esp, [ebp-18h]
		and	dword_42C400, 0
		and	dword ptr [ebp+8], 0FFFFFFBFh
		ldmxcsr	dword ptr [ebp+8]
		jmp	short loc_413BDD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413C16:				; CODE XREF: sub_413BB0+1Aj
					; sub_413BB0+23j
		and	eax, 0FFFFFFBFh
		mov	[ebp+8], eax
		ldmxcsr	dword ptr [ebp+8]

loc_413C20:				; CODE XREF: sub_413BB0+13j
					; sub_413BB0+34j
		call	sub_406036
		retn
sub_413BB0	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413C26	proc near		; CODE XREF: sub_41367E:loc_41389Dp

var_4		= word ptr -4

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		fnstsw	[ebp+var_4]
		fnclex
		movsx	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_413C26	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413C39	proc near		; CODE XREF: sub_4133A0+B1p
					; sub_4139A3+61p ...

var_8		= word ptr -8
var_4		= word ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		fstcw	[ebp+var_4]
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		not	ecx
		and	cx, [ebp+var_4]
		and	eax, [ebp+arg_4]
		or	cx, ax
		mov	[ebp+var_8], cx
		fldcw	[ebp+var_8]
		movsx	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_413C39	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413C65	proc near		; CODE XREF: sub_41346E+1Fp
					; sub_41346E+38p ...

var_C		= qword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		sub	esp, 0Ch
		test	cl, 1
		jz	short loc_413C7F
		fld	ds:tbyte_422630
		fistp	[ebp+var_4]
		wait

loc_413C7F:				; CODE XREF: sub_413C65+Ej
		test	cl, 8
		jz	short loc_413C94
		fstsw	ax
		fld	ds:tbyte_422630
		fstp	[ebp+var_C]
		wait
		fstsw	ax

loc_413C94:				; CODE XREF: sub_413C65+1Dj
		test	cl, 10h
		jz	short loc_413CA3
		fld	ds:tbyte_42263C
		fstp	[ebp+var_C]
		wait

loc_413CA3:				; CODE XREF: sub_413C65+32j
		test	cl, 4
		jz	short loc_413CB1
		fldz
		fld1
		fdivrp	st(1), st
		fstp	st
		wait

loc_413CB1:				; CODE XREF: sub_413C65+41j
		test	cl, 20h
		jz	short loc_413CBC
		fldpi
		fstp	[ebp+var_C]
		wait

loc_413CBC:				; CODE XREF: sub_413C65+4Fj
		mov	esp, ebp
		pop	ebp
		retn
sub_413C65	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413CC0	proc near		; CODE XREF: sub_41367E+DAp

var_4		= word ptr -4

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		fstsw	[ebp+var_4]
		movsx	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_413CC0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_413CD2	proc near		; CODE XREF: sub_41506C+Fp

var_8		= qword	ptr -8
arg_0		= qword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	cx, word ptr [ebp+arg_0+6]
		mov	edx, 7FF0h
		mov	ax, cx
		and	ax, dx
		cmp	ax, dx
		jnz	short loc_413D1E
		fld	qword ptr [ebp+8]
		push	ecx
		push	ecx
		fstp	[esp+8+var_8]
		call	sub_413B52
		pop	ecx
		pop	ecx
		sub	eax, 1
		jz	short loc_413D17
		sub	eax, 1
		jz	short loc_413D12
		sub	eax, 1
		jz	short loc_413D0E
		xor	eax, eax
		inc	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413D0E:				; CODE XREF: sub_413CD2+35j
		push	2
		jmp	short loc_413D14
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413D12:				; CODE XREF: sub_413CD2+30j
		push	4

loc_413D14:				; CODE XREF: sub_413CD2+3Ej
		pop	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413D17:				; CODE XREF: sub_413CD2+2Bj
		mov	eax, 200h
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413D1E:				; CODE XREF: sub_413CD2+17j
		movzx	ecx, cx
		and	ecx, 8000h
		test	ax, ax
		jnz	short loc_413D4A
		test	dword ptr [ebp+0Ch], 0FFFFFh
		jnz	short loc_413D3B
		cmp	dword ptr [ebp+arg_0], 0
		jz	short loc_413D4A

loc_413D3B:				; CODE XREF: sub_413CD2+61j
		neg	ecx
		sbb	ecx, ecx
		and	ecx, 0FFFFFF90h
		lea	eax, [ecx+80h]
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413D4A:				; CODE XREF: sub_413CD2+58j
					; sub_413CD2+67j
		fld	[ebp+arg_0]
		fldz
		fucompp
		fnstsw	ax
		test	ah, 44h
		jp	short loc_413D64
		neg	ecx
		sbb	ecx, ecx
		and	ecx, 0FFFFFFE0h
		lea	eax, [ecx+40h]
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413D64:				; CODE XREF: sub_413CD2+84j
		neg	ecx
		sbb	ecx, ecx
		and	ecx, 0FFFFFF08h
		lea	eax, [ecx+100h]
		pop	ebp
		retn
sub_413CD2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_413D76(LPWSTR	lpWideCharStr,int,int,int)
sub_413D76	proc near		; CODE XREF: sub_413EBA+10p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= byte ptr -4
lpWideCharStr	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	edi
		mov	edi, [ebp+arg_4]
		test	edi, edi
		jz	loc_413EA4
		mov	ebx, [ebp+arg_8]
		test	ebx, ebx
		jz	loc_413EA4
		cmp	byte ptr [edi],	0
		jnz	short loc_413DB0
		mov	eax, [ebp+lpWideCharStr]
		test	eax, eax
		jz	loc_413EB2
		xor	ecx, ecx
		mov	[eax], cx
		jmp	loc_413EB2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413DB0:				; CODE XREF: sub_413D76+23j
		push	esi
		push	[ebp+arg_C]
		lea	ecx, [ebp+var_10]
		call	sub_40A217
		mov	eax, [ebp+var_C]
		cmp	dword ptr [eax+8], 0FDE9h
		jnz	short loc_413DE9
		push	offset dword_42DB5C
		push	ebx
		push	edi
		push	[ebp+lpWideCharStr]
		call	sub_41995F
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jns	loc_413E8F
		jmp	loc_413E8C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413DE9:				; CODE XREF: sub_413D76+50j
		cmp	dword ptr [eax+0A8h], 0
		jnz	short loc_413E07
		mov	ecx, [ebp+lpWideCharStr]
		test	ecx, ecx
		jz	short loc_413DFF
		movzx	eax, byte ptr [edi]
		mov	[ecx], ax

loc_413DFF:				; CODE XREF: sub_413D76+81j
		xor	esi, esi
		inc	esi
		jmp	loc_413E8F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413E07:				; CODE XREF: sub_413D76+7Aj
		lea	eax, [ebp+var_C]
		push	eax
		movzx	eax, byte ptr [edi]
		push	eax
		call	sub_4157BB
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_413E5C
		mov	esi, [ebp+var_C]
		cmp	dword ptr [esi+4], 1
		jle	short loc_413E4C
		cmp	ebx, [esi+4]
		jl	short loc_413E4F
		xor	eax, eax
		cmp	[ebp+lpWideCharStr], eax
		setnz	al
		push	eax		; cchWideChar
		push	[ebp+lpWideCharStr] ; lpWideCharStr
		push	dword ptr [esi+4] ; cchMultiByte
		push	edi		; lpMultiByteStr
		push	9		; int
		push	dword ptr [esi+8] ; CodePage
		call	sub_4154FC
		mov	esi, [ebp+var_C]
		add	esp, 18h
		test	eax, eax
		jnz	short loc_413E57

loc_413E4C:				; CODE XREF: sub_413D76+ABj
		cmp	ebx, [esi+4]

loc_413E4F:				; CODE XREF: sub_413D76+B0j
		jb	short loc_413E81
		cmp	byte ptr [edi+1], 0
		jz	short loc_413E81

loc_413E57:				; CODE XREF: sub_413D76+D4j
		mov	esi, [esi+4]
		jmp	short loc_413E8F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413E5C:				; CODE XREF: sub_413D76+A2j
		xor	eax, eax
		cmp	[ebp+lpWideCharStr], eax
		setnz	al
		xor	esi, esi
		push	eax		; cchWideChar
		push	[ebp+lpWideCharStr] ; lpWideCharStr
		mov	eax, [ebp+var_C]
		inc	esi
		push	esi		; cchMultiByte
		push	edi		; lpMultiByteStr
		push	9		; int
		push	dword ptr [eax+8] ; CodePage
		call	sub_4154FC
		add	esp, 18h
		test	eax, eax
		jnz	short loc_413E8F

loc_413E81:				; CODE XREF: sub_413D76:loc_413E4Fj
					; sub_413D76+DFj
		call	sub_40BD71
		mov	dword ptr [eax], 2Ah

loc_413E8C:				; CODE XREF: sub_413D76+6Ej
		or	esi, 0FFFFFFFFh

loc_413E8F:				; CODE XREF: sub_413D76+68j
					; sub_413D76+8Cj ...
		cmp	[ebp+var_4], 0
		jz	short loc_413E9F
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_413E9F:				; CODE XREF: sub_413D76+11Dj
		mov	eax, esi
		pop	esi
		jmp	short loc_413EB4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_413EA4:				; CODE XREF: sub_413D76+Fj
					; sub_413D76+1Aj
		and	dword_42DB5C, 0
		and	dword_42DB60, 0

loc_413EB2:				; CODE XREF: sub_413D76+2Aj
					; sub_413D76+35j
		xor	eax, eax

loc_413EB4:				; CODE XREF: sub_413D76+12Cj
		pop	edi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_413D76	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_413EBA(LPWSTR	lpWideCharStr,int,int)
sub_413EBA	proc near		; CODE XREF: sub_4111A0+227p
					; sub_4111A0+244p

lpWideCharStr	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	0		; int
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	[ebp+lpWideCharStr] ; lpWideCharStr
		call	sub_413D76
		add	esp, 10h
		pop	ebp
		retn
sub_413EBA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_413ED4	proc near		; DATA XREF: .rdata:0041D174o
		push	0Ah		; ProcessorFeature
		call	ds:__imp_IsProcessorFeaturePresent
		mov	dword_42DC90, eax
		xor	eax, eax
		retn
sub_413ED4	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_413EF0:				; CODE XREF: .text:0040BE56j
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		and	esp, 0FFFFFFF0h
		fxch	st(1)
		fstp	qword ptr [esp]
		fstp	qword ptr [esp+8]
		call	sub_413F09
		leave
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_413F09	proc near		; CODE XREF: .text:00413F02p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
arg_0		= byte ptr  4

		movlpd	xmm0, oword ptr	[esp+arg_0]
		movlpd	xmm7, oword ptr	ds:oword_422660
		movlpd	xmm2, oword ptr	ds:oword_422670
		andpd	xmm7, xmm0
		movsd	xmm4, xmm0
		psrlq	xmm0, 2Ch
		pextrw	eax, xmm0, 0
		orpd	xmm7, xmm2
		pextrw	ecx, xmm4, 3
		and	eax, 0FFh
		add	eax, 1
		and	eax, 1FEh
		mulsd	xmm7, qword ptr	ds:oword_425670[eax*4]
		movlpd	xmm5, oword ptr	ds:oword_425670[eax*4]
		add	eax, eax
		movapd	xmm6, oword ptr	ds:oword_425A80[eax*4]
		mov	edx, 7FEFh
		sub	edx, ecx
		sub	ecx, 10h
		or	ecx, edx
		cmp	ecx, 80000000h
		jnb	loc_414257
		mov	ecx, 0
		mov	edx, 3FE7Fh

loc_413F86:				; CODE XREF: sub_413F09+452j
					; sub_413F09+51Cj
		movd	xmm1, edx
		psubq	xmm0, xmm1
		psrlq	xmm0, 8
		cvtdq2pd xmm0, xmm0
		movlpd	xmm1, oword ptr	ds:oword_4226B0+8
		movsd	xmm3, xmm7
		psrlq	xmm7, 26h
		pextrw	eax, xmm7, 0
		andpd	xmm4, oword ptr	ds:oword_422660
		and	eax, 0FFh
		add	eax, 1
		and	eax, 1FEh
		mulsd	xmm3, ds:qword_426290[eax*4]
		mulsd	xmm5, ds:qword_426290[eax*4]
		add	eax, eax
		addpd	xmm6, oword ptr	ds:oword_4266A0[eax*4]
		orpd	xmm4, oword ptr	ds:oword_422670
		addsd	xmm6, xmm0
		andpd	xmm1, xmm4
		movsd	xmm2, xmm3
		psrlq	xmm3, 1Fh
		pextrw	eax, xmm3, 0
		movlpd	xmm0, oword ptr	ds:oword_4226B0+8
		subsd	xmm4, xmm1
		movlpd	xmm7, oword ptr	ds:oword_4226C0
		and	eax, 1FFh
		add	eax, 1
		and	eax, 3FEh
		mulsd	xmm5, ds:qword_426EB0[eax*4]
		mulsd	xmm2, ds:qword_426EB0[eax*4]
		addpd	xmm6, oword ptr	ds:oword_4276C0[eax*8]
		andpd	xmm0, xmm5
		subsd	xmm5, xmm0
		addsd	xmm7, xmm2
		movsd	xmm3, xmm0
		mulsd	xmm0, xmm1
		mulsd	xmm1, xmm5
		mulsd	xmm3, xmm4
		subsd	xmm2, xmm0
		mulsd	xmm4, xmm5
		movsd	xmm0, xmm6
		subsd	xmm2, xmm1
		addsd	xmm6, xmm7
		movlpd	xmm1, oword ptr	[esp+arg_0+8]
		pextrw	eax, xmm1, 3
		subsd	xmm2, xmm3
		subsd	xmm0, xmm6
		movlpd	xmm3, oword ptr	ds:oword_4226B0+8
		pextrw	edx, xmm6, 3
		subsd	xmm2, xmm4
		movsd	xmm4, xmm6
		addsd	xmm0, xmm7
		subsd	xmm7, xmm2
		subsd	xmm6, xmm2
		unpcklpd xmm7, xmm7
		and	eax, 7FF0h
		cmp	eax, 7FF0h
		jnb	loc_4145C8
		and	edx, 7FF0h
		sub	eax, 3FF0h
		add	eax, edx
		mov	edx, 40A0h
		sub	edx, eax
		sub	eax, 3C70h
		or	edx, eax
		cmp	edx, 80000000h
		jnb	loc_41498A

loc_4140D8:				; CODE XREF: sub_413F09+AA8j
		subsd	xmm4, xmm6
		subsd	xmm2, xmm4
		movlpd	xmm4, oword ptr	ds:oword_4226B0+8
		andpd	xmm3, xmm1
		andpd	xmm4, xmm6
		subsd	xmm0, xmm2
		xorpd	xmm2, xmm2
		mov	edx, 4060h
		pinsrw	xmm2, edx, 3
		movsd	xmm5, xmm3
		mulsd	xmm3, xmm4
		subsd	xmm6, xmm4
		subsd	xmm1, xmm5
		mulsd	xmm3, xmm2
		mulsd	xmm5, xmm6
		movapd	xmm2, oword ptr	ds:oword_4286D0
		mulsd	xmm4, xmm1
		cvtsd2si eax, xmm3
		mulsd	xmm6, xmm1
		movapd	xmm1, oword ptr	ds:oword_4286E0
		addsd	xmm5, xmm4
		pshufd	xmm4, xmm6, 0EEh
		addsd	xmm5, xmm6
		mov	edx, 1FF7Fh
		sub	edx, eax
		add	eax, 1E1FFh
		or	edx, eax
		sub	eax, 1E1FFh
		cmp	edx, 0
		jle	loc_41470E
		add	ecx, eax
		and	eax, 7Fh
		and	ecx, 0FFFFFF80h
		add	ecx, 1FF80h
		addsd	xmm4, xmm0
		movsd	xmm0, xmm3
		addsd	xmm3, ds:qword_422650
		mulpd	xmm2, xmm7
		subsd	xmm3, ds:qword_422650
		mulpd	xmm7, xmm7
		subsd	xmm0, xmm3
		add	eax, eax
		add	eax, eax
		add	eax, eax
		add	eax, eax
		movapd	xmm3, oword ptr	ds:oword_4286F0[eax]
		movapd	xmm6, oword ptr	ds:oword_422690
		mulpd	xmm1, xmm7
		addpd	xmm2, xmm1
		pshufd	xmm1, xmm2, 0EEh
		mulsd	xmm2, xmm7
		xorpd	xmm7, xmm7
		mov	edx, 3F80h
		addsd	xmm2, xmm1
		pinsrw	xmm7, edx, 3
		addsd	xmm2, xmm4
		movlpd	xmm4, oword ptr	ds:oword_4226B0
		movd	xmm1, ecx
		mulsd	xmm2, qword ptr	[esp+arg_0+8]
		mulsd	xmm0, xmm7
		psllq	xmm1, 2Dh
		pshufd	xmm1, xmm1, 44h
		movapd	xmm7, oword ptr	ds:oword_4226A0
		addsd	xmm5, xmm2
		mulpd	xmm3, xmm1
		addsd	xmm0, xmm5
		unpcklpd xmm0, xmm0
		mulpd	xmm6, xmm0
		mulsd	xmm4, xmm0
		mulpd	xmm0, xmm0
		addpd	xmm7, xmm6
		mulpd	xmm7, xmm0
		mulsd	xmm0, xmm3
		pshufd	xmm6, xmm7, 0EEh
		mulsd	xmm0, xmm7
		pshufd	xmm5, xmm3, 0EEh
		mulsd	xmm6, xmm3
		mulsd	xmm4, xmm3
		addsd	xmm0, xmm5
		sub	esp, 10h
		addsd	xmm0, xmm6
		addsd	xmm0, xmm4
		addsd	xmm0, xmm3
		movlpd	oword ptr [esp+4], xmm0
		fld	qword ptr [esp+10h+var_C]
		add	esp, 10h
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414257:				; CODE XREF: sub_413F09+6Dj
		movlpd	xmm1, oword ptr	[esp+arg_0+8]
		movlpd	xmm3, oword ptr	ds:oword_422680
		movd	eax, xmm1
		movsd	xmm2, xmm1
		andpd	xmm1, xmm3
		psrlq	xmm1, 20h
		movd	ecx, xmm1
		cmp	ecx, 7FF00000h
		jnb	loc_414360
		or	eax, ecx
		cmp	eax, 0
		jz	loc_414685
		cmp	edx, 0
		jge	loc_41439F
		neg	edx
		add	edx, 7FEFh
		psllq	xmm3, 34h
		orpd	xmm2, xmm3
		mov	ecx, 3F3h
		movd	xmm3, ecx
		psrlq	xmm1, 14h
		psubd	xmm1, xmm3
		pxor	xmm3, xmm3
		pmaxsw	xmm1, xmm3
		psllq	xmm2, xmm1
		pcmpeqd	xmm2, xmm3
		pmovmskb eax, xmm2
		mov	ecx, edx
		and	edx, 7FFFh
		cmp	edx, 7FF0h
		jnb	loc_414488
		and	eax, 0FFh
		cmp	eax, 0FFh
		jnz	loc_414581
		movlpd	xmm1, oword ptr	[esp+arg_0+8]
		movlpd	xmm2, oword ptr	[esp+arg_0+8]
		mov	ecx, 3F4h
		movd	xmm3, ecx
		andpd	xmm1, oword ptr	ds:oword_422680
		psrlq	xmm1, 34h
		psubd	xmm1, xmm3
		movlpd	xmm3, oword ptr	ds:oword_4226E0
		psllq	xmm2, xmm1
		pcmpeqd	xmm2, xmm3
		pmovmskb eax, xmm2
		and	eax, 0FFh
		mov	ecx, 3FF01h
		add	ecx, eax
		and	ecx, 40000h
		cmp	edx, 10h
		jb	short loc_4143A4
		mov	edx, 0BFE7Fh
		movlpd	xmm3, oword ptr	ds:oword_422660
		movlpd	xmm2, oword ptr	ds:oword_422670
		jmp	loc_413F86
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414360:				; CODE XREF: sub_413F09+377j
		movlpd	xmm7, oword ptr	[esp+arg_0]
		movlpd	xmm4, oword ptr	[esp+arg_0]
		movd	edx, xmm7
		psrlq	xmm7, 20h
		movd	eax, xmm7
		mov	ecx, eax
		and	eax, 7FFFFFFFh
		cmp	eax, 7FF00000h
		jb	loc_4145FD
		ja	loc_41456F
		cmp	edx, 0
		ja	loc_41456F
		jmp	loc_4145FD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41439F:				; CODE XREF: sub_413F09+38Bj
		mov	ecx, 0

loc_4143A4:				; CODE XREF: sub_413F09+43Bj
		xorpd	xmm0, xmm0
		mov	eax, 43F0h
		pinsrw	xmm0, eax, 3
		movlpd	xmm7, oword ptr	ds:oword_422660
		movlpd	xmm2, oword ptr	ds:oword_422670
		mulsd	xmm0, xmm4
		movd	edx, xmm4
		psrlq	xmm4, 20h
		movd	eax, xmm4
		cmp	edx, 0
		jz	short loc_41442A

loc_4143D8:				; CODE XREF: sub_413F09+52Cj
		andpd	xmm7, xmm0
		movsd	xmm4, xmm0
		andpd	xmm0, oword ptr	ds:oword_422680
		psrlq	xmm0, 2Ch
		pextrw	eax, xmm0, 0
		orpd	xmm7, xmm2
		and	eax, 0FFh
		add	eax, 1
		and	eax, 1FEh
		mulsd	xmm7, qword ptr	ds:oword_425670[eax*4]
		movlpd	xmm5, oword ptr	ds:oword_425670[eax*4]
		add	eax, eax
		movapd	xmm6, oword ptr	ds:oword_425A80[eax*4]
		mov	edx, 43E7Fh
		jmp	loc_413F86
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41442A:				; CODE XREF: sub_413F09+4CDj
					; sub_413F09+69Bj
		mov	edx, eax
		and	edx, 7FFFFFFFh
		cmp	edx, 0
		jnz	short loc_4143D8
		mov	edx, dword ptr [esp+arg_0+0Ch]
		and	edx, 80000000h
		cmp	edx, 0
		jz	short loc_414477
		shl	ecx, 0Dh
		and	eax, ecx
		mov	edx, 7FF00000h
		or	edx, eax
		movd	xmm0, edx
		psllq	xmm0, 20h
		movlpd	xmm1, oword ptr	ds:oword_422670
		movlpd	xmm2, oword ptr	[esp+arg_0]
		divsd	xmm1, xmm2
		mov	edx, 1Bh
		jmp	loc_4146DE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414477:				; CODE XREF: sub_413F09+53Bj
		shl	ecx, 0Dh
		and	eax, ecx
		cmp	eax, 0
		jnz	loc_414529
		fldz
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414488:				; CODE XREF: sub_413F09+3D6j
		movlpd	xmm3, oword ptr	ds:oword_422660
		xorpd	xmm1, xmm1
		andpd	xmm3, xmm4
		pcmpeqd	xmm1, xmm3
		pmovmskb ecx, xmm1
		and	ecx, 0FFh
		cmp	ecx, 0FFh
		jnz	loc_41456F
		pextrw	ecx, xmm4, 3
		and	ecx, 8000h
		cmp	ecx, 0
		jz	loc_414553
		and	eax, 0FFh
		cmp	eax, 0FFh
		jnz	short loc_414537
		movlpd	xmm1, oword ptr	[esp+arg_0+8]
		movlpd	xmm2, oword ptr	[esp+arg_0+8]
		mov	ecx, 3F4h
		movd	xmm3, ecx
		andpd	xmm1, oword ptr	ds:oword_422680
		psrlq	xmm1, 34h
		psubd	xmm1, xmm3
		pxor	xmm3, xmm3
		psllq	xmm2, xmm1
		pcmpeqd	xmm2, xmm3
		pmovmskb eax, xmm2
		and	eax, 0FFh
		cmp	eax, 0FFh
		jz	short loc_414537
		movlpd	xmm1, oword ptr	[esp+arg_0+8]
		pextrw	eax, xmm1, 3
		and	eax, 8000h
		cmp	eax, 0
		jz	short loc_414530

loc_414529:				; CODE XREF: sub_413F09+576j
		fld	qword ptr ds:oword_4226E0
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414530:				; CODE XREF: sub_413F09+61Ej
		fld	ds:dbl_4226D8
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414537:				; CODE XREF: sub_413F09+5C7j
					; sub_413F09+609j
		movlpd	xmm1, oword ptr	[esp+arg_0+8]
		pextrw	eax, xmm1, 3
		and	eax, 8000h
		cmp	eax, 0
		jz	loc_41466F
		fldz
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414553:				; CODE XREF: sub_413F09+5B7j
		movlpd	xmm1, oword ptr	[esp+arg_0+8]
		pextrw	eax, xmm1, 3
		and	eax, 8000h
		cmp	eax, 0
		jz	loc_41466F
		fldz
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41456F:				; CODE XREF: sub_413F09+482j
					; sub_413F09+48Bj ...
		addsd	xmm4, xmm4
		movsd	xmm0, xmm4
		mov	edx, 3EEh
		jmp	loc_4146DE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414581:				; CODE XREF: sub_413F09+3E6j
		movlpd	xmm2, oword ptr	[esp+arg_0]
		movd	eax, xmm2
		psrlq	xmm2, 20h
		movd	edx, xmm2
		and	edx, 7FFFFFFFh
		or	eax, edx
		mov	ecx, 0
		cmp	eax, 0
		jz	loc_41442A
		movlpd	xmm1, oword ptr	ds:oword_4226C0+8
		movlpd	xmm0, oword ptr	ds:oword_422700
		mulsd	xmm1, xmm1
		mov	edx, 1Ch
		jmp	loc_4146DE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4145C8:				; CODE XREF: sub_413F09+1A2j
		movlpd	xmm4, oword ptr	[esp+arg_0]
		movlpd	xmm2, oword ptr	[esp+arg_0+8]
		movd	eax, xmm4
		cmp	eax, 0
		jnz	short loc_4145FD
		psrlq	xmm4, 20h
		movd	edx, xmm4
		cmp	edx, 3FF00000h
		jz	loc_4146DB
		cmp	edx, 0BFF00000h
		jnz	short loc_4145FD
		fld1
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4145FD:				; CODE XREF: sub_413F09+47Cj
					; sub_413F09+491j ...
		movlpd	xmm3, oword ptr	ds:oword_422660
		xorpd	xmm1, xmm1
		andpd	xmm3, xmm2
		pcmpeqd	xmm1, xmm3
		pmovmskb eax, xmm1
		and	eax, 0FFh
		cmp	eax, 0FFh
		jnz	short loc_414676
		pextrw	eax, xmm2, 3
		movlpd	xmm4, oword ptr	[esp+arg_0]
		and	eax, 8000h
		xor	ecx, 0BFF00000h
		or	edx, ecx
		cmp	edx, 0
		jz	loc_4146DB
		cmp	eax, 0
		jz	short loc_41465B
		pextrw	eax, xmm4, 3
		and	eax, 7FF0h
		cmp	eax, 3FF0h
		jb	short loc_41466F
		fldz
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41465B:				; CODE XREF: sub_413F09+73Cj
		pextrw	eax, xmm4, 3
		and	eax, 7FF0h
		cmp	eax, 3FF0h
		jnb	short loc_41466F
		fldz
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41466F:				; CODE XREF: sub_413F09+641j
					; sub_413F09+65Dj ...
		fld	ds:dbl_4226D0
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414676:				; CODE XREF: sub_413F09+716j
		addsd	xmm2, xmm2
		movsd	xmm0, xmm2
		mov	edx, 3EEh
		jmp	short loc_4146DE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414685:				; CODE XREF: sub_413F09+382j
		movd	eax, xmm4
		psrlq	xmm4, 20h
		movd	edx, xmm4
		and	edx, 7FFFFFFFh
		mov	ecx, eax
		or	eax, edx
		movlpd	xmm0, oword ptr	ds:oword_422670
		mov	edx, 1Ah
		cmp	eax, 0
		jz	short loc_4146DE
		movd	eax, xmm4
		mov	edx, 1Dh
		and	eax, 7FFFFFFFh
		cmp	eax, 7FF00000h
		ja	short loc_4146DE
		jb	short loc_4146CA
		cmp	ecx, 0
		ja	short loc_4146DE

loc_4146CA:				; CODE XREF: sub_413F09+7BAj
		sub	esp, 10h
		movlpd	oword ptr [esp+10h+var_C], xmm0
		fld	qword ptr [esp+10h+var_C]
		add	esp, 10h
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4146DB:				; CODE XREF: sub_413F09+6E3j
					; sub_413F09+733j
		fld1
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4146DE:				; CODE XREF: sub_413F09+569j
					; sub_413F09+673j ...
		sub	esp, 1Ch
		movlpd	oword ptr [esp+1Ch+var_C], xmm0
		mov	[esp+1Ch+var_10], edx
		mov	edx, esp
		add	edx, 10h
		mov	[esp+1Ch+var_14], edx
		add	edx, 18h
		mov	[esp+1Ch+var_18], edx
		sub	edx, 8
		mov	[esp+1Ch+var_1C], edx
		call	sub_419DD8
		fld	qword ptr [esp+1Ch+var_C]
		add	esp, 1Ch
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41470E:				; CODE XREF: sub_413F09+250j
		cmp	eax, 0
		jle	short loc_41473B
		cmp	eax, 40000h
		jnb	loc_41495A
		push	esi
		mov	edx, eax
		and	eax, 7Fh
		add	ecx, 3FF00h
		sub	edx, 80h
		and	edx, 0FFFFFF80h
		push	edi
		mov	edi, 3FF0h
		jmp	short loc_414761
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41473B:				; CODE XREF: sub_413F09+808j
		cmp	eax, 0FFFC0200h
		jle	loc_414937
		push	esi
		mov	edx, eax
		and	eax, 7Fh
		add	ecx, 80h
		and	edx, 0FFFFFF80h
		add	edx, 3FE80h
		push	edi
		mov	edi, 0

loc_414761:				; CODE XREF: sub_413F09+830j
		addsd	xmm4, xmm0
		movsd	xmm0, xmm3
		addsd	xmm3, ds:qword_422650
		mov	esi, edx
		sub	esi, 1FF80h
		mulpd	xmm2, xmm7
		subsd	xmm3, ds:qword_422650
		mulpd	xmm7, xmm7
		subsd	xmm0, xmm3
		add	eax, eax
		add	eax, eax
		add	eax, eax
		add	eax, eax
		movapd	xmm3, oword ptr	ds:oword_4286F0[eax]
		movapd	xmm6, oword ptr	ds:oword_422690
		mulpd	xmm1, xmm7
		addpd	xmm2, xmm1
		pshufd	xmm1, xmm2, 0EEh
		mulsd	xmm2, xmm7
		addsd	xmm2, xmm1
		addsd	xmm2, xmm4
		movlpd	xmm4, oword ptr	ds:oword_4226B0
		movd	xmm1, edx
		sub	edx, 1FF80h
		neg	edx
		sar	edx, 7
		add	edx, 2
		mov	eax, edx
		and	eax, 20h
		add	edx, eax
		xorpd	xmm7, xmm7
		mov	eax, 3F80h
		pinsrw	xmm7, eax, 3
		mulsd	xmm2, qword ptr	[esp+8+arg_0+8]
		mulsd	xmm0, xmm7
		psllq	xmm1, 2Dh
		pshufd	xmm1, xmm1, 44h
		movapd	xmm7, oword ptr	ds:oword_4226A0
		addsd	xmm5, xmm2
		mulpd	xmm3, xmm1
		addsd	xmm0, xmm5
		unpcklpd xmm0, xmm0
		mulpd	xmm6, xmm0
		mulsd	xmm4, xmm0
		mulpd	xmm0, xmm0
		addpd	xmm7, xmm6
		mulpd	xmm7, xmm0
		mulsd	xmm0, xmm3
		pshufd	xmm6, xmm7, 0EEh
		mulsd	xmm0, xmm7
		pshufd	xmm5, xmm3, 0EEh
		mulsd	xmm6, xmm3
		mulsd	xmm4, xmm3
		movd	xmm7, ecx
		psllq	xmm7, 2Dh
		movd	xmm2, edx
		pcmpeqd	xmm1, xmm1
		psllq	xmm1, xmm2
		addsd	xmm0, xmm5
		addsd	xmm0, xmm6
		andpd	xmm1, xmm3
		addsd	xmm0, xmm4
		xorpd	xmm6, xmm6
		pcmpeqd	xmm4, xmm4
		psllq	xmm4, xmm2
		subsd	xmm3, xmm1
		movsd	xmm2, xmm1
		addsd	xmm1, xmm0
		andpd	xmm1, xmm4
		pinsrw	xmm6, edi, 3
		pop	edi
		subsd	xmm2, xmm1
		addsd	xmm0, xmm2
		addsd	xmm0, xmm3
		cmp	esi, 0
		jg	short loc_4148ED
		pop	esi
		mulsd	xmm0, xmm7
		mulsd	xmm1, xmm7
		addsd	xmm0, xmm1
		mulsd	xmm6, xmm0
		addsd	xmm0, xmm6
		pextrw	eax, xmm0, 3
		and	eax, 7FF0h
		mov	edx, 18h
		cmp	eax, 7FF0h
		jz	loc_4146DE
		mov	edx, 19h
		cmp	eax, 0
		jz	loc_4146DE
		sub	esp, 10h
		movlpd	oword ptr [esp+10h+var_C], xmm0
		fld	qword ptr [esp+10h+var_C]
		add	esp, 10h
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4148ED:				; CODE XREF: sub_413F09+994j
		pop	esi
		addsd	xmm0, xmm1
		mulsd	xmm0, xmm7
		mulsd	xmm6, xmm0
		addsd	xmm0, xmm6
		pextrw	eax, xmm0, 3
		and	eax, 7FF0h
		mov	edx, 18h
		cmp	eax, 7FF0h
		jz	loc_4146DE
		mov	edx, 19h
		cmp	eax, 0
		jz	loc_4146DE
		sub	esp, 10h
		movlpd	oword ptr [esp+10h+var_C], xmm0
		fld	qword ptr [esp+10h+var_C]
		add	esp, 10h
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414937:				; CODE XREF: sub_413F09+837j
					; sub_413F09+AFBj
		movlpd	xmm0, oword ptr	ds:oword_4226F0+8
		movd	xmm1, ecx
		mulsd	xmm0, xmm0
		psllq	xmm1, 2Dh
		orpd	xmm0, xmm1
		mov	edx, 19h
		jmp	loc_4146DE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41495A:				; CODE XREF: sub_413F09+80Fj
					; sub_413F09+B01j
		mov	edx, 18h
		cmp	ecx, 0
		jz	short loc_414979
		movlpd	xmm0, oword ptr	ds:oword_4226E0+8
		mulsd	xmm0, qword ptr	ds:oword_4226F0
		jmp	loc_4146DE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414979:				; CODE XREF: sub_413F09+A59j
		movlpd	xmm0, oword ptr	ds:oword_4226F0
		mulsd	xmm0, xmm0
		jmp	loc_4146DE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41498A:				; CODE XREF: sub_413F09+1C9j
		pshufd	xmm4, xmm1, 44h
		mulpd	xmm4, xmm6
		pextrw	eax, xmm4, 3
		and	eax, 7FF0h
		mov	edx, 40A0h
		sub	edx, eax
		sub	eax, 3C70h
		or	edx, eax
		cmp	edx, 80000000h
		jb	loc_4140D8
		cmp	eax, 80000000h
		jb	short loc_4149DE
		or	ecx, 1FF80h
		movd	xmm0, ecx
		psllq	xmm0, 2Dh
		sub	esp, 10h
		movlpd	oword ptr [esp+10h+var_C], xmm0
		fld	qword ptr [esp+10h+var_C]
		add	esp, 10h
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4149DE:				; CODE XREF: sub_413F09+AB3j
		movlpd	xmm4, oword ptr	[esp+arg_0]
		pextrw	edx, xmm4, 3
		and	edx, 7FF0h
		sub	edx, 3FF0h
		pextrw	eax, xmm1, 3
		xor	eax, edx
		and	eax, 8000h
		cmp	eax, 0
		jnz	loc_414937
		jmp	loc_41495A
sub_413F09	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		mov	byte ptr [ebp-90h], 0FEh
		or	ch, ch
		jnz	short loc_414A65
		fxch	st(1)

loc_414A1D:				; CODE XREF: .text:00414A7Bj
		fyl2x
		jmp	short loc_414A3D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_414A30	proc near		; DATA XREF: .rdata:0042275Ao

; FUNCTION CHUNK AT 00414D34 SIZE 0000001D BYTES

		mov	byte ptr [ebp-90h], 0FEh
		xor	ch, ch
		fldl2e
		fmulp	st(1), st

loc_414A3D:				; CODE XREF: .text:00414A1Fj
		call	sub_414B6D
		fld1
		faddp	st(1), st
		test	byte ptr [ebp-9Fh], 1
		jz	short loc_414A53
		fld1
		fdivrp	st(1), st

loc_414A53:				; CODE XREF: sub_414A30+1Dj
		test	dl, 40h
		jnz	short loc_414A5A
		fscale

loc_414A5A:				; CODE XREF: sub_414A30+26j
		or	ch, ch
		jz	short loc_414A60
		fchs

loc_414A60:				; CODE XREF: sub_414A30+2Cj
		jmp	loc_414D34
sub_414A30	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414A65:				; CODE XREF: .text:00414A19j
		call	sub_414BB0
		or	eax, eax
		jz	short loc_414A82
		xor	ch, ch
		cmp	eax, 2
		jz	short loc_414A77
		not	ch

loc_414A77:				; CODE XREF: .text:00414A73j
		fxch	st(1)
		fabs
		jmp	short loc_414A1D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	loc_414D6D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414A82:				; CODE XREF: .text:00414A6Cj
					; .text:00414AAEj ...
		jmp	loc_414E30
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		fstp	st
		fstp	st
		fld	ds:tbyte_422710
		mov	byte ptr [ebp-90h], 2
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		fldln2
		fxch	st(1)
		ftst
		fstsw	word ptr [ebp-0A0h]
		wait
		test	byte ptr [ebp-9Fh], 41h
		jnz	short loc_414A82
		fyl2x
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		mov	byte ptr [ebp-90h], 2
		fstp	st
		fld	ds:tbyte_42271A
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		or	cl, cl
		jnz	short loc_414B1A
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		fldlg2
		jmp	short loc_414ACE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		fldln2

loc_414ACE:				; CODE XREF: .text:00414ACAj
		fxch	st(1)
		or	cl, cl
		jnz	short loc_414A82
		fyl2x
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	loc_414D6D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		call	sub_414BB0
		fstp	st
		fstp	st
		or	cl, cl
		jnz	short loc_414AF7
		fldz
		cmp	eax, 1
		jnz	short locret_414AF6
		or	ch, ch
		jz	short locret_414AF6
		fchs

locret_414AF6:				; CODE XREF: .text:00414AEEj
					; .text:00414AF2j ...
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414AF7:				; CODE XREF: .text:00414AE7j
		mov	byte ptr [ebp-90h], 2
		fld	ds:tbyte_422710
		cmp	eax, 1
		jnz	short locret_414AF6
		or	ch, ch
		jz	short locret_414AF6
		fchs
		jmp	short locret_414AF6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		fstp	st
; START	OF FUNCTION CHUNK FOR sub_414B60

loc_414B13:				; CODE XREF: sub_414B60+2j
		jmp	loc_414D5A
; END OF FUNCTION CHUNK	FOR sub_414B60
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		fstp	st

loc_414B1A:				; CODE XREF: .text:00414AC5j
		jmp	loc_414E32
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_414B6D

loc_414B1F:				; CODE XREF: sub_414B6D+1Bj
		pop	eax
		ftst
		fstsw	word ptr [ebp-0A0h]
		wait
		test	byte ptr [ebp-9Fh], 1
		jnz	short loc_414B42
		fstp	st
		fld	ds:tbyte_422710
		or	ch, ch
		jz	short locret_414B41
		fchs

locret_414B41:				; CODE XREF: sub_414B6D-30j
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414B42:				; CODE XREF: sub_414B6D-3Cj
		mov	byte ptr [ebp-90h], 4
		jmp	loc_414D5A
; END OF FUNCTION CHUNK	FOR sub_414B6D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		fstp	st
		fstp	st
		fld	ds:tbyte_422710
		mov	byte ptr [ebp-90h], 3
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_414B60	proc near		; DATA XREF: .rdata:00422766o

; FUNCTION CHUNK AT 00414B13 SIZE 00000005 BYTES

		or	cl, cl
		jnz	short loc_414B13
		fstp	st
		fld	ds:tbyte_422710
		retn
sub_414B60	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_414B6D	proc near		; CODE XREF: sub_414A30:loc_414A3Dp

; FUNCTION CHUNK AT 00414B1F SIZE 0000002F BYTES
; FUNCTION CHUNK AT 00414D5A SIZE 00000005 BYTES

		fld	st
		fabs
		fld	ds:tbyte_42272E
		fcompp	st(1), st
		fstsw	word ptr [ebp-0A0h]
		wait
		test	byte ptr [ebp-9Fh], 41h
		jnz	short loc_414B1F
		fld	st
		frndint
		ftst
		fstsw	word ptr [ebp-0A0h]
		wait
		mov	dl, [ebp-9Fh]
		fxch	st(1)
		fsub	st, st(1)
		ftst
		fstsw	word ptr [ebp-0A0h]
		fabs
		f2xm1
		retn
sub_414B6D	endp ; sp =  4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_414BB0	proc near		; CODE XREF: .text:loc_414A65p
					; .text:00414ADCp
		fld	st
		frndint
		fcomp	st(1)
		fstsw	ax
		sahf
		jnz	short loc_414BD6
		fld	st
		fmul	ds:dbl_422742
		fld	st
		frndint
		fcompp	st(1), st
		fstsw	ax
		sahf
		jz	short loc_414BDD
		mov	eax, 1

locret_414BD5:				; CODE XREF: sub_414BB0+2Bj
					; sub_414BB0+32j
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414BD6:				; CODE XREF: sub_414BB0+Aj
		mov	eax, 0
		jmp	short locret_414BD5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414BDD:				; CODE XREF: sub_414BB0+1Ej
		mov	eax, 2
		jmp	short locret_414BD5
sub_414BB0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	esi
		sub	esp, 74h
		mov	esi, esp
		push	esi
		sub	esp, 8
		fstp	qword ptr [esp]
		sub	esp, 8
		fstp	qword ptr [esp]
		fsave	byte ptr [esi+8]
		call	sub_4150D6
		add	esp, 14h
		frstor	byte ptr [esi+8]
		fld	qword ptr [esi]
		add	esp, 74h
		pop	esi
		test	eax, eax
		jz	short locret_414C15
		jmp	sub_414E43
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

locret_414C15:				; CODE XREF: .text:00414C0Ej
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		cmp	byte ptr [edx+0Eh], 5
		jnz	short loc_414C37
		mov	bx, [ebp-0A4h]
		or	bh, 2
		and	bh, 0FEh
		mov	bl, 3Fh
		jmp	short loc_414C3B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414C37:				; CODE XREF: .text:00414C24j
		mov	bx, 133Fh

loc_414C3B:				; CODE XREF: .text:00414C35j
		mov	[ebp-0A2h], bx
		fldcw	word ptr [ebp-0A2h]
		mov	ebx, offset word_42279E
		fxam
		mov	[ebp-94h], edx
		fstsw	word ptr [ebp-0A0h]
		mov	byte ptr [ebp-90h], 0
		wait
		mov	cl, [ebp-9Fh]
		shl	cl, 1
		sar	cl, 1
		rol	cl, 1
		mov	al, cl
		and	al, 0Fh
		xlat
		movsx	eax, al
		and	ecx, 404h
		mov	ebx, edx
		add	ebx, eax
		add	ebx, 10h
		push	eax
		push	edx
		push	ecx
		mov	ecx, [ebx]
		call	ds:off_41D12C
		pop	ecx
		pop	edx
		pop	eax
		jmp	dword ptr [ebx]
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		cmp	byte ptr [edx+0Eh], 5
		jnz	short loc_414CAC
		mov	bx, [ebp-0A4h]
		or	bh, 2
		and	bh, 0FEh
		mov	bl, 3Fh
		jmp	short loc_414CB0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414CAC:				; CODE XREF: .text:00414C99j
		mov	bx, 133Fh

loc_414CB0:				; CODE XREF: .text:00414CAAj
		mov	[ebp-0A2h], bx
		fldcw	word ptr [ebp-0A2h]
		mov	ebx, offset word_42279E
		fxam
		mov	[ebp-94h], edx
		fstsw	word ptr [ebp-0A0h]
		mov	byte ptr [ebp-90h], 0
		fxch	st(1)
		mov	cl, [ebp-9Fh]
		fxam
		fstsw	word ptr [ebp-0A0h]
		fxch	st(1)
		mov	ch, [ebp-9Fh]
		shl	ch, 1
		sar	ch, 1
		rol	ch, 1
		mov	al, ch
		and	al, 0Fh
		xlat
		mov	ah, al
		shl	cl, 1
		sar	cl, 1
		rol	cl, 1
		mov	al, cl
		and	al, 0Fh
		xlat
		shl	ah, 1
		shl	ah, 1
		or	al, ah
		movsx	eax, al
		and	ecx, 404h
		mov	ebx, edx
		add	ebx, eax
		add	ebx, 10h
		push	eax
		push	edx
		push	ecx
		mov	ecx, [ebx]
		call	ds:off_41D12C
		pop	ecx
		pop	edx
		pop	eax
		jmp	dword ptr [ebx]
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		call	sub_414E43
; START	OF FUNCTION CHUNK FOR sub_414A30

loc_414D34:				; CODE XREF: sub_414A30:loc_414A60j
		fxch	st(1)
		lea	esp, [esp+0]
		lea	ecx, [ecx+0]

loc_414D40:				; CODE XREF: .text:00414D56j
		fstp	st
		lea	esp, [esp+0]
		lea	esp, [esp+0]
		retn
; END OF FUNCTION CHUNK	FOR sub_414A30
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		call	sub_414E43
		jmp	short loc_414D40
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		fstp	st
; START	OF FUNCTION CHUNK FOR sub_414B6D

loc_414D5A:				; CODE XREF: sub_414B60:loc_414B13j
					; sub_414B6D-24j
		fstp	st
		fldz
		retn
; END OF FUNCTION CHUNK	FOR sub_414B6D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		fstp	st
		fstp	st
		fldz
		test	ch, ch
		jz	short locret_414D6C
		fchs

locret_414D6C:				; CODE XREF: .text:00414D68j
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414D6D:				; CODE XREF: .text:00414A7Dj
					; .text:00414AD7j
		fstp	st
		nop

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_414D70	proc near		; DATA XREF: .rdata:0042275Eo
		fstp	st
		fld1
		retn
sub_414D70	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_414D80	proc near		; DATA XREF: .rdata:00422762o
		fstp	tbyte ptr [ebp-9Eh]
		fld	tbyte ptr [ebp-9Eh]
		test	byte ptr [ebp-97h], 40h
		jz	short loc_414D9D
		mov	byte ptr [ebp-90h], 0
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414D9D:				; CODE XREF: sub_414D80+13j
		mov	byte ptr [ebp-90h], 0
		fadd	ds:dbl_42278E
		retn
sub_414D80	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		jmp	short loc_414DB0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_414DB0:				; CODE XREF: .text:00414DABj
		fxch	st(1)
		lea	esp, [esp+0]
		lea	esp, [esp+0]
		fstp	tbyte ptr [ebp-9Eh]
		fld	tbyte ptr [ebp-9Eh]
		test	byte ptr [ebp-97h], 40h
		jz	short loc_414DDE
		mov	byte ptr [ebp-90h], 0
		jmp	short loc_414DE5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414DDE:				; CODE XREF: .text:00414DD3j
		mov	byte ptr [ebp-90h], 0

loc_414DE5:				; CODE XREF: .text:00414DDCj
		faddp	st(1), st
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		fstp	tbyte ptr [ebp-9Eh]
		fld	tbyte ptr [ebp-9Eh]
		test	byte ptr [ebp-97h], 40h
		jz	short loc_414E25
		fxch	st(1)
		fstp	tbyte ptr [ebp-9Eh]
		fld	tbyte ptr [ebp-9Eh]
		test	byte ptr [ebp-97h], 40h
		jz	short loc_414E25
		mov	byte ptr [ebp-90h], 0
		jmp	short loc_414E2C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414E25:				; CODE XREF: .text:00414E03j
					; .text:00414E1Aj
		mov	byte ptr [ebp-90h], 1

loc_414E2C:				; CODE XREF: .text:00414E23j
		faddp	st(1), st
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_414E30:				; CODE XREF: .text:loc_414A82j
		fstp	st

loc_414E32:				; CODE XREF: .text:loc_414B1Aj
		fstp	st
		fld	ds:tbyte_422770
		cmp	byte ptr [ebp-90h], 0
		jg	short loc_414E4A

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_414E43	proc near		; CODE XREF: .text:00414C10j
					; .text:00414D2Fp ...
		mov	byte ptr [ebp-90h], 1

loc_414E4A:				; CODE XREF: .text:00414E41j
		or	cl, cl
		retn
sub_414E43	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		fstp	st
		fstp	st
		fld	ds:tbyte_422784
		or	ch, ch
		jz	short loc_414E60
		fchs

loc_414E60:				; CODE XREF: .text:00414E5Cj
		or	cl, cl
		jz	short locret_414E6C
		fld	ds:dbl_422796
		fmulp	st(1), st

locret_414E6C:				; CODE XREF: .text:00414E62j
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		or	cl, cl
		jz	short locret_414E73
		fchs

locret_414E73:				; CODE XREF: .text:00414E6Fj
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_414E80	proc near		; CODE XREF: sub_40BE7D+90p
					; sub_414FC9:loc_41500Ep

var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		add	esp, 0FFFFFFE0h
		mov	[ebp+var_20], eax
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_C], eax
		jmp	short loc_414EA0
sub_414E80	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_414E97	proc near		; CODE XREF: sub_41AF68-5FBFp
					; sub_414FC9+3Ep ...

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= qword	ptr -8
arg_0		= dword	ptr  8
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		add	esp, 0FFFFFFE0h
		mov	[ebp+var_20], eax

loc_414EA0:				; CODE XREF: sub_414E80+15j
		fstp	[ebp+var_8]
		mov	[ebp+var_1C], ecx
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_C]
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], ecx
		lea	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_20]
		push	eax
		push	ecx
		push	edx
		call	sub_419FCE
		add	esp, 0Ch
		fld	[ebp+var_8]
		cmp	word ptr [ebp+arg_0], 27Fh
		jz	short locret_414ED1
		fldcw	word ptr [ebp+arg_0]

locret_414ED1:				; CODE XREF: sub_414E97+35j
		leave
		retn
sub_414E97	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_414EE0	proc near		; CODE XREF: sub_40BE7D+4Fp
		fld	st
		frndint
		fsubr	st(1), st
		fxch	st(1)
		fchs
		f2xm1
		fld1
		faddp	st(1), st
		fscale
		fstp	st(1)
		retn
sub_414EE0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_414EF5	proc near		; CODE XREF: sub_40BE7D+Fp

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		and	edx, 300h
		or	edx, 7Fh
		mov	word ptr [esp+arg_0+2],	dx
		fldcw	word ptr [esp+arg_0+2]
		retn
sub_414EF5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_414F0C	proc near		; CODE XREF: sub_41AF68:loc_41AFDFp
		test	eax, 80000h
		jz	short loc_414F19
		mov	eax, 0
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414F19:				; CODE XREF: sub_414F0C+5j
		fadd	ds:dbl_4227B0
		mov	eax, 0
		retn
sub_414F0C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_414F25	proc near		; CODE XREF: .text:0040BE78p
					; sub_40BE7D+2Ap ...

var_A		= tbyte	ptr -0Ah

		mov	eax, [edx+4]
		and	eax, 7FF00000h
		cmp	eax, 7FF00000h
		jz	short loc_414F37
		fld	qword ptr [edx]
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414F37:				; CODE XREF: sub_414F25+Dj
		mov	eax, [edx+4]
		sub	esp, 0Ah
		or	eax, 7FFF0000h
		mov	dword ptr [esp+0Ah+var_A+6], eax
		mov	eax, [edx+4]
		mov	ecx, [edx]
		shld	eax, ecx, 0Bh
		shl	ecx, 0Bh
		mov	[esp+4], eax
		mov	dword ptr [esp+0Ah+var_A], ecx
		fld	[esp+0Ah+var_A]
		add	esp, 0Ah
		test	eax, 0
		mov	eax, [edx+4]
		retn
sub_414F25	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_414F68	proc near		; CODE XREF: .text:0041AF51p

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		and	eax, 7FF00000h
		cmp	eax, 7FF00000h
		jz	short loc_414F79
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414F79:				; CODE XREF: sub_414F68+Ej
		mov	eax, [esp+arg_4]
		retn
sub_414F68	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_40BE7D

loc_414F7E:				; CODE XREF: sub_40BE7D+62j
					; sub_40BE7D+7Fj ...
		cmp	[esp+4+var_4], 27Fh
		jz	short loc_414F89
		fldcw	[esp+4+var_4]

loc_414F89:				; CODE XREF: sub_40BE7D+9107j
		pop	edx
		retn
; END OF FUNCTION CHUNK	FOR sub_40BE7D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_41AF68

loc_414F8B:				; CODE XREF: sub_41AF68+45j
		mov	ax, [esp+0]
		cmp	ax, 27Fh
		jz	short loc_414FB3
		and	ax, 20h
		jz	short loc_414FB0
		fstsw	ax
		and	ax, 20h
		jz	short loc_414FB0
		mov	eax, 8
		call	sub_414E97
		pop	edx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_414FB0:				; CODE XREF: sub_41AF68-5FCFj
					; sub_41AF68-5FC6j
		fldcw	word ptr [esp+0]

loc_414FB3:				; CODE XREF: sub_41AF68-5FD5j
		pop	edx
		retn
; END OF FUNCTION CHUNK	FOR sub_41AF68
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		sub	esp, 8
		fst	qword ptr [esp]
		mov	eax, [esp+4]
		add	esp, 8
		and	eax, 7FF00000h
		jmp	short loc_414FDD

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_414FC9	proc near		; CODE XREF: sub_40BE7D+73j

var_8		= qword	ptr -8

		sub	esp, 8
		fst	[esp+8+var_8]
		mov	eax, dword ptr [esp+8+var_8+4]
		add	esp, 8
		and	eax, 7FF00000h
		jz	short loc_41501A

loc_414FDD:				; CODE XREF: .text:00414FC7j
		cmp	eax, 7FF00000h
		jz	short loc_415043
		mov	ax, [esp+0]
		cmp	ax, 27Fh
		jz	short loc_415018
		and	ax, 20h
		jnz	short loc_415015
		fstsw	ax
		and	ax, 20h
		jz	short loc_415015
		mov	eax, 8

loc_415002:				; CODE XREF: sub_414FC9+70j
					; sub_414FC9+78j ...
		cmp	edx, 1Dh
		jz	short loc_41500E
		call	sub_414E97
		pop	edx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41500E:				; CODE XREF: sub_414FC9+3Cj
		call	sub_414E80
		pop	edx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415015:				; CODE XREF: sub_414FC9+29j
					; sub_414FC9+32j
		fldcw	word ptr [esp+0]

loc_415018:				; CODE XREF: sub_414FC9+23j
		pop	edx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41501A:				; CODE XREF: sub_414FC9+12j
		fld	ds:dbl_4227DC
		fxch	st(1)
		fscale
		fstp	st(1)
		fld	st
		fabs
		fcomp	ds:dbl_4227CC
		fstsw	ax
		sahf
		mov	eax, 4
		jnb	short loc_415002
		fmul	ds:dbl_4227EC
		jmp	short loc_415002
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415043:				; CODE XREF: sub_414FC9+19j
		fld	ds:dbl_4227D4
		fxch	st(1)
		fscale
		fstp	st(1)
		fld	st
		fabs
		fcomp	ds:dbl_4227C4
		fstsw	ax
		sahf
		mov	eax, 3
		jbe	short loc_415002
		fmul	ds:dbl_4227E4
		jmp	short loc_415002
sub_414FC9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41506C	proc near		; CODE XREF: sub_4150D6+DCp

var_10		= qword	ptr -10h
var_8		= qword	ptr -8
arg_0		= qword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		fld	[ebp+arg_0]
		push	ecx
		push	ecx
		fstp	[esp+10h+var_10]
		call	sub_413CD2
		pop	ecx
		pop	ecx
		test	al, 90h
		jnz	short loc_4150D0
		fld	[ebp+arg_0]
		push	ecx
		push	ecx
		fstp	[esp+10h+var_10]
		call	sub_41A0D8
		fld	[ebp+arg_0]
		fucom	st(1)
		fnstsw	ax
		pop	ecx
		pop	ecx
		fstp	st(1)
		test	ah, 44h
		jp	short loc_4150CE
		fmul	ds:dbl_4227F8
		push	ecx
		push	ecx
		fst	[ebp+var_8]
		fstp	[esp+10h+var_10]
		call	sub_41A0D8
		fld	[ebp+var_8]
		fucompp
		fnstsw	ax
		pop	ecx
		pop	ecx
		test	ah, 44h
		jp	short loc_4150C9
		push	2
		pop	eax
		jmp	short loc_4150D2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4150C9:				; CODE XREF: sub_41506C+56j
		xor	eax, eax
		inc	eax
		jmp	short loc_4150D2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4150CE:				; CODE XREF: sub_41506C+35j
		fstp	st

loc_4150D0:				; CODE XREF: sub_41506C+18j
		xor	eax, eax

loc_4150D2:				; CODE XREF: sub_41506C+5Bj
					; sub_41506C+60j
		mov	esp, ebp
		pop	ebp
		retn
sub_41506C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4150D6	proc near		; CODE XREF: sub_40BE7D+112p
					; .text:00414BFBp

var_8		= qword	ptr -8
arg_0		= qword	ptr  8
arg_8		= qword	ptr  10h
arg_10		= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		fld	[ebp+arg_0]
		mov	ecx, 7FF00000h
		fabs
		mov	eax, 0FFF00000h
		cmp	dword ptr [ebp+arg_8+4], ecx
		jnz	short loc_41512A
		cmp	dword ptr [ebp+arg_8], 0
		jnz	short loc_41516A
		fld1
		fcom	st(1)
		fnstsw	ax
		test	ah, 5
		jp	short loc_41510F

loc_415100:				; CODE XREF: sub_4150D6+B1j
		fstp	st(1)
		fstp	st
		fld	ds:dbl_422618
		jmp	loc_4151F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41510F:				; CODE XREF: sub_4150D6+28j
		fcom	st(1)
		fnstsw	ax
		fstp	st(1)
		test	ah, 41h
		mov	eax, [ebp+arg_10]
		jnz	loc_4151FB
		fstp	st
		fldz
		jmp	loc_4151FB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41512A:				; CODE XREF: sub_4150D6+17j
		cmp	dword ptr [ebp+arg_8+4], eax
		jnz	short loc_41516A
		cmp	dword ptr [ebp+arg_8], 0
		jnz	short loc_41516A
		fld1
		fcom	st(1)
		fnstsw	ax
		test	ah, 5
		jp	short loc_41514B
		fstp	st(1)
		fstp	st
		fldz
		jmp	loc_4151F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41514B:				; CODE XREF: sub_4150D6+68j
		fcom	st(1)
		fnstsw	ax
		fstp	st(1)
		test	ah, 41h
		mov	eax, [ebp+arg_10]
		jnz	loc_4151FB
		fstp	st
		fld	ds:dbl_422618
		jmp	loc_4151FB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41516A:				; CODE XREF: sub_4150D6+1Dj
					; sub_4150D6+57j ...
		fstp	st
		cmp	dword ptr [ebp+arg_0+4], ecx
		jnz	short loc_41519F
		cmp	dword ptr [ebp+arg_0], 0
		jnz	loc_4151FD
		fldz
		fld	[ebp+arg_8]
		fcom	st(1)
		fnstsw	ax
		test	ah, 41h
		jz	loc_415100
		fcomp	st(1)
		fnstsw	ax
		test	ah, 5
		mov	eax, [ebp+arg_10]
		jnp	short loc_4151FB
		fstp	st
		fld1
		jmp	short loc_4151FB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41519F:				; CODE XREF: sub_4150D6+99j
		cmp	dword ptr [ebp+arg_0+4], eax
		jnz	short loc_4151FD
		cmp	dword ptr [ebp+arg_0], 0
		jnz	short loc_4151FD
		fld	[ebp+arg_8]
		push	ecx
		push	ecx
		fstp	[esp+8+var_8]
		call	sub_41506C
		fldz
		fld	[ebp+arg_8]
		pop	ecx
		pop	ecx
		fcom	st(1)
		mov	ecx, eax
		fnstsw	ax
		test	ah, 41h
		jnz	short loc_4151DC
		fstp	st(1)
		fstp	st
		fld	ds:dbl_422618
		cmp	ecx, 1
		jnz	short loc_4151F8
		fchs
		jmp	short loc_4151F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4151DC:				; CODE XREF: sub_4150D6+F1j
		fcomp	st(1)
		fnstsw	ax
		test	ah, 5
		jp	short loc_4151F4
		cmp	ecx, 1
		jnz	short loc_4151F8
		fstp	st
		fld	ds:dbl_422628
		jmp	short loc_4151F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4151F4:				; CODE XREF: sub_4150D6+10Dj
		fstp	st
		fld1

loc_4151F8:				; CODE XREF: sub_4150D6+34j
					; sub_4150D6+70j ...
		mov	eax, [ebp+arg_10]

loc_4151FB:				; CODE XREF: sub_4150D6+45j
					; sub_4150D6+4Fj ...
		fstp	qword ptr [eax]

loc_4151FD:				; CODE XREF: sub_4150D6+9Fj
					; sub_4150D6+CCj ...
		xor	eax, eax
		pop	ebp
		retn
sub_4150D6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_415201	proc near		; CODE XREF: sub_4152C5+20p
		push	0Ch
		push	offset dword_42B420
		call	sub_405FF0
		and	dword ptr [ebp-1Ch], 0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	esi, dword_42C06C
		mov	ecx, esi
		and	ecx, 1Fh
		xor	esi, dword_42DB70
		ror	esi, cl
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_41524F
		mov	eax, esi
		call	sub_406036
		retn	0Ch
sub_415201	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41524C	proc near		; DATA XREF: .rdata:0042B438o
		mov	esi, [ebp-1Ch]
sub_41524C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41524F	proc near		; CODE XREF: sub_415201+3Cp
		mov	ecx, [ebp+10h]
		push	dword ptr [ecx]
		call	sub_409F1F
		pop	ecx
		retn
sub_41524F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41525B	proc near		; CODE XREF: sub_415315+50p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		dec	eax
		sub	eax, 1
		jz	short loc_415296
		sub	eax, 4
		jz	short loc_41528F
		sub	eax, 9
		jz	short loc_415288
		sub	eax, 6
		jz	short loc_415281
		sub	eax, 1
		jz	short loc_41528F
		xor	eax, eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415281:				; CODE XREF: sub_41525B+1Bj
		mov	eax, offset dword_42DB6C
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415288:				; CODE XREF: sub_41525B+16j
		mov	eax, offset dword_42DB74
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41528F:				; CODE XREF: sub_41525B+11j
					; sub_41525B+20j
		mov	eax, offset dword_42DB70
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415296:				; CODE XREF: sub_41525B+Cj
		mov	eax, offset dword_42DB68
		pop	ebp
		retn
sub_41525B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41529D	proc near		; CODE XREF: sub_415315+75p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		imul	ecx, ds:dword_421690, 0Ch
		mov	eax, [ebp+arg_4]
		add	ecx, eax
		cmp	eax, ecx
		jz	short loc_4152C1
		mov	edx, [ebp+arg_0]

loc_4152B5:				; CODE XREF: sub_41529D+22j
		cmp	[eax+4], edx
		jz	short loc_4152C3
		add	eax, 0Ch
		cmp	eax, ecx
		jnz	short loc_4152B5

loc_4152C1:				; CODE XREF: sub_41529D+13j
		xor	eax, eax

loc_4152C3:				; CODE XREF: sub_41529D+1Bj
		pop	ebp
		retn
sub_41529D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4152C5	proc near		; CODE XREF: sub_40C069p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	3
		pop	eax
		mov	[ebp+var_8], eax
		lea	ecx, [ebp-1]
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp-1]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		call	sub_415201
		mov	esp, ebp
		pop	ebp
		retn
sub_4152C5	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+8]
		mov	dword_42DB68, eax
		mov	dword_42DB6C, eax
		mov	dword_42DB70, eax
		mov	dword_42DB74, eax
		pop	ebp
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41530C	proc near		; CODE XREF: sub_415315+10Dp
					; sub_415315+117p
		call	sub_40F3FC
		add	eax, 8
		retn
sub_41530C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_415315	proc near		; CODE XREF: sub_40C069+Bp

; FUNCTION CHUNK AT 004154AE SIZE 0000004E BYTES

		push	24h
		push	offset dword_42B400
		call	sub_405FF0
		and	dword ptr [ebp-20h], 0
		and	dword ptr [ebp-30h], 0
		mov	cl, 1
		mov	[ebp-19h], cl
		mov	esi, [ebp+8]
		push	8
		pop	ebx
		cmp	esi, ebx
		jg	short loc_415350
		jz	short loc_415371
		lea	eax, [esi-1]
		sub	eax, 1
		jz	short loc_415364
		dec	eax
		sub	eax, 1
		jz	short loc_415371
		dec	eax
		sub	eax, 1
		jnz	short loc_415395
		jmp	short loc_415364
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415350:				; CODE XREF: sub_415315+21j
		cmp	esi, 0Bh
		jz	short loc_415371
		cmp	esi, 0Fh
		jz	short loc_415364
		cmp	esi, 14h
		jle	short loc_415395
		cmp	esi, 16h
		jg	short loc_415395

loc_415364:				; CODE XREF: sub_415315+2Bj
					; sub_415315+39j ...
		push	esi
		call	sub_41525B
		add	esp, 4
		mov	edi, eax
		jmp	short loc_4153AF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415371:				; CODE XREF: sub_415315+23j
					; sub_415315+31j ...
		call	sub_40F553
		mov	edi, eax
		mov	[ebp-20h], edi
		test	edi, edi
		jnz	short loc_415387

loc_41537F:				; CODE XREF: sub_415315+90j
		or	eax, 0FFFFFFFFh
		jmp	loc_4154E2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415387:				; CODE XREF: sub_415315+68j
		push	dword ptr [edi]
		push	esi
		call	sub_41529D
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_4153A7

loc_415395:				; CODE XREF: sub_415315+37j
					; sub_415315+48j ...
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		jmp	short loc_41537F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4153A7:				; CODE XREF: sub_415315+7Ej
		lea	edi, [eax+8]
		xor	cl, cl
		mov	[ebp-19h], cl

loc_4153AF:				; CODE XREF: sub_415315+5Aj
		mov	[ebp-24h], edi
		and	dword ptr [ebp-2Ch], 0
		test	cl, cl
		jz	short loc_4153C5
		push	3
		call	sub_409ED7
		pop	ecx
		mov	cl, [ebp-19h]

loc_4153C5:				; CODE XREF: sub_415315+A3j
		and	dword ptr [ebp-28h], 0
		mov	byte ptr [ebp-1Ah], 0
		and	dword ptr [ebp-4], 0
		mov	edi, [edi]
		test	cl, cl
		jz	short loc_4153EB
		mov	ecx, dword_42C06C
		and	ecx, 1Fh
		xor	edi, dword_42C06C
		ror	edi, cl
		mov	cl, [ebp-19h]

loc_4153EB:				; CODE XREF: sub_415315+C0j
		mov	[ebp-28h], edi
		cmp	edi, 1
		setz	al
		mov	[ebp-1Ah], al
		test	al, al
		jnz	short loc_41546A
		test	edi, edi
		jz	loc_4154E8
		cmp	esi, ebx
		jz	short loc_415411
		cmp	esi, 0Bh
		jz	short loc_415411
		cmp	esi, 4
		jnz	short loc_415437

loc_415411:				; CODE XREF: sub_415315+F0j
					; sub_415315+F5j
		mov	eax, [ebp-20h]
		mov	ecx, [eax+4]
		mov	[ebp-2Ch], ecx
		and	dword ptr [eax+4], 0
		cmp	esi, ebx
		jnz	short loc_415460
		call	sub_41530C
		mov	eax, [eax]
		mov	[ebp-30h], eax
		call	sub_41530C
		mov	dword ptr [eax], 8Ch

loc_415437:				; CODE XREF: sub_415315+FAj
		mov	eax, [ebp-20h]
		cmp	esi, ebx
		jnz	short loc_415460
		imul	ecx, ds:dword_421694, 0Ch
		add	ecx, [eax]
		imul	eax, ds:dword_421698, 0Ch
		add	eax, ecx

loc_415450:				; CODE XREF: sub_415315+149j
		mov	[ebp-34h], ecx
		cmp	ecx, eax
		jz	short loc_41546A
		and	dword ptr [ecx+8], 0
		add	ecx, 0Ch
		jmp	short loc_415450
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415460:				; CODE XREF: sub_415315+10Bj
					; sub_415315+127j
		mov	eax, dword_42C06C
		mov	ecx, [ebp-24h]
		mov	[ecx], eax

loc_41546A:				; CODE XREF: sub_415315+E4j
					; sub_415315+140j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_41549F
		cmp	byte ptr [ebp-1Ah], 0
		jnz	short loc_4154E0
		cmp	esi, ebx
		jnz	short loc_4154AE
		call	sub_40F3FC
		push	dword ptr [eax+8]
		push	ebx
		mov	ecx, edi
		call	ds:off_41D12C
		call	edi
		pop	ecx
		jmp	short loc_4154B9
sub_415315	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_415496	proc near		; DATA XREF: .rdata:0042B418o
		push	8
		pop	ebx
		mov	esi, [ebp+8]
		mov	edi, [ebp-28h]
sub_415496	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41549F	proc near		; CODE XREF: sub_415315+15Cp
		cmp	byte ptr [ebp-19h], 0
		jz	short locret_4154AD
		push	3
		call	sub_409F1F
		pop	ecx

locret_4154AD:				; CODE XREF: sub_41549F+4j
		retn
sub_41549F	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_415315

loc_4154AE:				; CODE XREF: sub_415315+169j
		push	esi
		mov	ecx, edi
		call	ds:off_41D12C
		call	edi

loc_4154B9:				; CODE XREF: sub_415315+17Fj
		pop	ecx
		cmp	esi, ebx
		jz	short loc_4154C8
		cmp	esi, 0Bh
		jz	short loc_4154C8
		cmp	esi, 4
		jnz	short loc_4154E0

loc_4154C8:				; CODE XREF: sub_415315+1A7j
					; sub_415315+1ACj
		mov	eax, [ebp-20h]
		mov	ecx, [ebp-2Ch]
		mov	[eax+4], ecx
		cmp	esi, ebx
		jnz	short loc_4154E0
		call	sub_40F3FC
		mov	ecx, [ebp-30h]
		mov	[eax+8], ecx

loc_4154E0:				; CODE XREF: sub_415315+165j
					; sub_415315+1B1j ...
		xor	eax, eax

loc_4154E2:				; CODE XREF: sub_415315+6Dj
		call	sub_406036
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4154E8:				; CODE XREF: sub_415315+E8j
		test	cl, cl
		jz	short loc_4154F4
		push	3
		call	sub_409F1F
		pop	ecx

loc_4154F4:				; CODE XREF: sub_415315+1D5j
		push	3		; uExitCode
		call	sub_40D0EF
		int	3		; Trap to Debugger
; END OF FUNCTION CHUNK	FOR sub_415315

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_4154FC(UINT CodePage,int,LPCSTR lpMultiByteStr,int cchMultiByte,LPWSTR lpWideCharStr,int cchWideChar)
sub_4154FC	proc near		; CODE XREF: sub_40C0C9+58p
					; sub_40C0C9+9Cp ...

CodePage	= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpMultiByteStr	= dword	ptr  10h
cchMultiByte	= dword	ptr  14h
lpWideCharStr	= dword	ptr  18h
cchWideChar	= dword	ptr  1Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+CodePage]
		mov	ecx, 0C435h
		cmp	eax, ecx
		ja	short loc_415535
		jz	short loc_415574
		cmp	eax, 2Ah
		jz	short loc_415574
		cmp	eax, 0C42Bh
		jbe	short loc_415530
		cmp	eax, 0C42Eh
		jbe	short loc_415574
		cmp	eax, 0C431h
		jz	short loc_415574
		cmp	eax, 0C433h
		jz	short loc_415574

loc_415530:				; CODE XREF: sub_4154FC+1Dj
					; sub_4154FC+45j ...
		mov	ecx, [ebp+arg_4]
		jmp	short loc_41555E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415535:				; CODE XREF: sub_4154FC+Fj
		cmp	eax, 0D698h
		jz	short loc_415558
		cmp	eax, 0DEA9h
		jbe	short loc_415530
		cmp	eax, 0DEB3h
		jbe	short loc_415574
		cmp	eax, 0FDE8h
		jz	short loc_415574
		cmp	eax, 0FDE9h
		jnz	short loc_415530

loc_415558:				; CODE XREF: sub_4154FC+3Ej
		mov	ecx, [ebp+arg_4]
		and	ecx, 8

loc_41555E:				; CODE XREF: sub_4154FC+37j
					; sub_4154FC+7Aj
		push	[ebp+cchWideChar] ; cchWideChar
		push	[ebp+lpWideCharStr] ; lpWideCharStr
		push	[ebp+cchMultiByte] ; cchMultiByte
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		push	ecx		; dwFlags
		push	eax		; CodePage
		call	ds:MultiByteToWideChar
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415574:				; CODE XREF: sub_4154FC+11j
					; sub_4154FC+16j ...
		xor	ecx, ecx
		jmp	short loc_41555E
sub_4154FC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_415578(UINT CodePage,int,LPCWSTR lpWideCharStr,int cchWideChar,LPSTR lpMultiByteStr,int cchMultiByte,int,int)
sub_415578	proc near		; CODE XREF: sub_40CCF3+20p
					; sub_40CCF3+4Cp ...

CodePage	= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpWideCharStr	= dword	ptr  10h
cchWideChar	= dword	ptr  14h
lpMultiByteStr	= dword	ptr  18h
cchMultiByte	= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+CodePage]
		xor	edx, edx
		push	ebx
		push	esi
		mov	esi, 0FDE9h
		push	edi
		lea	edi, [esi-1]
		cmp	ecx, edi
		jz	short loc_415597
		mov	bl, dl
		cmp	ecx, esi
		jnz	short loc_415599

loc_415597:				; CODE XREF: sub_415578+17j
		mov	bl, 1

loc_415599:				; CODE XREF: sub_415578+1Dj
		mov	eax, 0C435h
		cmp	ecx, eax
		ja	short loc_4155C9
		jz	short loc_4155F2
		cmp	ecx, 2Ah
		jz	short loc_4155F2
		cmp	ecx, 0C42Bh
		jbe	short loc_4155E9
		cmp	ecx, 0C42Eh
		jbe	short loc_4155F2
		cmp	ecx, 0C431h
		jz	short loc_4155F2
		cmp	ecx, 0C433h
		jmp	short loc_4155E7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4155C9:				; CODE XREF: sub_415578+28j
		cmp	ecx, 0D698h
		jz	short loc_4155F2
		cmp	ecx, 0DEA9h
		jbe	short loc_4155E9
		cmp	ecx, 0DEB3h
		jbe	short loc_4155F2
		cmp	ecx, edi
		jz	short loc_4155F2
		cmp	ecx, esi

loc_4155E7:				; CODE XREF: sub_415578+4Fj
		jz	short loc_4155F2

loc_4155E9:				; CODE XREF: sub_415578+37j
					; sub_415578+5Fj
		mov	edx, [ebp+arg_4]
		and	edx, 0FFFFFF7Fh

loc_4155F2:				; CODE XREF: sub_415578+2Aj
					; sub_415578+2Fj ...
		movzx	eax, bl
		neg	eax
		sbb	eax, eax
		not	eax
		and	eax, [ebp+arg_1C]
		push	eax		; lpUsedDefaultChar
		movzx	eax, bl
		neg	eax
		sbb	eax, eax
		not	eax
		and	eax, [ebp+arg_18]
		push	eax		; lpDefaultChar
		push	[ebp+cchMultiByte] ; cchMultiByte
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		push	[ebp+cchWideChar] ; cchWideChar
		push	[ebp+lpWideCharStr] ; lpWideCharStr
		push	edx		; dwFlags
		push	ecx		; CodePage
		call	ds:WideCharToMultiByte
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_415578	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_415625	proc near		; CODE XREF: sub_40D6E2+255p
					; sub_40D6E2+26Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	dword_42D84C, 0
		jnz	short loc_4156A1
		mov	edx, [ebp+arg_0]
		test	edx, edx
		jnz	short loc_415651

loc_41563A:				; CODE XREF: sub_415625+31j
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		mov	eax, 7FFFFFFFh
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415651:				; CODE XREF: sub_415625+13j
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	short loc_41563A
		push	ebx
		push	esi
		push	edi
		push	19h
		sub	edx, ecx
		pop	ebx

loc_415660:				; CODE XREF: sub_415625+6Dj
		movzx	esi, word ptr [edx+ecx]
		lea	eax, [esi-41h]
		cmp	ax, bx
		ja	short loc_415672
		lea	eax, [esi+20h]
		movzx	esi, ax

loc_415672:				; CODE XREF: sub_415625+45j
		movzx	edi, word ptr [ecx]
		lea	eax, [edi-41h]
		cmp	ax, bx
		ja	short loc_415685
		lea	eax, [edi+20h]
		movzx	eax, ax
		jmp	short loc_415687
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415685:				; CODE XREF: sub_415625+56j
		mov	eax, edi

loc_415687:				; CODE XREF: sub_415625+5Ej
		add	ecx, 2
		test	si, si
		jz	short loc_415694
		cmp	si, ax
		jz	short loc_415660

loc_415694:				; CODE XREF: sub_415625+68j
		movzx	ecx, ax
		pop	edi
		movzx	eax, si
		pop	esi
		sub	eax, ecx
		pop	ebx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4156A1:				; CODE XREF: sub_415625+Cj
		push	0
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_4156B3
		add	esp, 0Ch
		pop	ebp
		retn
sub_415625	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4156B3	proc near		; CODE XREF: sub_415625+84p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		lea	ecx, [ebp+var_10]
		push	ebx
		push	esi
		push	[ebp+arg_8]
		call	sub_40A217
		mov	ebx, [ebp+arg_0]
		test	ebx, ebx
		jz	short loc_4156D6
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jnz	short loc_4156F0

loc_4156D6:				; CODE XREF: sub_4156B3+1Aj
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		mov	edx, 7FFFFFFFh
		jmp	loc_415778
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4156F0:				; CODE XREF: sub_4156B3+21j
		mov	eax, [ebp+var_C]
		push	edi
		cmp	dword ptr [eax+0A8h], 0
		jnz	short loc_41573C
		push	19h
		sub	ebx, esi
		pop	edx

loc_415702:				; CODE XREF: sub_4156B3+85j
		movzx	ecx, word ptr [ebx+esi]
		lea	eax, [ecx-41h]
		cmp	ax, dx
		ja	short loc_415716
		lea	eax, [ecx+20h]
		movzx	edi, ax
		jmp	short loc_415718
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415716:				; CODE XREF: sub_4156B3+59j
		mov	edi, ecx

loc_415718:				; CODE XREF: sub_4156B3+61j
		movzx	ecx, word ptr [esi]
		lea	eax, [ecx-41h]
		cmp	ax, dx
		ja	short loc_41572B
		lea	eax, [ecx+20h]
		movzx	eax, ax
		jmp	short loc_41572D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41572B:				; CODE XREF: sub_4156B3+6Ej
		mov	eax, ecx

loc_41572D:				; CODE XREF: sub_4156B3+76j
		add	esi, 2
		test	di, di
		jz	short loc_41576F
		cmp	di, ax
		jz	short loc_415702
		jmp	short loc_41576F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41573C:				; CODE XREF: sub_4156B3+48j
					; sub_4156B3+BAj
		movzx	eax, word ptr [ebx]
		lea	ecx, [ebp+var_C]
		push	ecx		; int
		push	eax		; SrcStr
		call	sub_41A0EE
		lea	ecx, [ebp+var_C]
		movzx	edi, ax
		movzx	eax, word ptr [esi]
		lea	ebx, [ebx+2]
		push	ecx		; int
		push	eax		; SrcStr
		call	sub_41A0EE
		add	esp, 10h
		movzx	eax, ax
		lea	esi, [esi+2]
		test	di, di
		jz	short loc_41576F
		cmp	di, ax
		jz	short loc_41573C

loc_41576F:				; CODE XREF: sub_4156B3+80j
					; sub_4156B3+87j ...
		movzx	edx, di
		movzx	eax, ax
		sub	edx, eax
		pop	edi

loc_415778:				; CODE XREF: sub_4156B3+38j
		cmp	[ebp+var_4], 0
		pop	esi
		pop	ebx
		jz	short loc_41578A
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_41578A:				; CODE XREF: sub_4156B3+CBj
		mov	eax, edx
		mov	esp, ebp
		pop	ebp
		retn
sub_4156B3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_415790	proc near		; DATA XREF: .rdata:0041D178o
		mov	dword_42DB78, 7080h
		xor	eax, eax
		mov	dword_42DB7C, 1
		mov	dword_42DB80, 0FFFFF1F0h
		mov	dword_42DB84, offset off_42C490
		retn
sub_415790	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4157BB	proc near		; CODE XREF: sub_40C24D+8Ep
					; sub_40FE90+F9p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_10]
		call	sub_40A217
		mov	eax, [ebp+var_C]
		push	8000h
		push	[ebp+arg_0]
		push	dword ptr [eax]
		call	sub_40A2AA
		add	esp, 0Ch
		cmp	[ebp+var_4], 0
		jz	short loc_4157F3
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_4157F3:				; CODE XREF: sub_4157BB+2Cj
		mov	esp, ebp
		pop	ebp
		retn
sub_4157BB	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4157F7	proc near		; CODE XREF: sub_40DAC0+1Fp
					; sub_40DB86+69p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		test	edi, edi
		jz	short loc_415819
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	short loc_415819
		mov	ebx, [ebp+arg_8]
		test	ebx, ebx
		jnz	short loc_41582F

loc_415814:				; CODE XREF: sub_4157F7+4Bj
		xor	eax, eax
		mov	[edi], ax

loc_415819:				; CODE XREF: sub_4157F7+Dj
					; sub_4157F7+14j
		call	sub_40BD71
		push	16h

loc_415820:				; CODE XREF: sub_4157F7+73j
		pop	esi
		mov	[eax], esi
		call	sub_409E35

loc_415828:				; CODE XREF: sub_4157F7+65j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41582F:				; CODE XREF: sub_4157F7+1Bj
		mov	edx, edi
		xor	esi, esi

loc_415833:				; CODE XREF: sub_4157F7+47j
		cmp	[edx], si
		jz	short loc_415840
		add	edx, 2
		sub	ecx, 1
		jnz	short loc_415833

loc_415840:				; CODE XREF: sub_4157F7+3Fj
		test	ecx, ecx
		jz	short loc_415814
		sub	ebx, edx

loc_415846:				; CODE XREF: sub_4157F7+61j
		movzx	eax, word ptr [ebx+edx]
		mov	[edx], ax
		lea	edx, [edx+2]
		test	ax, ax
		jz	short loc_41585A
		sub	ecx, 1
		jnz	short loc_415846

loc_41585A:				; CODE XREF: sub_4157F7+5Cj
		test	ecx, ecx
		jnz	short loc_415828
		xor	eax, eax
		mov	[edi], ax
		call	sub_40BD71
		push	22h
		jmp	short loc_415820
sub_4157F7	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_415937

loc_41586C:				; CODE XREF: sub_415937+6j
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	ebx
		mov	ebx, [ebp+arg_8]
		push	esi
		mov	esi, [ebp+arg_C]
		test	esi, esi
		jnz	short loc_41589E
		test	ecx, ecx
		jnz	short loc_4158A2
		cmp	[ebp+arg_4], esi
		jz	short loc_4158B2

loc_415889:				; CODE XREF: sub_415937-97j
					; sub_415937-90j ...
		call	sub_40BD71
		push	16h

loc_415890:				; CODE XREF: sub_415937-5j
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		mov	eax, esi

loc_41589A:				; CODE XREF: sub_415937-83j
					; sub_415937-16j
		pop	esi
		pop	ebx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41589E:				; CODE XREF: sub_415937-B9j
		test	ecx, ecx
		jz	short loc_415889

loc_4158A2:				; CODE XREF: sub_415937-B5j
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_415889
		test	esi, esi
		jnz	short loc_4158B6
		xor	eax, eax
		mov	[ecx], ax

loc_4158B2:				; CODE XREF: sub_415937-B0j
					; sub_415937-2Aj
		xor	eax, eax
		jmp	short loc_41589A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4158B6:				; CODE XREF: sub_415937-8Cj
		test	ebx, ebx
		jnz	short loc_4158C1
		xor	eax, eax
		mov	[ecx], ax
		jmp	short loc_415889
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4158C1:				; CODE XREF: sub_415937-7Fj
		sub	ebx, ecx
		mov	edx, ecx
		push	edi
		mov	edi, eax
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_4158E3

loc_4158CD:				; CODE XREF: sub_415937-58j
		movzx	eax, word ptr [ebx+edx]
		mov	[edx], ax
		lea	edx, [edx+2]
		test	ax, ax
		jz	short loc_41590A
		sub	edi, 1
		jnz	short loc_4158CD
		jmp	short loc_41590A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4158E3:				; CODE XREF: sub_415937-6Cj
		mov	ecx, esi

loc_4158E5:				; CODE XREF: sub_415937-3Bj
		movzx	eax, word ptr [ebx+edx]
		mov	[edx], ax
		lea	edx, [edx+2]
		test	ax, ax
		jz	short loc_4158FE
		sub	edi, 1
		jz	short loc_4158FE
		sub	ecx, 1
		jnz	short loc_4158E5

loc_4158FE:				; CODE XREF: sub_415937-45j
					; sub_415937-40j
		test	ecx, ecx
		mov	ecx, [ebp+arg_0]
		jnz	short loc_41590A
		xor	eax, eax
		mov	[edx], ax

loc_41590A:				; CODE XREF: sub_415937-5Dj
					; sub_415937-56j ...
		test	edi, edi
		pop	edi
		jnz	short loc_4158B2
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_415926
		mov	eax, [ebp+arg_4]
		xor	edx, edx
		push	50h
		mov	[ecx+eax*2-2], dx
		pop	eax
		jmp	loc_41589A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415926:				; CODE XREF: sub_415937-25j
		xor	eax, eax
		mov	[ecx], ax
		call	sub_40BD71
		push	22h
		jmp	loc_415890
; END OF FUNCTION CHUNK	FOR sub_415937

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_415937	proc near		; CODE XREF: sub_40D3EF+3Dp
					; sub_40D4F3+4Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

; FUNCTION CHUNK AT 0041586C SIZE 000000CB BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_41586C
sub_415937	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_415942	proc near		; DATA XREF: sub_415CCD+1F6o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_0]
		jbe	short loc_415954
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415954:				; CODE XREF: sub_415942+Bj
		sbb	eax, eax
		neg	eax
		pop	ebp
		retn
sub_415942	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_41595A(int,int,int,UINT CodePage)
sub_41595A	proc near		; CODE XREF: sub_415CCD+168p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
CodePage	= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jnz	short loc_415984
		mov	esi, [ebp+arg_4]
		mov	ecx, esi
		call	sub_40C19A
		xor	ebx, ebx
		mov	[esi+8], ebx
		mov	[esi+0Ch], ebx

loc_41597A:				; CODE XREF: sub_41595A+4Fj
		mov	[esi+10h], ebx
		xor	eax, eax
		jmp	loc_415A25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415984:				; CODE XREF: sub_41595A+Cj
		xor	ebx, ebx
		cmp	[esi], bx
		jnz	short loc_4159AB
		mov	esi, [ebp+arg_4]
		cmp	[esi+0Ch], ebx
		jnz	short loc_4159A4
		push	1
		mov	ecx, esi
		call	sub_415F67
		test	eax, eax
		jnz	loc_415A25

loc_4159A4:				; CODE XREF: sub_41595A+37j
		mov	eax, [esi+8]
		mov	[eax], bl
		jmp	short loc_41597A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4159AB:				; CODE XREF: sub_41595A+2Fj
		push	ebx		; int
		push	ebx		; int
		push	ebx		; cchMultiByte
		push	ebx		; lpMultiByteStr
		push	0FFFFFFFFh	; cchWideChar
		push	esi		; lpWideCharStr
		push	ebx		; int
		push	[ebp+CodePage]	; CodePage
		call	sub_415578
		add	esp, 20h
		test	eax, eax
		jnz	short loc_4159D8
		call	ds:GetLastError
		push	eax
		call	sub_40BD3B
		pop	ecx
		call	sub_40BD71
		mov	eax, [eax]
		jmp	short loc_415A25
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4159D8:				; CODE XREF: sub_41595A+66j
		push	edi
		mov	edi, [ebp+arg_4]
		cmp	eax, [edi+0Ch]
		jbe	short loc_4159ED
		push	eax
		mov	ecx, edi
		call	sub_415F67
		test	eax, eax
		jnz	short loc_415A24

loc_4159ED:				; CODE XREF: sub_41595A+85j
		push	ebx		; int
		push	ebx		; int
		push	dword ptr [edi+0Ch] ; cchMultiByte
		push	dword ptr [edi+8] ; lpMultiByteStr
		push	0FFFFFFFFh	; cchWideChar
		push	esi		; lpWideCharStr
		push	ebx		; int
		push	[ebp+CodePage]	; CodePage
		call	sub_415578
		add	esp, 20h
		test	eax, eax
		jnz	short loc_415A1E
		call	ds:GetLastError
		push	eax
		call	sub_40BD3B
		pop	ecx
		call	sub_40BD71
		mov	eax, [eax]
		jmp	short loc_415A24
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415A1E:				; CODE XREF: sub_41595A+ACj
		dec	eax
		mov	[edi+10h], eax
		xor	eax, eax

loc_415A24:				; CODE XREF: sub_41595A+91j
					; sub_41595A+C2j
		pop	edi

loc_415A25:				; CODE XREF: sub_41595A+25j
					; sub_41595A+44j ...
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_41595A	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_41602A

loc_415A29:				; CODE XREF: sub_41602A+6j
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		sub	esp, 28h
		push	esi
		test	eax, eax
		jnz	short loc_415A4D
		call	sub_40BD71
		push	16h
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		jmp	loc_415C08
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415A4D:				; CODE XREF: sub_41602A-5F3j
		mov	esi, [ebp+arg_0]
		push	ebx
		xor	ebx, ebx
		push	edi
		mov	[eax], ebx
		mov	edi, ebx
		mov	eax, [esi]
		mov	ecx, ebx
		mov	[ebp+lpMem], edi
		mov	[ebp+var_24], ecx
		mov	[ebp+var_20], ebx
		test	eax, eax
		jz	short loc_415ACA

loc_415A69:				; CODE XREF: sub_41602A-568j
		lea	ecx, [ebp+var_4]
		mov	word ptr [ebp+var_4], 3F2Ah
		push	ecx
		push	eax
		mov	byte ptr [ebp+var_4+2],	bl
		call	sub_41A650
		pop	ecx
		pop	ecx
		mov	ecx, [esi]
		test	eax, eax
		jnz	short loc_415A9A
		lea	eax, [ebp+lpMem]
		push	eax
		push	ebx
		push	ebx
		push	ecx
		call	sub_415C1A
		mov	esi, eax
		add	esp, 10h
		mov	[ebp+var_8], esi
		jmp	short loc_415AAD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415A9A:				; CODE XREF: sub_41602A-5A8j
		lea	edx, [ebp+lpMem]
		push	edx
		push	eax
		push	ecx
		call	sub_415CCD
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		mov	esi, eax

loc_415AAD:				; CODE XREF: sub_41602A-592j
		test	esi, esi
		jnz	loc_415B3D
		mov	esi, [ebp+arg_0]
		add	esi, 4
		mov	[ebp+arg_0], esi
		mov	eax, [esi]
		test	eax, eax
		jnz	short loc_415A69
		mov	edi, [ebp+lpMem]
		mov	ecx, [ebp+var_24]

loc_415ACA:				; CODE XREF: sub_41602A-5C3j
		mov	eax, ecx
		mov	[ebp+var_4], ebx
		sub	eax, edi
		mov	esi, edi
		mov	edx, eax
		mov	[ebp+var_8], esi
		sar	edx, 2
		add	eax, 3
		inc	edx
		shr	eax, 2
		cmp	ecx, esi
		mov	[ebp+var_C], edx
		sbb	esi, esi
		not	esi
		and	esi, eax
		jz	short loc_415B1E
		mov	eax, edi
		mov	edx, ebx

loc_415AF3:				; CODE XREF: sub_41602A-516j
		mov	ecx, [eax]
		lea	eax, [ecx+1]
		mov	[ebp+var_10], eax

loc_415AFB:				; CODE XREF: sub_41602A-52Aj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_415AFB
		sub	ecx, [ebp+var_10]
		inc	ebx
		mov	eax, [ebp+var_8]
		add	ebx, ecx
		add	eax, 4
		inc	edx
		mov	[ebp+var_8], eax
		cmp	edx, esi
		jnz	short loc_415AF3
		mov	edx, [ebp+var_C]
		mov	[ebp+var_4], ebx
		xor	ebx, ebx

loc_415B1E:				; CODE XREF: sub_41602A-53Dj
		push	1
		push	[ebp+var_4]
		push	edx
		call	sub_40CB19
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_415B45
		or	esi, 0FFFFFFFFh
		mov	[ebp+var_8], esi
		jmp	loc_415BC2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415B3D:				; CODE XREF: sub_41602A-57Bj
		mov	edi, [ebp+lpMem]
		jmp	loc_415BC9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415B45:				; CODE XREF: sub_41602A-4FAj
		mov	eax, [ebp+var_C]
		mov	[ebp+var_8], edi
		lea	eax, [esi+eax*4]
		mov	ecx, eax
		mov	[ebp+var_18], eax
		mov	eax, edi
		mov	[ebp+var_C], ecx
		cmp	eax, [ebp+var_24]
		jz	short loc_415BB8
		mov	edx, esi
		sub	edx, edi
		mov	[ebp+var_1C], edx

loc_415B64:				; CODE XREF: sub_41602A-474j
		mov	eax, [eax]
		mov	edx, eax
		mov	[ebp+var_14], eax
		lea	eax, [edx+1]
		mov	[ebp+var_10], eax

loc_415B71:				; CODE XREF: sub_41602A-4B4j
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_415B71
		sub	edx, [ebp+var_10]
		lea	eax, [edx+1]
		push	eax
		push	[ebp+var_14]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_18]
		sub	eax, ecx
		add	eax, [ebp+var_4]
		push	eax
		push	ecx
		call	sub_419C51
		add	esp, 10h
		test	eax, eax
		jnz	short loc_415C0F
		mov	eax, [ebp+var_8]
		mov	edx, [ebp+var_1C]
		mov	ecx, [ebp+var_C]
		mov	[edx+eax], ecx
		add	eax, 4
		add	ecx, [ebp+var_10]
		mov	[ebp+var_C], ecx
		mov	[ebp+var_8], eax
		cmp	eax, [ebp+var_24]
		jnz	short loc_415B64

loc_415BB8:				; CODE XREF: sub_41602A-4CFj
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], ebx
		mov	[eax], esi
		mov	esi, ebx

loc_415BC2:				; CODE XREF: sub_41602A-4F2j
		push	ebx		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_415BC9:				; CODE XREF: sub_41602A-4EAj
		mov	eax, [ebp+var_24]
		mov	edx, edi
		sub	eax, edx
		mov	[ebp+var_1C], edx
		add	eax, 3
		shr	eax, 2
		cmp	[ebp+var_24], edx
		sbb	ecx, ecx
		not	ecx
		and	ecx, eax
		mov	[ebp+var_18], ecx
		jz	short loc_415BFF
		mov	esi, ecx

loc_415BE9:				; CODE XREF: sub_41602A-433j
		push	dword ptr [edi]	; lpMem
		call	sub_40F0A8
		inc	ebx
		lea	edi, [edi+4]
		pop	ecx
		cmp	ebx, esi
		jnz	short loc_415BE9
		mov	edi, [ebp+lpMem]
		mov	esi, [ebp+var_8]

loc_415BFF:				; CODE XREF: sub_41602A-445j
		push	edi		; lpMem
		call	sub_40F0A8
		pop	ecx
		pop	edi
		pop	ebx

loc_415C08:				; CODE XREF: sub_41602A-5E2j
		mov	eax, esi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415C0F:				; CODE XREF: sub_41602A-491j
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		call	sub_409E62
		int	3		; Trap to Debugger
; END OF FUNCTION CHUNK	FOR sub_41602A

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_415C1A	proc near		; CODE XREF: sub_41602A-59Fp
					; sub_415CCD+66p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+1]

loc_415C26:				; CODE XREF: sub_415C1A+11j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_415C26
		push	edi
		mov	edi, [ebp+arg_8]
		sub	ecx, edx
		mov	eax, edi
		inc	ecx
		not	eax
		mov	[ebp+var_4], ecx
		cmp	ecx, eax
		jbe	short loc_415C47
		push	0Ch
		pop	eax

loc_415C42:				; CODE XREF: sub_415C1A+A4j
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415C47:				; CODE XREF: sub_415C1A+23j
		push	ebx
		push	esi
		lea	ebx, [edi+1]
		add	ebx, ecx
		push	1
		push	ebx
		call	sub_40FE33
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_415C70
		push	edi
		push	[ebp+arg_4]
		push	ebx
		push	esi
		call	sub_419C51
		add	esp, 10h
		test	eax, eax
		jnz	short loc_415CC0

loc_415C70:				; CODE XREF: sub_415C1A+42j
		push	[ebp+var_4]
		sub	ebx, edi
		lea	eax, [esi+edi]
		push	[ebp+arg_0]
		push	ebx
		push	eax
		call	sub_419C51
		add	esp, 10h
		test	eax, eax
		jnz	short loc_415CC0
		mov	ebx, [ebp+arg_C]
		mov	ecx, ebx
		call	sub_415FA3
		xor	edi, edi
		mov	[ebp+var_4], eax
		test	eax, eax
		jz	short loc_415CA8
		push	esi		; lpMem
		call	sub_40F0A8
		mov	esi, [ebp+var_4]
		pop	ecx
		jmp	short loc_415CB3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415CA8:				; CODE XREF: sub_415C1A+80j
		mov	eax, [ebx+4]
		mov	[eax], esi
		mov	esi, edi
		add	dword ptr [ebx+4], 4

loc_415CB3:				; CODE XREF: sub_415C1A+8Cj
		push	edi		; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	eax, esi
		pop	esi
		pop	ebx
		jmp	short loc_415C42
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415CC0:				; CODE XREF: sub_415C1A+54j
					; sub_415C1A+6Dj
		xor	edi, edi
		push	edi
		push	edi
		push	edi
		push	edi
		push	edi
		call	sub_409E62
		int	3		; Trap to Debugger
sub_415C1A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_415CCD	proc near		; CODE XREF: sub_41602A-58Ap

var_298		= dword	ptr -298h
var_294		= dword	ptr -294h
var_290		= dword	ptr -290h
var_28C		= dword	ptr -28Ch
var_288		= dword	ptr -288h
var_284		= byte ptr -284h
var_280		= dword	ptr -280h
var_27C		= dword	ptr -27Ch
var_278		= dword	ptr -278h
var_274		= dword	ptr -274h
var_270		= dword	ptr -270h
lpMem		= dword	ptr -26Ch
var_268		= dword	ptr -268h
var_264		= dword	ptr -264h
var_260		= byte ptr -260h
var_25C		= dword	ptr -25Ch
FindFileData	= dword	ptr -255h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 298h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		push	ebx
		push	edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_25C], edx
		cmp	ecx, edi
		jz	short loc_415D1A

loc_415CF7:				; CODE XREF: sub_415CCD+45j
		mov	al, [ecx]
		cmp	al, 2Fh
		jz	short loc_415D14
		cmp	al, 5Ch
		jz	short loc_415D14
		cmp	al, 3Ah
		jz	short loc_415D14
		push	ecx
		push	edi
		call	sub_41A690
		pop	ecx
		pop	ecx
		mov	ecx, eax
		cmp	ecx, edi
		jnz	short loc_415CF7

loc_415D14:				; CODE XREF: sub_415CCD+2Ej
					; sub_415CCD+32j ...
		mov	edx, [ebp+var_25C]

loc_415D1A:				; CODE XREF: sub_415CCD+28j
		mov	al, [ecx]
		mov	byte ptr [ebp+FindFileData], al
		cmp	al, 3Ah
		jnz	short loc_415D46
		lea	eax, [edi+1]
		cmp	ecx, eax
		jz	short loc_415D40
		push	edx
		xor	ebx, ebx
		push	ebx
		push	ebx
		push	edi
		call	sub_415C1A
		add	esp, 10h
		jmp	loc_415F16
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415D40:				; CODE XREF: sub_415CCD+5Ej
		mov	al, byte ptr [ebp+FindFileData]

loc_415D46:				; CODE XREF: sub_415CCD+57j
		xor	ebx, ebx
		cmp	al, 2Fh
		jz	short loc_415D56
		cmp	al, 5Ch
		jz	short loc_415D56
		cmp	al, 3Ah
		mov	al, bl
		jnz	short loc_415D58

loc_415D56:				; CODE XREF: sub_415CCD+7Dj
					; sub_415CCD+81j
		mov	al, 1

loc_415D58:				; CODE XREF: sub_415CCD+87j
		sub	ecx, edi
		movzx	eax, al
		inc	ecx
		mov	[ebp+var_298], ebx
		neg	eax
		mov	[ebp+var_294], ebx
		push	esi
		sbb	eax, eax
		mov	[ebp+var_290], ebx
		and	eax, ecx
		mov	[ebp+var_28C], ebx
		mov	[ebp+var_278], eax
		mov	[ebp+var_288], ebx
		mov	[ebp+var_284], bl
		call	sub_415F26
		push	eax		; CodePage
		lea	eax, [ebp+var_298]
		push	eax		; int
		push	edi		; int
		call	sub_40C17B
		add	esp, 0Ch
		lea	ecx, [ebp+FindFileData+1]
		neg	eax
		sbb	eax, eax
		push	ebx		; dwAdditionalFlags
		push	ebx		; lpSearchFilter
		push	ebx		; fSearchOp
		push	ecx		; lpFindFileData
		not	eax
		and	eax, [ebp+var_290]
		push	ebx		; fInfoLevelId
		push	eax		; lpFileName
		call	ds:FindFirstFileExW
		mov	esi, eax
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_415DE2
		push	[ebp+var_25C]
		push	ebx
		push	ebx
		push	edi
		call	sub_415C1A
		add	esp, 10h
		mov	ebx, eax
		jmp	loc_415EFE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415DE2:				; CODE XREF: sub_415CCD+FBj
		mov	eax, [ebp+var_25C]
		mov	ecx, [eax+4]
		sub	ecx, [eax]
		sar	ecx, 2
		mov	[ebp+var_27C], ecx

loc_415DF6:				; CODE XREF: sub_415CCD+1D6j
		mov	[ebp+var_274], ebx
		mov	[ebp+var_270], ebx
		mov	[ebp+lpMem], ebx
		mov	[ebp+var_268], ebx
		mov	[ebp+var_264], ebx
		mov	[ebp+var_260], bl
		call	sub_415F26
		push	eax		; CodePage
		lea	eax, [ebp+FindFileData]
		push	eax		; int
		lea	eax, [ebp+var_274]
		push	eax		; int
		lea	eax, [ebp-228h]
		push	eax		; int
		call	sub_41595A
		add	esp, 10h
		neg	eax
		sbb	eax, eax
		not	eax
		and	eax, [ebp+lpMem]
		cmp	byte ptr [eax],	2Eh
		jnz	short loc_415E5F
		mov	cl, [eax+1]
		test	cl, cl
		jz	short loc_415E7F
		cmp	cl, 2Eh
		jnz	short loc_415E5F
		cmp	[eax+2], bl
		jz	short loc_415E7F

loc_415E5F:				; CODE XREF: sub_415CCD+17Fj
					; sub_415CCD+18Bj
		push	[ebp+var_25C]
		push	[ebp+var_278]
		push	edi
		push	eax
		call	sub_415C1A
		add	esp, 10h
		mov	[ebp+var_280], eax
		test	eax, eax
		jnz	short loc_415EDB

loc_415E7F:				; CODE XREF: sub_415CCD+186j
					; sub_415CCD+190j
		cmp	[ebp+var_260], bl
		jz	short loc_415E93
		push	[ebp+lpMem]	; lpMem
		call	sub_40F0A8
		pop	ecx

loc_415E93:				; CODE XREF: sub_415CCD+1B8j
		lea	eax, [ebp+FindFileData+1]
		push	eax		; lpFindFileData
		push	esi		; hFindFile
		call	ds:FindNextFileW
		test	eax, eax
		jnz	loc_415DF6
		mov	eax, [ebp+var_25C]
		mov	ecx, [ebp+var_27C]
		mov	edx, [eax]
		mov	eax, [eax+4]
		sub	eax, edx
		sar	eax, 2
		cmp	ecx, eax
		jz	short loc_415EF7
		push	offset sub_415942
		sub	eax, ecx
		push	4
		push	eax
		lea	eax, [edx+ecx*4]
		push	eax
		call	sub_41A200
		add	esp, 10h
		jmp	short loc_415EF7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415EDB:				; CODE XREF: sub_415CCD+1B0j
		cmp	[ebp+var_260], bl
		jz	short loc_415EF5
		push	[ebp+lpMem]	; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+var_280]
		pop	ecx

loc_415EF5:				; CODE XREF: sub_415CCD+214j
		mov	ebx, eax

loc_415EF7:				; CODE XREF: sub_415CCD+1F4j
					; sub_415CCD+20Cj
		push	esi		; hFindFile
		call	ds:FindClose

loc_415EFE:				; CODE XREF: sub_415CCD+110j
		cmp	[ebp+var_284], 0
		pop	esi
		jz	short loc_415F14
		push	[ebp+var_290]	; lpMem
		call	sub_40F0A8
		pop	ecx

loc_415F14:				; CODE XREF: sub_415CCD+239j
		mov	eax, ebx

loc_415F16:				; CODE XREF: sub_415CCD+6Ej
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_415CCD	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_415F26	proc near		; CODE XREF: sub_415CCD+C2p
					; sub_415CCD+14Dp ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= byte ptr -4

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	0
		lea	ecx, [ebp+var_10]
		call	sub_40A217
		mov	eax, [ebp+var_C]
		mov	edx, 0FDE9h
		cmp	[eax+8], edx
		jz	short loc_415F51
		call	sub_40F9A6
		xor	edx, edx
		test	eax, eax
		jnz	short loc_415F51
		inc	edx

loc_415F51:				; CODE XREF: sub_415F26+1Dj
					; sub_415F26+28j
		cmp	[ebp+var_4], 0
		jz	short loc_415F61
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_415F61:				; CODE XREF: sub_415F26+2Fj
		mov	eax, edx
		mov	esp, ebp
		pop	ebp
		retn
sub_415F26	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_415F67	proc near		; CODE XREF: sub_41595A+3Dp
					; sub_41595A+8Ap

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_40C19A
		mov	edi, [ebp+arg_0]
		lea	eax, [esi+8]
		push	esi
		push	edi
		push	eax
		call	sub_40C21A
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_415F94
		and	dword ptr [esi+0Ch], 0
		mov	byte ptr [esi+14h], 0
		jmp	short loc_415F9D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415F94:				; CODE XREF: sub_415F67+21j
		mov	byte ptr [esi+14h], 1
		xor	eax, eax
		mov	[esi+0Ch], edi

loc_415F9D:				; CODE XREF: sub_415F67+2Bj
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_415F67	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_415FA3	proc near		; CODE XREF: sub_415C1A+74p
		mov	edi, edi
		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, [esi+8]
		cmp	[esi+4], edi
		jz	short loc_415FB5

loc_415FB1:				; CODE XREF: sub_415FA3+3Bj
		xor	eax, eax
		jmp	short loc_416027
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415FB5:				; CODE XREF: sub_415FA3+Cj
		cmp	dword ptr [esi], 0
		jnz	short loc_415FE0
		push	4
		push	4
		call	sub_40FE33
		push	0		; lpMem
		mov	[esi], eax
		call	sub_40F0A8
		mov	eax, [esi]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_415FED
		mov	[esi+4], eax
		add	eax, 10h
		mov	[esi+8], eax
		jmp	short loc_415FB1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415FE0:				; CODE XREF: sub_415FA3+15j
		sub	edi, [esi]
		sar	edi, 2
		cmp	edi, 7FFFFFFFh
		jbe	short loc_415FF2

loc_415FED:				; CODE XREF: sub_415FA3+30j
		push	0Ch
		pop	eax
		jmp	short loc_416027
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_415FF2:				; CODE XREF: sub_415FA3+48j
		push	ebx
		push	4
		lea	ebx, [edi+edi]
		push	ebx
		push	dword ptr [esi]
		call	sub_419244
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_41600C
		push	0Ch
		pop	esi
		jmp	short loc_41601C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41600C:				; CODE XREF: sub_415FA3+62j
		mov	[esi], eax
		lea	ecx, [eax+edi*4]
		lea	eax, [eax+ebx*4]
		mov	[esi+4], ecx
		mov	[esi+8], eax
		xor	esi, esi

loc_41601C:				; CODE XREF: sub_415FA3+67j
		push	0		; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	eax, esi
		pop	ebx

loc_416027:				; CODE XREF: sub_415FA3+10j
					; sub_415FA3+4Dj
		pop	edi
		pop	esi
		retn
sub_415FA3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41602A	proc near		; CODE XREF: sub_40CB68-21Ap

lpMem		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

; FUNCTION CHUNK AT 00415A29 SIZE 000001F1 BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_415A29
sub_41602A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_416035(int,int,int,UINT CodePage)
sub_416035	proc near		; CODE XREF: sub_4160FC+87p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
CodePage	= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jnz	short loc_416051
		mov	ecx, [ebp+arg_4]
		call	sub_40C239
		xor	eax, eax
		jmp	loc_4160F9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416051:				; CODE XREF: sub_416035+Bj
		push	ebx
		xor	ebx, ebx
		cmp	[esi], bx
		jnz	short loc_41607E
		mov	esi, [ebp+arg_4]
		cmp	[esi+0Ch], ebx
		jnz	short loc_416072
		push	1
		mov	ecx, esi
		call	sub_40C1B4
		test	eax, eax
		jnz	loc_4160F8

loc_416072:				; CODE XREF: sub_416035+2Aj
		mov	eax, [esi+8]
		mov	[eax], bl
		xor	eax, eax
		mov	[esi+10h], ebx
		jmp	short loc_4160F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41607E:				; CODE XREF: sub_416035+22j
		push	ebx		; int
		push	ebx		; int
		push	ebx		; cchMultiByte
		push	ebx		; lpMultiByteStr
		push	0FFFFFFFFh	; cchWideChar
		push	esi		; lpWideCharStr
		push	ebx		; int
		push	[ebp+CodePage]	; CodePage
		call	sub_415578
		add	esp, 20h
		test	eax, eax
		jnz	short loc_4160AB
		call	ds:GetLastError
		push	eax
		call	sub_40BD3B
		pop	ecx
		call	sub_40BD71
		mov	eax, [eax]
		jmp	short loc_4160F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4160AB:				; CODE XREF: sub_416035+5Ej
		push	edi
		mov	edi, [ebp+arg_4]
		cmp	eax, [edi+0Ch]
		jbe	short loc_4160C0
		push	eax
		mov	ecx, edi
		call	sub_40C1B4
		test	eax, eax
		jnz	short loc_4160F7

loc_4160C0:				; CODE XREF: sub_416035+7Dj
		push	ebx		; int
		push	ebx		; int
		push	dword ptr [edi+0Ch] ; cchMultiByte
		push	dword ptr [edi+8] ; lpMultiByteStr
		push	0FFFFFFFFh	; cchWideChar
		push	esi		; lpWideCharStr
		push	ebx		; int
		push	[ebp+CodePage]	; CodePage
		call	sub_415578
		add	esp, 20h
		test	eax, eax
		jnz	short loc_4160F1
		call	ds:GetLastError
		push	eax
		call	sub_40BD3B
		pop	ecx
		call	sub_40BD71
		mov	eax, [eax]
		jmp	short loc_4160F7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4160F1:				; CODE XREF: sub_416035+A4j
		dec	eax
		mov	[edi+10h], eax
		xor	eax, eax

loc_4160F7:				; CODE XREF: sub_416035+89j
					; sub_416035+BAj
		pop	edi

loc_4160F8:				; CODE XREF: sub_416035+37j
					; sub_416035+47j ...
		pop	ebx

loc_4160F9:				; CODE XREF: sub_416035+17j
		pop	esi
		pop	ebp
		retn
sub_416035	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_4160FC(HMODULE hModule,int,int)
sub_4160FC	proc near		; CODE XREF: sub_40CB68-2B4p

var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= byte ptr -218h
Filename	= dword	ptr -210h
var_4		= dword	ptr -4
hModule		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 22Ch
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+hModule]
		lea	ecx, [ebp+Filename]
		push	105h		; nSize
		push	ecx		; lpFilename
		push	eax		; hModule
		call	ds:GetModuleFileNameW
		test	eax, eax
		jnz	short loc_41613C
		call	ds:GetLastError
		push	eax
		call	sub_40BD3B
		pop	ecx
		xor	eax, eax
		jmp	short loc_416191
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41613C:				; CODE XREF: sub_4160FC+2Dj
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		and	[ebp+var_21C], 0
		mov	[ebp+var_22C], ecx
		mov	[ebp+var_228], eax
		mov	[ebp+var_224], ecx
		mov	[ebp+var_220], eax
		mov	[ebp+var_218], 0
		call	sub_415F26
		push	eax		; CodePage
		lea	eax, [ebp-211h]
		push	eax		; int
		lea	eax, [ebp+var_22C]
		push	eax		; int
		lea	eax, [ebp+Filename]
		push	eax		; int
		call	sub_416035
		mov	eax, [ebp+var_21C]
		add	esp, 10h

loc_416191:				; CODE XREF: sub_4160FC+3Ej
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_4160FC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41619F	proc near		; CODE XREF: sub_4164FE+FDp
		push	8
		push	offset dword_42B460
		call	sub_405FF0
		mov	eax, [ebp+8]
		push	dword ptr [eax]
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		mov	ecx, [ebp+0Ch]
		call	sub_4161E2
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_4161D6
		call	sub_406036
		retn	0Ch
sub_41619F	endp ; sp = -8


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4161D6	proc near		; CODE XREF: sub_41619F+2Ap
					; DATA XREF: .rdata:0042B478o
		mov	eax, [ebp+10h]
		push	dword ptr [eax]
		call	sub_409F1F
		pop	ecx
		retn
sub_4161D6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4161E2	proc near		; CODE XREF: sub_41619F+1Ep
		mov	edi, edi
		push	esi
		mov	esi, ecx
		mov	ecx, 101h
		push	ecx
		mov	eax, [esi]
		mov	eax, [eax]
		mov	eax, [eax+48h]
		add	eax, 18h
		push	eax
		push	ecx
		push	dword_42DC40
		call	sub_40B3EC
		mov	eax, [esi]
		mov	ecx, 100h
		push	ecx
		mov	eax, [eax]
		mov	eax, [eax+48h]
		add	eax, 119h
		push	eax
		push	ecx
		push	dword_42DC44
		call	sub_40B3EC
		mov	eax, [esi+4]
		add	esp, 20h
		or	ecx, 0FFFFFFFFh
		mov	eax, [eax]
		mov	eax, [eax]
		lock xadd [eax], ecx
		jnz	short loc_41624B
		mov	eax, [esi+4]
		mov	eax, [eax]
		cmp	dword ptr [eax], offset	dword_42C498
		jz	short loc_41624B
		push	dword ptr [eax]	; lpMem
		call	sub_40F0A8
		pop	ecx

loc_41624B:				; CODE XREF: sub_4161E2+52j
					; sub_4161E2+5Fj
		mov	eax, [esi]
		mov	edx, [eax]
		mov	eax, [esi+4]
		mov	ecx, [eax]
		mov	eax, [edx+48h]
		mov	[ecx], eax
		mov	eax, [esi]
		mov	eax, [eax]
		mov	eax, [eax+48h]
		lock inc dword ptr [eax]
		pop	esi
		retn
sub_4161E2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_416265	proc near		; CODE XREF: sub_41670A+109p
					; sub_41670A+1A8p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		sub	eax, 3A4h
		jz	short loc_41629C
		sub	eax, 4
		jz	short loc_416295
		sub	eax, 0Dh
		jz	short loc_41628E
		sub	eax, 1
		jz	short loc_416287
		xor	eax, eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416287:				; CODE XREF: sub_416265+1Cj
		mov	eax, ds:off_42280C
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41628E:				; CODE XREF: sub_416265+17j
		mov	eax, ds:off_422808
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416295:				; CODE XREF: sub_416265+12j
		mov	eax, ds:off_422804
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41629C:				; CODE XREF: sub_416265+Dj
		mov	eax, ds:off_422800
		pop	ebp
		retn
sub_416265	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4162A3	proc near		; CODE XREF: sub_4164FE+16p
					; sub_41670A+1Bp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= byte ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		lea	ecx, [ebp+var_10]
		push	0
		call	sub_40A217
		and	dword_42DC48, 0
		mov	eax, [ebp+arg_0]
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_4162D6
		mov	dword_42DC48, 1
		call	ds:GetOEMCP
		jmp	short loc_416302
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4162D6:				; CODE XREF: sub_4162A3+1Fj
		cmp	eax, 0FFFFFFFDh
		jnz	short loc_4162ED
		mov	dword_42DC48, 1
		call	ds:GetACP
		jmp	short loc_416302
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4162ED:				; CODE XREF: sub_4162A3+36j
		cmp	eax, 0FFFFFFFCh
		jnz	short loc_416302
		mov	eax, [ebp+var_C]
		mov	dword_42DC48, 1
		mov	eax, [eax+8]

loc_416302:				; CODE XREF: sub_4162A3+31j
					; sub_4162A3+48j ...
		cmp	[ebp+var_4], 0
		jz	short loc_416312
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_416312:				; CODE XREF: sub_4162A3+63j
		mov	esp, ebp
		pop	ebp
		retn
sub_4162A3	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_416316	proc near		; CODE XREF: sub_41670A+1DCp

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	edi
		push	101h
		xor	edi, edi
		lea	esi, [ebx+18h]
		push	edi
		push	esi
		call	sub_407330
		mov	[ebx+4], edi
		xor	eax, eax
		mov	[ebx+8], edi
		add	esp, 0Ch
		mov	[ebx+21Ch], edi
		mov	ecx, 101h
		lea	edi, [ebx+0Ch]
		stosd
		stosd
		stosd
		mov	edi, offset dword_42C498
		sub	edi, ebx

loc_416355:				; CODE XREF: sub_416316+48j
		mov	al, [edi+esi]
		mov	[esi], al
		inc	esi
		sub	ecx, 1
		jnz	short loc_416355
		lea	ecx, [ebx+119h]
		mov	edx, 100h

loc_41636B:				; CODE XREF: sub_416316+5Ej
		mov	al, [ecx+edi]
		mov	[ecx], al
		inc	ecx
		sub	edx, 1
		jnz	short loc_41636B
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_416316	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41637B	proc near		; CODE XREF: sub_41670A+91p

CPInfo		= _cpinfo ptr -718h
CharType	= word ptr -704h
var_304		= dword	ptr -304h
DestStr		= word ptr -204h
MultiByteStr	= byte ptr -104h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 718h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		cmp	dword ptr [esi+4], 0FDE9h
		jz	loc_4164AF
		lea	eax, [ebp+CPInfo]
		push	eax		; lpCPInfo
		push	dword ptr [esi+4] ; CodePage
		call	ds:GetCPInfo
		test	eax, eax
		jz	loc_4164AF
		xor	ebx, ebx
		mov	edi, 100h
		mov	eax, ebx

loc_4163C4:				; CODE XREF: sub_41637B+53j
		mov	[ebp+eax+MultiByteStr],	al
		inc	eax
		cmp	eax, edi
		jb	short loc_4163C4
		mov	al, [ebp+CPInfo.LeadByte]
		lea	ecx, [ebp+CPInfo.LeadByte]
		mov	[ebp+MultiByteStr], 20h
		jmp	short loc_416404
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4163E5:				; CODE XREF: sub_41637B+8Bj
		movzx	edx, byte ptr [ecx+1]
		movzx	eax, al
		jmp	short loc_4163FB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4163EE:				; CODE XREF: sub_41637B+82j
		cmp	eax, edi
		jnb	short loc_4163FF
		mov	[ebp+eax+MultiByteStr],	20h
		inc	eax

loc_4163FB:				; CODE XREF: sub_41637B+71j
		cmp	eax, edx
		jbe	short loc_4163EE

loc_4163FF:				; CODE XREF: sub_41637B+75j
		add	ecx, 2
		mov	al, [ecx]

loc_416404:				; CODE XREF: sub_41637B+68j
		test	al, al
		jnz	short loc_4163E5
		push	ebx		; int
		push	dword ptr [esi+4] ; int
		lea	eax, [ebp+CharType]
		push	eax		; lpCharType
		push	edi		; cchMultiByte
		lea	eax, [ebp+MultiByteStr]
		push	eax		; lpMultiByteStr
		push	1		; dwInfoType
		push	ebx		; int
		call	sub_41086F
		push	ebx		; int
		push	dword ptr [esi+4] ; CodePage
		lea	eax, [ebp+DestStr]
		push	edi		; cchDest
		push	eax		; lpDestStr
		push	edi		; int
		lea	eax, [ebp+MultiByteStr]
		push	eax		; lpMultiByteStr
		push	edi		; dwMapFlags
		push	dword ptr [esi+21Ch] ; int
		push	ebx		; int
		call	sub_410B60
		add	esp, 40h
		lea	eax, [ebp+var_304]
		push	ebx		; int
		push	dword ptr [esi+4] ; CodePage
		push	edi		; cchDest
		push	eax		; lpDestStr
		push	edi		; int
		lea	eax, [ebp+MultiByteStr]
		push	eax		; lpMultiByteStr
		push	200h		; dwMapFlags
		push	dword ptr [esi+21Ch] ; int
		push	ebx		; int
		call	sub_410B60
		add	esp, 24h
		mov	eax, ebx

loc_416471:				; CODE XREF: sub_41637B+130j
		movzx	ecx, [ebp+eax*2+CharType]
		test	cl, 1
		jz	short loc_41648C
		or	byte ptr [esi+eax+19h],	10h
		mov	cl, byte ptr [ebp+eax+DestStr]
		jmp	short loc_4164A1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41648C:				; CODE XREF: sub_41637B+101j
		test	cl, 2
		jz	short loc_41649F
		or	byte ptr [esi+eax+19h],	20h
		mov	cl, byte ptr [ebp+eax+var_304]
		jmp	short loc_4164A1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41649F:				; CODE XREF: sub_41637B+114j
		mov	cl, bl

loc_4164A1:				; CODE XREF: sub_41637B+10Fj
					; sub_41637B+122j
		mov	[esi+eax+119h],	cl
		inc	eax
		cmp	eax, edi
		jb	short loc_416471
		jmp	short loc_4164ED
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4164AF:				; CODE XREF: sub_41637B+22j
					; sub_41637B+3Aj
		xor	ebx, ebx
		mov	edi, 100h
		mov	ecx, ebx

loc_4164B8:				; CODE XREF: sub_41637B+170j
		lea	edx, [ecx-61h]
		lea	eax, [edx+20h]
		cmp	eax, 19h
		ja	short loc_4164CD
		or	byte ptr [esi+ecx+19h],	10h
		lea	eax, [ecx+20h]
		jmp	short loc_4164E1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4164CD:				; CODE XREF: sub_41637B+146j
		cmp	edx, 19h
		ja	short loc_4164DF
		lea	eax, [esi+19h]
		add	eax, ecx
		or	byte ptr [eax],	20h
		lea	eax, [ecx-20h]
		jmp	short loc_4164E1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4164DF:				; CODE XREF: sub_41637B+155j
		mov	al, bl

loc_4164E1:				; CODE XREF: sub_41637B+150j
					; sub_41637B+162j
		mov	[esi+ecx+119h],	al
		inc	ecx
		cmp	ecx, edi
		jb	short loc_4164B8

loc_4164ED:				; CODE XREF: sub_41637B+132j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_41637B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4164FE	proc near		; CODE XREF: sub_4166AF+36p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		call	sub_416619
		push	[ebp+arg_0]
		call	sub_4162A3
		mov	ecx, [ebp+arg_8]
		add	esp, 0Ch
		mov	[ebp+var_C], eax
		mov	ecx, [ecx+48h]
		cmp	eax, [ecx+4]
		jnz	short loc_41652E
		xor	eax, eax
		jmp	short loc_416581
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41652E:				; CODE XREF: sub_4164FE+2Aj
		push	ebx
		push	esi
		push	edi
		push	220h
		call	sub_40FDE5
		mov	edi, eax
		or	ebx, 0FFFFFFFFh
		pop	ecx
		test	edi, edi
		jz	short loc_416573
		mov	esi, [ebp+arg_8]
		mov	ecx, 88h
		mov	esi, [esi+48h]
		rep movsd
		mov	edi, eax
		push	edi
		push	[ebp+var_C]
		and	dword ptr [edi], 0
		call	sub_41670A
		mov	esi, eax
		pop	ecx
		pop	ecx
		cmp	esi, ebx
		jnz	short loc_416585
		call	sub_40BD71
		mov	dword ptr [eax], 16h

loc_416573:				; CODE XREF: sub_4164FE+45j
		mov	esi, ebx

loc_416575:				; CODE XREF: sub_4164FE+CEj
					; sub_4164FE+D7j ...
		push	edi		; lpMem
		call	sub_40F0A8
		pop	ecx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx

loc_416581:				; CODE XREF: sub_4164FE+2Ej
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416585:				; CODE XREF: sub_4164FE+68j
		cmp	[ebp+arg_4], 0
		jnz	short loc_416590
		call	sub_40D44F

loc_416590:				; CODE XREF: sub_4164FE+8Bj
		mov	eax, [ebp+arg_8]
		mov	eax, [eax+48h]
		lock xadd [eax], ebx
		dec	ebx
		jnz	short loc_4165B2
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax+48h], offset dword_42C498
		jz	short loc_4165B2
		push	dword ptr [eax+48h] ; lpMem
		call	sub_40F0A8
		pop	ecx

loc_4165B2:				; CODE XREF: sub_4164FE+9Dj
					; sub_4164FE+A9j
		mov	dword ptr [edi], 1
		mov	ecx, edi
		mov	eax, [ebp+arg_8]
		xor	edi, edi
		mov	[eax+48h], ecx
		mov	eax, [ebp+arg_8]
		test	byte ptr [eax+350h], 2
		jnz	short loc_416575
		test	byte ptr dword_42C1F4, 1
		jnz	short loc_416575
		lea	eax, [ebp+arg_8]
		mov	[ebp+var_14], eax
		lea	ecx, [ebp-1]
		push	5
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_10], eax
		pop	eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_14]
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		call	sub_41619F
		cmp	[ebp+arg_4], 0
		jz	loc_416575
		mov	eax, [ebp+arg_C]
		mov	eax, [eax]
		mov	off_42C2BC, eax
		jmp	loc_416575
sub_4164FE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_416619	proc near		; CODE XREF: sub_4164FE+Ep
					; sub_4166F7+Bp

; FUNCTION CHUNK AT 004166A1 SIZE 0000000E BYTES

		push	0Ch
		push	offset dword_42B440
		call	sub_405FF0
		xor	esi, esi
		mov	[ebp-1Ch], esi
		mov	edi, [ebp+8]
		mov	eax, dword_42C1F4
		test	[edi+350h], eax
		jz	short loc_416648
		cmp	[edi+4Ch], esi
		jz	short loc_416648
		mov	esi, [edi+48h]

loc_416642:				; CODE XREF: sub_416619+7Aj
		test	esi, esi
		jz	short loc_4166A9
		jmp	short loc_4166A1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416648:				; CODE XREF: sub_416619+1Fj
					; sub_416619+24j
		push	5
		call	sub_409ED7
		pop	ecx
		mov	[ebp-4], esi
		mov	esi, [edi+48h]
		mov	[ebp-1Ch], esi
		mov	ebx, [ebp+0Ch]
		cmp	esi, [ebx]
		jz	short loc_416687
		test	esi, esi
		jz	short loc_41667C
		or	eax, 0FFFFFFFFh
		lock xadd [esi], eax
		jnz	short loc_41667C
		cmp	esi, offset dword_42C498
		jz	short loc_41667C
		push	esi		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_41667C:				; CODE XREF: sub_416619+49j
					; sub_416619+52j ...
		mov	esi, [ebx]
		mov	[edi+48h], esi
		mov	[ebp-1Ch], esi
		lock inc dword ptr [esi]

loc_416687:				; CODE XREF: sub_416619+45j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_416698
		jmp	short loc_416642
sub_416619	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_416695	proc near		; DATA XREF: .rdata:0042B458o
		mov	esi, [ebp-1Ch]
sub_416695	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_416698	proc near		; CODE XREF: sub_416619+75p
		push	5
		call	sub_409F1F
		pop	ecx
		retn
sub_416698	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_416619

loc_4166A1:				; CODE XREF: sub_416619+2Dj
		mov	eax, esi
		call	sub_406036
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4166A9:				; CODE XREF: sub_416619+2Bj
		call	sub_40C069
		int	3		; Trap to Debugger
; END OF FUNCTION CHUNK	FOR sub_416619

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4166AF	proc near		; CODE XREF: sub_40CB68-2C7p
					; sub_40CB9F+Ep ...
		cmp	byte_42DC4C, 0
		jnz	short loc_4166F4
		mov	dword_42DC3C, offset dword_42C498
		mov	dword_42DC44, offset dword_42C7C0
		mov	dword_42DC40, offset dword_42C6B8
		call	sub_40F4B9
		push	offset dword_42DC3C
		push	eax
		push	1
		push	0FFFFFFFDh
		call	sub_4164FE
		add	esp, 10h
		mov	byte_42DC4C, 1

loc_4166F4:				; CODE XREF: sub_4166AF+7j
		mov	al, 1
		retn
sub_4166AF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4166F7	proc near		; CODE XREF: sub_4104DA+23p
		push	offset dword_42DC3C
		call	sub_40F3FC
		push	eax
		call	sub_416619
		pop	ecx
		pop	ecx
		retn
sub_4166F7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41670A	proc near		; CODE XREF: sub_4164FE+5Dp

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
CPInfo		= _cpinfo ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		push	[ebp+arg_0]
		call	sub_4162A3
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jz	loc_4168E5
		xor	edi, edi
		mov	ecx, edi
		mov	eax, edi
		mov	[ebp+var_1C], ecx

loc_41673E:				; CODE XREF: sub_41670A+4Cj
		cmp	dword_42C8C8[eax], ebx
		jz	loc_41683D
		inc	ecx
		add	eax, 30h
		mov	[ebp+var_1C], ecx
		cmp	eax, 0F0h
		jb	short loc_41673E
		cmp	ebx, 0FDE8h
		jz	loc_416835
		movzx	eax, bx
		push	eax		; CodePage
		call	ds:IsValidCodePage
		test	eax, eax
		jz	loc_416835
		mov	eax, 0FDE9h
		cmp	ebx, eax
		jnz	short loc_4167A5
		mov	[esi+4], eax
		mov	[esi+21Ch], edi
		mov	[esi+18h], edi
		mov	[esi+1Ch], di

loc_41678F:				; CODE XREF: sub_41670A+C9j
					; sub_41670A+11Aj
		mov	[esi+8], edi
		xor	eax, eax
		lea	edi, [esi+0Ch]
		stosd
		stosd
		stosd

loc_41679A:				; CODE XREF: sub_41670A+1D6j
		push	esi
		call	sub_41637B
		jmp	loc_4168EB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4167A5:				; CODE XREF: sub_41670A+73j
		lea	eax, [ebp+CPInfo]
		push	eax		; lpCPInfo
		push	ebx		; CodePage
		call	ds:GetCPInfo
		test	eax, eax
		jz	short loc_416829
		push	101h
		lea	eax, [esi+18h]
		push	edi
		push	eax
		call	sub_407330
		add	esp, 0Ch
		mov	[esi+4], ebx
		cmp	[ebp+CPInfo.MaxCharSize], 2
		mov	[esi+21Ch], edi
		jnz	short loc_41678F
		cmp	[ebp+CPInfo.LeadByte], 0
		lea	eax, [ebp+CPInfo.LeadByte]
		jz	short loc_4167FF

loc_4167DE:				; CODE XREF: sub_41670A+F3j
		mov	cl, [eax+1]
		test	cl, cl
		jz	short loc_4167FF
		movzx	edx, cl
		movzx	ecx, byte ptr [eax]
		jmp	short loc_4167F3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4167ED:				; CODE XREF: sub_41670A+EBj
		or	byte ptr [esi+ecx+19h],	4
		inc	ecx

loc_4167F3:				; CODE XREF: sub_41670A+E1j
		cmp	ecx, edx
		jbe	short loc_4167ED
		add	eax, 2
		cmp	byte ptr [eax],	0
		jnz	short loc_4167DE

loc_4167FF:				; CODE XREF: sub_41670A+D2j
					; sub_41670A+D9j
		lea	eax, [esi+1Ah]
		mov	ecx, 0FEh

loc_416807:				; CODE XREF: sub_41670A+104j
		or	byte ptr [eax],	8
		inc	eax
		sub	ecx, 1
		jnz	short loc_416807
		push	dword ptr [esi+4]
		call	sub_416265
		xor	edi, edi
		mov	[esi+21Ch], eax
		add	esp, 4
		inc	edi
		jmp	loc_41678F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416829:				; CODE XREF: sub_41670A+A8j
		cmp	dword_42DC48, edi
		jnz	loc_4168E5

loc_416835:				; CODE XREF: sub_41670A+54j
					; sub_41670A+66j
		or	eax, 0FFFFFFFFh
		jmp	loc_4168EE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41683D:				; CODE XREF: sub_41670A+3Aj
		push	101h
		lea	eax, [esi+18h]
		push	edi
		push	eax
		call	sub_407330
		add	esp, 0Ch
		imul	eax, [ebp+var_1C], 30h
		mov	[ebp+var_20], eax
		lea	eax, dword_42C8D8[eax]
		mov	[ebp+var_1C], eax

loc_41685F:				; CODE XREF: sub_41670A+19Bj
		cmp	byte ptr [eax],	0
		mov	ecx, eax
		jz	short loc_41689B

loc_416866:				; CODE XREF: sub_41670A+18Cj
		mov	al, [ecx+1]
		test	al, al
		jz	short loc_416898
		movzx	edx, byte ptr [ecx]
		movzx	eax, al
		jmp	short loc_41688C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416875:				; CODE XREF: sub_41670A+184j
		cmp	edx, 100h
		jnb	short loc_416890
		mov	al, byte_42C8C0[edi]
		or	[esi+edx+19h], al
		inc	edx
		movzx	eax, byte ptr [ecx+1]

loc_41688C:				; CODE XREF: sub_41670A+169j
		cmp	edx, eax
		jbe	short loc_416875

loc_416890:				; CODE XREF: sub_41670A+171j
		add	ecx, 2
		cmp	byte ptr [ecx],	0
		jnz	short loc_416866

loc_416898:				; CODE XREF: sub_41670A+161j
		mov	eax, [ebp+var_1C]

loc_41689B:				; CODE XREF: sub_41670A+15Aj
		inc	edi
		add	eax, 8
		mov	[ebp+var_1C], eax
		cmp	edi, 4
		jb	short loc_41685F
		push	ebx
		mov	[esi+4], ebx
		mov	dword ptr [esi+8], 1
		call	sub_416265
		add	esp, 4
		mov	[esi+21Ch], eax
		mov	eax, [ebp+var_20]
		lea	ecx, [esi+0Ch]
		push	6
		lea	edx, dword_42C8CC[eax]
		pop	edi

loc_4168CF:				; CODE XREF: sub_41670A+1D4j
		mov	ax, [edx]
		lea	edx, [edx+2]
		mov	[ecx], ax
		lea	ecx, [ecx+2]
		sub	edi, 1
		jnz	short loc_4168CF
		jmp	loc_41679A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4168E5:				; CODE XREF: sub_41670A+25j
					; sub_41670A+125j
		push	esi
		call	sub_416316

loc_4168EB:				; CODE XREF: sub_41670A+96j
		xor	eax, eax
		pop	ecx

loc_4168EE:				; CODE XREF: sub_41670A+12Ej
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_41670A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4168FF	proc near		; CODE XREF: sub_416958+Ep

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_10]
		call	sub_40A217
		movzx	esi, [ebp+arg_4]
		mov	eax, [ebp+var_8]
		mov	cl, [ebp+arg_C]
		test	[eax+esi+19h], cl
		jnz	short loc_41693E
		xor	edx, edx
		cmp	[ebp+arg_8], edx
		jz	short loc_416938
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		movzx	eax, word ptr [eax+esi*2]
		and	eax, [ebp+arg_8]
		jmp	short loc_41693A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416938:				; CODE XREF: sub_4168FF+29j
		mov	eax, edx

loc_41693A:				; CODE XREF: sub_4168FF+37j
		test	eax, eax
		jz	short loc_416941

loc_41693E:				; CODE XREF: sub_4168FF+22j
		xor	edx, edx
		inc	edx

loc_416941:				; CODE XREF: sub_4168FF+3Dj
		cmp	[ebp+var_4], 0
		pop	esi
		jz	short loc_416952
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_416952:				; CODE XREF: sub_4168FF+47j
		mov	eax, edx
		mov	esp, ebp
		pop	ebp
		retn
sub_4168FF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_416958	proc near		; CODE XREF: sub_40C9A0+59p
					; sub_40C9A0+136p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	4
		push	0
		push	[ebp+arg_0]
		push	0
		call	sub_4168FF
		add	esp, 10h
		pop	ebp
		retn
sub_416958	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_416970	proc near		; CODE XREF: sub_4169A7+18p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		push	edi
		xor	edi, edi
		cmp	[edx], di
		jz	short loc_4169A1
		push	esi

loc_416981:				; CODE XREF: sub_416970+2Ej
		mov	ecx, edx
		lea	esi, [ecx+2]

loc_416986:				; CODE XREF: sub_416970+1Fj
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, di
		jnz	short loc_416986
		sub	ecx, esi
		sar	ecx, 1
		lea	edx, [edx+ecx*2]
		add	edx, 2
		cmp	[edx], di
		jnz	short loc_416981
		pop	esi

loc_4169A1:				; CODE XREF: sub_416970+Ej
		lea	eax, [edx+2]
		pop	edi
		pop	ebp
		retn
sub_416970	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4169A7	proc near		; CODE XREF: sub_40CB9F+13p

cchMultiByte	= dword	ptr -4

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		push	edi
		call	ds:GetEnvironmentStringsW
		mov	esi, eax
		xor	edi, edi
		test	esi, esi
		jz	short loc_416A17
		push	esi
		call	sub_416970
		push	edi		; int
		push	edi		; int
		push	edi		; cchMultiByte
		mov	ebx, eax
		push	edi		; lpMultiByteStr
		sub	ebx, esi
		sar	ebx, 1
		push	ebx		; cchWideChar
		push	esi		; lpWideCharStr
		push	edi		; int
		push	edi		; CodePage
		call	sub_415578
		add	esp, 24h
		mov	[ebp+cchMultiByte], eax
		test	eax, eax
		jz	short loc_416A17
		push	eax
		call	sub_40FDE5
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_416A0C
		xor	eax, eax
		push	eax		; int
		push	eax		; int
		push	[ebp+cchMultiByte] ; cchMultiByte
		push	edi		; lpMultiByteStr
		push	ebx		; cchWideChar
		push	esi		; lpWideCharStr
		push	eax		; int
		push	eax		; CodePage
		call	sub_415578
		add	esp, 20h
		test	eax, eax
		jz	short loc_416A0C
		mov	ebx, edi
		xor	edi, edi
		jmp	short loc_416A0E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416A0C:				; CODE XREF: sub_4169A7+45j
					; sub_4169A7+5Dj
		xor	ebx, ebx

loc_416A0E:				; CODE XREF: sub_4169A7+63j
		push	edi		; lpMem
		call	sub_40F0A8
		pop	ecx
		jmp	short loc_416A19
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416A17:				; CODE XREF: sub_4169A7+15j
					; sub_4169A7+38j
		mov	ebx, edi

loc_416A19:				; CODE XREF: sub_4169A7+6Ej
		test	esi, esi
		jz	short loc_416A24
		push	esi		; LPWSTR
		call	ds:FreeEnvironmentStringsW

loc_416A24:				; CODE XREF: sub_4169A7+74j
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_4169A7	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_416D8E

loc_416A2D:				; CODE XREF: sub_416D8E+6j
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jnz	short loc_416A50
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		or	eax, 0FFFFFFFFh
		jmp	loc_416C5D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416A50:				; CODE XREF: sub_416D8E-353j
		push	ebx
		push	edi
		push	3Dh
		push	esi
		mov	edi, esi
		call	sub_41BF00
		mov	[ebp+var_10], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_416C44
		cmp	eax, esi
		jz	loc_416C44
		mov	al, [eax+1]
		mov	[ebp+var_1], al
		call	sub_416D1F
		xor	ebx, ebx
		cmp	dword_42D818, ebx
		jnz	short loc_416B01
		cmp	[ebp+arg_4], ebx
		jz	short loc_416AA7
		cmp	dword_42D81C, ebx
		jz	short loc_416AA7
		call	sub_40CDD5
		test	eax, eax
		jz	loc_416C44
		call	sub_416D1F
		jmp	short loc_416B01
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416AA7:				; CODE XREF: sub_416D8E-305j
					; sub_416D8E-2FDj
		cmp	[ebp+var_1], bl
		jnz	short loc_416AB3
		xor	ebx, ebx
		jmp	loc_416C52
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416AB3:				; CODE XREF: sub_416D8E-2E4j
		push	4
		push	1
		call	sub_40FE33
		push	ebx		; lpMem
		mov	dword_42D818, eax
		call	sub_40F0A8
		add	esp, 0Ch
		cmp	dword_42D818, ebx
		jz	loc_416C4F
		cmp	dword_42D81C, ebx
		jnz	short loc_416B01
		push	4
		push	1
		call	sub_40FE33
		push	ebx		; lpMem
		mov	dword_42D81C, eax
		call	sub_40F0A8
		add	esp, 0Ch
		cmp	dword_42D81C, ebx
		jz	loc_416C4F

loc_416B01:				; CODE XREF: sub_416D8E-30Aj
					; sub_416D8E-2E9j ...
		mov	eax, dword_42D818
		mov	[ebp+var_8], eax
		test	eax, eax
		jz	loc_416C4F
		mov	eax, [ebp+var_10]
		sub	eax, esi
		push	eax
		push	esi
		call	sub_416D39
		mov	[ebp+var_C], eax
		pop	ecx
		pop	ecx
		mov	ecx, [ebp+var_8]
		test	eax, eax
		js	short loc_416B78
		cmp	[ecx], ebx
		jz	short loc_416B78
		push	dword ptr [ecx+eax*4] ;	lpMem
		call	sub_40F0A8
		pop	ecx
		mov	ecx, [ebp+var_C]
		cmp	[ebp+var_1], bl
		jnz	short loc_416B6E
		mov	edx, [ebp+var_8]
		jmp	short loc_416B4B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416B43:				; CODE XREF: sub_416D8E-240j
		mov	eax, [edx+ecx*4+4]
		mov	[edx+ecx*4], eax
		inc	ecx

loc_416B4B:				; CODE XREF: sub_416D8E-24Dj
		cmp	[edx+ecx*4], ebx
		jnz	short loc_416B43
		push	4
		push	ecx
		push	edx
		call	sub_419244
		push	ebx		; lpMem
		mov	[ebp+var_C], eax
		call	sub_40F0A8
		mov	eax, [ebp+var_C]
		add	esp, 10h
		test	eax, eax
		jz	short loc_416BCE
		jmp	short loc_416BC9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416B6E:				; CODE XREF: sub_416D8E-252j
		mov	eax, [ebp+var_8]
		mov	edi, ebx
		mov	[eax+ecx*4], esi
		jmp	short loc_416BCE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416B78:				; CODE XREF: sub_416D8E-267j
					; sub_416D8E-263j
		cmp	[ebp+var_1], bl
		jz	loc_416C52
		neg	eax
		mov	[ebp+var_C], eax
		lea	edx, [eax+2]
		cmp	edx, eax
		jb	loc_416C4F
		cmp	edx, 3FFFFFFFh
		jnb	loc_416C4F
		push	4
		push	edx
		push	ecx
		call	sub_419244
		push	ebx		; lpMem
		mov	[ebp+var_8], eax
		call	sub_40F0A8
		mov	eax, [ebp+var_8]
		add	esp, 10h
		test	eax, eax
		jz	loc_416C4F
		mov	ecx, [ebp+var_C]
		mov	edi, ebx
		mov	[eax+ecx*4], esi
		mov	[eax+ecx*4+4], ebx

loc_416BC9:				; CODE XREF: sub_416D8E-222j
		mov	dword_42D818, eax

loc_416BCE:				; CODE XREF: sub_416D8E-224j
					; sub_416D8E-218j
		cmp	[ebp+arg_4], ebx
		jz	short loc_416C52
		lea	ecx, [esi+1]

loc_416BD6:				; CODE XREF: sub_416D8E-1B3j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_416BD6
		sub	esi, ecx
		push	1
		lea	eax, [esi+2]
		push	eax
		mov	[ebp+var_C], eax
		call	sub_40FE33
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_416C3B
		push	[ebp+arg_0]
		push	[ebp+var_C]
		push	esi
		call	sub_40E8FE
		add	esp, 0Ch
		test	eax, eax
		jnz	short sub_416C62
		mov	ecx, [ebp+var_10]
		mov	eax, esi
		sub	eax, [ebp+arg_0]
		inc	ecx
		add	ecx, eax
		movsx	eax, [ebp+var_1]
		neg	eax
		sbb	eax, eax
		and	eax, ecx
		mov	[ecx-1], bl
		push	eax
		push	esi
		call	sub_41A838
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_416C3B
		call	sub_40BD71
		or	ebx, 0FFFFFFFFh
		mov	dword ptr [eax], 2Ah

loc_416C3B:				; CODE XREF: sub_416D8E-19Bj
					; sub_416D8E-163j
		push	esi		; lpMem
		call	sub_40F0A8
		pop	ecx
		jmp	short loc_416C52
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416C44:				; CODE XREF: sub_416D8E-32Bj
					; sub_416D8E-323j ...
		call	sub_40BD71
		mov	dword ptr [eax], 16h

loc_416C4F:				; CODE XREF: sub_416D8E-2BEj
					; sub_416D8E-293j ...
		or	ebx, 0FFFFFFFFh

loc_416C52:				; CODE XREF: sub_416D8E-2E0j
					; sub_416D8E-213j ...
		push	edi		; lpMem
		call	sub_40F0A8
		pop	ecx
		pop	edi
		mov	eax, ebx
		pop	ebx

loc_416C5D:				; CODE XREF: sub_416D8E-343j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
; END OF FUNCTION CHUNK	FOR sub_416D8E

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_416C62	proc near		; CODE XREF: sub_416D8E-188j
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		call	sub_409E62
		int	3		; Trap to Debugger
sub_416C62	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_416C6D	proc near		; CODE XREF: sub_416D1F+Ep

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	edi
		mov	edi, [ebp+arg_0]
		test	edi, edi
		jnz	short loc_416C82
		xor	eax, eax

loc_416C7D:				; CODE XREF: sub_416C6D+9Bj
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416C82:				; CODE XREF: sub_416C6D+Cj
		xor	ecx, ecx
		mov	eax, edi
		cmp	[edi], ecx
		jz	short loc_416C93

loc_416C8A:				; CODE XREF: sub_416C6D+24j
		lea	eax, [eax+4]
		inc	ecx
		cmp	dword ptr [eax], 0
		jnz	short loc_416C8A

loc_416C93:				; CODE XREF: sub_416C6D+1Bj
		push	esi
		lea	eax, [ecx+1]
		push	4
		push	eax
		call	sub_40FE33
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_416D0D
		mov	ecx, [edi]
		test	ecx, ecx
		jz	short loc_416CFD
		push	ebx
		mov	ebx, esi
		sub	ebx, edi

loc_416CB2:				; CODE XREF: sub_416C6D+8Dj
		lea	edx, [ecx+1]

loc_416CB5:				; CODE XREF: sub_416C6D+4Dj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_416CB5
		sub	ecx, edx
		push	1
		lea	eax, [ecx+1]
		push	eax
		mov	[ebp+var_4], eax
		call	sub_40FE33
		push	0		; lpMem
		mov	[ebx+edi], eax
		call	sub_40F0A8
		add	esp, 0Ch
		cmp	dword ptr [ebx+edi], 0
		jz	short loc_416D0D
		push	dword ptr [edi]
		push	[ebp+var_4]
		push	dword ptr [ebx+edi]
		call	sub_40E8FE
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_416D12
		add	edi, 4
		mov	ecx, [edi]
		test	ecx, ecx
		jnz	short loc_416CB2
		pop	ebx

loc_416CFD:				; CODE XREF: sub_416C6D+3Ej
		push	0		; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	eax, esi
		pop	esi
		jmp	loc_416C7D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416D0D:				; CODE XREF: sub_416C6D+38j
					; sub_416C6D+70j
		call	sub_40C069

loc_416D12:				; CODE XREF: sub_416C6D+84j
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	sub_409E62
		int	3		; Trap to Debugger
sub_416C6D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_416D1F	proc near		; CODE XREF: sub_416D8E-317p
					; sub_416D8E-2EEp
		mov	eax, dword_42D818
		cmp	eax, dword_42D824
		jnz	short locret_416D38
		push	eax
		call	sub_416C6D
		pop	ecx
		mov	dword_42D818, eax

locret_416D38:				; CODE XREF: sub_416D1F+Bj
		retn
sub_416D1F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_416D39	proc near		; CODE XREF: sub_416D8E-276p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	edi, dword_42D818
		mov	esi, edi
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_416D79
		mov	ebx, [ebp+arg_4]

loc_416D52:				; CODE XREF: sub_416D39+3Ej
		push	ebx
		push	eax
		push	[ebp+arg_0]
		call	sub_41A745
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_416D70
		mov	eax, [esi]
		mov	al, [ebx+eax]
		cmp	al, 3Dh
		jz	short loc_416D87
		test	al, al
		jz	short loc_416D87

loc_416D70:				; CODE XREF: sub_416D39+28j
		add	esi, 4
		mov	eax, [esi]
		test	eax, eax
		jnz	short loc_416D52

loc_416D79:				; CODE XREF: sub_416D39+14j
		sub	esi, edi
		sar	esi, 2
		neg	esi

loc_416D80:				; CODE XREF: sub_416D39+53j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416D87:				; CODE XREF: sub_416D39+31j
					; sub_416D39+35j
		sub	esi, edi
		sar	esi, 2
		jmp	short loc_416D80
sub_416D39	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_416D8E	proc near		; CODE XREF: sub_40CCF3+5Ap

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

; FUNCTION CHUNK AT 00416A2D SIZE 00000235 BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_416A2D
sub_416D8E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_416D99	proc near		; CODE XREF: sub_40D02B+5p

var_4		= dword	ptr -4

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		mov	eax, large fs:30h
		push	esi
		xor	esi, esi
		mov	[ebp+var_4], esi
		mov	eax, [eax+10h]
		cmp	[eax+8], esi
		jl	short loc_416DC2
		lea	eax, [ebp+var_4]
		push	eax
		call	sub_40F966
		cmp	[ebp+var_4], 1
		jz	short loc_416DC5

loc_416DC2:				; CODE XREF: sub_416D99+18j
		xor	esi, esi
		inc	esi

loc_416DC5:				; CODE XREF: sub_416D99+27j
		mov	eax, esi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_416D99	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_416DCC	proc near		; CODE XREF: sub_416E7E+54p

var_8		= dword	ptr -8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		push	38h
		push	40h
		call	sub_40FE33
		mov	esi, eax
		xor	ebx, ebx
		mov	[ebp+var_8], esi
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_416DEF
		mov	esi, ebx
		jmp	short loc_416E3A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416DEF:				; CODE XREF: sub_416DCC+1Dj
		lea	eax, [esi+0E00h]
		cmp	esi, eax
		jz	short loc_416E3A
		push	edi
		lea	edi, [esi+20h]
		mov	esi, eax

loc_416DFF:				; CODE XREF: sub_416DCC+68j
		push	ebx		; int
		push	0FA0h		; dwSpinCount
		lea	eax, [edi-20h]
		push	eax		; lpCriticalSection
		call	sub_40FBF2
		or	dword ptr [edi-8], 0FFFFFFFFh
		mov	[edi], ebx
		lea	edi, [edi+38h]
		mov	[edi-34h], ebx
		lea	eax, [edi-20h]
		mov	dword ptr [edi-30h], 0A0A0000h
		mov	byte ptr [edi-2Ch], 0Ah
		and	byte ptr [edi-2Bh], 0F8h
		mov	[edi-2Ah], ebx
		mov	[edi-26h], bl
		cmp	eax, esi
		jnz	short loc_416DFF
		mov	esi, [ebp+var_8]
		pop	edi

loc_416E3A:				; CODE XREF: sub_416DCC+21j
					; sub_416DCC+2Bj
		push	ebx		; lpMem
		call	sub_40F0A8
		pop	ecx
		mov	eax, esi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_416DCC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_416E49(LPCRITICAL_SECTION lpCriticalSection)
sub_416E49	proc near		; CODE XREF: .text:00410E5Ep

lpCriticalSection= dword ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+lpCriticalSection]
		test	esi, esi
		jz	short loc_416E7B
		push	ebx
		lea	ebx, [esi+0E00h]
		push	edi
		mov	edi, esi
		cmp	esi, ebx
		jz	short loc_416E72

loc_416E64:				; CODE XREF: sub_416E49+27j
		push	edi		; lpCriticalSection
		call	ds:DeleteCriticalSection
		add	edi, 38h
		cmp	edi, ebx
		jnz	short loc_416E64

loc_416E72:				; CODE XREF: sub_416E49+19j
		push	esi		; lpMem
		call	sub_40F0A8
		pop	ecx
		pop	edi
		pop	ebx

loc_416E7B:				; CODE XREF: sub_416E49+Bj
		pop	esi
		pop	ebp
		retn
sub_416E49	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_416E7E	proc near		; CODE XREF: sub_410C8C+40p
					; sub_410DF8+1Dp
		push	10h
		push	offset dword_42B480
		call	sub_405FF0
		cmp	dword ptr [ebp+8], 2000h
		jb	short loc_416EAA
		call	sub_40BD71
		push	9
		pop	esi
		mov	[eax], esi
		call	sub_409E35

loc_416EA2:				; CODE XREF: sub_416E7E+76j
		mov	eax, esi
		call	sub_406036
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416EAA:				; CODE XREF: sub_416E7E+13j
		xor	esi, esi
		mov	[ebp-1Ch], esi
		push	7
		call	sub_409ED7
		pop	ecx
		mov	[ebp-4], esi
		mov	edi, esi
		mov	eax, dword_42DB50

loc_416EC1:				; CODE XREF: sub_416E7E+86j
		mov	[ebp-20h], edi
		cmp	[ebp+8], eax
		jl	short loc_416EE8
		cmp	dword_42D950[edi*4], esi
		jnz	short loc_416F03
		call	sub_416DCC
		mov	dword_42D950[edi*4], eax
		test	eax, eax
		jnz	short loc_416EF6
		push	0Ch
		pop	esi
		mov	[ebp-1Ch], esi

loc_416EE8:				; CODE XREF: sub_416E7E+49j
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_416F09
		jmp	short loc_416EA2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416EF6:				; CODE XREF: sub_416E7E+62j
		mov	eax, dword_42DB50
		add	eax, 40h
		mov	dword_42DB50, eax

loc_416F03:				; CODE XREF: sub_416E7E+52j
		inc	edi
		jmp	short loc_416EC1
sub_416E7E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_416F06	proc near		; DATA XREF: .rdata:0042B498o
		mov	esi, [ebp-1Ch]
sub_416F06	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_416F09	proc near		; CODE XREF: sub_416E7E+71p
		push	7
		call	sub_409F1F
		pop	ecx
		retn
sub_416F09	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_416F12	proc near		; CODE XREF: sub_410E7A+15p
					; sub_411089+16p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, eax
		and	eax, 3Fh
		sar	ecx, 6
		imul	eax, 38h
		add	eax, dword_42D950[ecx*4]
		push	eax		; lpCriticalSection
		call	ds:EnterCriticalSection
		pop	ebp
		retn
sub_416F12	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_416F35	proc near		; CODE XREF: sub_410EF0+5p
					; sub_411115+5p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, eax
		and	eax, 3Fh
		sar	ecx, 6
		imul	eax, 38h
		add	eax, dword_42D950[ecx*4]
		push	eax		; lpCriticalSection
		call	ds:LeaveCriticalSection
		pop	ebp
		retn
sub_416F35	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_416F58	proc near		; CODE XREF: sub_410F8B+69p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		test	esi, esi
		js	short loc_416FCE
		cmp	esi, dword_42DB50
		jnb	short loc_416FCE
		mov	eax, esi
		mov	edi, esi
		and	eax, 3Fh
		sar	edi, 6
		imul	ebx, eax, 38h
		mov	eax, dword_42D950[edi*4]
		test	byte ptr [ebx+eax+28h],	1
		jz	short loc_416FCE
		cmp	dword ptr [ebx+eax+18h], 0FFFFFFFFh
		jz	short loc_416FCE
		call	sub_40C7C6
		cmp	eax, 1
		jnz	short loc_416FBE
		xor	eax, eax
		sub	esi, eax
		jz	short loc_416FB5
		sub	esi, 1
		jz	short loc_416FB0
		sub	esi, 1
		jnz	short loc_416FBE
		push	eax
		push	0FFFFFFF4h
		jmp	short loc_416FB8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416FB0:				; CODE XREF: sub_416F58+4Cj
		push	eax
		push	0FFFFFFF5h
		jmp	short loc_416FB8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416FB5:				; CODE XREF: sub_416F58+47j
		push	eax		; hHandle
		push	0FFFFFFF6h	; nStdHandle

loc_416FB8:				; CODE XREF: sub_416F58+56j
					; sub_416F58+5Bj
		call	ds:SetStdHandle

loc_416FBE:				; CODE XREF: sub_416F58+41j
					; sub_416F58+51j
		mov	eax, dword_42D950[edi*4]
		or	dword ptr [ebx+eax+18h], 0FFFFFFFFh
		xor	eax, eax
		jmp	short loc_416FE4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_416FCE:				; CODE XREF: sub_416F58+Dj
					; sub_416F58+15j ...
		call	sub_40BD71
		mov	dword ptr [eax], 9
		call	sub_40BD5E
		and	dword ptr [eax], 0
		or	eax, 0FFFFFFFFh

loc_416FE4:				; CODE XREF: sub_416F58+74j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_416F58	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_416FE9	proc near		; CODE XREF: sub_410F8B+Bp
					; sub_410F8B+3Ap ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		cmp	ecx, 0FFFFFFFEh
		jnz	short loc_41700B
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 9
		jmp	short loc_41704E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41700B:				; CODE XREF: sub_416FE9+Bj
		test	ecx, ecx
		js	short loc_417036
		cmp	ecx, dword_42DB50
		jnb	short loc_417036
		mov	eax, ecx
		and	ecx, 3Fh
		sar	eax, 6
		imul	ecx, 38h
		mov	eax, dword_42D950[eax*4]
		test	byte ptr [eax+ecx+28h],	1
		jz	short loc_417036
		mov	eax, [eax+ecx+18h]
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417036:				; CODE XREF: sub_416FE9+24j
					; sub_416FE9+2Cj ...
		call	sub_40BD5E
		and	dword ptr [eax], 0
		call	sub_40BD71
		mov	dword ptr [eax], 9
		call	sub_409E35

loc_41704E:				; CODE XREF: sub_416FE9+20j
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
sub_416FE9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417053	proc near		; CODE XREF: sub_417151+2BDp
					; sub_417CBF+44p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jz	loc_41714E
		mov	eax, [esi+0Ch]
		cmp	eax, off_42C18C
		jz	short loc_417076
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_417076:				; CODE XREF: sub_417053+1Aj
		mov	eax, [esi+10h]
		cmp	eax, off_42C190
		jz	short loc_417088
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_417088:				; CODE XREF: sub_417053+2Cj
		mov	eax, [esi+14h]
		cmp	eax, off_42C194
		jz	short loc_41709A
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_41709A:				; CODE XREF: sub_417053+3Ej
		mov	eax, [esi+18h]
		cmp	eax, off_42C198
		jz	short loc_4170AC
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_4170AC:				; CODE XREF: sub_417053+50j
		mov	eax, [esi+1Ch]
		cmp	eax, off_42C19C
		jz	short loc_4170BE
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_4170BE:				; CODE XREF: sub_417053+62j
		mov	eax, [esi+20h]
		cmp	eax, off_42C1A0
		jz	short loc_4170D0
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_4170D0:				; CODE XREF: sub_417053+74j
		mov	eax, [esi+24h]
		cmp	eax, off_42C1A4
		jz	short loc_4170E2
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_4170E2:				; CODE XREF: sub_417053+86j
		mov	eax, [esi+38h]
		cmp	eax, off_42C1B8
		jz	short loc_4170F4
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_4170F4:				; CODE XREF: sub_417053+98j
		mov	eax, [esi+3Ch]
		cmp	eax, off_42C1BC
		jz	short loc_417106
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_417106:				; CODE XREF: sub_417053+AAj
		mov	eax, [esi+40h]
		cmp	eax, off_42C1C0
		jz	short loc_417118
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_417118:				; CODE XREF: sub_417053+BCj
		mov	eax, [esi+44h]
		cmp	eax, off_42C1C4
		jz	short loc_41712A
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_41712A:				; CODE XREF: sub_417053+CEj
		mov	eax, [esi+48h]
		cmp	eax, off_42C1C8
		jz	short loc_41713C
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_41713C:				; CODE XREF: sub_417053+E0j
		mov	eax, [esi+4Ch]
		cmp	eax, off_42C1CC
		jz	short loc_41714E
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_41714E:				; CODE XREF: sub_417053+Bj
					; sub_417053+F2j
		pop	esi
		pop	ebp
		retn
sub_417053	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417151	proc near		; DATA XREF: .rdata:00421774o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
lpMem		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	ebx
		mov	ebx, [ebp+arg_0]
		xor	ecx, ecx
		push	esi
		push	edi
		mov	[ebp+var_C], ecx
		mov	[ebp+var_18], ebx
		mov	[ebp+var_14], ecx
		cmp	[ebx+0ACh], ecx
		jnz	short loc_417189
		cmp	[ebx+0B0h], ecx
		jnz	short loc_417189
		mov	edi, ecx
		mov	[ebp+lpMem], ecx
		mov	esi, offset off_42C180
		jmp	loc_4174BD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417189:				; CODE XREF: sub_417151+1Fj
					; sub_417151+27j
		push	50h
		push	1
		call	sub_40FE33
		mov	esi, eax
		push	0		; lpMem
		mov	[ebp+var_4], esi
		call	sub_40F0A8
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_4171AD

loc_4171A5:				; CODE XREF: sub_417151+7Fj
					; sub_417151+2DDj
		xor	eax, eax
		inc	eax
		jmp	loc_417503
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4171AD:				; CODE XREF: sub_417151+52j
		push	4
		push	1
		call	sub_40FE33
		mov	edi, eax
		push	0		; lpMem
		mov	[ebp+lpMem], edi
		call	sub_40F0A8
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_4171D2
		push	esi		; lpMem
		call	sub_40F0A8

loc_4171CF:				; CODE XREF: sub_417151+BAj
		pop	ecx
		jmp	short loc_4171A5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4171D2:				; CODE XREF: sub_417151+76j
		cmp	dword ptr [ebx+0ACh], 0
		jz	loc_417462
		push	4
		push	1
		call	sub_40FE33
		mov	edi, eax
		push	0		; lpMem
		mov	[ebp+var_C], edi
		call	sub_40F0A8
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_41720D
		push	esi		; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+lpMem]
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx
		jmp	short loc_4171CF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41720D:				; CODE XREF: sub_417151+A8j
		mov	edi, [ebx+0ACh]
		lea	eax, [esi+0Ch]
		push	eax		; int
		push	15h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		mov	ecx, [ebp+var_4]
		mov	esi, eax
		add	ecx, 10h
		lea	eax, [ebp+var_18]
		push	ecx		; int
		push	14h		; LCType
		push	edi		; int
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 14h
		push	eax		; int
		push	16h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 18h
		push	eax		; int
		push	17h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		add	esp, 50h
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 1Ch
		mov	[ebp+var_10], eax
		push	eax		; int
		push	18h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 20h
		push	eax		; int
		push	50h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 24h
		push	eax		; int
		push	51h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 28h
		push	eax		; int
		push	1Ah		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	0		; int
		push	eax		; int
		call	sub_4106BD
		add	esp, 50h
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 29h
		push	eax		; int
		push	19h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	0		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 2Ah
		push	eax		; int
		push	54h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	0		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 2Bh
		push	eax		; int
		push	55h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	0		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 2Ch
		push	eax		; int
		push	56h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	0		; int
		push	eax		; int
		call	sub_4106BD
		add	esp, 50h
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 2Dh
		push	eax		; int
		push	57h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	0		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 2Eh
		push	eax		; int
		push	52h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	0		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 2Fh
		push	eax		; int
		push	53h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	0		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 38h
		push	eax		; int
		push	15h		; LCType
		push	edi		; int
		push	2		; int
		lea	eax, [ebp+var_18]
		push	eax		; int
		call	sub_4106BD
		add	esp, 50h
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 3Ch
		push	eax		; int
		push	14h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 40h
		push	eax		; int
		push	16h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 44h
		push	eax		; int
		push	17h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 48h
		push	eax		; int
		push	50h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		add	esp, 50h
		or	esi, eax
		mov	eax, [ebp+var_4]
		add	eax, 4Ch
		push	eax		; int
		push	51h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_18]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		add	esp, 14h
		or	eax, esi
		jz	short loc_417433
		mov	ebx, [ebp+var_4]
		push	ebx
		call	sub_417053
		push	ebx		; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+lpMem]
		push	eax		; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+var_C]
		push	eax		; lpMem
		call	sub_40F0A8
		add	esp, 10h
		jmp	loc_4171A5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417433:				; CODE XREF: sub_417151+2B7j
		mov	edx, [ebp+var_10]
		mov	edx, [edx]
		jmp	short loc_417445
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41743A:				; CODE XREF: sub_417151+2F8j
		lea	ecx, [eax-30h]
		cmp	cl, 9
		ja	short loc_41744D
		mov	[edx], cl

loc_417444:				; CODE XREF: sub_417151+2FEj
		inc	edx

loc_417445:				; CODE XREF: sub_417151+2E7j
					; sub_417151+30Fj
		mov	al, [edx]
		test	al, al
		jnz	short loc_41743A
		jmp	short loc_41746F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41744D:				; CODE XREF: sub_417151+2EFj
		cmp	al, 3Bh
		jnz	short loc_417444
		mov	esi, edx

loc_417453:				; CODE XREF: sub_417151+30Dj
		lea	eax, [esi+1]
		mov	cl, [eax]
		mov	[esi], cl
		mov	esi, eax
		test	cl, cl
		jnz	short loc_417453
		jmp	short loc_417445
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417462:				; CODE XREF: sub_417151+88j
		mov	edi, [ebp+var_4]
		mov	esi, offset off_42C180
		push	14h
		pop	ecx
		rep movsd

loc_41746F:				; CODE XREF: sub_417151+2FAj
		mov	eax, [ebx+88h]
		xor	ecx, ecx
		mov	esi, [ebp+var_4]
		inc	ecx
		mov	edi, [ebp+var_C]
		mov	eax, [eax]
		mov	[esi], eax
		mov	eax, [ebx+88h]
		mov	eax, [eax+4]
		mov	[esi+4], eax
		mov	eax, [ebx+88h]
		mov	eax, [eax+8]
		mov	[esi+8], eax
		mov	eax, [ebx+88h]
		mov	eax, [eax+30h]
		mov	[esi+30h], eax
		mov	eax, [ebx+88h]
		mov	eax, [eax+34h]
		mov	[esi+34h], eax
		mov	eax, [ebp+lpMem]
		mov	[eax], ecx
		test	edi, edi
		jz	short loc_4174BD
		mov	[edi], ecx

loc_4174BD:				; CODE XREF: sub_417151+33j
					; sub_417151+368j
		mov	eax, [ebx+84h]
		test	eax, eax
		jz	short loc_4174CA
		lock dec dword ptr [eax]

loc_4174CA:				; CODE XREF: sub_417151+374j
		mov	ecx, [ebx+7Ch]
		test	ecx, ecx
		jz	short loc_4174EF
		or	eax, 0FFFFFFFFh
		lock xadd [ecx], eax
		jnz	short loc_4174EF
		push	dword ptr [ebx+88h] ; lpMem
		call	sub_40F0A8
		push	dword ptr [ebx+7Ch] ; lpMem
		call	sub_40F0A8
		pop	ecx
		pop	ecx

loc_4174EF:				; CODE XREF: sub_417151+37Ej
					; sub_417151+387j
		mov	eax, [ebp+lpMem]
		mov	[ebx+7Ch], eax
		xor	eax, eax
		mov	[ebx+84h], edi
		mov	[ebx+88h], esi

loc_417503:				; CODE XREF: sub_417151+57j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_417151	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41750A	proc near		; CODE XREF: sub_417573+130p
					; sub_417CBF+66p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jz	short loc_417570
		mov	eax, [esi]
		cmp	eax, off_42C180
		jz	short loc_417528
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_417528:				; CODE XREF: sub_41750A+15j
		mov	eax, [esi+4]
		cmp	eax, off_42C184
		jz	short loc_41753A
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_41753A:				; CODE XREF: sub_41750A+27j
		mov	eax, [esi+8]
		cmp	eax, off_42C188
		jz	short loc_41754C
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_41754C:				; CODE XREF: sub_41750A+39j
		mov	eax, [esi+30h]
		cmp	eax, off_42C1B0
		jz	short loc_41755E
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_41755E:				; CODE XREF: sub_41750A+4Bj
		mov	eax, [esi+34h]
		cmp	eax, off_42C1B4
		jz	short loc_417570
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_417570:				; CODE XREF: sub_41750A+Bj
					; sub_41750A+5Dj
		pop	esi
		pop	ebp
		retn
sub_41750A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417573	proc near		; DATA XREF: .rdata:00421780o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
lpMem		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		xor	eax, eax
		push	edi
		mov	[ebp+var_14], esi
		mov	[ebp+var_10], eax
		cmp	[esi+0B0h], eax
		jnz	short loc_4175A8
		cmp	[esi+0ACh], eax
		jnz	short loc_4175A8
		mov	edi, eax
		mov	[ebp+var_4], eax
		mov	ebx, offset off_42C180
		jmp	loc_4176F6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4175A8:				; CODE XREF: sub_417573+1Cj
					; sub_417573+24j
		xor	edi, edi
		inc	edi
		push	50h
		push	edi
		mov	[ebp+var_C], edi
		call	sub_40FE33
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jnz	short loc_4175C5
		mov	eax, edi
		jmp	loc_41773C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4175C5:				; CODE XREF: sub_417573+49j
		mov	esi, [esi+88h]
		mov	edi, ebx
		push	14h
		pop	ecx
		rep movsd
		push	4
		call	sub_40FDE5
		mov	esi, eax
		xor	edi, edi
		push	edi		; lpMem
		mov	[ebp+var_4], esi
		call	sub_40F0A8
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_4175FB
		push	ebx		; lpMem
		call	sub_40F0A8
		xor	eax, eax
		pop	ecx
		inc	eax
		jmp	loc_41773C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4175FB:				; CODE XREF: sub_417573+77j
		mov	[esi], edi
		mov	esi, [ebp+arg_0]
		cmp	[esi+0B0h], edi
		jz	loc_417758
		push	4
		call	sub_40FDE5
		mov	edi, eax
		push	0		; lpMem
		mov	[ebp+lpMem], edi
		call	sub_40F0A8
		pop	ecx
		pop	ecx
		push	ebx		; lpMem
		test	edi, edi
		jnz	short loc_417631
		call	sub_40F0A8
		pop	ecx
		jmp	loc_4176BD	; int
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417631:				; CODE XREF: sub_417573+B1j
		and	dword ptr [edi], 0
		lea	eax, [ebp+var_14]
		mov	edi, [esi+0B0h]
		push	0Eh		; LCType
		push	edi		; int
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		lea	ecx, [ebx+4]
		mov	esi, eax
		push	ecx		; int
		push	0Fh		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		lea	eax, [ebx+8]
		push	eax		; int
		push	10h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	esi, eax
		lea	eax, [ebx+30h]
		push	eax		; int
		push	0Eh		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		add	esp, 50h
		or	esi, eax
		lea	eax, [ebx+34h]
		push	eax		; int
		push	0Fh		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		add	esp, 14h
		or	eax, esi
		jz	short loc_4176CC
		push	ebx
		call	sub_41750A
		push	ebx		; lpMem
		call	sub_40F0A8
		push	[ebp+lpMem]	; lpMem
		call	sub_40F0A8
		add	esp, 0Ch
		or	[ebp+var_C], 0FFFFFFFFh

loc_4176BD:				; CODE XREF: sub_417573+B9j
		mov	ecx, [ebp+var_4]
		push	ecx		; lpMem
		call	sub_40F0A8
		mov	eax, [ebp+var_C]
		pop	ecx
		jmp	short loc_41773C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4176CC:				; CODE XREF: sub_417573+12Dj
		mov	edx, [ebx+8]
		jmp	short loc_4176DC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4176D1:				; CODE XREF: sub_417573+16Dj
		lea	ecx, [eax-30h]
		cmp	cl, 9
		ja	short loc_417743
		mov	[edx], cl

loc_4176DB:				; CODE XREF: sub_417573+1D2j
		inc	edx

loc_4176DC:				; CODE XREF: sub_417573+15Cj
					; sub_417573+1E3j
		mov	al, [edx]
		test	al, al
		jnz	short loc_4176D1
		mov	edi, [ebp+lpMem]
		mov	esi, [ebp+arg_0]

loc_4176E8:				; CODE XREF: sub_417573+20Cj
		mov	ecx, [ebp+var_4]
		xor	eax, eax
		inc	eax
		mov	[ecx], eax
		test	edi, edi
		jz	short loc_4176F6
		mov	[edi], eax

loc_4176F6:				; CODE XREF: sub_417573+30j
					; sub_417573+17Fj
		mov	eax, [esi+80h]
		test	eax, eax
		jz	short loc_417703
		lock dec dword ptr [eax]

loc_417703:				; CODE XREF: sub_417573+18Bj
		mov	ecx, [esi+7Ch]
		test	ecx, ecx
		jz	short loc_417728
		or	eax, 0FFFFFFFFh
		lock xadd [ecx], eax
		jnz	short loc_417728
		push	dword ptr [esi+7Ch] ; lpMem
		call	sub_40F0A8
		push	dword ptr [esi+88h] ; lpMem
		call	sub_40F0A8
		pop	ecx
		pop	ecx

loc_417728:				; CODE XREF: sub_417573+195j
					; sub_417573+19Ej
		mov	eax, [ebp+var_4]
		mov	[esi+7Ch], eax
		xor	eax, eax
		mov	[esi+80h], edi
		mov	[esi+88h], ebx

loc_41773C:				; CODE XREF: sub_417573+4Dj
					; sub_417573+83j ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417743:				; CODE XREF: sub_417573+164j
		cmp	al, 3Bh
		jnz	short loc_4176DB
		mov	esi, edx

loc_417749:				; CODE XREF: sub_417573+1E1j
		lea	eax, [esi+1]
		mov	cl, [eax]
		mov	[esi], cl
		mov	esi, eax
		test	cl, cl
		jnz	short loc_417749
		jmp	short loc_4176DC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417758:				; CODE XREF: sub_417573+93j
		mov	eax, off_42C180
		mov	[ebx], eax
		mov	eax, off_42C184
		mov	[ebx+4], eax
		mov	eax, off_42C188
		mov	[ebx+8], eax
		mov	eax, off_42C1B0
		mov	[ebx+30h], eax
		mov	eax, off_42C1B4
		mov	[ebx+34h], eax
		jmp	loc_4176E8
sub_417573	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417784	proc near		; CODE XREF: sub_417A3A+14p
					; sub_417A3A+1Fp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_4]
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		xor	edi, edi
		lea	eax, [esi+ecx*4]
		and	ecx, 3FFFFFFFh
		cmp	eax, esi
		sbb	ebx, ebx
		not	ebx
		and	ebx, ecx
		jz	short loc_4177B7

loc_4177A7:				; CODE XREF: sub_417784+31j
		push	dword ptr [esi]	; lpMem
		call	sub_40F0A8
		inc	edi
		lea	esi, [esi+4]
		pop	ecx
		cmp	edi, ebx
		jnz	short loc_4177A7

loc_4177B7:				; CODE XREF: sub_417784+21j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_417784	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4177BC	proc near		; CODE XREF: .text:00417B50p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
LCType		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, [ebp+arg_4]
		and	[ebp+var_10], 0
		push	ebx
		push	esi
		mov	esi, [eax+0B4h]
		push	edi
		push	esi
		mov	[ebp+var_8], esi
		mov	[ebp+var_14], eax
		call	sub_40D3EF
		pop	ecx
		mov	ecx, [ebp+arg_0]
		xor	ebx, ebx
		push	31h
		mov	[ecx+160h], eax
		pop	eax
		push	7
		pop	edx
		mov	[ebp+LCType], eax
		mov	[ebp+var_C], edx
		jmp	short loc_4177FF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4177FA:				; CODE XREF: sub_4177BC+D0j
		mov	ecx, [ebp+arg_0]
		mov	esi, edi

loc_4177FF:				; CODE XREF: sub_4177BC+3Cj
		push	7
		pop	edi
		add	eax, 0FFFFFFD0h
		xor	edx, edx
		div	edi
		mov	edi, edx
		lea	eax, [ecx+edi*4]
		push	eax		; int
		push	[ebp+LCType]	; LCType
		lea	eax, [ebp+var_14]
		push	esi		; int
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		mov	esi, [ebp+LCType]
		or	ebx, eax
		mov	eax, [ebp+arg_0]
		add	esi, 0FFFFFFF9h
		lea	eax, [eax+edi*4]
		add	eax, 1Ch
		push	eax		; int
		push	esi		; LCType
		push	[ebp+var_8]	; int
		lea	eax, [ebp+var_14]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	ebx, eax
		mov	eax, [ebp+arg_0]
		lea	eax, [eax+edi*4]
		add	eax, 0B4h
		push	eax		; int
		push	[ebp+LCType]	; LCType
		lea	eax, [ebp+var_14]
		push	[ebp+var_8]	; int
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		or	ebx, eax
		mov	eax, [ebp+arg_0]
		lea	eax, [eax+edi*4]
		mov	edi, [ebp+var_8]
		add	eax, 0D0h
		push	eax		; int
		push	esi		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		or	ebx, eax
		add	esp, 50h
		mov	eax, [ebp+LCType]
		inc	eax
		sub	[ebp+var_C], 1
		mov	[ebp+LCType], eax
		jnz	loc_4177FA
		mov	eax, [ebp+arg_0]
		push	38h
		pop	esi
		add	eax, 68h
		mov	[ebp+var_8], esi
		mov	[ebp+LCType], eax
		mov	[ebp+var_C], 0Ch

loc_4178A8:				; CODE XREF: sub_4177BC+15Dj
		add	eax, 0FFFFFFD0h
		add	esi, 0Ch
		push	eax		; int
		push	esi		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		push	[ebp+LCType]	; int
		or	ebx, eax
		lea	eax, [ebp+var_14]
		push	[ebp+var_8]	; LCType
		push	edi		; int
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	ebx, eax
		mov	eax, [ebp+LCType]
		add	eax, 84h
		push	eax		; int
		push	esi		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		mov	esi, [ebp+var_8]
		or	ebx, eax
		mov	eax, [ebp+LCType]
		add	eax, 0B4h
		push	eax		; int
		push	esi		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		or	ebx, eax
		add	esp, 50h
		mov	eax, [ebp+LCType]
		add	eax, 4
		inc	esi
		sub	[ebp+var_C], 1
		mov	[ebp+LCType], eax
		mov	[ebp+var_8], esi
		jnz	short loc_4178A8
		mov	esi, [ebp+arg_0]
		lea	eax, [esi+98h]
		push	eax		; int
		push	28h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	ebx, eax
		lea	eax, [esi+9Ch]
		push	eax		; int
		push	29h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	ebx, eax
		lea	eax, [esi+14Ch]
		push	eax		; int
		push	28h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		or	ebx, eax
		lea	eax, [esi+150h]
		push	eax		; int
		push	29h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		add	esp, 50h
		or	ebx, eax
		lea	eax, [esi+0A0h]
		push	eax		; int
		push	1Fh		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	ebx, eax
		lea	eax, [esi+0A4h]
		push	eax		; int
		push	20h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	ebx, eax
		lea	eax, [esi+0A8h]
		push	eax		; int
		push	1003h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	1		; int
		push	eax		; int
		call	sub_4106BD
		or	ebx, eax
		lea	eax, [esi+0ACh]
		push	eax		; int
		push	1009h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	0		; int
		push	eax		; int
		call	sub_4106BD
		add	esp, 50h
		or	ebx, eax
		lea	eax, [esi+154h]
		push	eax		; int
		push	1Fh		; LCType
		push	edi		; int
		push	2		; int
		lea	eax, [ebp+var_14]
		push	eax		; int
		call	sub_4106BD
		or	ebx, eax
		lea	eax, [esi+158h]
		push	eax		; int
		push	20h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		or	ebx, eax
		lea	eax, [esi+15Ch]
		push	eax		; int
		push	1003h		; LCType
		push	edi		; int
		lea	eax, [ebp+var_14]
		push	2		; int
		push	eax		; int
		call	sub_4106BD
		add	esp, 3Ch
		or	eax, ebx
		neg	eax
		sbb	al, al
		pop	edi
		pop	esi
		inc	al
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_4177BC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417A3A	proc near		; CODE XREF: .text:00417B5Cp
					; sub_417E32+21p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jz	loc_417B1B
		push	7
		push	esi
		call	sub_417784
		lea	eax, [esi+1Ch]
		push	7
		push	eax
		call	sub_417784
		lea	eax, [esi+38h]
		push	0Ch
		push	eax
		call	sub_417784
		lea	eax, [esi+68h]
		push	0Ch
		push	eax
		call	sub_417784
		lea	eax, [esi+98h]
		push	2
		push	eax
		call	sub_417784
		push	dword ptr [esi+0A0h] ; lpMem
		call	sub_40F0A8
		push	dword ptr [esi+0A4h] ; lpMem
		call	sub_40F0A8
		push	dword ptr [esi+0A8h] ; lpMem
		call	sub_40F0A8
		lea	eax, [esi+0B4h]
		push	7
		push	eax
		call	sub_417784
		lea	eax, [esi+0D0h]
		push	7
		push	eax
		call	sub_417784
		add	esp, 44h
		lea	eax, [esi+0ECh]
		push	0Ch
		push	eax
		call	sub_417784
		lea	eax, [esi+11Ch]
		push	0Ch
		push	eax
		call	sub_417784
		lea	eax, [esi+14Ch]
		push	2
		push	eax
		call	sub_417784
		push	dword ptr [esi+154h] ; lpMem
		call	sub_40F0A8
		push	dword ptr [esi+158h] ; lpMem
		call	sub_40F0A8
		push	dword ptr [esi+15Ch] ; lpMem
		call	sub_40F0A8
		push	dword ptr [esi+160h] ; lpMem
		call	sub_40F0A8
		add	esp, 28h

loc_417B1B:				; CODE XREF: sub_417A3A+Bj
		pop	esi
		pop	ebp
		retn
sub_417A3A	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
unk_417B1E	db  8Bh	; 		; DATA XREF: .rdata:0042178Co
		db 0FFh
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+8]
		push	esi
		push	edi
		xor	edi, edi
		cmp	[ebx+0B4h], edi
		jnz	short loc_417B3A
		mov	esi, offset off_421FA8
		jmp	short loc_417B80
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417B3A:				; CODE XREF: .text:00417B31j
		push	164h
		push	1
		call	sub_40FE33
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_417B64
		push	ebx
		push	esi
		call	sub_4177BC
		pop	ecx
		pop	ecx
		test	al, al
		jnz	short loc_417B6F
		push	esi
		call	sub_417A3A
		pop	ecx
		mov	edi, esi

loc_417B64:				; CODE XREF: .text:00417B4Cj
		push	edi
		call	sub_40F0A8
		xor	eax, eax
		inc	eax
		jmp	short loc_417B93
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417B6F:				; CODE XREF: .text:00417B59j
		push	edi
		mov	dword ptr [esi+0B0h], 1
		call	sub_40F0A8
		pop	ecx

loc_417B80:				; CODE XREF: .text:00417B38j
		push	dword ptr [ebx+9Ch]
		call	sub_417E63
		mov	[ebx+9Ch], esi
		xor	eax, eax

loc_417B93:				; CODE XREF: .text:00417B6Dj
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417B99	proc near		; CODE XREF: sub_40D4F3+6Ep
					; sub_40D4F3+13Ap ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	edx, [ebp+arg_0]
		xor	eax, eax
		push	ebx
		push	esi
		push	edi
		mov	ecx, edx
		cmp	[edx], ax
		jz	short loc_417BE7
		mov	esi, [ebp+arg_4]
		movzx	ebx, word ptr [esi]

loc_417BB5:				; CODE XREF: sub_417B99+4Cj
		mov	edi, esi
		test	bx, bx
		jz	short loc_417BDF
		movzx	eax, word ptr [ecx]
		mov	[ebp+var_4], eax
		mov	eax, ebx

loc_417BC4:				; CODE XREF: sub_417B99+42j
		cmp	word ptr [ebp+var_4], ax
		jz	short loc_417BE7
		add	edi, 2
		movzx	eax, word ptr [edi]
		mov	edx, eax
		mov	[ebp+var_8], edx
		mov	edx, [ebp+arg_0]
		test	ax, ax
		jnz	short loc_417BC4
		xor	eax, eax

loc_417BDF:				; CODE XREF: sub_417B99+21j
		add	ecx, 2
		cmp	[ecx], ax
		jnz	short loc_417BB5

loc_417BE7:				; CODE XREF: sub_417B99+14j
					; sub_417B99+2Fj
		pop	edi
		sub	ecx, edx
		sar	ecx, 1
		pop	esi
		mov	eax, ecx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_417B99	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417BF4	proc near		; CODE XREF: sub_40DD23+94p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		xor	eax, eax
		push	ebx
		push	esi
		push	edi
		cmp	[ecx], ax
		jz	short loc_417C37
		mov	edx, [ebp+arg_4]
		movzx	edi, word ptr [edx]

loc_417C0C:				; CODE XREF: sub_417BF4+41j
		mov	esi, edx
		test	di, di
		jz	short loc_417C2F
		movzx	eax, word ptr [ecx]
		mov	ebx, edi

loc_417C18:				; CODE XREF: sub_417BF4+37j
		cmp	bx, ax
		jz	short loc_417C3E
		add	esi, 2
		movzx	eax, word ptr [esi]
		mov	ebx, eax
		test	ax, ax
		movzx	eax, word ptr [ecx]
		jnz	short loc_417C18
		xor	eax, eax

loc_417C2F:				; CODE XREF: sub_417BF4+1Dj
		add	ecx, 2
		cmp	[ecx], ax
		jnz	short loc_417C0C

loc_417C37:				; CODE XREF: sub_417BF4+10j
		xor	eax, eax

loc_417C39:				; CODE XREF: sub_417BF4+4Cj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417C3E:				; CODE XREF: sub_417BF4+27j
		mov	eax, ecx
		jmp	short loc_417C39
sub_417BF4	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417C42	proc near		; CODE XREF: sub_40D6B3+25p
					; sub_40F3B1+43p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		lock inc dword ptr [eax+0Ch]
		mov	ecx, [eax+7Ch]
		test	ecx, ecx
		jz	short loc_417C58
		lock inc dword ptr [ecx]

loc_417C58:				; CODE XREF: sub_417C42+11j
		mov	ecx, [eax+84h]
		test	ecx, ecx
		jz	short loc_417C65
		lock inc dword ptr [ecx]

loc_417C65:				; CODE XREF: sub_417C42+1Ej
		mov	ecx, [eax+80h]
		test	ecx, ecx
		jz	short loc_417C72
		lock inc dword ptr [ecx]

loc_417C72:				; CODE XREF: sub_417C42+2Bj
		mov	ecx, [eax+8Ch]
		test	ecx, ecx
		jz	short loc_417C7F
		lock inc dword ptr [ecx]

loc_417C7F:				; CODE XREF: sub_417C42+38j
		push	esi
		push	6
		lea	ecx, [eax+28h]
		pop	esi

loc_417C86:				; CODE XREF: sub_417C42+6Cj
		cmp	dword ptr [ecx-8], offset dword_42C2C0
		jz	short loc_417C98
		mov	edx, [ecx]
		test	edx, edx
		jz	short loc_417C98
		lock inc dword ptr [edx]

loc_417C98:				; CODE XREF: sub_417C42+4Bj
					; sub_417C42+51j
		cmp	dword ptr [ecx-0Ch], 0
		jz	short loc_417CA8
		mov	edx, [ecx-4]
		test	edx, edx
		jz	short loc_417CA8
		lock inc dword ptr [edx]

loc_417CA8:				; CODE XREF: sub_417C42+5Aj
					; sub_417C42+61j
		add	ecx, 10h
		sub	esi, 1
		jnz	short loc_417C86
		push	dword ptr [eax+9Ch]
		call	sub_417E09
		pop	ecx
		pop	esi
		pop	ebp
		retn
sub_417C42	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417CBF	proc near		; CODE XREF: sub_40D2F1+F5p
					; sub_40F3B1+31p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	eax, [esi+88h]
		test	eax, eax
		jz	short loc_417D41
		cmp	eax, offset off_42C180
		jz	short loc_417D41
		mov	eax, [esi+7Ch]
		test	eax, eax
		jz	short loc_417D41
		cmp	dword ptr [eax], 0
		jnz	short loc_417D41
		mov	eax, [esi+84h]
		test	eax, eax
		jz	short loc_417D0A
		cmp	dword ptr [eax], 0
		jnz	short loc_417D0A
		push	eax		; lpMem
		call	sub_40F0A8
		push	dword ptr [esi+88h]
		call	sub_417053
		pop	ecx
		pop	ecx

loc_417D0A:				; CODE XREF: sub_417CBF+31j
					; sub_417CBF+36j
		mov	eax, [esi+80h]
		test	eax, eax
		jz	short loc_417D2C
		cmp	dword ptr [eax], 0
		jnz	short loc_417D2C
		push	eax		; lpMem
		call	sub_40F0A8
		push	dword ptr [esi+88h]
		call	sub_41750A
		pop	ecx
		pop	ecx

loc_417D2C:				; CODE XREF: sub_417CBF+53j
					; sub_417CBF+58j
		push	dword ptr [esi+7Ch] ; lpMem
		call	sub_40F0A8
		push	dword ptr [esi+88h] ; lpMem
		call	sub_40F0A8
		pop	ecx
		pop	ecx

loc_417D41:				; CODE XREF: sub_417CBF+14j
					; sub_417CBF+1Bj ...
		mov	eax, [esi+8Ch]
		test	eax, eax
		jz	short loc_417D90
		cmp	dword ptr [eax], 0
		jnz	short loc_417D90
		mov	eax, [esi+90h]
		sub	eax, 0FEh
		push	eax		; lpMem
		call	sub_40F0A8
		mov	eax, [esi+94h]
		mov	edi, 80h
		sub	eax, edi
		push	eax		; lpMem
		call	sub_40F0A8
		mov	eax, [esi+98h]
		sub	eax, edi
		push	eax		; lpMem
		call	sub_40F0A8
		push	dword ptr [esi+8Ch] ; lpMem
		call	sub_40F0A8
		add	esp, 10h

loc_417D90:				; CODE XREF: sub_417CBF+8Aj
					; sub_417CBF+8Fj
		push	dword ptr [esi+9Ch]
		call	sub_417E32
		pop	ecx
		push	6
		pop	eax
		lea	ebx, [esi+0A0h]
		mov	[ebp+var_4], eax
		lea	edi, [esi+28h]

loc_417DAB:				; CODE XREF: sub_417CBF+13Aj
		cmp	dword ptr [edi-8], offset dword_42C2C0
		jz	short loc_417DD1
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_417DCE
		cmp	dword ptr [eax], 0
		jnz	short loc_417DCE
		push	eax		; lpMem
		call	sub_40F0A8
		push	dword ptr [ebx]	; lpMem
		call	sub_40F0A8
		pop	ecx
		pop	ecx

loc_417DCE:				; CODE XREF: sub_417CBF+F9j
					; sub_417CBF+FEj
		mov	eax, [ebp+var_4]

loc_417DD1:				; CODE XREF: sub_417CBF+F3j
		cmp	dword ptr [edi-0Ch], 0
		jz	short loc_417DED
		mov	eax, [edi-4]
		test	eax, eax
		jz	short loc_417DEA
		cmp	dword ptr [eax], 0
		jnz	short loc_417DEA
		push	eax		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_417DEA:				; CODE XREF: sub_417CBF+11Dj
					; sub_417CBF+122j
		mov	eax, [ebp+var_4]

loc_417DED:				; CODE XREF: sub_417CBF+116j
		add	ebx, 4
		add	edi, 10h
		sub	eax, 1
		mov	[ebp+var_4], eax
		jnz	short loc_417DAB
		push	esi		; lpMem
		call	sub_40F0A8
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_417CBF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417E09	proc near		; CODE XREF: sub_417C42+74p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jz	short loc_417E2B
		cmp	ecx, offset off_421FA8
		jz	short loc_417E2B
		xor	eax, eax
		inc	eax
		lock xadd [ecx+0B0h], eax
		inc	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417E2B:				; CODE XREF: sub_417E09+Aj
					; sub_417E09+12j
		mov	eax, 7FFFFFFFh
		pop	ebp
		retn
sub_417E09	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417E32	proc near		; CODE XREF: sub_417CBF+D7p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jz	short loc_417E60
		cmp	esi, offset off_421FA8
		jz	short loc_417E60
		mov	eax, [esi+0B0h]
		nop
		test	eax, eax
		jnz	short loc_417E60
		push	esi
		call	sub_417A3A
		push	esi		; lpMem
		call	sub_40F0A8
		pop	ecx
		pop	ecx

loc_417E60:				; CODE XREF: sub_417E32+Bj
					; sub_417E32+13j ...
		pop	esi
		pop	ebp
		retn
sub_417E32	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417E63	proc near		; CODE XREF: .text:00417B86p
					; sub_417E8C+78p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jz	short loc_417E85
		cmp	ecx, offset off_421FA8
		jz	short loc_417E85
		or	eax, 0FFFFFFFFh
		lock xadd [ecx+0B0h], eax
		dec	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417E85:				; CODE XREF: sub_417E63+Aj
					; sub_417E63+12j
		mov	eax, 7FFFFFFFh
		pop	ebp
		retn
sub_417E63	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417E8C	proc near		; CODE XREF: sub_40D2F1+97p
					; sub_40D2F1+ECp ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_417F0B
		lock dec dword ptr [eax+0Ch]
		mov	ecx, [eax+7Ch]
		test	ecx, ecx
		jz	short loc_417EA6
		lock dec dword ptr [ecx]

loc_417EA6:				; CODE XREF: sub_417E8C+15j
		mov	ecx, [eax+84h]
		test	ecx, ecx
		jz	short loc_417EB3
		lock dec dword ptr [ecx]

loc_417EB3:				; CODE XREF: sub_417E8C+22j
		mov	ecx, [eax+80h]
		test	ecx, ecx
		jz	short loc_417EC0
		lock dec dword ptr [ecx]

loc_417EC0:				; CODE XREF: sub_417E8C+2Fj
		mov	ecx, [eax+8Ch]
		test	ecx, ecx
		jz	short loc_417ECD
		lock dec dword ptr [ecx]

loc_417ECD:				; CODE XREF: sub_417E8C+3Cj
		push	esi
		push	6
		lea	ecx, [eax+28h]
		pop	esi

loc_417ED4:				; CODE XREF: sub_417E8C+70j
		cmp	dword ptr [ecx-8], offset dword_42C2C0
		jz	short loc_417EE6
		mov	edx, [ecx]
		test	edx, edx
		jz	short loc_417EE6
		lock dec dword ptr [edx]

loc_417EE6:				; CODE XREF: sub_417E8C+4Fj
					; sub_417E8C+55j
		cmp	dword ptr [ecx-0Ch], 0
		jz	short loc_417EF6
		mov	edx, [ecx-4]
		test	edx, edx
		jz	short loc_417EF6
		lock dec dword ptr [edx]

loc_417EF6:				; CODE XREF: sub_417E8C+5Ej
					; sub_417E8C+65j
		add	ecx, 10h
		sub	esi, 1
		jnz	short loc_417ED4
		push	dword ptr [eax+9Ch]
		call	sub_417E63
		pop	ecx
		pop	esi

loc_417F0B:				; CODE XREF: sub_417E8C+Aj
		pop	ebp
		retn
sub_417E8C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_417F0D	proc near		; CODE XREF: sub_40DB01+37p
					; sub_4104AD+23p

; FUNCTION CHUNK AT 00417F76 SIZE 0000000E BYTES

		push	0Ch
		push	offset dword_42B4A0
		call	sub_405FF0
		and	dword ptr [ebp-1Ch], 0
		call	sub_40F3FC
		lea	edi, [eax+4Ch]
		mov	ecx, dword_42C1F4
		test	[eax+350h], ecx
		jz	short loc_417F39
		mov	esi, [edi]
		test	esi, esi
		jnz	short loc_417F76

loc_417F39:				; CODE XREF: sub_417F0D+24j
		push	4
		call	sub_409ED7
		pop	ecx
		and	dword ptr [ebp-4], 0
		push	dword_42D94C
		push	edi
		call	sub_417F84
		pop	ecx
		pop	ecx
		mov	esi, eax
		mov	[ebp-1Ch], esi
		mov	dword ptr [ebp-4], 0FFFFFFFEh
		call	sub_417F6D
		test	esi, esi
		jz	short loc_417F7E
		jmp	short loc_417F76
sub_417F0D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_417F6A	proc near		; DATA XREF: .rdata:0042B4B8o
		mov	esi, [ebp-1Ch]
sub_417F6A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_417F6D	proc near		; CODE XREF: sub_417F0D+52p
		push	4
		call	sub_409F1F
		pop	ecx
		retn
sub_417F6D	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_417F0D

loc_417F76:				; CODE XREF: sub_417F0D+2Aj
					; sub_417F0D+5Bj
		mov	eax, esi
		call	sub_406036
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417F7E:				; CODE XREF: sub_417F0D+59j
		call	sub_40C069
		int	3		; Trap to Debugger
; END OF FUNCTION CHUNK	FOR sub_417F0D

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417F84	proc near		; CODE XREF: sub_40D221+36p
					; sub_40D2F1+8Ep ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		test	esi, esi
		jz	short loc_417FCE
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_417FCE
		mov	edi, [eax]
		cmp	edi, esi
		jnz	short loc_417FA3

loc_417F9F:				; CODE XREF: sub_417F84+2Aj
					; sub_417F84+37j ...
		mov	eax, esi
		jmp	short loc_417FD0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417FA3:				; CODE XREF: sub_417F84+19j
		push	esi
		mov	[eax], esi
		call	sub_417C42
		pop	ecx
		test	edi, edi
		jz	short loc_417F9F
		push	edi
		call	sub_417E8C
		cmp	dword ptr [edi+0Ch], 0
		pop	ecx
		jnz	short loc_417F9F
		cmp	edi, offset off_42C200
		jz	short loc_417F9F
		push	edi
		call	sub_417CBF
		pop	ecx
		jmp	short loc_417F9F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_417FCE:				; CODE XREF: sub_417F84+Cj
					; sub_417F84+13j
		xor	eax, eax

loc_417FD0:				; CODE XREF: sub_417F84+1Dj
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_417F84	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_417FD4	proc near		; CODE XREF: sub_4186DE:loc_41877Ep

var_B0		= dword	ptr -0B0h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 0B0h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	esi
		mov	esi, [ebp+arg_0]
		lea	eax, [ebp+var_B0]
		push	55h
		push	eax
		or	dword ptr [esi+8], 104h
		call	sub_40FBB6
		cmp	eax, 1
		jle	short loc_418043
		lea	ecx, [ebp+var_B0]
		push	edi
		lea	edx, [ecx+2]
		xor	edi, edi

loc_418013:				; CODE XREF: sub_417FD4+48j
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, di
		jnz	short loc_418013
		sub	ecx, edx
		sar	ecx, 1
		lea	eax, [ecx+1]
		push	eax
		lea	eax, [ebp+var_B0]
		push	eax
		lea	eax, [esi+250h]
		push	55h
		push	eax
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	short loc_418052
		pop	edi

loc_418043:				; CODE XREF: sub_417FD4+31j
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		pop	esi
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418052:				; CODE XREF: sub_417FD4+6Cj
		push	edi
		push	edi
		push	edi
		push	edi
		push	edi
		call	sub_409E62
		int	3		; Trap to Debugger
sub_417FD4	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41805D	proc near		; CODE XREF: sub_4186DE+60p
					; sub_4186DE+92p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		xor	ebx, ebx
		push	edi
		push	2
		pop	edi
		mov	ecx, [esi]
		mov	[ebp+var_4], ebx
		lea	edx, [ecx+2]

loc_418076:				; CODE XREF: sub_41805D+21j
		mov	ax, [ecx]
		add	ecx, edi
		cmp	ax, bx
		jnz	short loc_418076
		sub	ecx, edx
		xor	eax, eax
		mov	edx, [esi+4]
		sar	ecx, 1
		cmp	ecx, 3
		setz	al
		lea	ebx, [edx+2]
		mov	[esi+10h], eax

loc_418095:				; CODE XREF: sub_41805D+41j
		mov	ax, [edx]
		add	edx, edi
		cmp	ax, word ptr [ebp+var_4]
		jnz	short loc_418095
		sub	edx, ebx
		xor	eax, eax
		sar	edx, 1
		cmp	edx, 3
		setz	al
		mov	[esi+14h], eax
		cmp	ecx, 3
		jz	short loc_4180BE
		push	dword ptr [esi]
		call	sub_418151
		pop	ecx
		mov	edi, eax

loc_4180BE:				; CODE XREF: sub_41805D+55j
		xor	ebx, ebx
		mov	[esi+0Ch], edi
		push	ebx
		push	ebx
		push	3
		push	offset sub_418185
		call	sub_40FA22
		mov	ecx, [esi+8]
		test	cl, 7
		setnz	dl
		bt	ecx, 9
		setb	al
		and	dl, al
		bt	ecx, 8
		setb	al
		test	dl, al
		jnz	short loc_4180F1
		mov	[esi+8], ebx

loc_4180F1:				; CODE XREF: sub_41805D+8Fj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_41805D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4180F8	proc near		; CODE XREF: sub_4186DE:loc_418745p
					; sub_4186DE:loc_418777p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		xor	ebx, ebx
		push	edi
		push	2
		pop	edx
		mov	ecx, [esi]
		lea	edi, [ecx+2]

loc_41810D:				; CODE XREF: sub_4180F8+1Dj
		mov	ax, [ecx]
		add	ecx, edx
		cmp	ax, bx
		jnz	short loc_41810D
		sub	ecx, edi
		xor	eax, eax
		sar	ecx, 1
		cmp	ecx, 3
		setz	al
		mov	[esi+10h], eax
		jz	short loc_418132
		push	dword ptr [esi]
		call	sub_418151
		pop	ecx
		mov	edx, eax

loc_418132:				; CODE XREF: sub_4180F8+2Ej
		push	ebx
		push	ebx
		push	3
		push	offset loc_418467
		mov	[esi+0Ch], edx
		call	sub_40FA22
		test	byte ptr [esi+8], 4
		jnz	short loc_41814C
		mov	[esi+8], ebx

loc_41814C:				; CODE XREF: sub_4180F8+4Fj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_4180F8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_418151	proc near		; CODE XREF: sub_41805D+59p
					; sub_4180F8+32p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		xor	edx, edx
		test	ecx, ecx
		jnz	short loc_418163
		xor	eax, eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418163:				; CODE XREF: sub_418151+Cj
					; sub_418151+2Ej
		movzx	eax, word ptr [ecx]
		add	ecx, 2
		cmp	ax, 41h
		jb	short loc_418175
		cmp	ax, 5Ah
		jbe	short loc_41817E

loc_418175:				; CODE XREF: sub_418151+1Cj
		add	eax, 0FFFFFF9Fh
		cmp	ax, 19h
		ja	short loc_418181

loc_41817E:				; CODE XREF: sub_418151+22j
		inc	edx
		jmp	short loc_418163
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418181:				; CODE XREF: sub_418151+2Bj
		mov	eax, edx
		pop	ebp
		retn
sub_418151	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_418185	proc near		; DATA XREF: sub_41805D+6Ao

var_F4		= dword	ptr -0F4h
var_88		= dword	ptr -88h
LCData		= word ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		call	sub_40F3FC
		mov	esi, eax
		lea	eax, [ebp+LCData]
		push	40h		; cchData
		push	eax		; lpLCData
		mov	ecx, [esi+64h]
		neg	ecx
		sbb	ecx, ecx
		and	ecx, 0FFFFF005h
		add	ecx, 1002h
		push	ecx		; LCType
		push	edi		; int
		call	sub_40FB77
		test	eax, eax
		jnz	short loc_4181D6
		and	[esi+58h], eax
		inc	eax
		jmp	loc_418448
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4181D6:				; CODE XREF: sub_418185+46j
		push	ebx
		lea	eax, [ebp+LCData]
		push	eax
		push	dword ptr [esi+54h]
		call	sub_415625
		xor	ebx, ebx
		mov	[ebp+var_88], ebx
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	loc_4182B5
		push	40h		; cchData
		lea	eax, [ebp+LCData]
		push	eax		; lpLCData
		mov	eax, [esi+60h]
		neg	eax
		sbb	eax, eax
		and	eax, 0FFFFF002h
		add	eax, 1001h
		push	eax		; LCType
		push	edi		; int
		call	sub_40FB77
		test	eax, eax
		jnz	short loc_418225
		and	[esi+58h], ebx
		jmp	loc_4182F1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418225:				; CODE XREF: sub_418185+96j
		lea	eax, [ebp+LCData]
		push	eax
		push	dword ptr [esi+50h]
		call	sub_415625
		pop	ecx
		pop	ecx
		mov	ecx, [esi+58h]
		test	eax, eax
		jnz	short loc_418258
		or	ecx, 304h
		mov	[esi+58h], ecx
		mov	ecx, edi
		lea	edx, [ecx+2]

loc_41824B:				; CODE XREF: sub_418185+CFj
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, bx
		jnz	short loc_41824B
		jmp	short loc_418293
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418258:				; CODE XREF: sub_418185+B6j
		test	cl, 2
		jnz	short loc_4182B5
		cmp	[esi+5Ch], ebx
		jz	loc_4182F9
		push	dword ptr [esi+5Ch]
		lea	eax, [ebp+LCData]
		push	eax
		push	dword ptr [esi+50h]
		call	sub_41AA2B
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_4182F9
		or	dword ptr [esi+58h], 2
		mov	ecx, edi
		lea	edx, [ecx+2]

loc_418288:				; CODE XREF: sub_418185+10Cj
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, bx
		jnz	short loc_418288

loc_418293:				; CODE XREF: sub_418185+D1j
					; sub_418185+199j
		sub	ecx, edx
		sar	ecx, 1
		lea	eax, [ecx+1]
		push	eax
		push	edi
		lea	eax, [esi+2A0h]
		push	55h
		push	eax
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	loc_41845C

loc_4182B5:				; CODE XREF: sub_418185+6Dj
					; sub_418185+D6j ...
		mov	eax, [esi+58h]
		mov	ecx, 300h
		and	eax, ecx
		cmp	eax, ecx
		jz	loc_41843C
		mov	ecx, [esi+60h]
		lea	eax, [ebp+LCData]
		neg	ecx
		push	40h		; cchData
		sbb	ecx, ecx
		and	ecx, 0FFFFF002h
		push	eax		; lpLCData
		add	ecx, 1001h
		push	ecx		; LCType
		push	edi		; int
		call	sub_40FB77
		test	eax, eax
		jnz	short loc_418323
		mov	[esi+58h], ebx

loc_4182F1:				; CODE XREF: sub_418185+9Bj
		xor	eax, eax
		inc	eax
		jmp	loc_418447
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4182F9:				; CODE XREF: sub_418185+DBj
					; sub_418185+F8j
		test	byte ptr [esi+58h], 1
		jnz	short loc_4182B5
		push	edi
		call	sub_418620
		pop	ecx
		test	eax, eax
		jz	short loc_4182B5
		or	dword ptr [esi+58h], 1
		mov	ecx, edi
		lea	edx, [ecx+2]

loc_418313:				; CODE XREF: sub_418185+197j
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, bx
		jnz	short loc_418313
		jmp	loc_418293
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418323:				; CODE XREF: sub_418185+167j
		lea	eax, [ebp+LCData]
		push	eax
		push	dword ptr [esi+50h]
		call	sub_415625
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	loc_41843C
		mov	ecx, [esi+58h]
		or	ecx, 200h
		mov	[esi+58h], ecx
		cmp	[esi+60h], ebx
		jz	short loc_41837E
		or	ecx, 100h
		lea	edx, [esi+2A0h]
		mov	[esi+58h], ecx
		cmp	[edx], bx
		jnz	loc_41843C
		mov	ecx, edi
		lea	ebx, [ecx+2]

loc_41836A:				; CODE XREF: sub_418185+1F2j
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, word ptr [ebp+var_88]
		jnz	short loc_41836A
		jmp	loc_418424
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41837E:				; CODE XREF: sub_418185+1C6j
		cmp	[esi+5Ch], ebx
		jz	short loc_4183FC
		mov	edx, [esi+50h]
		lea	ebx, [edx+2]

loc_418389:				; CODE XREF: sub_418185+211j
		mov	ax, [edx]
		add	edx, 2
		cmp	ax, word ptr [ebp+var_88]
		jnz	short loc_418389
		sub	edx, ebx
		sar	edx, 1
		cmp	edx, [esi+5Ch]
		jnz	short loc_4183FA
		push	edi
		call	sub_418620
		pop	ecx
		test	eax, eax
		jnz	short loc_4183D0
		mov	ebx, [esi+50h]
		xor	edx, edx
		lea	ecx, [ebx+2]

loc_4183B4:				; CODE XREF: sub_418185+238j
		mov	ax, [ebx]
		add	ebx, 2
		cmp	ax, dx
		jnz	short loc_4183B4
		push	dword ptr [esi+50h]
		sub	ebx, ecx
		sar	ebx, 1
		call	sub_418151
		pop	ecx
		cmp	eax, ebx
		jz	short loc_41843C

loc_4183D0:				; CODE XREF: sub_418185+225j
		or	dword ptr [esi+58h], 100h
		lea	edx, [esi+2A0h]
		xor	eax, eax
		cmp	[edx], ax
		jnz	short loc_41843C
		mov	ecx, edi
		lea	ebx, [ecx+2]

loc_4183E9:				; CODE XREF: sub_418185+271j
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, word ptr [ebp+var_88]
		jnz	short loc_4183E9
		jmp	short loc_418424
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4183FA:				; CODE XREF: sub_418185+21Aj
		xor	ebx, ebx

loc_4183FC:				; CODE XREF: sub_418185+1FCj
		or	ecx, 100h
		lea	edx, [esi+2A0h]
		mov	[esi+58h], ecx
		cmp	[edx], bx
		jnz	short loc_41843C
		mov	ecx, edi
		lea	ebx, [ecx+2]

loc_418415:				; CODE XREF: sub_418185+29Dj
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, word ptr [ebp+var_88]
		jnz	short loc_418415

loc_418424:				; CODE XREF: sub_418185+1F4j
					; sub_418185+273j
		sub	ecx, ebx
		sar	ecx, 1
		lea	eax, [ecx+1]
		push	eax
		push	edi
		push	55h
		push	edx
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	short loc_41845A

loc_41843C:				; CODE XREF: sub_418185+13Cj
					; sub_418185+1B1j ...
		mov	eax, [esi+58h]
		shr	eax, 2
		not	eax
		and	eax, 1

loc_418447:				; CODE XREF: sub_418185+16Fj
		pop	ebx

loc_418448:				; CODE XREF: sub_418185+4Cj
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn	0Ch
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41845A:				; CODE XREF: sub_418185+2B5j
		xor	ebx, ebx

loc_41845C:				; CODE XREF: sub_418185+12Aj
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		call	sub_409E62
		int	3		; Trap to Debugger

loc_418467:				; DATA XREF: sub_4180F8+3Eo
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 0F4h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		call	sub_40F3FC
		mov	esi, eax
		lea	eax, [ebp+var_F4]
		push	78h		; cchData
		push	eax		; lpLCData
		mov	ecx, [esi+60h]
		neg	ecx
		sbb	ecx, ecx
		and	ecx, 0FFFFF002h
		add	ecx, 1001h
		push	ecx		; LCType
		push	edi		; int
		call	sub_40FB77
		test	eax, eax
		jnz	short loc_4184B5
		and	[esi+58h], eax
		inc	eax
		jmp	short loc_41850B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4184B5:				; CODE XREF: sub_418185+328j
		lea	eax, [ebp+var_F4]
		push	eax
		push	dword ptr [esi+50h]
		call	sub_415625
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_418500
		mov	ecx, edi
		push	ebx
		xor	ebx, ebx
		lea	edx, [ecx+2]

loc_4184D2:				; CODE XREF: sub_418185+356j
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, bx
		jnz	short loc_4184D2
		sub	ecx, edx
		sar	ecx, 1
		lea	eax, [ecx+1]
		push	eax
		push	edi
		lea	eax, [esi+2A0h]
		push	55h
		push	eax
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	short loc_41851D
		or	dword ptr [esi+58h], 4
		pop	ebx

loc_418500:				; CODE XREF: sub_418185+343j
		mov	eax, [esi+58h]
		shr	eax, 2
		not	eax
		and	eax, 1

loc_41850B:				; CODE XREF: sub_418185+32Ej
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn	0Ch
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41851D:				; CODE XREF: sub_418185+374j
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		push	ebx
		call	sub_409E62
		int	3		; Trap to Debugger
sub_418185	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_418528	proc near		; CODE XREF: sub_4186DE+CBp

LCData		= word ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		test	esi, esi
		jz	loc_41860F
		xor	edi, edi
		cmp	[esi], di
		jz	loc_41860F
		mov	ecx, offset aAcp ; "ACP"
		mov	eax, esi

loc_41854D:				; CODE XREF: sub_418528+45j
		mov	dx, [eax]
		cmp	dx, [ecx]
		jnz	short loc_418573
		test	dx, dx
		jz	short loc_41856F
		mov	dx, [eax+2]
		cmp	dx, [ecx+2]
		jnz	short loc_418573
		add	eax, 4
		add	ecx, 4
		test	dx, dx
		jnz	short loc_41854D

loc_41856F:				; CODE XREF: sub_418528+30j
		mov	eax, edi
		jmp	short loc_418578
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418573:				; CODE XREF: sub_418528+2Bj
					; sub_418528+3Aj
		sbb	eax, eax
		or	eax, 1

loc_418578:				; CODE XREF: sub_418528+49j
		test	eax, eax
		jz	loc_41860F
		push	offset aUtf8	; "utf8"
		push	esi
		call	sub_415625
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_4185FB
		push	offset aUtf8_0	; "utf-8"
		push	esi
		call	sub_415625
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_4185FB
		mov	ecx, offset aOcp ; "OCP"
		mov	eax, esi

loc_4185A9:				; CODE XREF: sub_418528+A1j
		mov	dx, [eax]
		cmp	dx, [ecx]
		jnz	short loc_4185CD
		test	dx, dx
		jz	short loc_4185D2
		mov	dx, [eax+2]
		cmp	dx, [ecx+2]
		jnz	short loc_4185CD
		add	eax, 4
		add	ecx, 4
		test	dx, dx
		jnz	short loc_4185A9
		jmp	short loc_4185D2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4185CD:				; CODE XREF: sub_418528+87j
					; sub_418528+96j
		sbb	edi, edi
		or	edi, 1

loc_4185D2:				; CODE XREF: sub_418528+8Cj
					; sub_418528+A3j
		test	edi, edi
		jnz	short loc_418606
		push	2		; cchData
		lea	eax, [ebp+LCData]
		push	eax		; lpLCData
		push	2000000Bh	; LCType

loc_4185E1:				; CODE XREF: sub_418528+F2j
		mov	eax, [ebp+arg_4]
		add	eax, 250h
		push	eax		; int
		call	sub_40FB77
		test	eax, eax
		jz	short loc_41861C
		mov	eax, dword ptr [ebp+LCData]
		cmp	eax, 3
		jge	short loc_418600

loc_4185FB:				; CODE XREF: sub_418528+67j
					; sub_418528+78j
		mov	eax, 0FDE9h

loc_418600:				; CODE XREF: sub_418528+D1j
					; sub_418528+E5j ...
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418606:				; CODE XREF: sub_418528+ACj
		push	esi
		call	sub_40F005
		pop	ecx
		jmp	short loc_418600
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41860F:				; CODE XREF: sub_418528+Dj
					; sub_418528+18j ...
		push	2
		lea	eax, [ebp+LCData]
		push	eax
		push	20001004h
		jmp	short loc_4185E1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41861C:				; CODE XREF: sub_418528+C9j
		xor	eax, eax
		jmp	short loc_418600
sub_418528	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_418620	proc near		; CODE XREF: sub_418185+17Bp
					; sub_418185+21Dp

LCData		= word ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	esi
		mov	esi, [ebp+arg_0]
		lea	eax, [ebp+LCData]
		push	9		; cchData
		push	eax		; lpLCData
		push	59h		; LCType
		push	esi		; int
		call	sub_40FB77
		test	eax, eax
		jz	short loc_41865E
		push	9
		lea	eax, [ebp+LCData]
		push	esi
		push	eax
		call	sub_40E958
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_41865E
		inc	eax
		jmp	short loc_418660
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41865E:				; CODE XREF: sub_418620+26j
					; sub_418620+39j
		xor	eax, eax

loc_418660:				; CODE XREF: sub_418620+3Cj
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		pop	esi
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_418620	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41866F	proc near		; CODE XREF: sub_4186DE+47p
					; sub_4186DE+7Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, [ebp+arg_4]
		xor	edx, edx
		push	edi
		inc	edx
		xor	edi, edi
		test	esi, esi
		js	short loc_4186D1
		push	ebx

loc_418684:				; CODE XREF: sub_41866F+5Fj
		test	edx, edx
		jz	short loc_4186D0
		lea	eax, [edi+esi]
		cdq
		sub	eax, edx
		mov	ebx, eax
		mov	eax, [ebp+arg_0]
		sar	ebx, 1
		imul	ecx, ebx, 0Ch
		mov	[ebp+var_4], ecx
		push	dword ptr [ecx+eax]
		mov	eax, [ebp+arg_8]
		push	dword ptr [eax]
		call	sub_415625
		mov	edx, eax
		pop	ecx
		pop	ecx
		test	edx, edx
		jnz	short loc_4186C2
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_4]
		add	eax, 4
		add	ecx, eax
		mov	eax, [ebp+arg_8]
		mov	[eax], ecx
		jmp	short loc_4186CC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4186C2:				; CODE XREF: sub_41866F+3Fj
		jns	short loc_4186C9
		lea	esi, [ebx-1]
		jmp	short loc_4186CC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4186C9:				; CODE XREF: sub_41866F:loc_4186C2j
		lea	edi, [ebx+1]

loc_4186CC:				; CODE XREF: sub_41866F+51j
					; sub_41866F+58j
		cmp	edi, esi
		jle	short loc_418684

loc_4186D0:				; CODE XREF: sub_41866F+17j
		pop	ebx

loc_4186D1:				; CODE XREF: sub_41866F+12j
		xor	eax, eax
		test	edx, edx
		pop	edi
		setz	al
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_41866F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4186DE	proc near		; CODE XREF: sub_40D6E2:loc_40D886p

LCData		= word ptr -0F4h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	edi
		call	sub_40F3FC
		xor	ecx, ecx
		xor	edx, edx
		mov	[ebp+var_8], edx
		lea	esi, [eax+50h]
		lea	eax, [esi+250h]
		mov	[esi+8], edx
		mov	[eax], cx
		lea	edi, [esi+4]
		mov	[ebp+var_4], eax
		mov	ecx, ebx
		lea	eax, [ebx+80h]
		mov	[esi], ebx
		mov	[edi], eax
		cmp	[eax], dx
		jz	short loc_418731
		push	edi
		push	16h
		push	offset off_422B50
		call	sub_41866F
		mov	ecx, [esi]
		add	esp, 0Ch
		xor	edx, edx

loc_418731:				; CODE XREF: sub_4186DE+3Dj
		push	esi
		cmp	[ecx], dx
		jz	short loc_41877E
		mov	eax, [edi]
		cmp	[eax], dx
		jz	short loc_418745
		call	sub_41805D
		jmp	short loc_41874A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418745:				; CODE XREF: sub_4186DE+5Ej
		call	sub_4180F8

loc_41874A:				; CODE XREF: sub_4186DE+65j
		xor	eax, eax
		pop	ecx
		cmp	[esi+8], eax
		jnz	short loc_418784
		push	esi
		push	40h
		push	offset off_422840
		call	sub_41866F
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_418784
		mov	eax, [edi]
		xor	ecx, ecx
		push	esi
		cmp	[eax], cx
		jz	short loc_418777
		call	sub_41805D
		jmp	short loc_418783
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418777:				; CODE XREF: sub_4186DE+90j
		call	sub_4180F8
		jmp	short loc_418783
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41877E:				; CODE XREF: sub_4186DE+57j
		call	sub_417FD4

loc_418783:				; CODE XREF: sub_4186DE+97j
					; sub_4186DE+9Ej
		pop	ecx

loc_418784:				; CODE XREF: sub_4186DE+72j
					; sub_4186DE+86j
		xor	edi, edi
		cmp	[esi+8], edi
		jz	loc_4188C5
		lea	eax, [ebx+100h]
		cmp	[ebx], di
		jnz	short loc_4187A7
		cmp	[eax], di
		jnz	short loc_4187A7
		call	ds:GetACP
		jmp	short loc_4187B0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4187A7:				; CODE XREF: sub_4186DE+BAj
					; sub_4186DE+BFj
		push	esi
		push	eax
		call	sub_418528
		pop	ecx
		pop	ecx

loc_4187B0:				; CODE XREF: sub_4186DE+C7j
		mov	esi, eax
		test	esi, esi
		jz	loc_4188C5
		cmp	esi, 0FDE8h
		jz	loc_4188C5
		movzx	eax, si
		push	eax		; CodePage
		call	ds:IsValidCodePage
		test	eax, eax
		jz	loc_4188C5
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_4187E1
		mov	[eax], esi

loc_4187E1:				; CODE XREF: sub_4186DE+FFj
		mov	edi, [ebp+arg_8]
		test	edi, edi
		jz	loc_4188C0
		mov	ecx, [ebp+var_4]
		lea	ebx, [edi+120h]
		xor	eax, eax
		mov	[ebx], ax
		lea	edx, [ecx+2]

loc_4187FD:				; CODE XREF: sub_4186DE+129j
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, word ptr [ebp+var_8]
		jnz	short loc_4187FD
		sub	ecx, edx
		sar	ecx, 1
		lea	eax, [ecx+1]
		push	eax
		push	[ebp+var_4]
		push	55h
		push	ebx
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	loc_4188CE
		push	40h		; cchData
		push	edi		; lpLCData
		push	1001h		; LCType
		push	ebx		; int
		call	sub_40FB77
		test	eax, eax
		jz	loc_4188C5
		push	40h		; cchData
		lea	ebx, [edi+80h]
		push	ebx		; lpLCData
		push	1002h		; LCType
		lea	eax, [edi+120h]
		push	eax		; int
		call	sub_40FB77
		test	eax, eax
		jz	short loc_4188C5
		push	5Fh
		push	ebx
		call	sub_41C02B
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_418877
		push	2Eh
		push	ebx
		call	sub_41C02B
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_41888C

loc_418877:				; CODE XREF: sub_4186DE+189j
		push	40h		; cchData
		push	ebx		; lpLCData
		push	7		; LCType
		lea	eax, [edi+120h]
		push	eax		; int
		call	sub_40FB77
		test	eax, eax
		jz	short loc_4188C5

loc_41888C:				; CODE XREF: sub_4186DE+197j
		add	edi, 100h
		cmp	esi, 0FDE9h
		jnz	short loc_4188B2
		push	5
		push	offset aUtf8	; "utf8"
		push	10h
		push	edi
		call	sub_415937
		add	esp, 10h
		test	eax, eax
		jnz	short loc_4188CE
		jmp	short loc_4188C0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4188B2:				; CODE XREF: sub_4186DE+1BAj
		push	0Ah
		push	10h
		push	edi
		push	esi
		call	sub_41A9F6
		add	esp, 10h

loc_4188C0:				; CODE XREF: sub_4186DE+108j
					; sub_4186DE+1D2j
		xor	eax, eax
		inc	eax
		jmp	short loc_4188C7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4188C5:				; CODE XREF: sub_4186DE+ABj
					; sub_4186DE+D6j ...
		xor	eax, eax

loc_4188C7:				; CODE XREF: sub_4186DE+1E5j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4188CE:				; CODE XREF: sub_4186DE+143j
					; sub_4186DE+1D0j
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	sub_409E62
		int	3		; Trap to Debugger

; BOOL __stdcall loc_4188DB(LPWSTR)
loc_4188DB:				; DATA XREF: sub_418984+2Fo
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 0F4h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		call	sub_40F3FC
		mov	ebx, eax
		call	sub_40F3FC
		push	esi
		mov	edi, [eax+34Ch]
		call	sub_418E21
		pop	ecx
		mov	ecx, [ebx+64h]
		mov	esi, eax
		neg	ecx
		lea	eax, [ebp+LCData]
		push	78h		; cchData
		sbb	ecx, ecx
		and	ecx, 0FFFFF005h
		push	eax		; lpLCData
		add	ecx, 1002h
		push	ecx		; LCType
		push	esi		; Locale
		call	ds:GetLocaleInfoW
		test	eax, eax
		jnz	short loc_41893E
		and	[edi], eax
		inc	eax
		jmp	short loc_418971
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41893E:				; CODE XREF: sub_4186DE+259j
		lea	eax, [ebp+LCData]
		push	eax
		push	dword ptr [ebx+54h]
		call	sub_415625
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_418967
		push	esi
		call	sub_418F55
		pop	ecx
		test	eax, eax
		jz	short loc_418967
		or	dword ptr [edi], 4
		mov	[edi+8], esi
		mov	[edi+4], esi

loc_418967:				; CODE XREF: sub_4186DE+273j
					; sub_4186DE+27Ej
		mov	eax, [edi]
		shr	eax, 2
		not	eax
		and	eax, 1

loc_418971:				; CODE XREF: sub_4186DE+25Ej
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn	4
sub_4186DE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_418984	proc near		; CODE XREF: sub_41904D+FDp

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		call	sub_40F3FC
		mov	edx, eax
		xor	edi, edi
		mov	ecx, [edx+54h]
		lea	esi, [ecx+2]

loc_41899A:				; CODE XREF: sub_418984+1Fj
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, di
		jnz	short loc_41899A
		sub	ecx, esi
		xor	eax, eax
		sar	ecx, 1
		cmp	ecx, 3
		push	1		; dwFlags
		setz	al
		push	offset loc_4188DB ; lpLocaleEnumProc
		mov	[edx+64h], eax
		call	ds:EnumSystemLocalesW
		mov	eax, [ebp+arg_0]
		test	byte ptr [eax],	4
		jnz	short loc_4189CB
		mov	[eax], edi

loc_4189CB:				; CODE XREF: sub_418984+43j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_418984	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4189CF	proc near		; CODE XREF: sub_41904D+94p
					; sub_41904D+DBp

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		call	sub_40F3FC
		mov	esi, eax
		xor	ebx, ebx
		push	2
		pop	edx
		mov	ecx, [esi+50h]
		lea	edi, [ecx+2]

loc_4189E9:				; CODE XREF: sub_4189CF+22j
		mov	ax, [ecx]
		add	ecx, edx
		cmp	ax, bx
		jnz	short loc_4189E9
		sub	ecx, edi
		xor	eax, eax
		sar	ecx, 1
		cmp	ecx, 3
		mov	ecx, [esi+54h]
		setz	al
		mov	[esi+60h], eax
		lea	edi, [ecx+2]

loc_418A08:				; CODE XREF: sub_4189CF+41j
		mov	ax, [ecx]
		add	ecx, edx
		cmp	ax, bx
		jnz	short loc_418A08
		sub	ecx, edi
		xor	eax, eax
		mov	edi, [ebp+arg_0]
		sar	ecx, 1
		cmp	ecx, 3
		setz	al
		mov	[esi+64h], eax
		mov	[edi+4], ebx
		cmp	[esi+60h], ebx
		jnz	short loc_418A37
		push	dword ptr [esi+50h]
		call	sub_418AC9
		pop	ecx
		mov	edx, eax

loc_418A37:				; CODE XREF: sub_4189CF+5Bj
		push	1		; dwFlags
		push	offset sub_418AF5 ; lpLocaleEnumProc
		mov	[esi+5Ch], edx
		call	ds:EnumSystemLocalesW
		mov	ecx, [edi]
		test	cl, 7
		setnz	dl
		bt	ecx, 9
		setb	al
		and	dl, al
		bt	ecx, 8
		setb	al
		test	dl, al
		jnz	short loc_418A65
		mov	[edi], ebx

loc_418A65:				; CODE XREF: sub_4189CF+92j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_4189CF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_418A6A	proc near		; CODE XREF: sub_41904D+9Fp
					; sub_41904D+E6p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		call	sub_40F3FC
		mov	esi, eax
		xor	ebx, ebx
		push	2
		pop	edx
		mov	ecx, [esi+50h]
		lea	edi, [ecx+2]

loc_418A84:				; CODE XREF: sub_418A6A+22j
		mov	ax, [ecx]
		add	ecx, edx
		cmp	ax, bx
		jnz	short loc_418A84
		sub	ecx, edi
		xor	eax, eax
		sar	ecx, 1
		cmp	ecx, 3
		setz	al
		mov	[esi+60h], eax
		jz	short loc_418AAA
		push	dword ptr [esi+50h]
		call	sub_418AC9
		pop	ecx
		mov	edx, eax

loc_418AAA:				; CODE XREF: sub_418A6A+33j
		push	1		; dwFlags
		push	offset sub_418D4A ; lpLocaleEnumProc
		mov	[esi+5Ch], edx
		call	ds:EnumSystemLocalesW
		mov	eax, [ebp+arg_0]
		test	byte ptr [eax],	4
		jnz	short loc_418AC4
		mov	[eax], ebx

loc_418AC4:				; CODE XREF: sub_418A6A+56j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_418A6A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_418AC9	proc near		; CODE XREF: sub_4189CF+60p
					; sub_418A6A+38p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		xor	edx, edx

loc_418AD3:				; CODE XREF: sub_418AC9+26j
		movzx	eax, word ptr [ecx]
		add	ecx, 2
		cmp	ax, 41h
		jb	short loc_418AE5
		cmp	ax, 5Ah
		jbe	short loc_418AEE

loc_418AE5:				; CODE XREF: sub_418AC9+14j
		add	eax, 0FFFFFF9Fh
		cmp	ax, 19h
		ja	short loc_418AF1

loc_418AEE:				; CODE XREF: sub_418AC9+1Aj
		inc	edx
		jmp	short loc_418AD3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418AF1:				; CODE XREF: sub_418AC9+23j
		mov	eax, edx
		pop	ebp
		retn
sub_418AC9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; BOOL __stdcall sub_418AF5(LPWSTR)
sub_418AF5	proc near		; DATA XREF: sub_4189CF+6Ao

var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
LCData		= word ptr -0F4h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 0FCh
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		call	sub_40F3FC
		mov	ebx, eax
		call	sub_40F3FC
		push	esi
		mov	edi, [eax+34Ch]
		call	sub_418E21
		pop	ecx
		mov	ecx, [ebx+64h]
		mov	esi, eax
		neg	ecx
		lea	eax, [ebp+LCData]
		push	78h		; cchData
		sbb	ecx, ecx
		and	ecx, 0FFFFF005h
		push	eax		; lpLCData
		add	ecx, 1002h
		push	ecx		; LCType
		push	esi		; Locale
		call	ds:GetLocaleInfoW
		and	[ebp+var_F8], 0
		test	eax, eax
		jz	loc_418D32
		lea	eax, [ebp+LCData]
		push	eax
		push	dword ptr [ebx+54h]
		call	sub_415625
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	loc_418C2C
		push	78h		; cchData
		lea	eax, [ebp+LCData]
		push	eax		; lpLCData
		mov	eax, [ebx+60h]
		neg	eax
		sbb	eax, eax
		and	eax, 0FFFFF002h
		add	eax, 1001h
		push	eax		; LCType
		push	esi		; Locale
		call	ds:GetLocaleInfoW
		test	eax, eax
		jz	loc_418D32
		lea	eax, [ebp+LCData]
		push	eax
		push	dword ptr [ebx+50h]
		call	sub_415625
		pop	ecx
		pop	ecx
		mov	ecx, [edi]
		test	eax, eax
		jnz	short loc_418BC5
		or	ecx, 304h
		mov	[edi+4], esi
		mov	[edi], ecx
		jmp	short loc_418C29
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418BC5:				; CODE XREF: sub_418AF5+C1j
		test	cl, 2
		jnz	short loc_418C2C
		cmp	dword ptr [ebx+5Ch], 0
		jz	short loc_418C12
		push	dword ptr [ebx+5Ch]
		lea	eax, [ebp+LCData]
		push	eax
		push	dword ptr [ebx+50h]
		call	sub_41AA2B
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_418C12
		or	dword ptr [edi], 2
		mov	[edi+8], esi
		mov	ecx, [ebx+50h]
		lea	edx, [ecx+2]

loc_418BF5:				; CODE XREF: sub_418AF5+10Dj
		mov	ax, [ecx]
		add	ecx, 2
		cmp	ax, word ptr [ebp+var_F8]
		jnz	short loc_418BF5
		sub	ecx, edx
		sar	ecx, 1
		cmp	ecx, [ebx+5Ch]
		jnz	short loc_418C2C
		mov	[edi+4], esi
		jmp	short loc_418C2C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418C12:				; CODE XREF: sub_418AF5+D9j
					; sub_418AF5+F2j
		mov	edx, [edi]
		test	dl, 1
		jnz	short loc_418C2C
		push	esi
		call	sub_418F55
		pop	ecx
		test	eax, eax
		jz	short loc_418C2C
		or	edx, 1
		mov	[edi], edx

loc_418C29:				; CODE XREF: sub_418AF5+CEj
		mov	[edi+8], esi

loc_418C2C:				; CODE XREF: sub_418AF5+7Cj
					; sub_418AF5+D3j ...
		mov	eax, [edi]
		mov	ecx, 300h
		and	eax, ecx
		cmp	eax, ecx
		jz	loc_418D26
		push	78h		; cchData
		lea	eax, [ebp+LCData]
		push	eax		; lpLCData
		mov	eax, [ebx+60h]
		neg	eax
		sbb	eax, eax
		and	eax, 0FFFFF002h
		add	eax, 1001h
		push	eax		; LCType
		push	esi		; Locale
		call	ds:GetLocaleInfoW
		test	eax, eax
		jz	loc_418D32
		lea	eax, [ebp+LCData]
		push	eax
		push	dword ptr [ebx+50h]
		call	sub_415625
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_418CE6
		mov	ecx, [edi]
		or	ecx, 200h
		mov	[edi], ecx
		cmp	[ebx+60h], eax
		jz	short loc_418C9B

loc_418C8B:				; CODE XREF: sub_418AF5+1A9j
					; sub_418AF5+1EFj
		or	ecx, 100h
		mov	[edi], ecx

loc_418C93:				; CODE XREF: sub_418AF5+1EBj
		cmp	[edi+4], eax
		jmp	loc_418D21
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418C9B:				; CODE XREF: sub_418AF5+194j
		cmp	[ebx+5Ch], eax
		jz	short loc_418C8B
		mov	edx, [ebx+50h]
		lea	eax, [edx+2]
		mov	[ebp+var_FC], eax

loc_418CAC:				; CODE XREF: sub_418AF5+1C4j
		mov	ax, [edx]
		add	edx, 2
		cmp	ax, word ptr [ebp+var_F8]
		jnz	short loc_418CAC
		sub	edx, [ebp+var_FC]
		sar	edx, 1
		cmp	edx, [ebx+5Ch]
		jnz	short loc_418CE2
		push	edi
		push	1
		push	esi
		call	sub_418F7A
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_418D26
		or	dword ptr [edi], 100h
		xor	eax, eax
		jmp	short loc_418C93
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418CE2:				; CODE XREF: sub_418AF5+1D1j
		xor	eax, eax
		jmp	short loc_418C8B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418CE6:				; CODE XREF: sub_418AF5+185j
		xor	eax, eax
		cmp	[ebx+60h], eax
		jnz	short loc_418D26
		cmp	[ebx+5Ch], eax
		jz	short loc_418D26
		lea	eax, [ebp+LCData]
		push	eax
		push	dword ptr [ebx+50h]
		call	sub_415625
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_418D26
		push	edi
		xor	ebx, ebx
		push	ebx
		push	esi
		call	sub_418F7A
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_418D26
		or	dword ptr [edi], 100h
		cmp	[edi+4], ebx

loc_418D21:				; CODE XREF: sub_418AF5+1A1j
		jnz	short loc_418D26
		mov	[edi+4], esi

loc_418D26:				; CODE XREF: sub_418AF5+142j
					; sub_418AF5+1E1j ...
		mov	eax, [edi]
		shr	eax, 2
		not	eax
		and	eax, 1
		jmp	short loc_418D37
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418D32:				; CODE XREF: sub_418AF5+63j
					; sub_418AF5+A6j ...
		xor	eax, eax
		mov	[edi], eax
		inc	eax

loc_418D37:				; CODE XREF: sub_418AF5+23Bj
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn	4
sub_418AF5	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; BOOL __stdcall sub_418D4A(LPWSTR)
sub_418D4A	proc near		; DATA XREF: sub_418A6A+42o

LCData		= word ptr -0F4h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 0F4h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		call	sub_40F3FC
		mov	ebx, eax
		call	sub_40F3FC
		push	esi
		mov	edi, [eax+34Ch]
		call	sub_418E21
		pop	ecx
		mov	ecx, [ebx+60h]
		mov	esi, eax
		neg	ecx
		lea	eax, [ebp+LCData]
		push	78h		; cchData
		sbb	ecx, ecx
		and	ecx, 0FFFFF002h
		push	eax		; lpLCData
		add	ecx, 1001h
		push	ecx		; LCType
		push	esi		; Locale
		call	ds:GetLocaleInfoW
		test	eax, eax
		jnz	short loc_418DAD
		and	[edi], eax
		inc	eax
		jmp	short loc_418E0E
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418DAD:				; CODE XREF: sub_418D4A+5Cj
		lea	eax, [ebp+LCData]
		push	eax
		push	dword ptr [ebx+50h]
		call	sub_415625
		pop	ecx
		pop	ecx
		mov	ecx, [ebx+60h]
		test	eax, eax
		jnz	short loc_418DCE
		test	ecx, ecx
		jnz	short loc_418DFB
		push	edi
		push	1
		jmp	short loc_418DEE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418DCE:				; CODE XREF: sub_418D4A+79j
		test	ecx, ecx
		jnz	short loc_418E04
		cmp	[ebx+5Ch], ecx
		jz	short loc_418E04
		lea	eax, [ebp+LCData]
		push	eax
		push	dword ptr [ebx+50h]
		call	sub_415625
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_418E04
		push	edi
		push	eax

loc_418DEE:				; CODE XREF: sub_418D4A+82j
		push	esi
		call	sub_418F7A
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_418E04

loc_418DFB:				; CODE XREF: sub_418D4A+7Dj
		or	dword ptr [edi], 4
		mov	[edi+4], esi
		mov	[edi+8], esi

loc_418E04:				; CODE XREF: sub_418D4A+86j
					; sub_418D4A+8Bj ...
		mov	eax, [edi]
		shr	eax, 2
		not	eax
		and	eax, 1

loc_418E0E:				; CODE XREF: sub_418D4A+61j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn	4
sub_418D4A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_418E21	proc near		; CODE XREF: sub_4186DE+22Bp
					; sub_418AF5+2Ep ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		push	esi
		xor	esi, esi
		movzx	ecx, word ptr [edx]
		test	cx, cx
		jz	short loc_418E6D
		push	edi
		push	5
		pop	edi

loc_418E38:				; CODE XREF: sub_418E21+49j
		lea	eax, [ecx-61h]
		lea	edx, [edx+2]
		cmp	ax, di
		ja	short loc_418E4B
		add	ecx, 0FFD9h
		jmp	short loc_418E59
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418E4B:				; CODE XREF: sub_418E21+20j
		lea	eax, [ecx-41h]
		cmp	ax, di
		ja	short loc_418E59
		add	ecx, 0FFF9h

loc_418E59:				; CODE XREF: sub_418E21+28j
					; sub_418E21+30j
		movzx	ecx, cx
		add	ecx, 0FFFFFFD0h
		shl	esi, 4
		add	esi, ecx
		movzx	ecx, word ptr [edx]
		test	cx, cx
		jnz	short loc_418E38
		pop	edi

loc_418E6D:				; CODE XREF: sub_418E21+11j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_418E21	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_418E72	proc near		; CODE XREF: sub_41904D+146p

LCData		= word ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		mov	ecx, [ebp+arg_0]
		push	esi
		push	edi
		test	ecx, ecx
		jz	loc_418F23
		xor	eax, eax
		cmp	[ecx], ax
		jz	loc_418F23
		mov	esi, offset aAcp ; "ACP"
		mov	edx, ecx

loc_418E97:				; CODE XREF: sub_418E72+45j
		mov	di, [edx]
		cmp	di, [esi]
		jnz	short loc_418EBD
		test	di, di
		jz	short loc_418EB9
		mov	di, [edx+2]
		cmp	di, [esi+2]
		jnz	short loc_418EBD
		add	edx, 4
		add	esi, 4
		test	di, di
		jnz	short loc_418E97

loc_418EB9:				; CODE XREF: sub_418E72+30j
		mov	edx, eax
		jmp	short loc_418EC2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418EBD:				; CODE XREF: sub_418E72+2Bj
					; sub_418E72+3Aj
		sbb	edx, edx
		or	edx, 1

loc_418EC2:				; CODE XREF: sub_418E72+49j
		test	edx, edx
		jz	short loc_418F23
		mov	esi, offset aOcp ; "OCP"
		mov	edx, ecx

loc_418ECD:				; CODE XREF: sub_418E72+7Bj
		mov	di, [edx]
		cmp	di, [esi]
		jnz	short loc_418EF1
		test	di, di
		jz	short loc_418EF6
		mov	di, [edx+2]
		cmp	di, [esi+2]
		jnz	short loc_418EF1
		add	edx, 4
		add	esi, 4
		test	di, di
		jnz	short loc_418ECD
		jmp	short loc_418EF6
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418EF1:				; CODE XREF: sub_418E72+61j
					; sub_418E72+70j
		sbb	eax, eax
		or	eax, 1

loc_418EF6:				; CODE XREF: sub_418E72+66j
					; sub_418E72+7Dj
		test	eax, eax
		jnz	short loc_418F1A
		push	2		; cchData
		lea	eax, [ebp+LCData]
		push	eax		; lpLCData
		mov	eax, [ebp+arg_4]
		push	2000000Bh	; LCType
		push	dword ptr [eax+8] ; Locale
		call	ds:GetLocaleInfoW
		test	eax, eax
		jz	short loc_418F3E
		mov	eax, dword ptr [ebp+LCData]
		jmp	short loc_418F4F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418F1A:				; CODE XREF: sub_418E72+86j
		push	ecx
		call	sub_40F005
		pop	ecx
		jmp	short loc_418F4F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418F23:				; CODE XREF: sub_418E72+Dj
					; sub_418E72+18j ...
		push	2		; cchData
		lea	eax, [ebp+LCData]
		push	eax		; lpLCData
		mov	eax, [ebp+arg_4]
		push	20001004h	; LCType
		push	dword ptr [eax+8] ; Locale
		call	ds:GetLocaleInfoW
		test	eax, eax
		jnz	short loc_418F42

loc_418F3E:				; CODE XREF: sub_418E72+A1j
		xor	eax, eax
		jmp	short loc_418F4F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418F42:				; CODE XREF: sub_418E72+CAj
		mov	eax, dword ptr [ebp+LCData]
		test	eax, eax
		jnz	short loc_418F4F
		call	ds:GetACP

loc_418F4F:				; CODE XREF: sub_418E72+A6j
					; sub_418E72+AFj ...
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_418E72	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_418F55	proc near		; CODE XREF: sub_4186DE+276p
					; sub_418AF5+125p

arg_0		= word ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		movzx	ecx, [ebp+arg_0]
		xor	eax, eax

loc_418F60:				; CODE XREF: sub_418F55+1Aj
		cmp	cx, ds:word_4235E4[eax]
		jz	short loc_418F76
		add	eax, 2
		cmp	eax, 14h
		jb	short loc_418F60
		xor	eax, eax
		inc	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418F76:				; CODE XREF: sub_418F55+12j
		xor	eax, eax
		pop	ebp
		retn
sub_418F55	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_418F7A	proc near		; CODE XREF: sub_418AF5+1D7p
					; sub_418AF5+217p ...

LCData		= word ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	edi
		call	sub_40F3FC
		mov	esi, [ebp+arg_0]
		mov	edi, eax
		push	2		; cchData
		lea	eax, [ebp+LCData]
		mov	ecx, esi
		push	eax		; lpLCData
		and	ecx, 3FFh
		push	20000001h	; LCType
		or	ecx, 400h
		push	ecx		; Locale
		call	ds:GetLocaleInfoW
		test	eax, eax
		jz	short loc_418FE2
		cmp	esi, dword ptr [ebp+LCData]
		jz	short loc_418FDD
		cmp	[ebp+arg_4], 0
		jz	short loc_418FDD
		mov	esi, [edi+50h]
		lea	ecx, [esi+2]

loc_418FC1:				; CODE XREF: sub_418F7A+50j
		mov	ax, [esi]
		add	esi, 2
		test	ax, ax
		jnz	short loc_418FC1
		push	dword ptr [edi+50h]
		sub	esi, ecx
		sar	esi, 1
		call	sub_418AC9
		pop	ecx
		cmp	eax, esi
		jz	short loc_418FE2

loc_418FDD:				; CODE XREF: sub_418F7A+39j
					; sub_418F7A+3Fj
		xor	eax, eax
		inc	eax
		jmp	short loc_418FE4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_418FE2:				; CODE XREF: sub_418F7A+34j
					; sub_418F7A+61j
		xor	eax, eax

loc_418FE4:				; CODE XREF: sub_418F7A+66j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_418F7A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_418FEA	proc near		; CODE XREF: sub_41904D+6Ap
					; sub_41904D+BEp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		xor	edi, edi
		test	esi, esi
		js	short loc_419030

loc_418FFC:				; CODE XREF: sub_418FEA+44j
		lea	eax, [edi+esi]
		cdq
		sub	eax, edx
		mov	ebx, eax
		mov	eax, [ebp+arg_0]
		sar	ebx, 1
		imul	ecx, ebx, 0Ch
		mov	[ebp+var_4], ecx
		push	dword ptr [ecx+eax]
		mov	eax, [ebp+arg_8]
		push	dword ptr [eax]
		call	sub_415625
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_419039
		jns	short loc_419029
		lea	esi, [ebx-1]
		jmp	short loc_41902C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419029:				; CODE XREF: sub_418FEA+38j
		lea	edi, [ebx+1]

loc_41902C:				; CODE XREF: sub_418FEA+3Dj
		cmp	edi, esi
		jle	short loc_418FFC

loc_419030:				; CODE XREF: sub_418FEA+10j
		xor	al, al

loc_419032:				; CODE XREF: sub_418FEA+61j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419039:				; CODE XREF: sub_418FEA+36j
		mov	ecx, [ebp+var_4]
		mov	eax, [ebp+arg_0]
		add	ecx, 4
		add	eax, ecx
		mov	ecx, [ebp+arg_8]
		mov	[ecx], eax
		mov	al, 1
		jmp	short loc_419032
sub_418FEA	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41904D	proc near		; CODE XREF: sub_40D6E2+19Dp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
Locale		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		push	ebx
		mov	ebx, [ebp+arg_8]
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	[ebp+var_18], eax
		call	sub_40F3FC
		add	eax, 50h
		lea	edi, [ebp+var_10]
		mov	[ebp+var_14], eax
		xor	eax, eax
		stosd
		stosd
		stosd
		call	sub_40F3FC
		lea	ecx, [ebp+var_10]
		xor	edx, edx
		mov	[eax+34Ch], ecx
		lea	ecx, [esi+80h]
		mov	eax, [ebp+var_14]
		mov	[eax], esi
		lea	edi, [eax+4]
		mov	[edi], ecx
		test	ecx, ecx
		jz	short loc_4190C4
		cmp	[ecx], dx
		jz	short loc_4190C4
		mov	eax, ds:dword_422C64
		push	edi
		dec	eax
		push	eax
		push	offset off_422B50
		call	sub_418FEA
		mov	eax, [ebp+var_14]
		add	esp, 0Ch
		xor	edx, edx

loc_4190C4:				; CODE XREF: sub_41904D+56j
					; sub_41904D+5Bj
		mov	[ebp+var_10], edx
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_41913B
		cmp	[eax], dx
		jz	short loc_41913B
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_4190E8
		cmp	[eax], dx
		jz	short loc_4190E8
		lea	eax, [ebp+var_10]
		push	eax
		call	sub_4189CF
		jmp	short loc_4190F1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4190E8:				; CODE XREF: sub_41904D+89j
					; sub_41904D+8Ej
		lea	eax, [ebp+var_10]
		push	eax
		call	sub_418A6A

loc_4190F1:				; CODE XREF: sub_41904D+99j
		cmp	[ebp+var_10], 0
		pop	ecx
		jnz	loc_419180
		mov	eax, ds:dword_422B4C
		push	[ebp+var_14]
		dec	eax
		push	eax
		push	offset off_422840
		call	sub_418FEA
		add	esp, 0Ch
		test	al, al
		jz	short loc_419165
		mov	eax, [edi]
		xor	edi, edi
		test	eax, eax
		jz	short loc_41912F
		cmp	[eax], di
		jz	short loc_41912F
		lea	eax, [ebp+var_10]
		push	eax
		call	sub_4189CF
		jmp	short loc_419138
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41912F:				; CODE XREF: sub_41904D+D0j
					; sub_41904D+D5j
		lea	eax, [ebp+var_10]
		push	eax
		call	sub_418A6A

loc_419138:				; CODE XREF: sub_41904D+E0j
		pop	ecx
		jmp	short loc_419167
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41913B:				; CODE XREF: sub_41904D+7Ej
					; sub_41904D+83j
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_419152
		cmp	[eax], dx
		jz	short loc_419152
		lea	eax, [ebp+var_10]
		push	eax
		call	sub_418984
		pop	ecx
		jmp	short loc_419165
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419152:				; CODE XREF: sub_41904D+F2j
					; sub_41904D+F7j
		mov	[ebp+var_10], 104h
		call	ds:GetUserDefaultLCID
		mov	[ebp+var_8], eax
		mov	[ebp+Locale], eax

loc_419165:				; CODE XREF: sub_41904D+C8j
					; sub_41904D+103j
		xor	edi, edi

loc_419167:				; CODE XREF: sub_41904D+ECj
		cmp	[ebp+var_10], 0
		jnz	short loc_419182

loc_41916D:				; CODE XREF: sub_41904D+151j
					; sub_41904D+15Fj ...
		xor	eax, eax

loc_41916F:				; CODE XREF: sub_41904D+1F2j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419180:				; CODE XREF: sub_41904D+A9j
		xor	edi, edi

loc_419182:				; CODE XREF: sub_41904D+11Ej
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [esi+100h]
		neg	esi
		sbb	esi, esi
		and	esi, eax
		push	esi
		call	sub_418E72
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_41916D
		movzx	ecx, si
		push	ecx		; CodePage
		call	ds:IsValidCodePage
		test	eax, eax
		jz	short loc_41916D
		push	1		; dwFlags
		push	[ebp+Locale]	; Locale
		call	ds:IsValidLocale
		test	eax, eax
		jz	short loc_41916D
		mov	eax, [ebp+var_18]
		test	eax, eax
		jz	short loc_4191C6
		mov	[eax], esi

loc_4191C6:				; CODE XREF: sub_41904D+175j
		mov	eax, [ebp+var_14]
		push	edi
		push	55h
		add	eax, 250h
		push	eax
		push	[ebp+Locale]
		call	sub_40FC75
		test	ebx, ebx
		jz	short loc_41923C
		push	edi
		push	55h
		lea	eax, [ebx+120h]
		push	eax
		push	[ebp+Locale]
		call	sub_40FC75
		push	40h		; cchData
		push	ebx		; lpLCData
		push	1001h		; LCType
		push	[ebp+Locale]	; Locale
		call	ds:GetLocaleInfoW
		test	eax, eax
		jz	loc_41916D
		push	40h		; cchData
		lea	eax, [ebx+80h]
		push	eax		; lpLCData
		push	1002h		; LCType
		push	[ebp+var_8]	; Locale
		call	ds:GetLocaleInfoW
		test	eax, eax
		jz	loc_41916D
		push	0Ah
		push	10h
		lea	ecx, [ebx+100h]
		push	ecx
		push	esi
		call	sub_41A9F6
		add	esp, 10h

loc_41923C:				; CODE XREF: sub_41904D+18Fj
		xor	eax, eax
		inc	eax
		jmp	loc_41916F
sub_41904D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_419244	proc near		; CODE XREF: sub_40E4B6+64p
					; sub_40E4B6+84p ...

lpMem		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jz	short loc_41926C
		push	0FFFFFFE0h
		xor	edx, edx
		pop	eax
		div	esi
		cmp	eax, [ebp+arg_8]
		jnb	short loc_41926C
		call	sub_40BD71
		mov	dword ptr [eax], 0Ch
		xor	eax, eax
		jmp	short loc_4192AE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41926C:				; CODE XREF: sub_419244+Bj
					; sub_419244+17j
		push	ebx
		mov	ebx, [ebp+lpMem]
		push	edi
		test	ebx, ebx
		jz	short loc_419280
		push	ebx		; lpMem
		call	sub_41ABD9
		pop	ecx
		mov	edi, eax
		jmp	short loc_419282
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419280:				; CODE XREF: sub_419244+2Fj
		xor	edi, edi

loc_419282:				; CODE XREF: sub_419244+3Aj
		imul	esi, [ebp+arg_8]
		push	esi
		push	ebx
		call	sub_413298
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_4192AA
		cmp	edi, esi
		jnb	short loc_4192AA
		sub	esi, edi
		lea	eax, [ebx+edi]
		push	esi
		push	0
		push	eax
		call	sub_407330
		add	esp, 0Ch

loc_4192AA:				; CODE XREF: sub_419244+4Fj
					; sub_419244+53j
		pop	edi
		mov	eax, ebx
		pop	ebx

loc_4192AE:				; CODE XREF: sub_419244+26j
		pop	esi
		pop	ebp
		retn
sub_419244	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4192B1	proc near		; DATA XREF: .rdata:00421870o
		call	ds:GetProcessHeap
		test	eax, eax
		mov	hHeap, eax
		setnz	al
		retn
sub_4192B1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_4192C2	proc near		; DATA XREF: .rdata:00421874o
		and	hHeap, 0
		mov	al, 1
		retn
sub_4192C2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4192CC	proc near		; CODE XREF: sub_40E85D+Ap

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	edi, [ebp+arg_4]
		jz	short loc_41932D
		mov	esi, edi

loc_4192DE:				; CODE XREF: sub_4192CC+2Cj
		mov	ebx, [esi]
		test	ebx, ebx
		jz	short loc_4192F2
		mov	ecx, ebx
		call	ds:off_41D12C
		call	ebx
		test	al, al
		jz	short loc_4192FA

loc_4192F2:				; CODE XREF: sub_4192CC+16j
		add	esi, 8
		cmp	esi, [ebp+arg_4]
		jnz	short loc_4192DE

loc_4192FA:				; CODE XREF: sub_4192CC+24j
		cmp	esi, [ebp+arg_4]
		jz	short loc_41932D
		cmp	esi, edi
		jz	short loc_419329
		add	esi, 0FFFFFFFCh

loc_419306:				; CODE XREF: sub_4192CC+5Bj
		cmp	dword ptr [esi-4], 0
		jz	short loc_41931F
		mov	ebx, [esi]
		test	ebx, ebx
		jz	short loc_41931F
		push	0
		mov	ecx, ebx
		call	ds:off_41D12C
		call	ebx
		pop	ecx

loc_41931F:				; CODE XREF: sub_4192CC+3Ej
					; sub_4192CC+44j
		sub	esi, 8
		lea	eax, [esi+4]
		cmp	eax, edi
		jnz	short loc_419306

loc_419329:				; CODE XREF: sub_4192CC+35j
		xor	al, al
		jmp	short loc_41932F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41932D:				; CODE XREF: sub_4192CC+Ej
					; sub_4192CC+31j
		mov	al, 1

loc_41932F:				; CODE XREF: sub_4192CC+5Fj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_4192CC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_419334	proc near		; CODE XREF: sub_40E86F+27p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	[ebp+arg_0], esi
		jz	short loc_419360
		push	edi

loc_419343:				; CODE XREF: sub_419334+29j
		mov	edi, [esi-4]
		test	edi, edi
		jz	short loc_419357
		push	0
		mov	ecx, edi
		call	ds:off_41D12C
		call	edi
		pop	ecx

loc_419357:				; CODE XREF: sub_419334+14j
		sub	esi, 8
		cmp	esi, [ebp+arg_0]
		jnz	short loc_419343
		pop	edi

loc_419360:				; CODE XREF: sub_419334+Cj
		mov	al, 1
		pop	esi
		pop	ebp
		retn
sub_419334	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_419365	proc near		; CODE XREF: sub_41940C+22Cp

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		mov	eax, ecx
		push	ebx
		and	eax, 10h
		mov	ebx, 200h
		push	esi
		shl	eax, 3
		push	edi
		test	cl, 8
		jz	short loc_419384
		or	eax, ebx

loc_419384:				; CODE XREF: sub_419365+1Bj
		test	cl, 4
		jz	short loc_41938E
		or	eax, 400h

loc_41938E:				; CODE XREF: sub_419365+22j
		test	cl, 2
		jz	short loc_419398
		or	eax, 800h

loc_419398:				; CODE XREF: sub_419365+2Cj
		test	cl, 1
		jz	short loc_4193A2
		or	eax, 1000h

loc_4193A2:				; CODE XREF: sub_419365+36j
		mov	esi, 100h
		test	ecx, 80000h
		jz	short loc_4193B1
		or	eax, esi

loc_4193B1:				; CODE XREF: sub_419365+48j
		mov	edx, ecx
		mov	edi, 300h
		and	edx, edi
		jz	short loc_4193DB
		cmp	edx, esi
		jz	short loc_4193D6
		cmp	edx, ebx
		jz	short loc_4193CF
		cmp	edx, edi
		jnz	short loc_4193DB
		or	eax, 6000h
		jmp	short loc_4193DB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4193CF:				; CODE XREF: sub_419365+5Dj
		or	eax, 4000h
		jmp	short loc_4193DB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4193D6:				; CODE XREF: sub_419365+59j
		or	eax, 2000h

loc_4193DB:				; CODE XREF: sub_419365+55j
					; sub_419365+61j ...
		mov	edx, 3000000h
		pop	edi
		and	ecx, edx
		pop	esi
		pop	ebx
		cmp	ecx, 1000000h
		jz	short loc_419405
		cmp	ecx, 2000000h
		jz	short loc_419400
		cmp	ecx, edx
		jnz	short loc_41940A
		or	eax, 8000h
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419400:				; CODE XREF: sub_419365+8Ej
		or	eax, 40h
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419405:				; CODE XREF: sub_419365+86j
		or	eax, 8040h

loc_41940A:				; CODE XREF: sub_419365+92j
		pop	ebp
		retn
sub_419365	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41940C	proc near		; CODE XREF: sub_40E89F+26p
					; sub_40E89F+4Ap ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= word ptr -8
var_4		= word ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		fstcw	[ebp+var_8]
		mov	ax, [ebp+var_8]
		movzx	ecx, ax
		and	ecx, 1
		shl	ecx, 4
		test	al, 4
		jz	short loc_41942C
		or	ecx, 8

loc_41942C:				; CODE XREF: sub_41940C+1Bj
		test	al, 8
		jz	short loc_419433
		or	ecx, 4

loc_419433:				; CODE XREF: sub_41940C+22j
		test	al, 10h
		jz	short loc_41943A
		or	ecx, 2

loc_41943A:				; CODE XREF: sub_41940C+29j
		test	al, 20h
		jz	short loc_419441
		or	ecx, 1

loc_419441:				; CODE XREF: sub_41940C+30j
		test	al, 2
		jz	short loc_41944B
		or	ecx, 80000h

loc_41944B:				; CODE XREF: sub_41940C+37j
		push	ebx
		push	esi
		movzx	esi, ax
		mov	ebx, 0C00h
		mov	edx, esi
		push	edi
		mov	edi, 200h
		and	edx, ebx
		jz	short loc_419487
		cmp	edx, 400h
		jz	short loc_419481
		cmp	edx, 800h
		jz	short loc_41947D
		cmp	edx, ebx
		jnz	short loc_419487
		or	ecx, 300h
		jmp	short loc_419487
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41947D:				; CODE XREF: sub_41940C+63j
		or	ecx, edi
		jmp	short loc_419487
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419481:				; CODE XREF: sub_41940C+5Bj
		or	ecx, 100h

loc_419487:				; CODE XREF: sub_41940C+53j
					; sub_41940C+67j ...
		and	esi, 300h
		jz	short loc_41949B
		cmp	esi, edi
		jnz	short loc_4194A1
		or	ecx, 10000h
		jmp	short loc_4194A1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41949B:				; CODE XREF: sub_41940C+81j
		or	ecx, 20000h

loc_4194A1:				; CODE XREF: sub_41940C+85j
					; sub_41940C+8Dj
		mov	edx, 1000h
		test	ax, dx
		jz	short loc_4194B1
		or	ecx, 40000h

loc_4194B1:				; CODE XREF: sub_41940C+9Dj
		mov	edi, [ebp+arg_4]
		mov	esi, edi
		mov	eax, [ebp+arg_0]
		not	esi
		and	esi, ecx
		and	eax, edi
		or	esi, eax
		cmp	esi, ecx
		jz	loc_41956F
		push	esi
		call	sub_41970B
		pop	ecx
		mov	[ebp+var_4], ax
		fldcw	[ebp+var_4]
		fstcw	[ebp+var_4]
		mov	ax, [ebp+var_4]
		movzx	esi, ax
		and	esi, 1
		shl	esi, 4
		test	al, 4
		jz	short loc_4194EF
		or	esi, 8

loc_4194EF:				; CODE XREF: sub_41940C+DEj
		test	al, 8
		jz	short loc_4194F6
		or	esi, 4

loc_4194F6:				; CODE XREF: sub_41940C+E5j
		test	al, 10h
		jz	short loc_4194FD
		or	esi, 2

loc_4194FD:				; CODE XREF: sub_41940C+ECj
		test	al, 20h
		jz	short loc_419504
		or	esi, 1

loc_419504:				; CODE XREF: sub_41940C+F3j
		test	al, 2
		jz	short loc_41950E
		or	esi, 80000h

loc_41950E:				; CODE XREF: sub_41940C+FAj
		movzx	edx, ax
		mov	ecx, edx
		and	ecx, ebx
		jz	short loc_419541
		cmp	ecx, 400h
		jz	short loc_41953B
		cmp	ecx, 800h
		jz	short loc_419533
		cmp	ecx, ebx
		jnz	short loc_419541
		or	esi, 300h
		jmp	short loc_419541
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419533:				; CODE XREF: sub_41940C+119j
		or	esi, 200h
		jmp	short loc_419541
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41953B:				; CODE XREF: sub_41940C+111j
		or	esi, 100h

loc_419541:				; CODE XREF: sub_41940C+109j
					; sub_41940C+11Dj ...
		and	edx, 300h
		jz	short loc_419559
		cmp	edx, 200h
		jnz	short loc_41955F
		or	esi, 10000h
		jmp	short loc_41955F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419559:				; CODE XREF: sub_41940C+13Bj
		or	esi, 20000h

loc_41955F:				; CODE XREF: sub_41940C+143j
					; sub_41940C+14Bj
		mov	edx, 1000h
		test	ax, dx
		jz	short loc_41956F
		or	esi, 40000h

loc_41956F:				; CODE XREF: sub_41940C+B7j
					; sub_41940C+15Bj
		cmp	dword_42D4E4, 1
		jl	loc_419702
		and	edi, 308031Fh
		stmxcsr	[ebp+var_10]
		mov	ecx, [ebp+var_10]
		mov	eax, ecx
		shr	eax, 3
		and	eax, 10h
		test	ecx, 200h
		jz	short loc_41959C
		or	eax, 8

loc_41959C:				; CODE XREF: sub_41940C+18Bj
		test	ecx, 400h
		jz	short loc_4195A7
		or	eax, 4

loc_4195A7:				; CODE XREF: sub_41940C+196j
		test	ecx, 800h
		jz	short loc_4195B2
		or	eax, 2

loc_4195B2:				; CODE XREF: sub_41940C+1A1j
		test	ecx, edx
		jz	short loc_4195B9
		or	eax, 1

loc_4195B9:				; CODE XREF: sub_41940C+1A8j
		test	ecx, 100h
		jz	short loc_4195C6
		or	eax, 80000h

loc_4195C6:				; CODE XREF: sub_41940C+1B3j
		mov	edx, ecx
		mov	ebx, 6000h
		and	edx, ebx
		jz	short loc_4195F8
		cmp	edx, 2000h
		jz	short loc_4195F3
		cmp	edx, 4000h
		jz	short loc_4195EC
		cmp	edx, ebx
		jnz	short loc_4195F8
		or	eax, 300h
		jmp	short loc_4195F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4195EC:				; CODE XREF: sub_41940C+1D3j
		or	eax, 200h
		jmp	short loc_4195F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4195F3:				; CODE XREF: sub_41940C+1CBj
		or	eax, 100h

loc_4195F8:				; CODE XREF: sub_41940C+1C3j
					; sub_41940C+1D7j ...
		push	40h
		and	ecx, 8040h
		pop	ebx
		sub	ecx, ebx
		jz	short loc_41961F
		sub	ecx, 7FC0h
		jz	short loc_419618
		sub	ecx, ebx
		jnz	short loc_419624
		or	eax, 1000000h
		jmp	short loc_419624
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419618:				; CODE XREF: sub_41940C+1FFj
		or	eax, 3000000h
		jmp	short loc_419624
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41961F:				; CODE XREF: sub_41940C+1F7j
		or	eax, 2000000h

loc_419624:				; CODE XREF: sub_41940C+203j
					; sub_41940C+20Aj ...
		mov	ecx, edi
		and	edi, [ebp+arg_0]
		not	ecx
		and	ecx, eax
		or	ecx, edi
		cmp	ecx, eax
		jz	loc_4196EB
		push	ecx
		call	sub_419365
		push	eax
		mov	[ebp+var_C], eax
		call	sub_413BB0
		pop	ecx
		pop	ecx
		stmxcsr	[ebp+var_C]
		mov	ecx, [ebp+var_C]
		mov	eax, ecx
		shr	eax, 3
		and	eax, 10h
		test	ecx, 200h
		jz	short loc_419662
		or	eax, 8

loc_419662:				; CODE XREF: sub_41940C+251j
		test	ecx, 400h
		jz	short loc_41966D
		or	eax, 4

loc_41966D:				; CODE XREF: sub_41940C+25Cj
		test	ecx, 800h
		jz	short loc_419678
		or	eax, 2

loc_419678:				; CODE XREF: sub_41940C+267j
		test	ecx, 1000h
		jz	short loc_419683
		or	eax, 1

loc_419683:				; CODE XREF: sub_41940C+272j
		test	ecx, 100h
		jz	short loc_419690
		or	eax, 80000h

loc_419690:				; CODE XREF: sub_41940C+27Dj
		mov	edx, ecx
		mov	edi, 6000h
		and	edx, edi
		jz	short loc_4196C2
		cmp	edx, 2000h
		jz	short loc_4196BD
		cmp	edx, 4000h
		jz	short loc_4196B6
		cmp	edx, edi
		jnz	short loc_4196C2
		or	eax, 300h
		jmp	short loc_4196C2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4196B6:				; CODE XREF: sub_41940C+29Dj
		or	eax, 200h
		jmp	short loc_4196C2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4196BD:				; CODE XREF: sub_41940C+295j
		or	eax, 100h

loc_4196C2:				; CODE XREF: sub_41940C+28Dj
					; sub_41940C+2A1j ...
		and	ecx, 8040h
		sub	ecx, ebx
		jz	short loc_4196E6
		sub	ecx, 7FC0h
		jz	short loc_4196DF
		sub	ecx, ebx
		jnz	short loc_4196EB
		or	eax, 1000000h
		jmp	short loc_4196EB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4196DF:				; CODE XREF: sub_41940C+2C6j
		or	eax, 3000000h
		jmp	short loc_4196EB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4196E6:				; CODE XREF: sub_41940C+2BEj
		or	eax, 2000000h

loc_4196EB:				; CODE XREF: sub_41940C+225j
					; sub_41940C+2CAj ...
		mov	ecx, eax
		xor	eax, esi
		or	ecx, esi
		test	eax, 8031Fh
		jz	short loc_4196FE
		or	ecx, 80000000h

loc_4196FE:				; CODE XREF: sub_41940C+2EAj
		mov	eax, ecx
		jmp	short loc_419704
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419702:				; CODE XREF: sub_41940C+16Aj
		mov	eax, esi

loc_419704:				; CODE XREF: sub_41940C+2F4j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_41940C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41970B	proc near		; CODE XREF: sub_41940C+BEp

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		mov	edx, ecx
		shr	edx, 4
		and	edx, 1
		mov	eax, edx
		test	cl, 8
		jz	short loc_419728
		or	edx, 4
		movzx	eax, dx

loc_419728:				; CODE XREF: sub_41970B+15j
		test	cl, 4
		jz	short loc_419730
		or	eax, 8

loc_419730:				; CODE XREF: sub_41970B+20j
		test	cl, 2
		jz	short loc_419738
		or	eax, 10h

loc_419738:				; CODE XREF: sub_41970B+28j
		test	cl, 1
		jz	short loc_419740
		or	eax, 20h

loc_419740:				; CODE XREF: sub_41970B+30j
		test	ecx, 80000h
		jz	short loc_41974B
		or	eax, 2

loc_41974B:				; CODE XREF: sub_41970B+3Bj
		push	esi
		mov	edx, ecx
		mov	esi, 300h
		push	edi
		mov	edi, 200h
		and	edx, esi
		jz	short loc_419780
		cmp	edx, 100h
		jz	short loc_41977B
		cmp	edx, edi
		jz	short loc_419774
		cmp	edx, esi
		jnz	short loc_419780
		or	eax, 0C00h
		jmp	short loc_419780
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419774:				; CODE XREF: sub_41970B+5Cj
		or	eax, 800h
		jmp	short loc_419780
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41977B:				; CODE XREF: sub_41970B+58j
		or	eax, 400h

loc_419780:				; CODE XREF: sub_41970B+50j
					; sub_41970B+60j ...
		mov	edx, ecx
		and	edx, 30000h
		jz	short loc_419796
		cmp	edx, 10000h
		jnz	short loc_419798
		or	eax, edi
		jmp	short loc_419798
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419796:				; CODE XREF: sub_41970B+7Dj
		or	eax, esi

loc_419798:				; CODE XREF: sub_41970B+85j
					; sub_41970B+89j
		pop	edi
		pop	esi
		test	ecx, 40000h
		jz	short loc_4197A7
		or	eax, 1000h

loc_4197A7:				; CODE XREF: sub_41970B+95j
		pop	ebp
		retn
sub_41970B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4197A9	proc near		; CODE XREF: sub_419907+Ep

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		xor	ebx, ebx
		mov	eax, 0E3h
		push	edi
		mov	[ebp+var_8], ebx
		mov	[ebp+var_C], eax

loc_4197C1:				; CODE XREF: sub_4197A9+9Bj
		add	eax, ebx
		mov	[ebp+var_4], 55h
		cdq
		sub	eax, edx
		mov	ecx, eax
		sar	ecx, 1
		mov	[ebp+var_10], ecx
		push	19h
		pop	ebx
		mov	esi, ds:off_424718[ecx*8]
		mov	ecx, [ebp+arg_0]
		sub	ecx, esi

loc_4197E3:				; CODE XREF: sub_4197A9+72j
		movzx	edx, word ptr [ecx+esi]
		lea	eax, [edx-41h]
		cmp	ax, bx
		ja	short loc_4197F5
		lea	eax, [edx+20h]
		movzx	edx, ax

loc_4197F5:				; CODE XREF: sub_4197A9+44j
		movzx	edi, word ptr [esi]
		lea	eax, [edi-41h]
		cmp	ax, bx
		ja	short loc_419808
		lea	eax, [edi+20h]
		movzx	eax, ax
		jmp	short loc_41980A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419808:				; CODE XREF: sub_4197A9+55j
		mov	eax, edi

loc_41980A:				; CODE XREF: sub_4197A9+5Dj
		add	esi, 2
		sub	[ebp+var_4], 1
		jz	short loc_41981D
		test	dx, dx
		jz	short loc_41981D
		cmp	dx, ax
		jz	short loc_4197E3

loc_41981D:				; CODE XREF: sub_4197A9+68j
					; sub_4197A9+6Dj
		mov	ecx, [ebp+var_10]
		mov	ebx, [ebp+var_8]
		movzx	eax, ax
		movzx	edx, dx
		sub	edx, eax
		jz	short loc_41984F
		test	edx, edx
		jns	short loc_419839
		lea	eax, [ecx-1]
		mov	[ebp+var_C], eax
		jmp	short loc_419842
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419839:				; CODE XREF: sub_4197A9+86j
		mov	eax, [ebp+var_C]
		lea	ebx, [ecx+1]
		mov	[ebp+var_8], ebx

loc_419842:				; CODE XREF: sub_4197A9+8Ej
		cmp	ebx, eax
		jle	loc_4197C1
		or	eax, 0FFFFFFFFh
		jmp	short loc_419856
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41984F:				; CODE XREF: sub_4197A9+82j
		mov	eax, ds:dword_42471C[ecx*8]

loc_419856:				; CODE XREF: sub_4197A9+A4j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_4197A9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41985D	proc near		; CODE XREF: sub_40FC75+32p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	ebx
		push	esi
		push	edi
		test	ecx, ecx
		jz	loc_4198F3
		cmp	ecx, 400h
		jz	short loc_4198F3
		cmp	ecx, 800h
		jz	short loc_4198F3
		cmp	[ebp+arg_4], 0
		mov	esi, [ebp+arg_8]
		jnz	short loc_41988D
		test	esi, esi
		jg	short loc_4198F3

loc_41988D:				; CODE XREF: sub_41985D+2Aj
		test	esi, esi
		js	short loc_4198F3
		xor	edi, edi
		mov	ebx, 0E3h

loc_419898:				; CODE XREF: sub_41985D+5Cj
		lea	eax, [ebx+edi]
		cdq
		sub	eax, edx
		mov	edx, ecx
		sar	eax, 1
		sub	edx, ds:dword_4235F8[eax*8]
		jz	short loc_4198BE
		test	edx, edx
		jns	short loc_4198B4
		lea	ebx, [eax-1]
		jmp	short loc_4198B7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4198B4:				; CODE XREF: sub_41985D+50j
		lea	edi, [eax+1]

loc_4198B7:				; CODE XREF: sub_41985D+55j
		cmp	edi, ebx
		jle	short loc_419898
		or	eax, 0FFFFFFFFh

loc_4198BE:				; CODE XREF: sub_41985D+4Cj
		test	eax, eax
		js	short loc_4198F3
		mov	ebx, ds:off_4235FC[eax*8]
		push	55h
		push	ebx
		call	loc_40C42E
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jle	short loc_4198EE
		cmp	edi, esi
		jge	short loc_4198F3
		push	ebx
		push	esi
		push	[ebp+arg_4]
		call	sub_40C3CA
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_4198FA

loc_4198EE:				; CODE XREF: sub_41985D+7Aj
		lea	eax, [edi+1]
		jmp	short loc_4198F5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4198F3:				; CODE XREF: sub_41985D+Dj
					; sub_41985D+19j ...
		xor	eax, eax

loc_4198F5:				; CODE XREF: sub_41985D+94j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_4198FA:				; CODE XREF: sub_41985D+8Fj
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	sub_409E62
		int	3		; Trap to Debugger
sub_41985D	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_419907	proc near		; CODE XREF: sub_40FD11+26p

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		jz	short loc_41992F
		push	[ebp+arg_0]
		call	sub_4197A9
		pop	ecx
		test	eax, eax
		js	short loc_41992F
		cmp	eax, 0E4h
		jnb	short loc_41992F
		mov	eax, ds:dword_4235F8[eax*8]
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41992F:				; CODE XREF: sub_419907+9j
					; sub_419907+16j ...
		xor	eax, eax
		pop	ebp
		retn
sub_419907	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_419933	proc near		; CODE XREF: sub_4199A1+27p
					; sub_4199A1+CAp

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		cmp	byte ptr [ecx],	0
		jnz	short loc_419945
		xor	eax, eax
		inc	eax
		jmp	short loc_41995B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419945:				; CODE XREF: sub_419933+Bj
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_419950
		push	2
		pop	eax
		jmp	short loc_41995B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419950:				; CODE XREF: sub_419933+16j
		xor	eax, eax
		cmp	[ecx+2], al
		setnz	al
		add	eax, 3

loc_41995B:				; CODE XREF: sub_419933+10j
					; sub_419933+1Bj
		pop	ebp
		retn	4
sub_419933	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41995F	proc near		; CODE XREF: sub_413D76+5Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+arg_C]
		lea	eax, [ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	eax
		call	sub_41AC0C
		mov	edx, eax
		add	esp, 10h
		cmp	edx, 4
		ja	short loc_41999B
		mov	ecx, [ebp+var_4]
		cmp	ecx, 0FFFFh
		jbe	short loc_419991
		mov	ecx, 0FFFDh

loc_419991:				; CODE XREF: sub_41995F+2Bj
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_41999B
		mov	[eax], cx

loc_41999B:				; CODE XREF: sub_41995F+20j
					; sub_41995F+37j
		mov	eax, edx
		mov	esp, ebp
		pop	ebp
		retn
sub_41995F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_4199A1	proc near		; CODE XREF: sub_40FE90+6Ap
					; sub_4111A0+1B7p

var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_0], 0
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		mov	edi, [edi]
		jz	loc_419A56
		mov	ebx, [ebp+arg_8]
		mov	esi, [ebp+arg_0]
		test	ebx, ebx
		jz	short loc_419A2C

loc_4199C4:				; CODE XREF: sub_4199A1+89j
		push	edi
		lea	ecx, [ebp-1]
		call	sub_419933
		push	[ebp+arg_C]
		push	eax
		lea	eax, [ebp+var_8]
		push	edi
		push	eax
		call	sub_41AC0C
		mov	edx, eax
		add	esp, 10h
		cmp	edx, 0FFFFFFFFh
		jz	short loc_419A41
		test	edx, edx
		jz	short loc_419A38
		mov	ecx, [ebp+var_8]
		cmp	ecx, 0FFFFh
		jbe	short loc_419A1F
		cmp	ebx, 1
		jbe	short loc_419A2C
		sub	ecx, 10000h
		dec	ebx
		mov	eax, ecx
		mov	[ebp+var_8], ecx
		shr	eax, 0Ah
		and	ecx, 3FFh
		or	eax, 0D800h
		mov	[esi], ax
		add	esi, 2
		or	ecx, 0DC00h

loc_419A1F:				; CODE XREF: sub_4199A1+51j
		mov	[esi], cx
		add	edi, edx
		add	esi, 2
		sub	ebx, 1
		jnz	short loc_4199C4

loc_419A2C:				; CODE XREF: sub_4199A1+21j
					; sub_4199A1+56j ...
		mov	ebx, [ebp+arg_4]
		sub	esi, [ebp+arg_0]
		sar	esi, 1
		mov	[ebx], edi
		jmp	short loc_419A91
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419A38:				; CODE XREF: sub_4199A1+46j
		xor	edi, edi
		xor	eax, eax
		mov	[esi], ax
		jmp	short loc_419A2C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419A41:				; CODE XREF: sub_4199A1+42j
		mov	eax, [ebp+arg_4]
		mov	[eax], edi
		call	sub_40BD71
		mov	dword ptr [eax], 2Ah
		or	eax, 0FFFFFFFFh
		jmp	short loc_419A93
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419A56:				; CODE XREF: sub_4199A1+13j
		xor	ebx, ebx
		jmp	short loc_419A67
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419A5A:				; CODE XREF: sub_4199A1+E3j
		test	esi, esi
		jz	short loc_419A9A
		cmp	esi, 4
		jnz	short loc_419A64
		inc	ebx

loc_419A64:				; CODE XREF: sub_4199A1+C0j
		add	edi, esi
		inc	ebx

loc_419A67:				; CODE XREF: sub_4199A1+B7j
		push	edi
		lea	ecx, [ebp-1]
		call	sub_419933
		push	[ebp+arg_C]
		push	eax
		push	edi
		push	0
		call	sub_41AC0C
		mov	esi, eax
		add	esp, 10h
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_419A5A
		call	sub_40BD71
		mov	dword ptr [eax], 2Ah

loc_419A91:				; CODE XREF: sub_4199A1+95j
		mov	eax, esi

loc_419A93:				; CODE XREF: sub_4199A1+B3j
					; sub_4199A1+FBj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419A9A:				; CODE XREF: sub_4199A1+BBj
		mov	eax, ebx
		jmp	short loc_419A93
sub_4199A1	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_419A9E	proc near		; CODE XREF: sub_410137+77p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_20], ecx
		mov	[ebp+var_18], eax
		push	ebx
		mov	ebx, [ebp+arg_C]
		mov	[ebp+var_1C], ebx
		push	esi
		push	edi
		mov	edi, [eax]
		test	ecx, ecx
		jz	loc_419B5E
		mov	eax, [ebp+arg_8]
		mov	esi, ecx
		mov	[ebp+var_10], edi

loc_419AD7:				; CODE XREF: sub_419A9E+9Bj
		cmp	eax, 4
		jnb	short loc_419AE4
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_14], ecx
		jmp	short loc_419AE9
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419AE4:				; CODE XREF: sub_419A9E+3Cj
		mov	ecx, esi
		mov	[ebp+var_14], esi

loc_419AE9:				; CODE XREF: sub_419A9E+44j
		movzx	eax, word ptr [edi]
		push	ebx
		push	eax
		push	ecx
		call	sub_41ADC0
		mov	ebx, eax
		add	esp, 0Ch
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_419B51
		mov	eax, [ebp+var_14]
		cmp	eax, esi
		jz	short loc_419B15
		cmp	[ebp+arg_8], ebx
		jb	short loc_419B3B
		push	ebx
		push	eax
		push	esi
		call	loc_4067C0
		add	esp, 0Ch

loc_419B15:				; CODE XREF: sub_419A9E+65j
		test	ebx, ebx
		jz	short loc_419B22
		lea	ecx, [ebx+esi]
		cmp	byte ptr [ecx-1], 0
		jz	short loc_419B40

loc_419B22:				; CODE XREF: sub_419A9E+79j
		add	edi, 2
		test	ebx, ebx
		jz	short loc_419B2C
		mov	[ebp+var_10], edi

loc_419B2C:				; CODE XREF: sub_419A9E+89j
		mov	eax, [ebp+arg_8]
		sub	eax, ebx
		add	esi, ebx
		mov	ebx, [ebp+var_1C]
		mov	[ebp+arg_8], eax
		jmp	short loc_419AD7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419B3B:				; CODE XREF: sub_419A9E+6Aj
		mov	eax, [ebp+var_10]
		jmp	short loc_419B45
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419B40:				; CODE XREF: sub_419A9E+82j
		xor	eax, eax
		lea	esi, [ecx-1]

loc_419B45:				; CODE XREF: sub_419A9E+A0j
		mov	edx, [ebp+var_18]
		sub	esi, [ebp+var_20]
		mov	[edx], eax
		mov	eax, esi
		jmp	short loc_419B8D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419B51:				; CODE XREF: sub_419A9E+5Ej
		mov	edx, [ebp+var_18]
		or	eax, 0FFFFFFFFh
		mov	ecx, [ebp+var_10]
		mov	[edx], ecx
		jmp	short loc_419B8D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419B5E:				; CODE XREF: sub_419A9E+2Bj
		xor	esi, esi
		jmp	short loc_419B72
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419B62:				; CODE XREF: sub_419A9E+E8j
		test	eax, eax
		jz	short loc_419B6D
		cmp	byte ptr [ebp+eax+var_10+3], 0
		jz	short loc_419B8A

loc_419B6D:				; CODE XREF: sub_419A9E+C6j
		add	esi, eax
		add	edi, 2

loc_419B72:				; CODE XREF: sub_419A9E+C2j
		movzx	eax, word ptr [edi]
		push	ebx
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		call	sub_41ADC0
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_419B62
		jmp	short loc_419B8D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419B8A:				; CODE XREF: sub_419A9E+CDj
		dec	eax
		add	eax, esi

loc_419B8D:				; CODE XREF: sub_419A9E+B1j
					; sub_419A9E+BEj ...
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_419A9E	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_419C51

loc_419B9E:				; CODE XREF: sub_419C51+6j
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	ebx
		mov	ebx, [ebp+arg_8]
		push	esi
		mov	esi, [ebp+arg_C]
		test	esi, esi
		jnz	short loc_419BD0
		test	ecx, ecx
		jnz	short loc_419BD4
		cmp	[ebp+arg_4], esi
		jz	short loc_419BE2

loc_419BBB:				; CODE XREF: sub_419C51-7Fj
					; sub_419C51-78j ...
		call	sub_40BD71
		push	16h

loc_419BC2:				; CODE XREF: sub_419C51-5j
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		mov	eax, esi

loc_419BCC:				; CODE XREF: sub_419C51-6Dj
					; sub_419C51-11j
		pop	esi
		pop	ebx
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419BD0:				; CODE XREF: sub_419C51-A1j
		test	ecx, ecx
		jz	short loc_419BBB

loc_419BD4:				; CODE XREF: sub_419C51-9Dj
		mov	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_419BBB
		test	esi, esi
		jnz	short loc_419BE6
		mov	byte ptr [ecx],	0

loc_419BE2:				; CODE XREF: sub_419C51-98j
					; sub_419C51-23j
		xor	eax, eax
		jmp	short loc_419BCC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419BE6:				; CODE XREF: sub_419C51-74j
		test	ebx, ebx
		jnz	short loc_419BEE
		mov	[ecx], bl
		jmp	short loc_419BBB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419BEE:				; CODE XREF: sub_419C51-69j
		sub	ebx, ecx
		mov	edx, ecx
		push	edi
		mov	edi, eax
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_419C0B

loc_419BFA:				; CODE XREF: sub_419C51-4Aj
		mov	al, [ebx+edx]
		mov	[edx], al
		inc	edx
		test	al, al
		jz	short loc_419C2B
		sub	edi, 1
		jnz	short loc_419BFA
		jmp	short loc_419C2B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419C0B:				; CODE XREF: sub_419C51-59j
		mov	ecx, esi

loc_419C0D:				; CODE XREF: sub_419C51-32j
		mov	al, [ebx+edx]
		mov	[edx], al
		inc	edx
		test	al, al
		jz	short loc_419C21
		sub	edi, 1
		jz	short loc_419C21
		sub	ecx, 1
		jnz	short loc_419C0D

loc_419C21:				; CODE XREF: sub_419C51-3Cj
					; sub_419C51-37j
		test	ecx, ecx
		mov	ecx, [ebp+arg_0]
		jnz	short loc_419C2B
		mov	byte ptr [edx],	0

loc_419C2B:				; CODE XREF: sub_419C51-4Fj
					; sub_419C51-48j ...
		test	edi, edi
		pop	edi
		jnz	short loc_419BE2
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_419C42
		mov	eax, [ebp+arg_4]
		push	50h
		mov	byte ptr [ecx+eax-1], 0
		pop	eax
		jmp	short loc_419BCC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419C42:				; CODE XREF: sub_419C51-1Ej
		mov	byte ptr [ecx],	0
		call	sub_40BD71
		push	22h
		jmp	loc_419BC2
; END OF FUNCTION CHUNK	FOR sub_419C51

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_419C51	proc near		; CODE XREF: sub_4106BD+8Fp
					; sub_41602A-49Bp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

; FUNCTION CHUNK AT 00419B9E SIZE 000000B3 BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_419B9E
sub_419C51	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_419C5C	proc near		; CODE XREF: sub_4115B6+Cp
					; sub_4125DD-191p ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		cmp	ecx, 0FFFFFFFEh
		jnz	short loc_419C76
		call	sub_40BD71
		mov	dword ptr [eax], 9
		jmp	short loc_419CAE
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419C76:				; CODE XREF: sub_419C5C+Bj
		test	ecx, ecx
		js	short loc_419C9E
		cmp	ecx, dword_42DB50
		jnb	short loc_419C9E
		mov	eax, ecx
		and	ecx, 3Fh
		sar	eax, 6
		imul	ecx, 38h
		mov	eax, dword_42D950[eax*4]
		movzx	eax, byte ptr [eax+ecx+28h]
		and	eax, 40h
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419C9E:				; CODE XREF: sub_419C5C+1Cj
					; sub_419C5C+24j
		call	sub_40BD71
		mov	dword ptr [eax], 9
		call	sub_409E35

loc_419CAE:				; CODE XREF: sub_419C5C+18j
		xor	eax, eax
		pop	ebp
		retn
sub_419C5C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_419CB2(int Buffer)
sub_419CB2	proc near		; CODE XREF: sub_41154C+26p
					; sub_41154C+3Ep

NumberOfCharsWritten= dword ptr	-4
Buffer		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		call	sub_41AE7B
		test	eax, eax
		jz	short loc_419CDD
		lea	eax, [ebp+NumberOfCharsWritten]
		push	eax		; lpNumberOfCharsWritten
		lea	eax, [ebp+Buffer]
		push	1		; nNumberOfCharsToWrite
		push	eax		; lpBuffer
		call	sub_41AEB1
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_419CDD
		mov	ax, word ptr [ebp+Buffer]
		jmp	short loc_419CE2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419CDD:				; CODE XREF: sub_419CB2+Dj
					; sub_419CB2+23j
		mov	eax, 0FFFFh

loc_419CE2:				; CODE XREF: sub_419CB2+29j
		mov	esp, ebp
		pop	ebp
		retn
sub_419CB2	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_419CE6(DWORD dwInfoType,LPCWSTR lpSrcStr,int cchSrc,LPWORD lpCharType)
sub_419CE6	proc near		; CODE XREF: sub_413301+4Dp

dwInfoType	= dword	ptr  8
lpSrcStr	= dword	ptr  0Ch
cchSrc		= dword	ptr  10h
lpCharType	= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	[ebp+lpCharType] ; lpCharType
		push	[ebp+cchSrc]	; cchSrc
		push	[ebp+lpSrcStr]	; lpSrcStr
		push	[ebp+dwInfoType] ; dwInfoType
		call	ds:GetStringTypeW
		pop	ebp
		retn
sub_419CE6	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_419DCD

loc_419CFF:				; CODE XREF: sub_419DCD+6j
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		test	edx, edx
		jnz	short loc_419D18
		mov	eax, [ebp+arg_8]
		and	[eax], edx
		and	[eax+4], edx

loc_419D13:				; CODE XREF: sub_419DCD-A4j
					; sub_419DCD-98j
		xor	eax, eax
		inc	eax
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419D18:				; CODE XREF: sub_419DCD-C4j
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jnz	short loc_419D2B
		mov	eax, [ebp+arg_8]
		mov	[edx], cl
		mov	[eax], ecx
		mov	[eax+4], ecx
		jmp	short loc_419D13
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419D2B:				; CODE XREF: sub_419DCD-B0j
		test	ecx, 0FFFFFF80h
		jnz	short loc_419D37
		mov	[edx], cl
		jmp	short loc_419D13
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419D37:				; CODE XREF: sub_419DCD-9Cj
		push	ebx
		push	esi
		test	ecx, 0FFFFF800h
		jnz	short loc_419D48
		xor	esi, esi
		mov	bl, 0C0h
		inc	esi
		jmp	short loc_419D7B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419D48:				; CODE XREF: sub_419DCD-8Ej
		test	ecx, 0FFFF0000h
		jnz	short loc_419D66
		cmp	ecx, 0D800h
		jb	short loc_419D60
		cmp	ecx, 0DFFFh
		jbe	short loc_419DA1

loc_419D60:				; CODE XREF: sub_419DCD-77j
		push	2
		mov	bl, 0E0h
		jmp	short loc_419D7A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419D66:				; CODE XREF: sub_419DCD-7Fj
		test	ecx, 0FFE00000h
		jnz	short loc_419DA1
		cmp	ecx, 10FFFFh
		ja	short loc_419DA1
		push	3
		mov	bl, 0F0h

loc_419D7A:				; CODE XREF: sub_419DCD-69j
		pop	esi

loc_419D7B:				; CODE XREF: sub_419DCD-87j
		push	edi
		mov	edi, esi

loc_419D7E:				; CODE XREF: sub_419DCD-40j
		mov	al, cl
		shr	ecx, 6
		and	al, 3Fh
		or	al, 80h
		mov	[edi+edx], al
		sub	edi, 1
		jnz	short loc_419D7E
		mov	eax, [ebp+arg_8]
		or	cl, bl
		mov	[edx], cl
		and	[eax], edi
		and	[eax+4], edi
		lea	eax, [esi+1]
		pop	edi
		jmp	short loc_419DAA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419DA1:				; CODE XREF: sub_419DCD-6Fj
					; sub_419DCD-61j ...
		push	[ebp+arg_8]
		call	sub_419DAE
		pop	ecx

loc_419DAA:				; CODE XREF: sub_419DCD-2Ej
		pop	esi
		pop	ebx
		pop	ebp
		retn
; END OF FUNCTION CHUNK	FOR sub_419DCD

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_419DAE	proc near		; CODE XREF: sub_419DCD-29p
					; sub_41AC0C+19Dp ...

arg_0		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		and	dword ptr [eax], 0
		and	dword ptr [eax+4], 0
		call	sub_40BD71
		mov	dword ptr [eax], 2Ah
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
sub_419DAE	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_419DCD	proc near		; CODE XREF: sub_41ADC0+5Ep
					; sub_41ADC0+89p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

; FUNCTION CHUNK AT 00419CFF SIZE 000000AF BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_419CFF
sub_419DCD	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_419DD8	proc near		; CODE XREF: sub_413F09+7F8p
					; .text:0041B0D5p ...

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= qword	ptr -18h
var_10		= qword	ptr -10h
var_8		= qword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		cmp	dword_42DC58, 0
		push	esi
		push	edi
		jz	short loc_419DFB
		push	dword_42DC8C
		call	ds:DecodePointer
		mov	edi, eax
		jmp	short loc_419E00
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419DFB:				; CODE XREF: sub_419DD8+11j
		mov	edi, offset sub_40C821

loc_419E00:				; CODE XREF: sub_419DD8+21j
		mov	eax, [ebp+arg_C]
		cmp	eax, 1Ah
		jg	loc_419EEA
		jz	loc_419EDE
		cmp	eax, 0Eh
		jg	short loc_419E7C
		jz	short loc_419E69
		push	2
		pop	ecx
		sub	eax, ecx
		jz	short loc_419E5A
		sub	eax, 1
		jz	short loc_419E4E
		sub	eax, 5
		jz	short loc_419E3F
		sub	eax, 1
		jnz	loc_419FC8
		mov	[ebp+var_1C], offset aLog10 ; "log10"
		jmp	loc_419F40
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419E3F:				; CODE XREF: sub_419DD8+50j
		mov	[ebp+var_20], ecx
		mov	[ebp+var_1C], offset aLog10 ; "log10"
		jmp	loc_419F8D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419E4E:				; CODE XREF: sub_419DD8+4Bj
		mov	[ebp+var_1C], offset dword_422558
		jmp	loc_419F40
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419E5A:				; CODE XREF: sub_419DD8+46j
		mov	[ebp+var_20], ecx
		mov	[ebp+var_1C], offset dword_422558
		jmp	loc_419F8D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419E69:				; CODE XREF: sub_419DD8+3Fj
		mov	[ebp+var_20], 3
		mov	[ebp+var_1C], offset dword_422550
		jmp	loc_419F8D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419E7C:				; CODE XREF: sub_419DD8+3Dj
		sub	eax, 0Fh
		jz	short loc_419ED5
		sub	eax, 9
		jz	short loc_419EC9
		sub	eax, 1
		jnz	loc_419FC8
		mov	[ebp+var_1C], offset dword_422554

loc_419E96:				; CODE XREF: sub_419DD8+104j
		mov	eax, [ebp+arg_0]
		mov	ecx, edi
		mov	esi, [ebp+arg_8]
		mov	[ebp+var_20], 4
		fld	qword ptr [eax]
		mov	eax, [ebp+arg_4]
		fstp	[ebp+var_18]
		fld	qword ptr [eax]
		lea	eax, [ebp+var_20]
		fstp	[ebp+var_10]
		fld	qword ptr [esi]
		push	eax
		fstp	[ebp+var_8]
		call	ds:off_41D12C
		call	edi ; sub_40C821
		pop	ecx
		jmp	loc_419FC3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419EC9:				; CODE XREF: sub_419DD8+ACj
		mov	[ebp+var_20], 3
		jmp	loc_419F86
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419ED5:				; CODE XREF: sub_419DD8+A7j
		mov	[ebp+var_1C], offset dword_422550
		jmp	short loc_419E96
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419EDE:				; CODE XREF: sub_419DD8+34j
		fld1

loc_419EE0:				; CODE XREF: sub_419DD8+144j
		mov	eax, [ebp+arg_8]
		fstp	qword ptr [eax]
		jmp	loc_419FC8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419EEA:				; CODE XREF: sub_419DD8+2Ej
		sub	eax, 1Bh
		jz	loc_419F7F
		sub	eax, 1
		jz	short loc_419F39
		sub	eax, 15h
		jz	short loc_419F30
		sub	eax, 9
		jz	short loc_419F27
		sub	eax, 3
		jz	short loc_419F1E
		sub	eax, 3ABh
		jz	short loc_419F17
		sub	eax, 1
		jnz	loc_419FC8

loc_419F17:				; CODE XREF: sub_419DD8+134j
		mov	eax, [ebp+arg_0]
		fld	qword ptr [eax]
		jmp	short loc_419EE0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419F1E:				; CODE XREF: sub_419DD8+12Dj
		mov	[ebp+var_1C], offset aAsin ; "asin"
		jmp	short loc_419F40
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419F27:				; CODE XREF: sub_419DD8+128j
		mov	[ebp+var_1C], offset aAcos ; "acos"
		jmp	short loc_419F40
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419F30:				; CODE XREF: sub_419DD8+123j
		mov	[ebp+var_1C], offset aSqrt ; "sqrt"
		jmp	short loc_419F40
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419F39:				; CODE XREF: sub_419DD8+11Ej
		mov	[ebp+var_1C], offset dword_422554

loc_419F40:				; CODE XREF: sub_419DD8+62j
					; sub_419DD8+7Dj ...
		mov	eax, [ebp+arg_0]
		mov	ecx, edi
		mov	esi, [ebp+arg_8]
		mov	[ebp+var_20], 1
		fld	qword ptr [eax]
		mov	eax, [ebp+arg_4]
		fstp	[ebp+var_18]
		fld	qword ptr [eax]
		lea	eax, [ebp+var_20]
		fstp	[ebp+var_10]
		fld	qword ptr [esi]
		push	eax
		fstp	[ebp+var_8]
		call	ds:off_41D12C
		call	edi ; sub_40C821
		pop	ecx
		test	eax, eax
		jnz	short loc_419FC3
		call	sub_40BD71
		mov	dword ptr [eax], 21h
		jmp	short loc_419FC3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_419F7F:				; CODE XREF: sub_419DD8+115j
		mov	[ebp+var_20], 2

loc_419F86:				; CODE XREF: sub_419DD8+F8j
		mov	[ebp+var_1C], offset dword_422554

loc_419F8D:				; CODE XREF: sub_419DD8+71j
					; sub_419DD8+8Cj ...
		mov	eax, [ebp+arg_0]
		mov	ecx, edi
		mov	esi, [ebp+arg_8]
		fld	qword ptr [eax]
		mov	eax, [ebp+arg_4]
		fstp	[ebp+var_18]
		fld	qword ptr [eax]
		lea	eax, [ebp+var_20]
		fstp	[ebp+var_10]
		fld	qword ptr [esi]
		push	eax
		fstp	[ebp+var_8]
		call	ds:off_41D12C
		call	edi ; sub_40C821
		pop	ecx
		test	eax, eax
		jnz	short loc_419FC3
		call	sub_40BD71
		mov	dword ptr [eax], 22h

loc_419FC3:				; CODE XREF: sub_419DD8+ECj
					; sub_419DD8+198j ...
		fld	[ebp+var_8]
		fstp	qword ptr [esi]

loc_419FC8:				; CODE XREF: sub_419DD8+55j
					; sub_419DD8+B1j ...
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_419DD8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_419FCE	proc near		; CODE XREF: sub_414E97+24p

var_84		= dword	ptr -84h
Arguments	= dword	ptr -80h
var_50		= qword	ptr -50h
var_40		= dword	ptr -40h
var_4		= dword	ptr -4

		mov	edi, edi
		push	ebx
		mov	ebx, esp
		push	ecx
		push	ecx
		and	esp, 0FFFFFFF0h
		add	esp, 4
		push	ebp
		mov	ebp, [ebx+4]
		mov	[esp+8+var_4], ebp
		mov	ebp, esp
		sub	esp, 88h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebx+10h]
		push	esi
		mov	esi, [ebx+0Ch]
		push	edi
		movzx	ecx, word ptr [eax]
		mov	[ebp+var_84], ecx
		mov	eax, [esi]
		sub	eax, 1
		jz	short loc_41A036
		sub	eax, 1
		jz	short loc_41A032
		sub	eax, 1
		jz	short loc_41A02E
		sub	eax, 1
		jz	short loc_41A02A
		sub	eax, 1
		jz	short loc_41A036
		sub	eax, 3
		jnz	short loc_41A092
		push	10h
		jmp	short loc_41A038
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A02A:				; CODE XREF: sub_419FCE+4Cj
		push	12h
		jmp	short loc_41A038
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A02E:				; CODE XREF: sub_419FCE+47j
		push	11h
		jmp	short loc_41A038
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A032:				; CODE XREF: sub_419FCE+42j
		push	4
		jmp	short loc_41A038
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A036:				; CODE XREF: sub_419FCE+3Dj
					; sub_419FCE+51j
		push	8

loc_41A038:				; CODE XREF: sub_419FCE+5Aj
					; sub_419FCE+5Ej ...
		pop	edi
		push	ecx
		lea	eax, [esi+18h]
		push	eax
		push	edi
		call	sub_41346E
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_41A092
		mov	ecx, [ebx+8]
		cmp	ecx, 10h
		jz	short loc_41A063
		cmp	ecx, 16h
		jz	short loc_41A063
		cmp	ecx, 1Dh
		jz	short loc_41A063
		and	[ebp+var_40], 0FFFFFFFEh
		jmp	short loc_41A075
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A063:				; CODE XREF: sub_419FCE+83j
					; sub_419FCE+88j ...
		mov	eax, [ebp+var_40]
		fld	qword ptr [esi+10h]
		and	eax, 0FFFFFFE3h
		or	eax, 3
		fstp	[ebp+var_50]
		mov	[ebp+var_40], eax

loc_41A075:				; CODE XREF: sub_419FCE+93j
		lea	eax, [esi+18h]
		push	eax		; int
		lea	eax, [esi+8]
		push	eax		; int
		push	ecx		; int
		push	edi		; int
		lea	eax, [ebp+var_84]
		push	eax		; int
		lea	eax, [ebp+Arguments]
		push	eax		; Arguments
		call	sub_41365B
		add	esp, 18h

loc_41A092:				; CODE XREF: sub_419FCE+56j
					; sub_419FCE+7Bj
		push	0FFFFh
		push	[ebp+var_84]
		call	sub_413C39
		cmp	dword ptr [esi], 8
		pop	ecx
		pop	ecx
		jz	short loc_41A0BD
		call	sub_40C7FA
		test	al, al
		jz	short loc_41A0BD
		push	esi
		call	sub_40C821
		pop	ecx
		test	eax, eax
		jnz	short loc_41A0C5

loc_41A0BD:				; CODE XREF: sub_419FCE+D9j
					; sub_419FCE+E2j
		push	dword ptr [esi]
		call	sub_413974
		pop	ecx

loc_41A0C5:				; CODE XREF: sub_419FCE+EDj
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		mov	esp, ebx
		pop	ebx
		retn
sub_419FCE	endp ; sp =  4


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41A0D8	proc near		; CODE XREF: sub_41506C+22p
					; sub_41506C+45p ...

var_8		= qword	ptr -8
arg_0		= qword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		fld	[ebp+arg_0]
		frndint
		fstp	[ebp+var_8]
		fld	[ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn
sub_41A0D8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_41A0EE(const WCHAR SrcStr,int)
sub_41A0EE	proc near		; CODE XREF: sub_4156B3+91p
					; sub_4156B3+A4p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
DestStr		= word ptr -4
SrcStr		= word ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, 0FFFFh
		sub	esp, 18h
		cmp	[ebp+SrcStr], ax
		jz	loc_41A1B3
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_18]
		call	sub_40A217
		mov	eax, [ebp+var_14]
		mov	eax, [eax+0A8h]
		test	eax, eax
		jnz	short loc_41A13E
		mov	ecx, dword ptr [ebp+SrcStr]
		lea	eax, [ecx-41h]
		cmp	ax, 19h
		ja	short loc_41A136
		add	cx, 20h
		movzx	eax, cx
		mov	[ebp+var_8], eax
		mov	cx, ax

loc_41A136:				; CODE XREF: sub_41A0EE+39j
		movzx	eax, cx
		mov	[ebp+var_8], eax
		jmp	short loc_41A15D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A13E:				; CODE XREF: sub_41A0EE+2Dj
		mov	edx, 100h
		push	1
		cmp	[ebp+SrcStr], dx
		jnb	short loc_41A17B
		push	dword ptr [ebp+SrcStr]
		call	sub_413301
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_41A162
		mov	ax, [ebp+SrcStr]

loc_41A15D:				; CODE XREF: sub_41A0EE+4Ej
		movzx	eax, ax
		jmp	short loc_41A173
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A162:				; CODE XREF: sub_41A0EE+69j
		mov	eax, [ebp+var_14]
		movzx	ecx, [ebp+SrcStr]
		mov	eax, [eax+94h]
		movzx	eax, byte ptr [eax+ecx]

loc_41A173:				; CODE XREF: sub_41A0EE+72j
		movzx	eax, ax
		mov	[ebp+var_8], eax
		jmp	short loc_41A197 ; cchDest
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A17B:				; CODE XREF: sub_41A0EE+5Bj
		lea	ecx, [ebp+DestStr]
		push	ecx		; lpDestStr
		push	1		; int
		lea	ecx, [ebp+SrcStr]
		push	ecx		; lpSrcStr
		push	edx		; dwMapFlags
		push	eax		; int
		call	sub_41B13D
		add	esp, 18h
		test	eax, eax
		jnz	short loc_41A19F
		mov	ax, [ebp+SrcStr]

loc_41A197:				; CODE XREF: sub_41A0EE+8Bj
		movzx	eax, ax
		mov	[ebp+var_8], eax
		jmp	short loc_41A1A3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A19F:				; CODE XREF: sub_41A0EE+A3j
		mov	ax, [ebp+DestStr]

loc_41A1A3:				; CODE XREF: sub_41A0EE+AFj
		cmp	[ebp+var_C], 0
		jz	short loc_41A1B3
		mov	ecx, [ebp+var_18]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_41A1B3:				; CODE XREF: sub_41A0EE+11j
					; sub_41A0EE+B9j
		mov	esp, ebp
		pop	ebp
		retn
sub_41A0EE	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41A1C0	proc near		; CODE XREF: sub_41A200+1A0p
					; sub_41A200+1D2p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	edi, eax
		jz	short loc_41A1F6
		push	esi
		mov	esi, [ebp+arg_8]
		test	esi, esi
		jz	short loc_41A1F5
		sub	edi, eax
		lea	ebx, [ebx+0]

loc_41A1E0:				; CODE XREF: sub_41A1C0+33j
		mov	cl, [eax]
		lea	eax, [eax+1]
		mov	dl, [edi+eax-1]
		mov	[edi+eax-1], cl
		mov	[eax-1], dl
		sub	esi, 1
		jnz	short loc_41A1E0

loc_41A1F5:				; CODE XREF: sub_41A1C0+16j
		pop	esi

loc_41A1F6:				; CODE XREF: sub_41A1C0+Ej
		pop	edi
		pop	ebp
		retn
sub_41A1C0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41A200	proc near		; CODE XREF: sub_415CCD+204p

var_128		= dword	ptr -128h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_7C		= dword	ptr -7Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 11Ch
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		push	ebx
		mov	ebx, [ebp+arg_C]
		push	esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_104], esi
		mov	[ebp+var_108], ebx
		push	edi
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_100], edi
		test	esi, esi
		jnz	short loc_41A25F
		test	ecx, ecx
		jz	short loc_41A25F

loc_41A23E:				; CODE XREF: sub_41A200+61j
					; sub_41A200+65j
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35

loc_41A24E:				; CODE XREF: sub_41A200+74j
					; sub_41A200+156j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A25F:				; CODE XREF: sub_41A200+38j
					; sub_41A200+3Cj
		test	edi, edi
		jz	short loc_41A23E
		test	ebx, ebx
		jz	short loc_41A23E
		mov	[ebp+var_10C], 0
		cmp	ecx, 2
		jb	short loc_41A24E
		dec	ecx
		imul	ecx, edi
		add	ecx, esi

loc_41A27C:				; CODE XREF: sub_41A200+16Dj
					; sub_41A200+43Fj
		mov	[ebp+var_FC], ecx

loc_41A282:				; CODE XREF: sub_41A200+402j
		mov	eax, ecx
		xor	edx, edx
		sub	eax, esi
		div	edi
		lea	edi, [eax+1]
		cmp	edi, 8
		ja	loc_41A372
		mov	edi, [ebp+var_100]
		cmp	ecx, esi
		jbe	loc_41A345
		lea	edx, [edi+esi]
		mov	[ebp+var_114], edx
		lea	ecx, [ecx+0]

loc_41A2B0:				; CODE XREF: sub_41A200+13Fj
		mov	eax, esi
		mov	esi, edx
		mov	[ebp+var_F8], eax
		cmp	esi, ecx
		ja	short loc_41A2EF
		mov	edi, edi

loc_41A2C0:				; CODE XREF: sub_41A200+EDj
		push	eax
		push	esi
		mov	ecx, ebx
		call	ds:off_41D12C
		call	ebx
		add	esp, 8
		test	eax, eax
		jle	short loc_41A2DD
		mov	eax, esi
		mov	[ebp+var_F8], eax
		jmp	short loc_41A2E3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A2DD:				; CODE XREF: sub_41A200+D1j
		mov	eax, [ebp+var_F8]

loc_41A2E3:				; CODE XREF: sub_41A200+DBj
		mov	ecx, [ebp+var_FC]
		add	esi, edi
		cmp	esi, ecx
		jbe	short loc_41A2C0

loc_41A2EF:				; CODE XREF: sub_41A200+BCj
		mov	edx, ecx
		cmp	eax, ecx
		jz	short loc_41A329
		sub	eax, ecx
		mov	ebx, edi
		mov	[ebp+var_F8], eax
		nop

loc_41A300:				; CODE XREF: sub_41A200+11Bj
		mov	cl, [eax+edx]
		lea	edx, [edx+1]
		mov	esi, [ebp+var_F8]
		mov	al, [edx-1]
		mov	[esi+edx-1], al
		mov	eax, esi
		mov	[edx-1], cl
		sub	ebx, 1
		jnz	short loc_41A300
		mov	ebx, [ebp+var_108]
		mov	ecx, [ebp+var_FC]

loc_41A329:				; CODE XREF: sub_41A200+F3j
		mov	esi, [ebp+var_104]
		sub	ecx, edi
		mov	edx, [ebp+var_114]
		mov	[ebp+var_FC], ecx
		cmp	ecx, esi
		ja	loc_41A2B0

loc_41A345:				; CODE XREF: sub_41A200+9Ej
					; sub_41A200+3F6j ...
		mov	ecx, [ebp+var_10C]
		mov	eax, ecx
		dec	ecx
		mov	[ebp+var_10C], ecx
		test	eax, eax
		jle	loc_41A24E
		mov	esi, [ebp+ecx*4+var_7C]
		mov	ecx, [ebp+ecx*4+var_F4]
		mov	[ebp+var_104], esi
		jmp	loc_41A27C
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A372:				; CODE XREF: sub_41A200+90j
		mov	esi, [ebp+var_100]
		mov	ecx, ebx
		mov	eax, [ebp+var_104]
		shr	edi, 1
		imul	edi, esi
		add	edi, eax
		push	edi
		push	eax
		call	ds:off_41D12C
		call	ebx
		add	esp, 8
		test	eax, eax
		jle	short loc_41A3A8
		push	esi
		push	edi
		push	[ebp+var_104]
		call	sub_41A1C0
		add	esp, 0Ch

loc_41A3A8:				; CODE XREF: sub_41A200+196j
		push	[ebp+var_FC]
		mov	ecx, ebx
		push	[ebp+var_104]
		call	ds:off_41D12C
		call	ebx
		add	esp, 8
		test	eax, eax
		jle	short loc_41A3DA
		push	esi
		push	[ebp+var_FC]
		push	[ebp+var_104]
		call	sub_41A1C0
		add	esp, 0Ch

loc_41A3DA:				; CODE XREF: sub_41A200+1C3j
		push	[ebp+var_FC]
		mov	ecx, ebx
		push	edi
		call	ds:off_41D12C
		call	ebx
		add	esp, 8
		test	eax, eax
		jle	short loc_41A402
		push	esi
		push	[ebp+var_FC]
		push	edi
		call	sub_41A1C0
		add	esp, 0Ch

loc_41A402:				; CODE XREF: sub_41A200+1F0j
		mov	eax, [ebp+var_FC]
		mov	ebx, eax
		mov	esi, [ebp+var_104]
		mov	edx, [ebp+var_100]
		mov	[ebp+var_F8], eax
		lea	esp, [esp+0]

loc_41A420:				; CODE XREF: sub_41A200+32Fj
					; sub_41A200+337j
		cmp	edi, esi
		jbe	short loc_41A45B

loc_41A424:				; CODE XREF: sub_41A200+24Fj
		add	esi, edx
		mov	[ebp+var_110], esi
		cmp	esi, edi
		jnb	short loc_41A455
		mov	ecx, [ebp+var_108]
		push	edi
		push	esi
		call	ds:off_41D12C
		call	[ebp+var_108]
		mov	edx, [ebp+var_100]
		add	esp, 8
		test	eax, eax
		jle	short loc_41A424
		cmp	edi, esi
		ja	short loc_41A492

loc_41A455:				; CODE XREF: sub_41A200+22Ej
		mov	eax, [ebp+var_FC]

loc_41A45B:				; CODE XREF: sub_41A200+222j
		mov	ebx, [ebp+var_108]

loc_41A461:				; CODE XREF: sub_41A200+284j
		add	esi, edx
		cmp	esi, eax
		ja	short loc_41A486
		push	edi
		push	esi
		mov	ecx, ebx
		call	ds:off_41D12C
		call	ebx
		mov	edx, [ebp+var_100]
		add	esp, 8
		test	eax, eax
		mov	eax, [ebp+var_FC]
		jle	short loc_41A461

loc_41A486:				; CODE XREF: sub_41A200+265j
		mov	ebx, [ebp+var_F8]
		mov	[ebp+var_110], esi

loc_41A492:				; CODE XREF: sub_41A200+253j
		mov	esi, [ebp+var_108]
		jmp	short loc_41A4A0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_41A4A0:				; CODE XREF: sub_41A200+298j
					; sub_41A200+2C5j
		mov	edx, [ebp+var_100]
		mov	eax, ebx
		sub	ebx, edx
		mov	[ebp+var_F8], eax
		cmp	ebx, edi
		jbe	short loc_41A4D3
		push	edi
		push	ebx
		mov	ecx, esi
		call	ds:off_41D12C
		call	esi
		add	esp, 8
		test	eax, eax
		jg	short loc_41A4A0
		mov	edx, [ebp+var_100]
		mov	eax, [ebp+var_F8]

loc_41A4D3:				; CODE XREF: sub_41A200+2B2j
		mov	esi, [ebp+var_110]
		mov	[ebp+var_F8], ebx
		cmp	ebx, esi
		jb	short loc_41A53C
		mov	[ebp+var_11C], edx
		mov	[ebp+var_118], ebx
		cmp	esi, ebx
		jz	short loc_41A527
		sub	esi, ebx
		mov	edx, ebx
		mov	ebx, [ebp+var_11C]
		lea	ecx, [ecx+0]

loc_41A500:				; CODE XREF: sub_41A200+313j
		mov	al, [edx]
		lea	edx, [edx+1]
		mov	cl, [esi+edx-1]
		mov	[esi+edx-1], al
		mov	[edx-1], cl
		sub	ebx, 1
		jnz	short loc_41A500
		mov	esi, [ebp+var_110]
		mov	ebx, [ebp+var_F8]
		mov	edx, [ebp+var_100]

loc_41A527:				; CODE XREF: sub_41A200+2F1j
		mov	eax, [ebp+var_FC]
		cmp	edi, ebx
		jnz	loc_41A420
		mov	edi, esi
		jmp	loc_41A420
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A53C:				; CODE XREF: sub_41A200+2E1j
		cmp	edi, eax
		jnb	short loc_41A575
		mov	ebx, [ebp+var_108]

loc_41A546:				; CODE XREF: sub_41A200+36Fj
		sub	eax, edx
		mov	[ebp+var_F8], eax
		cmp	eax, edi
		jbe	short loc_41A575
		push	edi
		push	eax
		mov	ecx, ebx
		call	ds:off_41D12C
		call	ebx
		mov	edx, [ebp+var_100]
		add	esp, 8
		test	eax, eax
		mov	eax, [ebp+var_F8]
		jz	short loc_41A546
		cmp	edi, eax
		jb	short loc_41A5B0

loc_41A575:				; CODE XREF: sub_41A200+33Ej
					; sub_41A200+350j
		mov	ebx, [ebp+var_108]
		mov	esi, [ebp+var_100]

loc_41A581:				; CODE XREF: sub_41A200+3A8j
		sub	eax, esi
		mov	[ebp+var_F8], eax
		cmp	eax, [ebp+var_104]
		jbe	short loc_41A5AA
		push	edi
		push	eax
		mov	ecx, ebx
		call	ds:off_41D12C
		call	ebx
		add	esp, 8
		test	eax, eax
		mov	eax, [ebp+var_F8]
		jz	short loc_41A581

loc_41A5AA:				; CODE XREF: sub_41A200+38Fj
		mov	esi, [ebp+var_110]

loc_41A5B0:				; CODE XREF: sub_41A200+373j
		mov	edx, [ebp+var_FC]
		mov	ecx, edx
		mov	edi, [ebp+var_104]
		sub	ecx, esi
		sub	eax, edi
		cmp	eax, ecx
		jl	short loc_41A607
		mov	eax, [ebp+var_F8]
		cmp	edi, eax
		jnb	short loc_41A5E8
		mov	ecx, [ebp+var_10C]
		mov	[ebp+ecx*4+var_7C], edi
		mov	[ebp+ecx*4+var_F4], eax
		inc	ecx
		mov	[ebp+var_10C], ecx

loc_41A5E8:				; CODE XREF: sub_41A200+3CEj
		mov	ecx, [ebp+var_FC]
		mov	edi, [ebp+var_100]
		cmp	esi, ecx
		jnb	loc_41A345
		mov	[ebp+var_104], esi
		jmp	loc_41A282
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A607:				; CODE XREF: sub_41A200+3C4j
		cmp	esi, edx
		jnb	short loc_41A623
		mov	eax, [ebp+var_10C]
		mov	[ebp+eax*4+var_7C], esi
		mov	[ebp+eax*4+var_F4], edx
		inc	eax
		mov	[ebp+var_10C], eax

loc_41A623:				; CODE XREF: sub_41A200+409j
		mov	eax, [ebp+var_F8]
		mov	esi, [ebp+var_104]
		mov	edi, [ebp+var_100]
		cmp	esi, eax
		jnb	loc_41A345
		mov	ecx, eax
		jmp	loc_41A27C
sub_41A200	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41A650	proc near		; CODE XREF: sub_41602A-5B3p

var_24		= dword	ptr -24h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		mov	edx, [ebp+arg_4]
		lea	ecx, [ecx+0]

loc_41A664:				; CODE XREF: sub_41A650+21j
		mov	al, [edx]
		or	al, al
		jz	short loc_41A673
		add	edx, 1
		bts	[esp+24h+var_24], eax
		jmp	short loc_41A664
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A673:				; CODE XREF: sub_41A650+18j
		mov	esi, [ebp+arg_0]
		mov	edi, edi

loc_41A678:				; CODE XREF: sub_41A650+35j
		mov	al, [esi]
		or	al, al
		jz	short loc_41A68A
		add	esi, 1
		bt	[esp+24h+var_24], eax
		jnb	short loc_41A678
		lea	eax, [esi-1]

loc_41A68A:				; CODE XREF: sub_41A650+2Cj
		add	esp, 20h
		pop	esi
		leave
		retn
sub_41A650	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41A690	proc near		; CODE XREF: sub_415CCD+3Ap

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	0
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_41A6A7
		add	esp, 0Ch
		pop	ebp
		retn
sub_41A690	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41A6A7	proc near		; CODE XREF: sub_41A690+Dp

var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		cmp	[ebp+arg_0], 0
		jnz	short loc_41A6C9
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		xor	eax, eax
		jmp	short loc_41A732
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A6C9:				; CODE XREF: sub_41A6A7+Cj
		push	esi
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jnz	short loc_41A6E3
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		jmp	short loc_41A6E8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A6E3:				; CODE XREF: sub_41A6A7+28j
		cmp	[ebp+arg_0], esi
		jb	short loc_41A6EC

loc_41A6E8:				; CODE XREF: sub_41A6A7+3Aj
		xor	eax, eax
		jmp	short loc_41A731
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A6EC:				; CODE XREF: sub_41A6A7+3Fj
		push	[ebp+arg_8]
		lea	ecx, [ebp+var_10]
		call	sub_40A217
		mov	ecx, [ebp+var_8]
		lea	edx, [esi-1]
		cmp	dword ptr [ecx+8], 0
		jz	short loc_41A71F

loc_41A703:				; CODE XREF: sub_41A6A7+6Aj
		dec	edx
		cmp	[ebp+arg_0], edx
		ja	short loc_41A713
		movzx	eax, byte ptr [edx]
		test	byte ptr [eax+ecx+19h],	4
		jnz	short loc_41A703

loc_41A713:				; CODE XREF: sub_41A6A7+60j
		mov	eax, esi
		sub	eax, edx
		mov	edx, esi
		and	eax, 1
		sub	edx, eax
		dec	edx

loc_41A71F:				; CODE XREF: sub_41A6A7+5Aj
		cmp	[ebp+var_4], 0
		jz	short loc_41A72F
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_41A72F:				; CODE XREF: sub_41A6A7+7Cj
		mov	eax, edx

loc_41A731:				; CODE XREF: sub_41A6A7+43j
		pop	esi

loc_41A732:				; CODE XREF: sub_41A6A7+20j
		mov	esp, ebp
		pop	ebp
		retn
sub_41A6A7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41A736	proc near		; DATA XREF: .rdata:0041D17Co
		call	sub_4166AF
		xor	ecx, ecx
		test	al, al
		setz	cl
		mov	eax, ecx
		retn
sub_41A736	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41A745	proc near		; CODE XREF: sub_416D39+1Ep

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

; FUNCTION CHUNK AT 0041B17B SIZE 0000006D BYTES

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	dword_42D84C, 0
		jnz	short loc_41A759
		pop	ebp
		jmp	loc_41B17B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A759:				; CODE XREF: sub_41A745+Cj
		push	0
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_41A76E
		add	esp, 10h
		pop	ebp
		retn
sub_41A745	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41A76E	proc near		; CODE XREF: sub_41A745+1Fp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		lea	ecx, [ebp+var_10]
		push	ebx
		push	esi
		push	edi
		push	[ebp+arg_C]
		call	sub_40A217
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jnz	short loc_41A792
		xor	esi, esi
		jmp	loc_41A81F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A792:				; CODE XREF: sub_41A76E+1Bj
		mov	ecx, [ebp+arg_0]
		test	ecx, ecx
		jz	short loc_41A7A0
		mov	edx, [ebp+arg_4]
		test	edx, edx
		jnz	short loc_41A7B7

loc_41A7A0:				; CODE XREF: sub_41A76E+29j
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		mov	esi, 7FFFFFFFh
		jmp	short loc_41A81F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A7B7:				; CODE XREF: sub_41A76E+30j
		mov	esi, 7FFFFFFFh
		cmp	eax, esi
		jbe	short loc_41A7D2
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		jmp	short loc_41A81F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A7D2:				; CODE XREF: sub_41A76E+50j
		mov	edi, [ebp+var_C]
		mov	ebx, [edi+0A4h]
		test	ebx, ebx
		jnz	short loc_41A7F2
		lea	esi, [ebp+var_C]
		push	esi
		push	eax
		push	edx
		push	ecx
		call	sub_41B1E8
		add	esp, 10h
		mov	esi, eax
		jmp	short loc_41A81F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A7F2:				; CODE XREF: sub_41A76E+6Fj
		push	dword ptr [edi+10h] ; CodePage
		push	eax		; int
		push	edx		; int
		push	eax		; int
		push	ecx		; int
		push	1001h		; dwCmpFlags
		lea	eax, [ebp+var_C]
		push	ebx		; int
		push	eax		; int
		call	sub_41B52C
		add	esp, 20h
		test	eax, eax
		jnz	short loc_41A81C
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		jmp	short loc_41A81F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A81C:				; CODE XREF: sub_41A76E+9Fj
		lea	esi, [eax-2]

loc_41A81F:				; CODE XREF: sub_41A76E+1Fj
					; sub_41A76E+47j ...
		cmp	[ebp+var_4], 0
		jz	short loc_41A82F
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_41A82F:				; CODE XREF: sub_41A76E+B5j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_41A76E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41A838	proc near		; CODE XREF: sub_416D8E-16Cp

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
lpMem		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
lpValue		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 30h
		push	ebx
		xor	ebx, ebx
		push	esi
		mov	esi, ebx
		mov	[ebp+var_30], ebx
		mov	[ebp+var_2C], ebx
		mov	[ebp+lpMem], ebx
		mov	[ebp+var_24], ebx
		mov	[ebp+var_20], ebx
		mov	[ebp+var_1C], bl
		mov	[ebp+var_18], ebx
		mov	[ebp+var_14], ebx
		mov	[ebp+lpValue], esi
		mov	[ebp+var_C], ebx
		mov	[ebp+var_8], ebx
		mov	[ebp+var_4], bl
		call	sub_415F26
		push	eax		; CodePage
		lea	eax, [ebp+var_30]
		push	eax		; int
		push	[ebp+arg_0]	; int
		call	sub_40C17B
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_41A8AB
		call	sub_415F26
		push	eax		; CodePage
		lea	eax, [ebp+var_18]
		push	eax		; int
		push	[ebp+arg_4]	; int
		call	sub_40C17B
		mov	esi, [ebp+lpValue]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_41A8AB
		push	esi		; lpValue
		push	[ebp+lpMem]	; lpName
		call	ds:SetEnvironmentVariableW
		mov	ebx, eax

loc_41A8AB:				; CODE XREF: sub_41A838+49j
					; sub_41A838+65j
		cmp	[ebp+var_4], 0
		jz	short loc_41A8B8
		push	esi		; lpMem
		call	sub_40F0A8
		pop	ecx

loc_41A8B8:				; CODE XREF: sub_41A838+77j
		cmp	[ebp+var_1C], 0
		jz	short loc_41A8C7
		push	[ebp+lpMem]	; lpMem
		call	sub_40F0A8
		pop	ecx

loc_41A8C7:				; CODE XREF: sub_41A838+84j
		pop	esi
		mov	eax, ebx
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_41A838	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41A8CF	proc near		; CODE XREF: sub_41A984+66p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	ecx, [ebp+arg_0]
		xor	eax, eax
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		push	edi
		mov	[ebp+var_4], ebx
		mov	[ebp+var_8], eax
		cmp	[ebp+arg_10], al
		jz	short loc_41A900
		push	2Dh
		pop	eax
		mov	[ebx], ax
		lea	eax, [ebx+2]
		mov	[ebp+var_4], eax
		xor	eax, eax
		inc	eax
		neg	ecx
		mov	[ebp+var_8], eax

loc_41A900:				; CODE XREF: sub_41A8CF+1Bj
		mov	ebx, [ebp+var_4]
		mov	esi, [ebp+var_8]
		mov	[ebp+var_4], ebx

loc_41A909:				; CODE XREF: sub_41A8CF+6Dj
		xor	edx, edx
		mov	eax, ecx
		div	[ebp+arg_C]
		push	9
		mov	ecx, eax
		mov	edi, ebx
		lea	eax, [ebx+2]
		mov	[ebp+var_8], eax
		pop	eax
		cmp	eax, edx
		sbb	eax, eax
		and	eax, 27h
		add	eax, 30h
		add	ax, dx
		mov	edx, [ebp+var_8]
		inc	esi
		mov	[ebx], ax
		mov	eax, [ebp+arg_8]
		test	ecx, ecx
		jz	short loc_41A93E
		mov	ebx, edx
		cmp	esi, eax
		jb	short loc_41A909

loc_41A93E:				; CODE XREF: sub_41A8CF+67j
		mov	ebx, [ebp+arg_4]
		cmp	esi, eax
		mov	esi, [ebp+var_4]
		jb	short loc_41A960
		xor	eax, eax
		mov	[ebx], ax
		call	sub_40BD71
		push	22h
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		mov	eax, esi
		jmp	short loc_41A97D
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A960:				; CODE XREF: sub_41A8CF+77j
		xor	eax, eax
		mov	[edx], ax

loc_41A965:				; CODE XREF: sub_41A8CF+AAj
		mov	ax, [esi]
		movzx	ecx, word ptr [edi]
		mov	[edi], ax
		sub	edi, 2
		mov	[esi], cx
		add	esi, 2
		cmp	esi, edi
		jb	short loc_41A965
		xor	eax, eax

loc_41A97D:				; CODE XREF: sub_41A8CF+8Fj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_41A8CF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41A984	proc near		; CODE XREF: sub_41A9F6+29p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_4]
		push	esi
		test	ecx, ecx
		jnz	short loc_41A9A4
		call	sub_40BD71
		push	16h
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		mov	eax, esi
		jmp	short loc_41A9F3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A9A4:				; CODE XREF: sub_41A984+Bj
		mov	edx, [ebp+arg_8]
		push	ebx
		test	edx, edx
		jz	short loc_41A9D0
		mov	ebx, [ebp+arg_10]
		xor	eax, eax
		mov	[ecx], ax
		movzx	eax, bl
		inc	eax
		cmp	edx, eax
		ja	short loc_41A9C5
		call	sub_40BD71
		push	22h
		jmp	short loc_41A9D7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A9C5:				; CODE XREF: sub_41A984+36j
		mov	esi, [ebp+arg_C]
		lea	eax, [esi-2]
		cmp	eax, 22h
		jbe	short loc_41A9E3

loc_41A9D0:				; CODE XREF: sub_41A984+26j
		call	sub_40BD71
		push	16h

loc_41A9D7:				; CODE XREF: sub_41A984+3Fj
		pop	esi
		mov	[eax], esi
		call	sub_409E35
		mov	eax, esi
		jmp	short loc_41A9F2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41A9E3:				; CODE XREF: sub_41A984+4Aj
		push	ebx
		push	esi
		push	edx
		push	ecx
		push	[ebp+arg_0]
		call	sub_41A8CF
		add	esp, 14h

loc_41A9F2:				; CODE XREF: sub_41A984+5Dj
		pop	ebx

loc_41A9F3:				; CODE XREF: sub_41A984+1Ej
		pop	esi
		pop	ebp
		retn
sub_41A984	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41A9F6	proc near		; CODE XREF: sub_4186DE+1DAp
					; sub_41904D+1E7p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		cmp	[ebp+arg_C], 0Ah
		jnz	short loc_41AA0C
		cmp	[ebp+arg_0], 0
		mov	byte ptr [ebp+var_4], 1
		jl	short loc_41AA10

loc_41AA0C:				; CODE XREF: sub_41A9F6+Aj
		mov	byte ptr [ebp+var_4], 0

loc_41AA10:				; CODE XREF: sub_41A9F6+14j
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_41A984
		add	esp, 14h
		mov	esp, ebp
		pop	ebp
		retn
sub_41A9F6	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41AA2B	proc near		; CODE XREF: sub_418185+EEp
					; sub_418AF5+E8p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		cmp	dword_42D84C, 0
		push	edi
		jnz	loc_41AAC4
		mov	edi, [ebp+arg_8]
		xor	eax, eax
		test	edi, edi
		jz	loc_41AAD7
		mov	edx, [ebp+arg_0]
		test	edx, edx
		jnz	short loc_41AA6A

loc_41AA53:				; CODE XREF: sub_41AA2B+44j
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		mov	eax, 7FFFFFFFh
		jmp	short loc_41AAD7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AA6A:				; CODE XREF: sub_41AA2B+26j
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	short loc_41AA53
		push	ebx
		push	esi
		push	19h
		pop	ebx
		sub	edx, ecx
		mov	[ebp+var_4], ebx

loc_41AA7B:				; CODE XREF: sub_41AA2B+8Bj
		movzx	esi, word ptr [edx+ecx]
		lea	eax, [esi-41h]
		cmp	ax, bx
		ja	short loc_41AA8D
		lea	eax, [esi+20h]
		movzx	esi, ax

loc_41AA8D:				; CODE XREF: sub_41AA2B+5Aj
		movzx	ebx, word ptr [ecx]
		lea	eax, [ebx-41h]
		cmp	ax, word ptr [ebp+var_4]
		ja	short loc_41AAA1
		lea	eax, [ebx+20h]
		movzx	eax, ax
		jmp	short loc_41AAA3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AAA1:				; CODE XREF: sub_41AA2B+6Cj
		mov	eax, ebx

loc_41AAA3:				; CODE XREF: sub_41AA2B+74j
		add	ecx, 2
		sub	edi, 1
		jz	short loc_41AAB8
		test	si, si
		jz	short loc_41AAB8
		push	19h
		pop	ebx
		cmp	si, ax
		jz	short loc_41AA7B

loc_41AAB8:				; CODE XREF: sub_41AA2B+7Ej
					; sub_41AA2B+83j
		movzx	ecx, ax
		movzx	eax, si
		pop	esi
		sub	eax, ecx
		pop	ebx
		jmp	short loc_41AAD7
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AAC4:				; CODE XREF: sub_41AA2B+Ej
		push	0
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_41AADC
		add	esp, 10h

loc_41AAD7:				; CODE XREF: sub_41AA2B+1Bj
					; sub_41AA2B+3Dj ...
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
sub_41AA2B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41AADC	proc near		; CODE XREF: sub_41AA2B+A4p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= byte ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		push	esi
		push	edi
		xor	edi, edi
		cmp	[ebp+arg_8], edi
		jz	loc_41ABD0
		mov	ebx, [ebp+arg_0]
		test	ebx, ebx
		jnz	short loc_41AB13

loc_41AAF9:				; CODE XREF: sub_41AADC+3Cj
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		mov	eax, 7FFFFFFFh
		jmp	loc_41ABD2
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AB13:				; CODE XREF: sub_41AADC+1Bj
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jz	short loc_41AAF9
		push	[ebp+arg_C]
		lea	ecx, [ebp+var_14]
		call	sub_40A217
		mov	eax, [ebp+var_10]
		cmp	[eax+0A8h], edi
		jnz	short loc_41AB7F
		mov	ecx, [ebp+arg_8]
		sub	ebx, esi
		mov	[ebp+var_4], 19h

loc_41AB3C:				; CODE XREF: sub_41AADC+9Fj
		movzx	edx, word ptr [ebx+esi]
		push	19h
		pop	edi
		lea	eax, [edx-41h]
		cmp	ax, di
		ja	short loc_41AB53
		lea	eax, [edx+20h]
		movzx	edi, ax
		jmp	short loc_41AB55
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AB53:				; CODE XREF: sub_41AADC+6Dj
		mov	edi, edx

loc_41AB55:				; CODE XREF: sub_41AADC+75j
		movzx	edx, word ptr [esi]
		lea	eax, [edx-41h]
		cmp	ax, word ptr [ebp+var_4]
		ja	short loc_41AB69
		lea	eax, [edx+20h]
		movzx	eax, ax
		jmp	short loc_41AB6B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AB69:				; CODE XREF: sub_41AADC+83j
		mov	eax, edx

loc_41AB6B:				; CODE XREF: sub_41AADC+8Bj
		add	esi, 2
		sub	ecx, 1
		jz	short loc_41ABB8
		test	di, di
		jz	short loc_41ABB8
		cmp	di, ax
		jz	short loc_41AB3C
		jmp	short loc_41ABB8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AB7F:				; CODE XREF: sub_41AADC+52j
					; sub_41AADC+DAj
		lea	eax, [ebp+var_10]
		push	eax		; int
		movzx	eax, word ptr [ebx]
		push	eax		; SrcStr
		call	sub_41A0EE
		movzx	edi, ax
		lea	eax, [ebp+var_10]
		push	eax		; int
		movzx	eax, word ptr [esi]
		push	eax		; SrcStr
		call	sub_41A0EE
		add	esp, 10h
		movzx	eax, ax
		sub	[ebp+arg_8], 1
		lea	ebx, [ebx+2]
		lea	esi, [esi+2]
		jz	short loc_41ABB8
		test	di, di
		jz	short loc_41ABB8
		cmp	di, ax
		jz	short loc_41AB7F

loc_41ABB8:				; CODE XREF: sub_41AADC+95j
					; sub_41AADC+9Aj ...
		movzx	eax, ax
		movzx	edi, di
		sub	edi, eax
		cmp	[ebp+var_8], 0
		jz	short loc_41ABD0
		mov	ecx, [ebp+var_14]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_41ABD0:				; CODE XREF: sub_41AADC+10j
					; sub_41AADC+E8j
		mov	eax, edi

loc_41ABD2:				; CODE XREF: sub_41AADC+32j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_41AADC	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_41ABD9(LPCVOID lpMem)
sub_41ABD9	proc near		; CODE XREF: sub_419244+32p

lpMem		= dword	ptr  8

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	[ebp+lpMem], 0
		jnz	short loc_41ABF9
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41ABF9:				; CODE XREF: sub_41ABD9+9j
		push	[ebp+lpMem]	; lpMem
		push	0		; dwFlags
		push	hHeap		; hHeap
		call	ds:HeapSize
		pop	ebp
		retn
sub_41ABD9	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41AC0C	proc near		; CODE XREF: sub_41995F+13p
					; sub_4199A1+35p ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_12		= byte ptr -12h
var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_0]
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, [ebp+arg_C]
		mov	[ebp+var_28], ebx
		push	edi
		mov	edi, ebx
		test	esi, esi
		jnz	short loc_41AC38
		mov	esi, offset dword_42DC5C

loc_41AC38:				; CODE XREF: sub_41AC0C+25j
		xor	edx, edx
		inc	edx
		test	ebx, ebx
		jnz	short loc_41AC48
		mov	ebx, offset dword_425668
		mov	eax, edx
		jmp	short loc_41AC4B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AC48:				; CODE XREF: sub_41AC0C+31j
		mov	eax, [ebp+arg_8]

loc_41AC4B:				; CODE XREF: sub_41AC0C+3Aj
		neg	edi
		mov	[ebp+var_1C], eax
		sbb	edi, edi
		and	edi, ecx
		test	eax, eax
		jnz	short loc_41AC60

loc_41AC58:				; CODE XREF: sub_41AC0C+14Aj
		push	0FFFFFFFEh
		pop	eax
		jmp	loc_41ADAF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AC60:				; CODE XREF: sub_41AC0C+4Aj
		movzx	eax, word ptr [esi+6]
		mov	[ebp+var_24], eax
		test	ax, ax
		jnz	short loc_41ACD0
		mov	cl, [ebx]
		inc	ebx
		mov	[ebp+var_12], cl
		test	cl, cl
		js	short loc_41AC8B
		test	edi, edi
		jz	short loc_41AC7F
		movzx	eax, cl
		mov	[edi], eax

loc_41AC7F:				; CODE XREF: sub_41AC0C+6Cj
		xor	eax, eax
		test	cl, cl
		setnz	al
		jmp	loc_41ADAF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AC8B:				; CODE XREF: sub_41AC0C+68j
		mov	al, cl
		and	al, 0E0h
		cmp	al, 0C0h
		jnz	short loc_41AC97
		mov	al, 2
		jmp	short loc_41ACB1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AC97:				; CODE XREF: sub_41AC0C+85j
		mov	al, cl
		and	al, 0F0h
		cmp	al, 0E0h
		jnz	short loc_41ACA3
		mov	al, 3
		jmp	short loc_41ACB1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41ACA3:				; CODE XREF: sub_41AC0C+91j
		mov	al, cl
		and	al, 0F8h
		cmp	al, 0F0h
		jnz	loc_41ADA8
		mov	al, 4

loc_41ACB1:				; CODE XREF: sub_41AC0C+89j
					; sub_41AC0C+95j
		mov	[ebp+var_11], al
		mov	byte ptr [ebp+var_24], al
		movzx	eax, al
		push	7
		pop	ecx
		sub	ecx, eax
		movzx	eax, [ebp+var_12]
		shl	edx, cl
		mov	cl, [ebp+var_11]
		dec	edx
		and	edx, eax
		mov	eax, [ebp+var_24]
		jmp	short loc_41ACF5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41ACD0:				; CODE XREF: sub_41AC0C+5Ej
		mov	cl, [esi+4]
		mov	edx, [esi]
		mov	al, cl
		sub	al, 2
		cmp	al, 2
		ja	loc_41ADA8
		movzx	eax, word ptr [esi+6]
		cmp	al, 1
		jb	loc_41ADA8
		cmp	al, cl
		jnb	loc_41ADA8

loc_41ACF5:				; CODE XREF: sub_41AC0C+C2j
		movzx	eax, al
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_1C]
		cmp	[ebp+var_20], eax
		jnb	short loc_41AD09
		mov	eax, [ebp+var_20]
		mov	[ebp+var_1C], eax

loc_41AD09:				; CODE XREF: sub_41AC0C+F5j
		mov	eax, [ebp+var_28]
		mov	[ebp+var_18], ebx
		sub	[ebp+var_18], eax
		jmp	short loc_41AD31
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AD14:				; CODE XREF: sub_41AC0C+12Bj
		mov	ah, [ebx]
		inc	ebx
		inc	[ebp+var_18]
		mov	al, ah
		and	al, 0C0h
		cmp	al, 80h
		jnz	loc_41ADA8
		movzx	eax, ah
		and	eax, 3Fh
		shl	edx, 6
		or	edx, eax

loc_41AD31:				; CODE XREF: sub_41AC0C+106j
		mov	eax, [ebp+var_1C]
		cmp	[ebp+var_18], eax
		jb	short loc_41AD14
		mov	ebx, [ebp+var_20]
		cmp	eax, ebx
		jnb	short loc_41AD5B
		movzx	eax, cl
		mov	[esi+4], ax
		mov	eax, [ebp+var_24]
		sub	al, byte ptr [ebp+var_1C]
		movzx	eax, al
		mov	[esi], edx
		mov	[esi+6], ax
		jmp	loc_41AC58
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AD5B:				; CODE XREF: sub_41AC0C+132j
		cmp	edx, 0D800h
		jb	short loc_41AD6B
		cmp	edx, 0DFFFh
		jbe	short loc_41ADA8

loc_41AD6B:				; CODE XREF: sub_41AC0C+155j
		cmp	edx, 10FFFFh
		ja	short loc_41ADA8
		movzx	eax, cl
		mov	[ebp+var_10], 80h
		mov	[ebp+var_C], 800h
		mov	[ebp+var_8], 10000h
		cmp	edx, [ebp+eax*4+var_18]
		jb	short loc_41ADA8
		test	edi, edi
		jz	short loc_41AD97
		mov	[edi], edx

loc_41AD97:				; CODE XREF: sub_41AC0C+187j
		and	dword ptr [esi], 0
		and	dword ptr [esi+4], 0
		neg	edx
		sbb	edx, edx
		and	edx, ebx
		mov	eax, edx
		jmp	short loc_41ADAF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41ADA8:				; CODE XREF: sub_41AC0C+9Dj
					; sub_41AC0C+CFj ...
		push	esi
		call	sub_419DAE
		pop	ecx

loc_41ADAF:				; CODE XREF: sub_41AC0C+4Fj
					; sub_41AC0C+7Aj ...
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_41AC0C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41ADC0	proc near		; CODE XREF: sub_419A9E+51p
					; sub_419A9E+DDp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	edx, [ebp+arg_4]
		push	esi
		mov	esi, [ebp+arg_8]
		movzx	ecx, dx
		push	edi
		test	esi, esi
		jnz	short loc_41ADDB
		mov	esi, offset dword_42DC64

loc_41ADDB:				; CODE XREF: sub_41ADC0+14j
		cmp	dword ptr [esi], 0
		lea	eax, [ecx+2400h]
		movzx	eax, ax
		jnz	short loc_41AE25
		mov	edi, 3FFh
		cmp	ax, di
		ja	short loc_41ADFC

loc_41ADF3:				; CODE XREF: sub_41ADC0+6Dj
		push	esi
		call	sub_419DAE
		pop	ecx
		jmp	short loc_41AE56
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41ADFC:				; CODE XREF: sub_41ADC0+31j
		lea	eax, [edx+2800h]
		cmp	ax, di
		ja	short loc_41AE19
		and	ecx, 0FFFF27FFh
		add	ecx, 40h
		shl	ecx, 0Ah
		xor	eax, eax
		mov	[esi], ecx
		jmp	short loc_41AE56
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AE19:				; CODE XREF: sub_41ADC0+45j
		push	esi
		push	ecx
		push	[ebp+arg_0]
		call	sub_419DCD
		jmp	short loc_41AE53
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AE25:				; CODE XREF: sub_41ADC0+27j
		mov	ecx, 3FFh
		cmp	ax, cx
		ja	short loc_41ADF3
		lea	eax, [ebp+var_8]
		xor	edi, edi
		push	eax
		movzx	eax, dx
		and	eax, 0FFFF23FFh
		mov	[ebp+var_8], edi
		add	eax, [esi]
		push	eax
		push	[ebp+arg_0]
		mov	[ebp+var_4], edi
		call	sub_419DCD
		mov	[esi], edi
		mov	[esi+4], edi

loc_41AE53:				; CODE XREF: sub_41ADC0+63j
		add	esp, 0Ch

loc_41AE56:				; CODE XREF: sub_41ADC0+3Aj
					; sub_41ADC0+57j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_41ADC0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41AE5C	proc near		; CODE XREF: sub_41AE7B+Bp
					; sub_41AEB1+33p
		xor	eax, eax
		push	eax		; hTemplateFile
		push	eax		; dwFlagsAndAttributes
		push	3		; dwCreationDisposition
		push	eax		; lpSecurityAttributes
		push	3		; dwShareMode
		push	40000000h	; dwDesiredAccess
		push	offset FileName	; "CONOUT$"
		call	ds:CreateFileW
		mov	hObject, eax
		retn
sub_41AE5C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41AE7B	proc near		; CODE XREF: sub_419CB2+6p
		mov	ecx, hObject
		cmp	ecx, 0FFFFFFFEh
		jnz	short loc_41AE91
		call	sub_41AE5C
		mov	ecx, hObject

loc_41AE91:				; CODE XREF: sub_41AE7B+9j
		xor	eax, eax
		cmp	ecx, 0FFFFFFFFh
		setnz	al
		retn
sub_41AE7B	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41AE9A	proc near		; CODE XREF: sub_41AEB1+2Ep
					; DATA XREF: .rdata:0041D18Co
		mov	eax, hObject
		cmp	eax, 0FFFFFFFFh
		jz	short locret_41AEB0
		cmp	eax, 0FFFFFFFEh
		jz	short locret_41AEB0
		push	eax		; hObject
		call	ds:CloseHandle

locret_41AEB0:				; CODE XREF: sub_41AE9A+8j
					; sub_41AE9A+Dj
		retn
sub_41AE9A	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_41AEB1(void *lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten)
sub_41AEB1	proc near		; CODE XREF: sub_419CB2+19p

lpBuffer	= dword	ptr  8
nNumberOfCharsToWrite= dword ptr  0Ch
lpNumberOfCharsWritten=	dword ptr  10h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		push	0		; lpReserved
		push	[ebp+lpNumberOfCharsWritten] ; lpNumberOfCharsWritten
		push	[ebp+nNumberOfCharsToWrite] ; nNumberOfCharsToWrite
		push	[ebp+lpBuffer]	; lpBuffer
		push	hObject		; hConsoleOutput
		call	ds:WriteConsoleW
		mov	esi, eax
		test	esi, esi
		jnz	short loc_41AF01
		call	ds:GetLastError
		cmp	eax, 6
		jnz	short loc_41AF01
		call	sub_41AE9A
		call	sub_41AE5C
		push	esi		; lpReserved
		push	[ebp+lpNumberOfCharsWritten] ; lpNumberOfCharsWritten
		push	[ebp+nNumberOfCharsToWrite] ; nNumberOfCharsToWrite
		push	[ebp+lpBuffer]	; lpBuffer
		push	hObject		; hConsoleOutput
		call	ds:WriteConsoleW
		mov	esi, eax

loc_41AF01:				; CODE XREF: sub_41AEB1+21j
					; sub_41AEB1+2Cj
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_41AEB1	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		cmp	dword_42DC90, 0
		jz	short loc_41AF4B
		sub	esp, 8
		stmxcsr	dword ptr [esp+4]
		mov	eax, [esp+4]
		and	eax, 7F80h
		cmp	eax, 1F80h
		jnz	short loc_41AF40
		fnstcw	word ptr [esp]
		mov	ax, [esp]
		and	ax, 7Fh
		cmp	ax, 7Fh

loc_41AF40:				; CODE XREF: .text:0041AF2Fj
		lea	esp, [esp+8]
		jnz	short loc_41AF4B
		jmp	loc_41B580
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AF4B:				; CODE XREF: .text:0041AF17j
					; .text:0041AF44j
		sub	esp, 0Ch
		fst	qword ptr [esp]
		call	sub_414F68
		call	sub_41AF68
		add	esp, 0Ch
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		lea	edx, [esp+4]
		call	sub_414F25

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41AF68	proc near		; CODE XREF: .text:0041AF56p

var_2		= word ptr -2
arg_4		= dword	ptr  0Ah

; FUNCTION CHUNK AT 00414F8B SIZE 0000002A BYTES

		push	edx
		fstcw	word ptr [esp+0]
		jz	short loc_41AFBB
		mov	eax, [esp+0Ch]
		cmp	word ptr [esp+0], 27Fh
		jz	short loc_41AF81
		fldcw	ds:word_4227B8

loc_41AF81:				; CODE XREF: sub_41AF68+11j
		test	eax, 7FF00000h
		jz	short loc_41AFE6
		test	eax, 80000000h
		jnz	short loc_41AFD0

loc_41AF8F:				; CODE XREF: sub_41AF68+51j
		fldlg2
		fxch	st(1)
		fyl2x

loc_41AF95:				; CODE XREF: sub_41AF68+66j
		cmp	dword_42DB64, 0
		jnz	loc_414F7E
		lea	ecx, aLog10_0	; "log10"
		mov	edx, 1Bh
		jmp	loc_414F8B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AFB2:				; CODE XREF: sub_41AF68+83j
					; sub_41AF68+8Aj
		test	eax, 80000000h
		jnz	short loc_41AFD0
		jmp	short loc_41AF8F
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AFBB:				; CODE XREF: sub_41AF68+5j
		test	eax, 0FFFFFh
		jnz	short loc_41AFDF
		cmp	[esp-2+arg_4], 0
		jnz	short loc_41AFDF
		and	eax, 80000000h
		jz	short loc_41AF95

loc_41AFD0:				; CODE XREF: sub_41AF68+25j
					; sub_41AF68+4Fj
		fstp	st
		fld	ds:tbyte_422770
		mov	eax, 1
		jmp	short loc_41B001
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AFDF:				; CODE XREF: sub_41AF68+58j
					; sub_41AF68+5Fj
		call	sub_414F0C
		jmp	short loc_41B001
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41AFE6:				; CODE XREF: sub_41AF68+1Ej
		test	eax, 0FFFFFh
		jnz	short loc_41AFB2
		cmp	[esp-2+arg_4], 0
		jnz	short loc_41AFB2
		fstp	st
		fld	ds:tbyte_42271A
		mov	eax, 2

loc_41B001:				; CODE XREF: sub_41AF68+75j
					; sub_41AF68+7Cj
		cmp	dword_42DB64, 0
		jnz	loc_414F7E
		lea	ecx, aLog10_0	; "log10"
		mov	edx, 1Bh
		call	sub_414E97
		pop	edx
		retn
sub_41AF68	endp ; sp =  4

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		cmp	dword_42DC90, 0
		jz	loc_41B810
		sub	esp, 8
		stmxcsr	dword ptr [esp+4]
		mov	eax, [esp+4]
		and	eax, 7F80h
		cmp	eax, 1F80h
		jnz	short loc_41B054
		fnstcw	word ptr [esp]
		mov	ax, [esp]
		and	ax, 7Fh
		cmp	ax, 7Fh

loc_41B054:				; CODE XREF: .text:0041B043j
		lea	esp, [esp+8]
		jnz	loc_41B810
		jmp	short $+2
		movq	xmm0, qword ptr	[esp+4]
		movapd	xmm2, oword ptr	ds:oword_428F20
		movapd	xmm1, xmm0
		movapd	xmm7, xmm0
		psrlq	xmm0, 34h
		movd	eax, xmm0
		andpd	xmm0, oword ptr	ds:oword_428F40
		psubd	xmm2, xmm0
		psrlq	xmm1, xmm2
		test	eax, 800h
		jz	short loc_41B0E2
		cmp	eax, 0BFFh
		jl	short loc_41B11A
		psllq	xmm1, xmm2
		cmp	eax, 0C32h
		jg	short loc_41B0B3
		movq	qword ptr [esp+4], xmm1
		fld	qword ptr [esp+4]
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B0B3:				; CODE XREF: .text:0041B0A6j
					; .text:0041B101j
		ucomisd	xmm7, xmm7
		jnp	short loc_41B0DD
		mov	edx, 3ECh
		sub	esp, 10h
		mov	[esp+0Ch], edx
		mov	edx, esp
		add	edx, 14h
		mov	[esp+8], edx
		mov	[esp+4], edx
		mov	[esp], edx
		call	sub_419DD8
		add	esp, 10h

loc_41B0DD:				; CODE XREF: .text:0041B0B7j
		fld	qword ptr [esp+4]
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B0E2:				; CODE XREF: .text:0041B094j
		movq	xmm0, qword ptr	[esp+4]
		psllq	xmm1, xmm2
		movapd	xmm3, xmm0
		cmppd	xmm0, xmm1, 6
		cmp	eax, 3FFh
		jl	short loc_41B121
		cmp	eax, 432h
		jg	short loc_41B0B3
		andpd	xmm0, oword ptr	ds:oword_428F10
		addsd	xmm1, xmm0
		movq	qword ptr [esp+4], xmm1
		fld	qword ptr [esp+4]
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B11A:				; CODE XREF: .text:0041B09Bj
		fld	ds:dbl_428F50
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B121:				; CODE XREF: .text:0041B0FAj
		cmppd	xmm3, oword ptr	ds:oword_428F30, 6
		andpd	xmm3, oword ptr	ds:oword_428F10
		movq	qword ptr [esp+4], xmm3
		fld	qword ptr [esp+4]
		retn

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_41B13D(int,DWORD dwMapFlags,LPCWSTR lpSrcStr,int,LPWSTR lpDestStr,int	cchDest)
sub_41B13D	proc near		; CODE XREF: sub_41A0EE+99p

arg_0		= dword	ptr  8
dwMapFlags	= dword	ptr  0Ch
lpSrcStr	= dword	ptr  10h
arg_C		= dword	ptr  14h
lpDestStr	= dword	ptr  18h
cchDest		= dword	ptr  1Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_C]
		test	esi, esi
		jle	short loc_41B15E
		push	esi
		push	[ebp+lpSrcStr]
		call	loc_40C42E
		pop	ecx
		cmp	eax, esi
		pop	ecx
		lea	esi, [eax+1]
		jl	short loc_41B15E
		mov	esi, eax

loc_41B15E:				; CODE XREF: sub_41B13D+Bj
					; sub_41B13D+1Dj
		xor	eax, eax
		push	eax		; int
		push	eax		; int
		push	eax		; int
		push	[ebp+cchDest]	; cchDest
		push	[ebp+lpDestStr]	; lpDestStr
		push	esi		; cchSrc
		push	[ebp+lpSrcStr]	; lpSrcStr
		push	[ebp+dwMapFlags] ; dwMapFlags
		push	[ebp+arg_0]	; int
		call	sub_40FCB4
		pop	esi
		pop	ebp
		retn
sub_41B13D	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
; START	OF FUNCTION CHUNK FOR sub_41A745

loc_41B17B:				; CODE XREF: sub_41A745+Fj
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		cmp	dword_42D84C, 0
		push	esi
		jnz	short loc_41B1D2
		cmp	[ebp+arg_0], 0
		jnz	short loc_41B1A7

loc_41B190:				; CODE XREF: sub_41A745+A66j
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		mov	eax, 7FFFFFFFh
		jmp	short loc_41B1E5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B1A7:				; CODE XREF: sub_41A745+A49j
		cmp	[ebp+arg_4], 0
		jz	short loc_41B190
		mov	esi, 7FFFFFFFh
		cmp	[ebp+arg_8], esi
		jbe	short loc_41B1CB
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		mov	eax, esi
		jmp	short loc_41B1E5
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B1CB:				; CODE XREF: sub_41A745+A70j
		pop	esi
		pop	ebp
		jmp	sub_41B8D0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B1D2:				; CODE XREF: sub_41A745+A43j
		push	0
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_41B1E8
		add	esp, 10h

loc_41B1E5:				; CODE XREF: sub_41A745+A60j
					; sub_41A745+A84j
		pop	esi
		pop	ebp
		retn
; END OF FUNCTION CHUNK	FOR sub_41A745

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41B1E8	proc near		; CODE XREF: sub_41A76E+78p
					; sub_41A745+A98p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		cmp	[ebp+arg_8], 0
		jz	loc_41B299
		push	ebx
		push	esi
		push	edi
		push	[ebp+arg_C]
		lea	ecx, [ebp+var_10]
		call	sub_40A217
		mov	edi, [ebp+arg_0]
		mov	esi, 7FFFFFFFh
		test	edi, edi
		jz	short loc_41B222
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	short loc_41B222
		mov	ecx, [ebp+arg_8]
		cmp	ecx, esi
		jbe	short loc_41B234

loc_41B222:				; CODE XREF: sub_41B1E8+2Aj
					; sub_41B1E8+31j
		call	sub_40BD71
		mov	dword ptr [eax], 16h
		call	sub_409E35
		jmp	short loc_41B282
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B234:				; CODE XREF: sub_41B1E8+38j
		mov	eax, [ebp+var_C]
		cmp	dword ptr [eax+0A8h], 0
		jnz	short loc_41B24F
		push	ecx
		push	ebx
		push	edi
		call	sub_41B8D0
		add	esp, 0Ch
		mov	esi, eax
		jmp	short loc_41B282
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B24F:				; CODE XREF: sub_41B1E8+56j
		sub	edi, ebx

loc_41B251:				; CODE XREF: sub_41B1E8+96j
		movzx	eax, byte ptr [edi+ebx]
		lea	ecx, [ebp+var_C]
		push	ecx
		push	eax
		call	sub_40C3B0
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		movzx	eax, byte ptr [ebx]
		push	ecx
		push	eax
		call	sub_40C3B0
		add	esp, 10h
		inc	ebx
		sub	[ebp+arg_8], 1
		jz	short loc_41B280
		test	esi, esi
		jz	short loc_41B280
		cmp	esi, eax
		jz	short loc_41B251

loc_41B280:				; CODE XREF: sub_41B1E8+8Ej
					; sub_41B1E8+92j
		sub	esi, eax

loc_41B282:				; CODE XREF: sub_41B1E8+4Aj
					; sub_41B1E8+65j
		cmp	[ebp+var_4], 0
		jz	short loc_41B292
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_41B292:				; CODE XREF: sub_41B1E8+9Ej
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		jmp	short loc_41B29B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B299:				; CODE XREF: sub_41B1E8+Cj
		xor	eax, eax

loc_41B29B:				; CODE XREF: sub_41B1E8+AFj
		mov	esp, ebp
		pop	ebp
		retn
sub_41B1E8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_41B29F(int,int,DWORD dwCmpFlags,int,int,int,int,UINT CodePage)
sub_41B29F	proc near		; CODE XREF: sub_41B52C+2Cp

var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
cchCount1	= dword	ptr -28h
cchMultiByte	= dword	ptr -24h
cchCount2	= dword	ptr -20h
lpString1	= dword	ptr -1Ch
CPInfo		= _cpinfo ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
dwCmpFlags	= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
CodePage	= dword	ptr  24h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 2Ch
		mov	eax, dword_42C06C
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		push	ebx
		push	esi
		mov	esi, [ebp+arg_10]
		mov	[ebp+cchCount1], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+arg_14]
		mov	[ebp+cchMultiByte], eax
		push	edi
		mov	edi, [ebp+arg_C]
		mov	[ebp+cchCount2], edi
		test	esi, esi
		jle	short loc_41B2E3
		push	esi
		push	edi
		call	sub_40C0AD
		pop	ecx
		mov	esi, eax
		mov	eax, [ebp+cchMultiByte]
		pop	ecx
		jmp	short loc_41B2EC
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B2E3:				; CODE XREF: sub_41B29F+32j
		cmp	esi, 0FFFFFFFFh
		jl	loc_41B516

loc_41B2EC:				; CODE XREF: sub_41B29F+42j
		mov	ebx, [ebp+arg_18]
		test	ebx, ebx
		jle	short loc_41B300
		push	ebx
		push	eax
		call	sub_40C0AD
		pop	ecx
		pop	ecx
		mov	ebx, eax
		jmp	short loc_41B309
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B300:				; CODE XREF: sub_41B29F+52j
		cmp	ebx, 0FFFFFFFFh
		jl	loc_41B516

loc_41B309:				; CODE XREF: sub_41B29F+5Fj
		mov	eax, [ebp+CodePage]
		test	eax, eax
		jnz	short loc_41B31B
		mov	eax, [ebp+cchCount1]
		mov	eax, [eax]
		mov	eax, [eax+8]
		mov	[ebp+CodePage],	eax

loc_41B31B:				; CODE XREF: sub_41B29F+6Fj
		test	esi, esi
		jz	short loc_41B327
		test	ebx, ebx
		jnz	loc_41B3C3

loc_41B327:				; CODE XREF: sub_41B29F+7Ej
		cmp	esi, ebx
		jz	loc_41B50F
		cmp	ebx, 1
		jg	loc_41B3BB
		cmp	esi, 1
		jg	short loc_41B380
		lea	ecx, [ebp+CPInfo]
		push	ecx		; lpCPInfo
		push	eax		; CodePage
		call	ds:GetCPInfo
		test	eax, eax
		jz	loc_41B516
		test	esi, esi
		jle	short loc_41B388
		cmp	[ebp+CPInfo.MaxCharSize], 2
		jb	short loc_41B380
		cmp	[ebp+CPInfo.LeadByte], 0
		lea	eax, [ebp+CPInfo.LeadByte]
		jz	short loc_41B380

loc_41B363:				; CODE XREF: sub_41B29F+DFj
		mov	cl, [eax+1]
		test	cl, cl
		jz	short loc_41B380
		mov	dl, [edi]
		cmp	dl, [eax]
		jb	short loc_41B378
		cmp	dl, cl
		jbe	loc_41B50F

loc_41B378:				; CODE XREF: sub_41B29F+CFj
		add	eax, 2
		cmp	byte ptr [eax],	0
		jnz	short loc_41B363

loc_41B380:				; CODE XREF: sub_41B29F+9Cj
					; sub_41B29F+B9j ...
		push	3

loc_41B382:				; CODE XREF: sub_41B29F+272j
		pop	eax
		jmp	loc_41B518
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B388:				; CODE XREF: sub_41B29F+B3j
		test	ebx, ebx
		jle	short loc_41B3C3
		cmp	[ebp+CPInfo.MaxCharSize], 2
		jb	short loc_41B3BB
		cmp	[ebp+CPInfo.LeadByte], 0
		lea	eax, [ebp+CPInfo.LeadByte]
		jz	short loc_41B3BB
		mov	esi, [ebp+cchMultiByte]

loc_41B39E:				; CODE XREF: sub_41B29F+11Aj
		mov	cl, [eax+1]
		test	cl, cl
		jz	short loc_41B3BB
		mov	dl, [esi]
		cmp	dl, [eax]
		jb	short loc_41B3B3
		cmp	dl, cl
		jbe	loc_41B50F

loc_41B3B3:				; CODE XREF: sub_41B29F+10Aj
		add	eax, 2
		cmp	byte ptr [eax],	0
		jnz	short loc_41B39E

loc_41B3BB:				; CODE XREF: sub_41B29F+93j
					; sub_41B29F+F1j ...
		xor	eax, eax
		inc	eax
		jmp	loc_41B518
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B3C3:				; CODE XREF: sub_41B29F+82j
					; sub_41B29F+EBj
		xor	edi, edi
		push	edi		; cchWideChar
		push	edi		; lpWideCharStr
		push	esi		; cchMultiByte
		push	[ebp+cchCount2]	; lpMultiByteStr
		push	9		; int
		push	[ebp+CodePage]	; CodePage
		call	sub_4154FC
		add	esp, 18h
		mov	[ebp+cchCount1], eax
		test	eax, eax
		jz	loc_41B516
		lea	ecx, [eax+eax]
		lea	edx, [ecx+8]
		cmp	ecx, edx
		sbb	eax, eax
		and	eax, edx
		jz	short loc_41B432
		cmp	eax, 400h
		ja	short loc_41B412
		call	sub_405980
		mov	eax, esp
		mov	[ebp+lpString1], eax
		test	eax, eax
		jz	loc_41B501
		mov	dword ptr [eax], 0CCCCh
		jmp	short loc_41B42A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B412:				; CODE XREF: sub_41B29F+157j
		push	eax
		call	sub_40FDE5
		mov	[ebp+lpString1], eax
		pop	ecx
		test	eax, eax
		jz	loc_41B501
		mov	dword ptr [eax], 0DDDDh

loc_41B42A:				; CODE XREF: sub_41B29F+171j
		add	eax, 8
		mov	[ebp+lpString1], eax
		jmp	short loc_41B437
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B432:				; CODE XREF: sub_41B29F+150j
		mov	eax, edi
		mov	[ebp+lpString1], edi

loc_41B437:				; CODE XREF: sub_41B29F+191j
		test	eax, eax
		jz	loc_41B501
		push	[ebp+cchCount1]	; cchWideChar
		push	eax		; lpWideCharStr
		push	esi		; cchMultiByte
		push	[ebp+cchCount2]	; lpMultiByteStr
		mov	esi, [ebp+CodePage]
		push	1		; int
		push	esi		; CodePage
		call	sub_4154FC
		add	esp, 18h
		test	eax, eax
		jz	loc_41B501
		push	edi		; cchWideChar
		push	edi		; lpWideCharStr
		push	ebx		; cchMultiByte
		push	[ebp+cchMultiByte] ; lpMultiByteStr
		push	9		; int
		push	esi		; CodePage
		call	sub_4154FC
		add	esp, 18h
		mov	[ebp+cchCount2], eax
		test	eax, eax
		jz	loc_41B501
		lea	ecx, [eax+eax]
		lea	edx, [ecx+8]
		cmp	ecx, edx
		sbb	eax, eax
		and	eax, edx
		jz	short loc_41B4B9
		cmp	eax, 400h
		ja	short loc_41B4A1
		call	sub_405980
		mov	esi, esp
		test	esi, esi
		jz	short loc_41B4F5
		mov	dword ptr [esi], 0CCCCh
		jmp	short loc_41B4B4
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B4A1:				; CODE XREF: sub_41B29F+1EDj
		push	eax
		call	sub_40FDE5
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_41B4F5
		mov	dword ptr [esi], 0DDDDh

loc_41B4B4:				; CODE XREF: sub_41B29F+200j
		add	esi, 8
		jmp	short loc_41B4BB
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B4B9:				; CODE XREF: sub_41B29F+1E6j
		mov	esi, edi

loc_41B4BB:				; CODE XREF: sub_41B29F+218j
		test	esi, esi
		jz	short loc_41B4F5
		push	[ebp+cchCount2]	; cchWideChar
		push	esi		; lpWideCharStr
		push	ebx		; cchMultiByte
		push	[ebp+cchMultiByte] ; lpMultiByteStr
		push	1		; int
		push	[ebp+CodePage]	; CodePage
		call	sub_4154FC
		add	esp, 18h
		test	eax, eax
		jz	short loc_41B4F5
		mov	ebx, [ebp+lpString1]
		push	edi		; int
		push	edi		; int
		push	edi		; int
		push	[ebp+cchCount2]	; cchCount2
		push	esi		; lpString2
		push	[ebp+cchCount1]	; cchCount1
		push	ebx		; lpString1
		push	[ebp+dwCmpFlags] ; dwCmpFlags
		push	[ebp+var_2C]	; int
		call	sub_40F9C5
		mov	edi, eax
		jmp	short loc_41B4F8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B4F5:				; CODE XREF: sub_41B29F+1F8j
					; sub_41B29F+20Dj ...
		mov	ebx, [ebp+lpString1]

loc_41B4F8:				; CODE XREF: sub_41B29F+254j
		push	esi
		call	sub_404C80
		pop	ecx
		jmp	short loc_41B504
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B501:				; CODE XREF: sub_41B29F+165j
					; sub_41B29F+17Fj ...
		mov	ebx, [ebp+lpString1]

loc_41B504:				; CODE XREF: sub_41B29F+260j
		push	ebx
		call	sub_404C80
		pop	ecx
		mov	eax, edi
		jmp	short loc_41B518
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B50F:				; CODE XREF: sub_41B29F+8Aj
					; sub_41B29F+D3j ...
		push	2
		jmp	loc_41B382
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B516:				; CODE XREF: sub_41B29F+47j
					; sub_41B29F+64j ...
		xor	eax, eax

loc_41B518:				; CODE XREF: sub_41B29F+E4j
					; sub_41B29F+11Fj ...
		lea	esp, [ebp-38h]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	sub_40534D
		mov	esp, ebp
		pop	ebp
		retn
sub_41B29F	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

; int __cdecl sub_41B52C(int,int,DWORD dwCmpFlags,int,int,int,int,UINT CodePage)
sub_41B52C	proc near		; CODE XREF: sub_41A76E+95p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
dwCmpFlags	= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
CodePage	= dword	ptr  24h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_10]
		call	sub_40A217
		push	[ebp+CodePage]	; CodePage
		lea	eax, [ebp+var_C]
		push	[ebp+arg_18]	; int
		push	[ebp+arg_14]	; int
		push	[ebp+arg_10]	; int
		push	[ebp+arg_C]	; int
		push	[ebp+dwCmpFlags] ; dwCmpFlags
		push	[ebp+arg_4]	; int
		push	eax		; int
		call	sub_41B29F
		add	esp, 20h
		cmp	[ebp+var_4], 0
		jz	short loc_41B570
		mov	ecx, [ebp+var_10]
		and	dword ptr [ecx+350h], 0FFFFFFFDh

loc_41B570:				; CODE XREF: sub_41B52C+38j
		mov	esp, ebp
		pop	ebp
		retn
sub_41B52C	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_41B580:				; CODE XREF: .text:0041AF46j
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		fstp	qword ptr [esp]
		movq	xmm0, qword ptr	[esp]
		call	sub_41B59E
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		movlpd	xmm0, oword ptr	[esp+4]

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41B59E	proc near		; CODE XREF: .text:0041B591p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= qword	ptr -0Ch
arg_0		= byte ptr  4

		mov	edx, 0

loc_41B5A3:				; CODE XREF: sub_41B59E+1E9j
		movapd	xmm5, xmm0
		unpcklpd xmm0, xmm0
		psrlq	xmm5, 34h
		pextrw	ecx, xmm5, 0
		movapd	xmm1, oword ptr	ds:oword_428F60
		movapd	xmm2, oword ptr	ds:oword_428F70
		movapd	xmm3, oword ptr	ds:oword_428FD0
		movapd	xmm4, oword ptr	ds:oword_428F80
		movapd	xmm6, oword ptr	ds:oword_428F90
		andpd	xmm0, xmm1
		orpd	xmm0, xmm3
		addpd	xmm4, xmm0
		pextrw	eax, xmm4, 0
		and	eax, 7F0h
		movapd	xmm4, oword ptr	ds:oword_429470[eax]
		movapd	xmm7, oword ptr	ds:oword_429060[eax]
		andpd	xmm6, xmm0
		subpd	xmm0, xmm6
		mulpd	xmm6, xmm4
		subpd	xmm6, xmm2
		addsd	xmm7, xmm6
		mulpd	xmm0, xmm4
		movapd	xmm4, xmm0
		addpd	xmm0, xmm6
		and	ecx, 0FFFh
		sub	ecx, 1
		cmp	ecx, 7FDh
		ja	loc_41B6F6
		sub	ecx, 3FEh
		add	ecx, edx
		cvtsi2sd xmm6, ecx
		unpcklpd xmm6, xmm6
		shl	ecx, 0Ah
		add	eax, ecx
		mov	ecx, 10h
		mov	edx, 0
		cmp	eax, 0
		cmovz	edx, ecx
		movapd	xmm1, oword ptr	ds:oword_429020
		movapd	xmm3, xmm0
		movapd	xmm2, oword ptr	ds:oword_429030
		mulpd	xmm1, xmm0
		mulpd	xmm3, xmm3
		addpd	xmm1, xmm2
		movapd	xmm2, oword ptr	ds:oword_429040
		mulsd	xmm3, xmm3
		movapd	xmm5, oword ptr	ds:oword_428FA0
		mulpd	xmm6, xmm5
		movapd	xmm5, oword ptr	ds:oword_428FB0[edx]
		andpd	xmm4, xmm5
		addpd	xmm7, xmm6
		addpd	xmm7, xmm4
		mulpd	xmm1, xmm0
		mulsd	xmm3, xmm0
		addpd	xmm1, xmm2
		movapd	xmm2, oword ptr	ds:oword_429050
		mulpd	xmm2, xmm0
		movapd	xmm6, xmm7
		unpckhpd xmm6, xmm6
		mulpd	xmm1, xmm3
		sub	esp, 10h
		movapd	xmm0, xmm1
		addpd	xmm1, xmm2
		unpckhpd xmm0, xmm0
		addsd	xmm0, xmm1
		addsd	xmm0, xmm6
		addsd	xmm0, xmm7
		movlpd	oword ptr [esp+4], xmm0
		fld	[esp+10h+var_C]
		add	esp, 10h
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B6F6:				; CODE XREF: sub_41B59E+94j
		movlpd	xmm0, oword ptr	[esp+arg_0]
		movapd	xmm1, oword ptr	ds:oword_428FE0
		cmpsd	xmm1, xmm0, 0
		pextrw	eax, xmm1, 0
		cmp	eax, 0
		ja	short loc_41B75B
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_41B776
		cmp	ecx, 7FEh
		ja	short loc_41B78C
		movlpd	xmm0, oword ptr	[esp+arg_0]
		movapd	xmm1, oword ptr	ds:oword_428F60
		movapd	xmm2, oword ptr	ds:oword_428FD0
		andpd	xmm0, xmm1
		orpd	xmm0, xmm2
		cmpsd	xmm2, xmm0, 0
		pextrw	eax, xmm2, 0
		cmp	eax, 0
		jz	short loc_41B754
		fld	ds:dbl_429008
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B754:				; CODE XREF: sub_41B59E+1ADj
		mov	edx, 3E9h
		jmp	short loc_41B7AA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B75B:				; CODE XREF: sub_41B59E+173j
		movlpd	xmm2, oword ptr	ds:oword_428FD0
		divsd	xmm2, xmm0
		movlpd	xmm1, oword ptr	ds:byte_429000
		mov	edx, 8
		jmp	short loc_41B7AA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B776:				; CODE XREF: sub_41B59E+178j
		movlpd	xmm1, oword ptr	ds:oword_428FF0
		mulsd	xmm0, xmm1
		mov	edx, 0FFFFFFCCh
		jmp	loc_41B5A3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B78C:				; CODE XREF: sub_41B59E+180j
		add	ecx, 1
		and	ecx, 7FFh
		cmp	ecx, 7FFh
		jnb	short loc_41B7D7

loc_41B79D:				; CODE XREF: sub_41B59E+25Dj
		xorpd	xmm1, xmm1
		divsd	xmm1, xmm1
		mov	edx, 9

loc_41B7AA:				; CODE XREF: sub_41B59E+1BBj
					; sub_41B59E+1D6j ...
		sub	esp, 1Ch
		movlpd	oword ptr [esp+1Ch+var_C], xmm1
		mov	[esp+1Ch+var_10], edx
		mov	edx, esp
		add	edx, 10h
		mov	[esp+1Ch+var_14], edx
		add	edx, 10h
		mov	[esp+1Ch+var_18], edx
		mov	[esp+1Ch+var_1C], edx
		call	sub_419DD8
		fld	[esp+1Ch+var_C]
		add	esp, 1Ch
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B7D7:				; CODE XREF: sub_41B59E+1FDj
		movlpd	xmm2, oword ptr	[esp+arg_0]
		movlpd	xmm0, oword ptr	[esp+arg_0]
		movd	eax, xmm2
		psrlq	xmm2, 20h
		movd	ecx, xmm2
		and	ecx, 0FFFFFh
		or	eax, ecx
		cmp	eax, 0
		jz	short loc_41B79D
		mov	edx, 3E9h
		jmp	short loc_41B7AA
sub_41B59E	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		lea	esp, [esp+0]
		jmp	short loc_41B810
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_41B810:				; CODE XREF: .text:0041B027j
					; .text:0041B058j ...
		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		mov	esi, 0FFFFh
		push	esi
		push	1B3Fh
		call	sub_413C39
		fld	qword ptr [ebp+8]
		mov	ebx, eax
		pop	ecx
		pop	ecx
		movzx	ecx, word ptr [ebp+0Eh]
		mov	eax, 7FF0h
		and	ecx, eax
		push	ecx
		push	ecx
		fstp	qword ptr [esp]
		cmp	cx, ax
		jnz	short loc_41B882
		call	sub_413B52
		dec	eax
		pop	ecx
		pop	ecx
		cmp	eax, 2
		ja	short loc_41B85E
		push	esi
		push	ebx
		call	sub_413C39
		fld	qword ptr [ebp+8]
		jmp	short loc_41B8BF
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B85E:				; CODE XREF: .text:0041B850j
		fld	qword ptr [ebp+8]
		fld	ds:dbl_4215E8
		push	ebx
		sub	esp, 10h
		fadd	st, st(1)
		fstp	qword ptr [esp+8]
		fstp	qword ptr [esp]
		push	0Ch
		push	8

loc_41B878:				; CODE XREF: .text:0041B8AFj
		call	sub_4133A0
		add	esp, 1Ch
		jmp	short loc_41B8C1
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B882:				; CODE XREF: .text:0041B843j
		call	sub_41A0D8
		fst	qword ptr [ebp-8]
		fld	qword ptr [ebp+8]
		add	esp, 8
		fucom	st(1)
		fnstsw	ax
		test	ah, 44h
		jnp	short loc_41B8B1
		test	bl, 20h
		jnz	short loc_41B8B1
		push	ebx
		sub	esp, 10h
		fxch	st(1)
		fstp	qword ptr [esp+8]
		fstp	qword ptr [esp]
		push	0Ch
		push	10h
		jmp	short loc_41B878
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41B8B1:				; CODE XREF: .text:0041B897j
					; .text:0041B89Cj
		push	esi
		fstp	st(1)
		push	ebx
		fstp	st
		call	sub_413C39
		fld	qword ptr [ebp-8]

loc_41B8BF:				; CODE XREF: .text:0041B85Cj
		pop	ecx
		pop	ecx

loc_41B8C1:				; CODE XREF: .text:0041B880j
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41B8D0	proc near		; CODE XREF: sub_41A745+A88j
					; sub_41B1E8+5Bp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	ecx, [ebp+arg_8]
		or	ecx, ecx
		jz	short loc_41B92A
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		mov	bh, 41h
		mov	bl, 5Ah
		mov	dh, 20h
		lea	ecx, [ecx+0]

loc_41B8EC:				; CODE XREF: sub_41B8D0+49j
		mov	ah, [esi]
		or	ah, ah
		mov	al, [edi]
		jz	short loc_41B91B
		or	al, al
		jz	short loc_41B91B
		add	esi, 1
		add	edi, 1
		cmp	ah, bh
		jb	short loc_41B908
		cmp	ah, bl
		ja	short loc_41B908
		add	ah, dh

loc_41B908:				; CODE XREF: sub_41B8D0+30j
					; sub_41B8D0+34j
		cmp	al, bh
		jb	short loc_41B912
		cmp	al, bl
		ja	short loc_41B912
		add	al, dh

loc_41B912:				; CODE XREF: sub_41B8D0+3Aj
					; sub_41B8D0+3Ej
		cmp	ah, al
		jnz	short loc_41B921
		sub	ecx, 1
		jnz	short loc_41B8EC

loc_41B91B:				; CODE XREF: sub_41B8D0+22j
					; sub_41B8D0+26j
		xor	ecx, ecx
		cmp	ah, al
		jz	short loc_41B92A

loc_41B921:				; CODE XREF: sub_41B8D0+44j
		mov	ecx, 0FFFFFFFFh
		jb	short loc_41B92A
		neg	ecx

loc_41B92A:				; CODE XREF: sub_41B8D0+Bj
					; sub_41B8D0+4Fj ...
		mov	eax, ecx
		pop	ebx
		pop	esi
		pop	edi
		leave
		retn
sub_41B8D0	endp

; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41B940	proc near		; CODE XREF: sub_41B990+59p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		push	ebx
		push	esi
		push	edi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		movzx	ebx, word ptr [ecx+6]
		add	eax, 18h
		add	eax, ecx
		test	ebx, ebx
		jz	short loc_41B97C
		mov	edi, [ebp+arg_4]

loc_41B964:				; CODE XREF: sub_41B940+3Aj
		mov	esi, [eax+0Ch]
		cmp	edi, esi
		jb	short loc_41B974
		mov	ecx, [eax+8]
		add	ecx, esi
		cmp	edi, ecx
		jb	short loc_41B97E

loc_41B974:				; CODE XREF: sub_41B940+29j
		inc	edx
		add	eax, 28h
		cmp	edx, ebx
		jb	short loc_41B964

loc_41B97C:				; CODE XREF: sub_41B940+1Fj
		xor	eax, eax

loc_41B97E:				; CODE XREF: sub_41B940+32j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_41B940	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41B990	proc near		; CODE XREF: sub_408540+ECp

var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFEh
		push	offset dword_42B4C0
		push	offset sub_408540
		mov	eax, large fs:0
		push	eax
		sub	esp, 8
		push	ebx
		push	esi
		push	edi
		mov	eax, dword_42C06C
		xor	[ebp+var_8], eax
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_10]
		mov	large fs:0, eax
		mov	[ebp+var_18], esp
		mov	[ebp+var_4], 0
		push	400000h
		call	sub_41BA50
		add	esp, 4
		test	eax, eax
		jz	short loc_41BA2F
		mov	eax, [ebp+arg_0]
		sub	eax, 400000h
		push	eax
		push	400000h
		call	sub_41B940
		add	esp, 8
		test	eax, eax
		jz	short loc_41BA2F
		mov	eax, [eax+24h]
		shr	eax, 1Fh
		not	eax
		and	eax, 1
		mov	[ebp+var_4], 0FFFFFFFEh
		mov	ecx, [ebp+var_10]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BA19:				; DATA XREF: .rdata:0042B4D4o
		mov	eax, [ebp-14h]
		mov	eax, [eax]
		xor	ecx, ecx
		cmp	dword ptr [eax], 0C0000005h
		setz	cl
		mov	eax, ecx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BA2C:				; DATA XREF: .rdata:0042B4D8o
		mov	esp, [ebp-18h]

loc_41BA2F:				; CODE XREF: sub_41B990+49j
					; sub_41B990+63j
		mov	[ebp+var_4], 0FFFFFFFEh
		xor	eax, eax
		mov	ecx, [ebp+var_10]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_41B990	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41BA50	proc near		; CODE XREF: sub_41B990+3Fp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		mov	eax, 5A4Dh
		cmp	[ecx], ax
		jnz	short loc_41BA7F
		mov	eax, [ecx+3Ch]
		add	eax, ecx
		cmp	dword ptr [eax], 4550h
		jnz	short loc_41BA7F
		mov	ecx, 10Bh
		cmp	[eax+18h], cx
		jnz	short loc_41BA7F
		mov	eax, 1
		pop	ebp
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BA7F:				; CODE XREF: sub_41BA50+Ej
					; sub_41BA50+1Bj ...
		xor	eax, eax
		pop	ebp
		retn
sub_41BA50	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		push	esi
		mov	eax, [esp+14h]
		or	eax, eax
		jnz	short loc_41BAC1
		mov	ecx, [esp+10h]
		mov	eax, [esp+0Ch]
		xor	edx, edx
		div	ecx
		mov	ebx, eax
		mov	eax, [esp+8]
		div	ecx
		mov	esi, eax
		mov	eax, ebx
		mul	dword ptr [esp+10h]
		mov	ecx, eax
		mov	eax, esi
		mul	dword ptr [esp+10h]
		add	edx, ecx
		jmp	short loc_41BB08
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BAC1:				; CODE XREF: .text:0041BA97j
		mov	ecx, eax
		mov	ebx, [esp+10h]
		mov	edx, [esp+0Ch]
		mov	eax, [esp+8]

loc_41BACF:				; CODE XREF: .text:0041BAD9j
		shr	ecx, 1
		rcr	ebx, 1
		shr	edx, 1
		rcr	eax, 1
		or	ecx, ecx
		jnz	short loc_41BACF
		div	ebx
		mov	esi, eax
		mul	dword ptr [esp+14h]
		mov	ecx, eax
		mov	eax, [esp+10h]
		mul	esi
		add	edx, ecx
		jb	short loc_41BAFD
		cmp	edx, [esp+0Ch]
		ja	short loc_41BAFD
		jb	short loc_41BB06
		cmp	eax, [esp+8]
		jbe	short loc_41BB06

loc_41BAFD:				; CODE XREF: .text:0041BAEDj
					; .text:0041BAF3j
		dec	esi
		sub	eax, [esp+10h]
		sbb	edx, [esp+14h]

loc_41BB06:				; CODE XREF: .text:0041BAF5j
					; .text:0041BAFBj
		xor	ebx, ebx

loc_41BB08:				; CODE XREF: .text:0041BABFj
		sub	eax, [esp+8]
		sbb	edx, [esp+0Ch]
		neg	edx
		neg	eax
		sbb	edx, 0
		mov	ecx, edx
		mov	edx, ebx
		mov	ebx, ecx
		mov	ecx, eax
		mov	eax, esi
		pop	esi
		retn	10h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		cmp	cl, 40h
		jnb	short loc_41BB4A
		cmp	cl, 20h
		jnb	short loc_41BB40
		shld	edx, eax, cl
		shl	eax, cl
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BB40:				; CODE XREF: .text:0041BB38j
		mov	edx, eax
		xor	eax, eax
		and	cl, 1Fh
		shl	edx, cl
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BB4A:				; CODE XREF: .text:0041BB33j
		xor	eax, eax
		xor	edx, edx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		cmp	cl, 40h
		jnb	short loc_41BB6A
		cmp	cl, 20h
		jnb	short loc_41BB60
		shrd	eax, edx, cl
		shr	edx, cl
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BB60:				; CODE XREF: .text:0041BB58j
		mov	eax, edx
		xor	edx, edx
		and	cl, 1Fh
		shr	eax, cl
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BB6A:				; CODE XREF: .text:0041BB53j
		xor	eax, eax
		xor	edx, edx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41BB70	proc near		; CODE XREF: sub_411DFC+16Dp
					; sub_411F85+9Bp ...

arg_0		= dword	ptr  10h
arg_4		= dword	ptr  14h
arg_8		= dword	ptr  18h
arg_C		= dword	ptr  1Ch

		push	edi
		push	esi
		push	ebx
		xor	edi, edi
		mov	eax, [esp+arg_4]
		or	eax, eax
		jge	short loc_41BB91
		inc	edi
		mov	edx, [esp+arg_0]
		neg	eax
		neg	edx
		sbb	eax, 0
		mov	[esp+arg_4], eax
		mov	[esp+arg_0], edx

loc_41BB91:				; CODE XREF: sub_41BB70+Bj
		mov	eax, [esp+arg_C]
		or	eax, eax
		jge	short loc_41BBAD
		inc	edi
		mov	edx, [esp+arg_8]
		neg	eax
		neg	edx
		sbb	eax, 0
		mov	[esp+arg_C], eax
		mov	[esp+arg_8], edx

loc_41BBAD:				; CODE XREF: sub_41BB70+27j
		or	eax, eax
		jnz	short loc_41BBC9
		mov	ecx, [esp+arg_8]
		mov	eax, [esp+arg_4]
		xor	edx, edx
		div	ecx
		mov	ebx, eax
		mov	eax, [esp+arg_0]
		div	ecx
		mov	edx, ebx
		jmp	short loc_41BC0A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BBC9:				; CODE XREF: sub_41BB70+3Fj
		mov	ebx, eax
		mov	ecx, [esp+arg_8]
		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]

loc_41BBD7:				; CODE XREF: sub_41BB70+71j
		shr	ebx, 1
		rcr	ecx, 1
		shr	edx, 1
		rcr	eax, 1
		or	ebx, ebx
		jnz	short loc_41BBD7
		div	ecx
		mov	esi, eax
		mul	[esp+arg_C]
		mov	ecx, eax
		mov	eax, [esp+arg_8]
		mul	esi
		add	edx, ecx
		jb	short loc_41BC05
		cmp	edx, [esp+arg_4]
		ja	short loc_41BC05
		jb	short loc_41BC06
		cmp	eax, [esp+arg_0]
		jbe	short loc_41BC06

loc_41BC05:				; CODE XREF: sub_41BB70+85j
					; sub_41BB70+8Bj
		dec	esi

loc_41BC06:				; CODE XREF: sub_41BB70+8Dj
					; sub_41BB70+93j
		xor	edx, edx
		mov	eax, esi

loc_41BC0A:				; CODE XREF: sub_41BB70+57j
		dec	edi
		jnz	short loc_41BC14
		neg	edx
		neg	eax
		sbb	edx, 0

loc_41BC14:				; CODE XREF: sub_41BB70+9Bj
		pop	ebx
		pop	esi
		pop	edi
		retn	10h
sub_41BB70	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		push	edi
		push	esi
		push	ebp
		xor	edi, edi
		xor	ebp, ebp
		mov	eax, [esp+14h]
		or	eax, eax
		jge	short loc_41BC44
		inc	edi
		inc	ebp
		mov	edx, [esp+10h]
		neg	eax
		neg	edx
		sbb	eax, 0
		mov	[esp+14h], eax
		mov	[esp+10h], edx

loc_41BC44:				; CODE XREF: .text:0041BC2Dj
		mov	eax, [esp+1Ch]
		or	eax, eax
		jge	short loc_41BC60
		inc	edi
		mov	edx, [esp+18h]
		neg	eax
		neg	edx
		sbb	eax, 0
		mov	[esp+1Ch], eax
		mov	[esp+18h], edx

loc_41BC60:				; CODE XREF: .text:0041BC4Aj
		or	eax, eax
		jnz	short loc_41BC8C
		mov	ecx, [esp+18h]
		mov	eax, [esp+14h]
		xor	edx, edx
		div	ecx
		mov	ebx, eax
		mov	eax, [esp+10h]
		div	ecx
		mov	esi, eax
		mov	eax, ebx
		mul	dword ptr [esp+18h]
		mov	ecx, eax
		mov	eax, esi
		mul	dword ptr [esp+18h]
		add	edx, ecx
		jmp	short loc_41BCD3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BC8C:				; CODE XREF: .text:0041BC62j
		mov	ebx, eax
		mov	ecx, [esp+18h]
		mov	edx, [esp+14h]
		mov	eax, [esp+10h]

loc_41BC9A:				; CODE XREF: .text:0041BCA4j
		shr	ebx, 1
		rcr	ecx, 1
		shr	edx, 1
		rcr	eax, 1
		or	ebx, ebx
		jnz	short loc_41BC9A
		div	ecx
		mov	esi, eax
		mul	dword ptr [esp+1Ch]
		mov	ecx, eax
		mov	eax, [esp+18h]
		mul	esi
		add	edx, ecx
		jb	short loc_41BCC8
		cmp	edx, [esp+14h]
		ja	short loc_41BCC8
		jb	short loc_41BCD1
		cmp	eax, [esp+10h]
		jbe	short loc_41BCD1

loc_41BCC8:				; CODE XREF: .text:0041BCB8j
					; .text:0041BCBEj
		dec	esi
		sub	eax, [esp+18h]
		sbb	edx, [esp+1Ch]

loc_41BCD1:				; CODE XREF: .text:0041BCC0j
					; .text:0041BCC6j
		xor	ebx, ebx

loc_41BCD3:				; CODE XREF: .text:0041BC8Aj
		sub	eax, [esp+10h]
		sbb	edx, [esp+14h]
		dec	ebp
		jns	short loc_41BCE5
		neg	edx
		neg	eax
		sbb	edx, 0

loc_41BCE5:				; CODE XREF: .text:0041BCDCj
		mov	ecx, edx
		mov	edx, ebx
		mov	ebx, ecx
		mov	ecx, eax
		mov	eax, esi
		dec	edi
		jnz	short loc_41BCF9
		neg	edx
		neg	eax
		sbb	edx, 0

loc_41BCF9:				; CODE XREF: .text:0041BCF0j
		pop	ebp
		pop	esi
		pop	edi
		retn	10h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		cmp	dword_42D4E4, 0
		jz	short loc_41BD40

loc_41BD09:				; CODE XREF: .text:0041BD34j
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF8h
		fstp	qword ptr [esp]
		cvttsd2si eax, qword ptr [esp]
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		cmp	dword_42D4E4, 0
		jz	short loc_41BD40
		sub	esp, 4
		fnstcw	word ptr [esp]
		pop	eax
		and	ax, 7Fh
		cmp	ax, 7Fh
		jz	short loc_41BD09
		lea	esp, [esp+0]
		lea	ecx, [ecx+0]

loc_41BD40:				; CODE XREF: .text:0041BD07j
					; .text:0041BD23j
		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		and	esp, 0FFFFFFF0h
		fld	st
		fst	dword ptr [esp+18h]
		fistp	qword ptr [esp+10h]
		fild	qword ptr [esp+10h]
		mov	edx, [esp+18h]
		mov	eax, [esp+10h]
		test	eax, eax
		jz	short loc_41BD9F

loc_41BD63:				; CODE XREF: .text:0041BDA9j
		fsubp	st(1), st
		test	edx, edx
		jns	short loc_41BD87
		fstp	dword ptr [esp]
		mov	ecx, [esp]
		xor	ecx, 80000000h
		add	ecx, 7FFFFFFFh
		adc	eax, 0
		mov	edx, [esp+14h]
		adc	edx, 0
		jmp	short locret_41BDB3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BD87:				; CODE XREF: .text:0041BD67j
		fstp	dword ptr [esp]
		mov	ecx, [esp]
		add	ecx, 7FFFFFFFh
		sbb	eax, 0
		mov	edx, [esp+14h]
		sbb	edx, 0
		jmp	short locret_41BDB3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BD9F:				; CODE XREF: .text:0041BD61j
		mov	edx, [esp+14h]
		test	edx, 7FFFFFFFh
		jnz	short loc_41BD63
		fstp	dword ptr [esp+18h]
		fstp	dword ptr [esp+18h]

locret_41BDB3:				; CODE XREF: .text:0041BD85j
					; .text:0041BD9Dj
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h
		push	ebp
		mov	ebp, esp
		push	edi
		cmp	dword_42D4E4, 1
		jb	loc_41BECE
		mov	edi, [ebp+8]
		ja	short loc_41BE4D
		movzx	edx, byte ptr [ebp+0Ch]
		mov	eax, edx
		shl	edx, 8
		or	edx, eax
		movd	xmm3, edx
		pshuflw	xmm3, xmm3, 0
		movlhps	xmm3, xmm3
		mov	ecx, 0Fh
		and	ecx, edi
		or	eax, 0FFFFFFFFh
		shl	eax, cl
		sub	edi, ecx
		xor	edx, edx

loc_41BDFD:				; CODE XREF: .text:0041BE2Bj
		movdqu	xmm1, qword ptr	[edi]
		pxor	xmm2, xmm2
		pcmpeqb	xmm2, xmm1
		pcmpeqb	xmm1, xmm3
		pmovmskb ecx, xmm2
		and	ecx, eax
		jnz	short loc_41BE2D
		pmovmskb ecx, xmm1
		and	ecx, eax
		bsr	eax, ecx
		add	eax, edi
		test	ecx, ecx
		cmovnz	edx, eax
		or	eax, 0FFFFFFFFh
		add	edi, 10h
		jmp	short loc_41BDFD
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BE2D:				; CODE XREF: .text:0041BE13j
		push	ebx
		pmovmskb ebx, xmm1
		and	ebx, eax
		shl	ecx, 1
		xor	eax, eax
		sub	eax, ecx
		and	ecx, eax
		dec	ecx
		and	ecx, ebx
		pop	ebx
		bsr	eax, ecx
		add	eax, edi
		test	ecx, ecx
		cmovz	eax, edx
		pop	edi
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BE4D:				; CODE XREF: .text:0041BDD4j
		movzx	edx, byte ptr [ebp+0Ch]
		test	edx, edx
		jz	short loc_41BE8E
		xor	eax, eax
		test	edi, 0Fh
		jz	short loc_41BE74

loc_41BE5F:				; CODE XREF: .text:0041BE72j
		movzx	ecx, byte ptr [edi]
		cmp	ecx, edx
		cmovz	eax, edi
		test	ecx, ecx
		jz	short loc_41BE8B
		inc	edi
		test	edi, 0Fh
		jnz	short loc_41BE5F

loc_41BE74:				; CODE XREF: .text:0041BE5Dj
		movd	xmm0, edx
		add	edi, 10h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		db 66h
		dd 47633A0Fh, 4C8D40F0h, 420FF039h
		db 0C1h, 75h, 0EDh
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BE8B:				; CODE XREF: .text:0041BE69j
					; .text:0041BECCj
		pop	edi
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BE8E:				; CODE XREF: .text:0041BE53j
		mov	eax, 0FFFFFFF0h
		and	eax, edi
		pxor	xmm0, xmm0
		pcmpeqb	xmm0, oword ptr	[eax]
		mov	ecx, 0Fh
		and	ecx, edi
		mov	edx, 0FFFFFFFFh
		shl	edx, cl
		pmovmskb edi, xmm0
		and	edi, edx
		jnz	short loc_41BEC7

loc_41BEB3:				; CODE XREF: .text:0041BEC5j
		pxor	xmm0, xmm0
		pcmpeqb	xmm0, oword ptr	[eax+10h]
		add	eax, 10h
		pmovmskb edi, xmm0
		test	edi, edi
		jz	short loc_41BEB3

loc_41BEC7:				; CODE XREF: .text:0041BEB1j
		bsf	edx, edi
		add	eax, edx
		jmp	short loc_41BE8B
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BECE:				; CODE XREF: .text:0041BDCBj
		mov	edi, [ebp+8]
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		repne scasb
		add	ecx, 1
		neg	ecx
		sub	edi, 1
		mov	al, [ebp+0Ch]
		std
		repne scasb
		add	edi, 1
		cmp	[edi], al
		jz	short loc_41BEF1
		xor	eax, eax
		jmp	short loc_41BEF3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BEF1:				; CODE XREF: .text:0041BEEBj
		mov	eax, edi

loc_41BEF3:				; CODE XREF: .text:0041BEEFj
		cld
		pop	edi
		leave
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41BF00	proc near		; CODE XREF: sub_416D8E-337p

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		cmp	dword_42D4E4, 1
		jb	short loc_41BF68
		movzx	eax, [esp+arg_4]
		mov	edx, eax
		shl	eax, 8
		or	edx, eax
		movd	xmm3, edx
		pshuflw	xmm3, xmm3, 0
		movlhps	xmm3, xmm3
		mov	edx, [esp+arg_0]
		mov	ecx, 0Fh
		or	eax, 0FFFFFFFFh
		and	ecx, edx
		shl	eax, cl
		sub	edx, ecx

loc_41BF33:				; CODE XREF: sub_41BF00+55j
		movdqu	xmm1, qword ptr	[edx]
		pxor	xmm2, xmm2
		pcmpeqb	xmm2, xmm1
		pcmpeqb	xmm1, xmm3
		por	xmm2, xmm1
		pmovmskb ecx, xmm2
		and	ecx, eax
		jnz	short loc_41BF57
		or	eax, 0FFFFFFFFh
		add	edx, 10h
		jmp	short loc_41BF33
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BF57:				; CODE XREF: sub_41BF00+4Dj
		bsf	eax, ecx
		add	eax, edx
		movd	edx, xmm3
		xor	ecx, ecx
		cmp	dl, [eax]
		cmovnz	eax, ecx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BF68:				; CODE XREF: sub_41BF00+7j
		xor	eax, eax
		mov	al, [esp+arg_4]
		push	ebx
		mov	ebx, eax
		shl	eax, 8
		mov	edx, [esp+4+arg_0]
		test	edx, 3
		jz	short loc_41BF95

loc_41BF80:				; CODE XREF: sub_41BF00+93j
		mov	cl, [edx]
		add	edx, 1
		cmp	cl, bl
		jz	short loc_41BFE2
		test	cl, cl
		jz	short loc_41BFDE
		test	edx, 3
		jnz	short loc_41BF80

loc_41BF95:				; CODE XREF: sub_41BF00+7Ej
		or	ebx, eax
		push	edi
		mov	eax, ebx
		shl	ebx, 10h
		push	esi
		or	ebx, eax

loc_41BFA0:				; CODE XREF: sub_41BF00+CBj
					; sub_41BF00+DAj ...
		mov	ecx, [edx]
		mov	edi, 7EFEFEFFh
		mov	eax, ecx
		mov	esi, edi
		xor	ecx, ebx
		add	esi, eax
		add	edi, ecx
		xor	ecx, 0FFFFFFFFh
		xor	eax, 0FFFFFFFFh
		xor	ecx, edi
		xor	eax, esi
		add	edx, 4
		and	ecx, 81010100h
		jnz	short loc_41BFE7
		and	eax, 81010100h
		jz	short loc_41BFA0
		and	eax, 1010100h
		jnz	short loc_41BFDC
		and	esi, 80000000h
		jnz	short loc_41BFA0

loc_41BFDC:				; CODE XREF: sub_41BF00+D2j
					; sub_41BF00+F0j ...
		pop	esi
		pop	edi

loc_41BFDE:				; CODE XREF: sub_41BF00+8Bj
		pop	ebx
		xor	eax, eax
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BFE2:				; CODE XREF: sub_41BF00+87j
		lea	eax, [edx-1]
		pop	ebx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41BFE7:				; CODE XREF: sub_41BF00+C4j
		mov	eax, [edx-4]
		cmp	al, bl
		jz	short loc_41C024
		test	al, al
		jz	short loc_41BFDC
		cmp	ah, bl
		jz	short loc_41C01D
		test	ah, ah
		jz	short loc_41BFDC
		shr	eax, 10h
		cmp	al, bl
		jz	short loc_41C016
		test	al, al
		jz	short loc_41BFDC
		cmp	ah, bl
		jz	short loc_41C00F
		test	ah, ah
		jz	short loc_41BFDC
		jmp	short loc_41BFA0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C00F:				; CODE XREF: sub_41BF00+107j
		pop	esi
		pop	edi
		lea	eax, [edx-1]
		pop	ebx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C016:				; CODE XREF: sub_41BF00+FFj
		lea	eax, [edx-2]
		pop	esi
		pop	edi
		pop	ebx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C01D:				; CODE XREF: sub_41BF00+F4j
		lea	eax, [edx-3]
		pop	esi
		pop	edi
		pop	ebx
		retn
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C024:				; CODE XREF: sub_41BF00+ECj
		lea	eax, [edx-4]
		pop	esi
		pop	edi
		pop	ebx
		retn
sub_41BF00	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл

; Attributes: bp-based frame

sub_41C02B	proc near		; CODE XREF: sub_4186DE+180p
					; sub_4186DE+18Ep

var_4		= dword	ptr -4

		push	ebx
		mov	ebx, esp
		push	ecx
		push	ecx
		and	esp, 0FFFFFFF0h
		add	esp, 4
		push	ebp
		mov	ebp, [ebx+4]
		mov	[esp+8+var_4], ebp
		mov	ebp, esp
		mov	ecx, [ebx+8]
		sub	esp, 1Ch
		cmp	dword_42D4E4, 1
		push	esi
		jge	short loc_41C082
		movzx	eax, word ptr [ecx]
		mov	edx, eax
		test	ax, ax
		jz	short loc_41C074
		mov	esi, eax

loc_41C05C:				; CODE XREF: sub_41C02B+47j
		movzx	edx, si
		cmp	si, [ebx+0Ch]
		jz	short loc_41C074
		add	ecx, 2
		movzx	eax, word ptr [ecx]
		mov	esi, eax
		mov	edx, eax
		test	ax, ax
		jnz	short loc_41C05C

loc_41C074:				; CODE XREF: sub_41C02B+2Dj
					; sub_41C02B+38j
		xor	eax, eax
		cmp	dx, [ebx+0Ch]

loc_41C07A:				; CODE XREF: sub_41C02B+B7j
		setnz	al
		dec	eax
		and	eax, ecx
		jmp	short loc_41C0EA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C082:				; CODE XREF: sub_41C02B+23j
		mov	dx, [ebx+0Ch]
		movzx	eax, dx
		movd	xmm0, eax
		pshuflw	xmm0, xmm0, 0
		pshufd	xmm2, xmm0, 0

loc_41C097:				; CODE XREF: sub_41C02B+ABj
		mov	eax, ecx
		and	eax, 0FFFh
		cmp	eax, 0FF0h
		ja	short loc_41C0C4
		movups	xmm0, oword ptr	[ecx]
		pxor	xmm1, xmm1
		pcmpeqw	xmm1, xmm0
		pcmpeqw	xmm0, xmm2
		por	xmm1, xmm0
		pmovmskb eax, xmm1
		test	eax, eax
		jnz	short loc_41C0D8
		push	10h
		jmp	short loc_41C0D3
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C0C4:				; CODE XREF: sub_41C02B+78j
		movzx	eax, word ptr [ecx]
		cmp	ax, dx
		jz	short loc_41C0E8
		test	ax, ax
		jz	short loc_41C0E4
		push	2

loc_41C0D3:				; CODE XREF: sub_41C02B+97j
		pop	eax
		add	ecx, eax
		jmp	short loc_41C097
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C0D8:				; CODE XREF: sub_41C02B+93j
		bsf	eax, eax
		add	ecx, eax
		xor	eax, eax
		cmp	[ecx], dx
		jmp	short loc_41C07A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C0E4:				; CODE XREF: sub_41C02B+A4j
		xor	eax, eax
		jmp	short loc_41C0EA
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C0E8:				; CODE XREF: sub_41C02B+9Fj
		mov	eax, ecx

loc_41C0EA:				; CODE XREF: sub_41C02B+55j
					; sub_41C02B+BBj
		pop	esi
		mov	esp, ebp
		pop	ebp
		mov	esp, ebx
		pop	ebx
		retn
sub_41C02B	endp ; sp =  4

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C100	proc near		; DATA XREF: .rdata:0042A7F0o
		mov	ecx, [ebp-10h]
		jmp	sub_402F41
sub_41C100	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C108	proc near		; DATA XREF: .rdata:0042A7F8o

; FUNCTION CHUNK AT 00402030 SIZE 0000001A BYTES

		mov	ecx, [ebp-10h]
		add	ecx, 4
		jmp	loc_402030
sub_41C108	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C113	proc near		; DATA XREF: .rdata:0042A800o
		mov	ecx, [ebp-10h]
		add	ecx, 0Ch
		jmp	loc_402030
sub_41C113	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C11E	proc near		; DATA XREF: .rdata:0042A808o
		mov	ecx, [ebp-10h]
		add	ecx, 14h
		jmp	loc_402030
sub_41C11E	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C129	proc near		; DATA XREF: .rdata:0042A810o
		mov	ecx, [ebp-10h]
		add	ecx, 1Ch
		jmp	loc_402030
sub_41C129	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C134	proc near		; DATA XREF: .rdata:0042A818o
		mov	ecx, [ebp-10h]
		add	ecx, 24h
		jmp	loc_402030
sub_41C134	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C13F	proc near		; DATA XREF: .rdata:0042A820o
		mov	ecx, [ebp-10h]
		add	ecx, 2Ch
		jmp	loc_402030
sub_41C13F	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C14A:				; DATA XREF: .text:00401235o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-18h]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42A7C8
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_41C170:				; DATA XREF: sub_4012F0+5o
					; sub_403027+5o ...
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42A824
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_41C190:				; DATA XREF: sub_4014B0+5o
					; sub_402DC0+5o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42A824
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C1B0	proc near		; DATA XREF: .rdata:0042A874o
		push	18h
		mov	eax, [ebp-14h]
		push	eax
		call	sub_40535E
		add	esp, 8
		retn
sub_41C1B0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C1BF	proc near		; DATA XREF: .rdata:0042A87Co
		lea	ecx, [ebp-5Ch]
		jmp	sub_402F41
sub_41C1BF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C1C7	proc near		; DATA XREF: .rdata:0042A884o
		lea	ecx, [ebp-58h]
		jmp	loc_402030
sub_41C1C7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C1CF	proc near		; DATA XREF: .rdata:0042A88Co
		lea	ecx, [ebp-50h]
		jmp	loc_402030
sub_41C1CF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C1D7	proc near		; DATA XREF: .rdata:0042A894o
		lea	ecx, [ebp-48h]
		jmp	loc_402030
sub_41C1D7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C1DF	proc near		; DATA XREF: .rdata:0042A89Co
		lea	ecx, [ebp-40h]
		jmp	loc_402030
sub_41C1DF	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C1E7	proc near		; DATA XREF: .rdata:0042A8A4o
		lea	ecx, [ebp-38h]
		jmp	loc_402030
sub_41C1E7	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C1EF	proc near		; DATA XREF: .rdata:0042A8ACo
		lea	ecx, [ebp-30h]
		jmp	loc_402030
sub_41C1EF	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C1F7:				; DATA XREF: .text:00401578o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-60h]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42A848
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C220	proc near		; DATA XREF: .rdata:0042A8E0o
		lea	ecx, [ebp-40h]
		jmp	loc_402050
sub_41C220	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C228	proc near		; DATA XREF: .rdata:0042A8E8o
		lea	ecx, [ebp-5Ch]
		jmp	loc_402050
sub_41C228	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C230:				; DATA XREF: .text:004019E8o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-78h]
		xor	ecx, eax
		call	sub_40534D
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42A8B8
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C260	proc near		; DATA XREF: .rdata:0042A914o
		lea	ecx, [ebp-28h]
		jmp	loc_402050
sub_41C260	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C268:				; DATA XREF: .text:00401D65o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-2Ch]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42A8EC
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C290	proc near		; DATA XREF: .rdata:0042A940o
		lea	ecx, [ebp-28h]
		jmp	sub_402DC0
sub_41C290	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C298	proc near		; DATA XREF: .rdata:0042A948o
		lea	ecx, [ebp-28h]
		jmp	sub_402870
sub_41C298	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C2A0:				; DATA XREF: .text:004021E5o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-44h]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42A918
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C2C0	proc near		; DATA XREF: .rdata:0042A9C0o
		lea	ecx, [ebp-2Ch]
		jmp	sub_4014B0
sub_41C2C0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C2C8	proc near		; DATA XREF: .rdata:0042A9C8o
		lea	ecx, [ebp-1Ch]
		jmp	sub_402F41
sub_41C2C8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C2D0	proc near		; DATA XREF: .rdata:0042A9D0o

; FUNCTION CHUNK AT 00402860 SIZE 0000000D BYTES

		lea	ecx, [ebp-14h]
		jmp	loc_402860
sub_41C2D0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C2D8:				; DATA XREF: .text:00402495o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-3Ch]
		xor	ecx, eax
		call	sub_40534D
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42A990
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_41C300:				; DATA XREF: sub_402870+5o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0Ch]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42A9DC
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C320	proc near		; DATA XREF: .rdata:0042AA30o
		mov	ecx, [ebp-10h]
		jmp	sub_402DC0
sub_41C320	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C328:				; DATA XREF: sub_4028E0+5o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-10h]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42AA08
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C350	proc near		; DATA XREF: .rdata:0042AA5Co
		lea	ecx, [ebp-18h]
		jmp	sub_402870
sub_41C350	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C358:				; DATA XREF: sub_4029C0+5o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-14h]
		xor	ecx, eax
		call	sub_40534D
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42AA34
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C380	proc near		; DATA XREF: .rdata:0042AA98o
		lea	ecx, [ebp-20h]
		jmp	sub_402DC0
sub_41C380	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C388	proc near		; DATA XREF: .rdata:0042AAA0o
		lea	ecx, [ebp-20h]
		jmp	sub_402870
sub_41C388	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C390:				; DATA XREF: sub_402A90+5o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-28h]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42AA70
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C3B0	proc near		; DATA XREF: .rdata:0042AB18o
		lea	ecx, [ebp-30h]
		jmp	sub_4014B0
sub_41C3B0	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C3B8	proc near		; DATA XREF: .rdata:0042AB20o
		lea	ecx, [ebp-20h]
		jmp	sub_402F41
sub_41C3B8	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C3C0	proc near		; DATA XREF: .rdata:0042AB28o
		lea	ecx, [ebp-18h]
		jmp	loc_402860
sub_41C3C0	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C3C8:				; DATA XREF: .text:00402C15o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-40h]
		xor	ecx, eax
		call	sub_40534D
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42AAE8
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
		align 10h

loc_41C3F0:				; DATA XREF: sub_402E10+5o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-14h]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42AB34
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C40B:				; DATA XREF: sub_402FA1+5o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0Ch]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42A824
		jmp	loc_406592

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C426	proc near		; DATA XREF: .rdata:0042ABBCo
		lea	ecx, [ebp-10h]
		jmp	sub_402F41
sub_41C426	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C42E:				; DATA XREF: sub_403128+2o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-14h]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42ABC0
		jmp	loc_406592

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C449	proc near		; DATA XREF: .rdata:0042AB90o
		lea	ecx, [ebp-14h]
		jmp	sub_402F41
sub_41C449	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C451:				; DATA XREF: sub_4031B8+2o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-18h]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42AB94
		jmp	loc_406592

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C46C	proc near		; DATA XREF: .rdata:0042AC98o
		lea	ecx, [ebp-14h]
		jmp	sub_402F41
sub_41C46C	endp


; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C474	proc near		; DATA XREF: .rdata:0042ACA0o
		lea	ecx, [ebp-10h]
		jmp	loc_402860
sub_41C474	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C47C:				; DATA XREF: sub_4036AB+2o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-24h]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42ACA4
		jmp	loc_406592

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C497	proc near		; DATA XREF: .rdata:0042AC6Co
		mov	eax, [ebp-10h]
		and	eax, 1
		jz	locret_41C4B2
		and	dword ptr [ebp-10h], 0FFFFFFFEh
		mov	ecx, [ebp-14h]
		add	ecx, 8
		jmp	sub_4038D8
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

locret_41C4B2:				; CODE XREF: sub_41C497+6j
		retn
sub_41C497	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C4B3:				; DATA XREF: sub_4036AB+A8o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-18h]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42AC70
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C4CE:				; DATA XREF: sub_4037B8+2o
					; sub_403CB3+2o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-10h]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42ABEC
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C4E9:				; DATA XREF: sub_4038D8+5o
					; sub_403939+5o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42AC18
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C504:				; DATA XREF: sub_4039C1+5o
					; sub_403A83+5o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42AC18
		jmp	loc_406592

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C51F	proc near		; DATA XREF: .rdata:0042ACCCo
		push	8
		push	dword ptr [ebp-10h]
		call	sub_40535E
		pop	ecx
		pop	ecx
		retn
sub_41C51F	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C52C:				; DATA XREF: sub_403B8B+2o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-48h]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42ACD0
		jmp	loc_406592

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C547	proc near		; DATA XREF: .rdata:0042AC40o
		lea	ecx, [ebp-28h]
		jmp	loc_402050
sub_41C547	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C54F:				; DATA XREF: sub_404313+2o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-3Ch]
		xor	ecx, eax
		call	sub_40534D
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42AC44
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C574:				; DATA XREF: sub_4092F9+2o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-14h]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42AEDC
		jmp	loc_406592

; ллллллллллллллл S U B	R O U T	I N E ллллллллллллллллллллллллллллллллллллллл


sub_41C58F	proc near		; DATA XREF: .rdata:0042B2B8o

; FUNCTION CHUNK AT 0040A29A SIZE 00000010 BYTES

		lea	ecx, [ebp-3Ch]
		jmp	loc_40A29A
sub_41C58F	endp

; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C597:				; DATA XREF: sub_410137+2o
		mov	edx, [esp+8]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-40h]
		xor	ecx, eax
		call	sub_40534D
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	sub_40534D
		mov	eax, offset dword_42B2BC
		jmp	loc_406592
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
byte_41C5BC	db 0B9h			; DATA XREF: sub_401000+Ao
		dd offset dword_42CE18
		db 0E9h, 54h, 69h
		db 0FEh, 0FFh
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C5C6:				; DATA XREF: sub_401016o
		mov	ecx, offset dword_42CF04
		jmp	loc_403000
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C5D0:				; DATA XREF: sub_401022o
		mov	ecx, offset dword_42CEFC
		jmp	sub_4014B0
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C5DA:				; DATA XREF: sub_40102E+13o
		mov	ecx, offset dword_42CF20
		jmp	sub_403939
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C5E4:				; DATA XREF: sub_40104D+2Co
		mov	ecx, offset dword_42CF70
		jmp	sub_403880
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
byte_41C5EE	db 0B9h			; DATA XREF: sub_401091+Ao
		dd offset byte_42CF18
		db 0E9h
		dd 0FFFE6922h
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ

loc_41C5F8:				; DATA XREF: sub_4010A7o
		mov	ecx, offset byte_42D00D
		jmp	loc_404A1A
; ФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФФ
byte_41C602	db 0B9h			; DATA XREF: sub_4010B3+Ao
		dd offset byte_42D00C
		db 0E9h
		dd 0FFFE690Eh, 7Ch dup(0)
		db 3 dup(0)
byte_41C7FF	db 0			; DATA XREF: .text:0040CDE8r
_text		ends

; Section 2. (virtual address 0001D000)
; Virtual size			: 0000EC96 (  60566.)
; Section size in file		: 0000EE00 (  60928.)
; Offset to raw	data for section: 0001BC00
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from KERNEL32.dll
;
; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Externs
; _idata
; int __stdcall	WideCharToMultiByte(UINT CodePage,DWORD	dwFlags,LPCWSTR	lpWideCharStr,int cchWideChar,LPSTR lpMultiByteStr,int cchMultiByte,LPCSTR lpDefaultChar,LPBOOL	lpUsedDefaultChar)
		extrn WideCharToMultiByte:dword	; DATA XREF: sub_404AAB+190r
					; sub_415578+A2r
; DWORD	GetLastError(void)
		extrn GetLastError:dword ; DATA	XREF: sub_408745+Er
					; sub_4087D7+Er ...
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; DATA	XREF: sub_4049F8+6r
					; sub_409ED7+Fr ...
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; DATA	XREF: sub_404A06+6r
					; sub_409F1F+Fr ...
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; DATA XREF: sub_4049B3+26r
					; sub_4097B3+16r ...
		extrn EncodePointer:dword ; DATA XREF: sub_404A7D+19r
					; sub_408E42+24r
		extrn DecodePointer:dword ; DATA XREF: .text:00404A4Er
					; sub_419DD8+19r
; int __stdcall	MultiByteToWideChar(UINT CodePage,DWORD	dwFlags,LPCSTR lpMultiByteStr,int cchMultiByte,LPWSTR lpWideCharStr,int	cchWideChar)
		extrn MultiByteToWideChar:dword	; DATA XREF: sub_404AAB+49r
					; sub_404AAB+C0r ...
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; DATA	XREF: sub_40514F+84r
					; sub_408745+87r ...
; BOOL __stdcall InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION lpCriticalSection,DWORD dwSpinCount)
		extrn InitializeCriticalSectionAndSpinCount:dword
					; DATA XREF: sub_4051DD+2Dr
					; sub_409A04+3Er ...
; BOOL SwitchToThread(void)
		extrn SwitchToThread:dword ; DATA XREF:	sub_40514F+47r
; DWORD	TlsAlloc(void)
		extrn TlsAlloc:dword	; DATA XREF: sub_409915+35r
					; sub_40FA78:loc_40FAACr
					; Allocate a thread local storage (TLS)	index
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; DATA XREF: sub_40998B:loc_4099BDr
					; sub_40FAF6+39r
; BOOL __stdcall TlsSetValue(DWORD dwTlsIndex,LPVOID lpTlsValue)
		extrn TlsSetValue:dword	; DATA XREF: sub_4099C6:loc_4099FBr
					; sub_40FB35+3Cr
; BOOL __stdcall TlsFree(DWORD dwTlsIndex)
		extrn TlsFree:dword	; DATA XREF: sub_409950:loc_409982r
					; sub_40FAB7+39r
					; Release a thread local storage (TLS) index
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; DATA XREF: sub_405CC5+12r
; HMODULE __stdcall GetModuleHandleW(LPCWSTR lpModuleName)
		extrn GetModuleHandleW:dword ; DATA XREF: sub_404DA5+6r
					; sub_405EEA+2r
; FARPROC __stdcall GetProcAddress(HMODULE hModule,LPCSTR lpProcName)
		extrn GetProcAddress:dword ; DATA XREF:	sub_404DA5+14r
					; sub_404DA5+2Br ...
; int __stdcall	CompareStringW(LCID Locale,DWORD dwCmpFlags,LPCWSTR lpString1,int cchCount1,LPCWSTR lpString2,int cchCount2)
		extrn CompareStringW:dword ; DATA XREF:	sub_40F9C5+52r
; int __stdcall	LCMapStringW(LCID Locale,DWORD dwMapFlags,LPCWSTR lpSrcStr,int cchSrc,LPWSTR lpDestStr,int cchDest)
		extrn LCMapStringW:dword ; DATA	XREF: sub_40528E+4Er
					; sub_40FCB4+52r
; int __stdcall	GetLocaleInfoW(LCID Locale,LCTYPE LCType,LPWSTR	lpLCData,int cchData)
		extrn GetLocaleInfoW:dword ; DATA XREF:	sub_40FB77+34r
					; sub_4186DE+251r ...
; BOOL __stdcall GetStringTypeW(DWORD dwInfoType,LPCWSTR lpSrcStr,int cchSrc,LPWORD lpCharType)
		extrn GetStringTypeW:dword ; DATA XREF:	sub_41086F+D0r
					; sub_419CE6+11r
; BOOL __stdcall GetCPInfo(UINT	CodePage,LPCPINFO lpCPInfo)
		extrn GetCPInfo:dword	; DATA XREF: sub_40A4A8+10Er
					; sub_41637B+32r ...
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; DATA XREF: sub_405A58+Er
					; sub_405DCB+101r ...
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; DATA XREF: sub_405A58+5r
					; sub_405DCB+F7r ...
; HANDLE GetCurrentProcess(void)
		extrn GetCurrentProcess:dword ;	DATA XREF: sub_405A58+19r
					; sub_409E62+25r ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess,UINT uExitCode)
		extrn TerminateProcess:dword ; DATA XREF: sub_405A58+20r
					; sub_409E62+2Cr ...
; BOOL __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
		extrn __imp_IsProcessorFeaturePresent:dword ; DATA XREF: sub_409E62+2r
					; sub_40C069+1Cr ...
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; DATA XREF: sub_405CC5+37r
; DWORD	GetCurrentProcessId(void)
		extrn GetCurrentProcessId:dword	; DATA XREF: sub_405CC5+2Ar
; DWORD	GetCurrentThreadId(void)
		extrn GetCurrentThreadId:dword ; DATA XREF: sub_405CC5+21r
		extrn InitializeSListHead:dword	; DATA XREF: sub_405D63+5r
; BOOL IsDebuggerPresent(void)
		extrn IsDebuggerPresent:dword ;	DATA XREF: sub_405DCB+D7r
					; sub_409C87+F8r
; void __stdcall GetStartupInfoW(LPSTARTUPINFOW	lpStartupInfo)
		extrn GetStartupInfoW:dword ; DATA XREF: sub_410C8C+Cr
		extrn RtlUnwind:dword	; DATA XREF: sub_406408+24r
					; sub_409744+Fr ...
; void __stdcall RaiseException(DWORD dwExceptionCode,DWORD dwExceptionFlags,DWORD nNumberOfArguments,const DWORD *lpArguments)
		extrn RaiseException:dword ; DATA XREF:	sub_406D34+60r
					; sub_41367E+22Dr
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
		extrn FreeLibrary:dword	; DATA XREF: sub_4097E2+A3r
					; sub_409A74+1Br ...
; HMODULE __stdcall LoadLibraryExW(LPCWSTR lpLibFileName,HANDLE	hFile,DWORD dwFlags)
		extrn LoadLibraryExW:dword ; DATA XREF:	sub_4097E2+3Br
					; sub_4097E2+7Dr ...
; HANDLE __stdcall GetStdHandle(DWORD nStdHandle)
		extrn GetStdHandle:dword ; DATA	XREF: sub_410D44+4Cr
; BOOL __stdcall WriteFile(HANDLE hFile,LPCVOID	lpBuffer,DWORD nNumberOfBytesToWrite,LPDWORD lpNumberOfBytesWritten,LPOVERLAPPED lpOverlapped)
		extrn WriteFile:dword	; DATA XREF: sub_4111A0+28Cr
					; sub_4111A0+2CCr ...
; DWORD	__stdcall GetModuleFileNameW(HMODULE hModule,LPWSTR lpFilename,DWORD nSize)
		extrn GetModuleFileNameW:dword ; DATA XREF: sub_4160FC+25r
; void __stdcall ExitProcess(UINT uExitCode)
		extrn ExitProcess:dword	; DATA XREF: sub_40D02B+3Br
		extrn GetModuleHandleExW:dword ; DATA XREF: sub_40D06D+15r
; LPSTR	GetCommandLineA(void)
		extrn GetCommandLineA:dword ; DATA XREF: sub_40D17Er
; LPWSTR GetCommandLineW(void)
		extrn GetCommandLineW:dword ; DATA XREF: sub_40D17E+Br
; BOOL __stdcall HeapFree(HANDLE hHeap,DWORD dwFlags,LPVOID lpMem)
		extrn HeapFree:dword	; DATA XREF: sub_40F0A8+16r
; BOOL __stdcall IsValidLocale(LCID Locale,DWORD dwFlags)
		extrn IsValidLocale:dword ; DATA XREF: sub_40FC3D+2Dr
					; sub_41904D+166r
; LCID GetUserDefaultLCID(void)
		extrn GetUserDefaultLCID:dword ; DATA XREF: sub_40FBB6+2Br
					; sub_41904D+10Cr
; BOOL __stdcall EnumSystemLocalesW(LOCALE_ENUMPROCW lpLocaleEnumProc,DWORD dwFlags)
		extrn EnumSystemLocalesW:dword ; DATA XREF: sub_40F65B+38r
					; sub_418984+37r ...
; LPVOID __stdcall HeapAlloc(HANDLE hHeap,DWORD	dwFlags,DWORD dwBytes)
		extrn HeapAlloc:dword	; DATA XREF: sub_40FDE5+32r
					; sub_40FE33+41r
; DWORD	__stdcall GetFileType(HANDLE hFile)
		extrn GetFileType:dword	; DATA XREF: sub_410C8C+76r
					; sub_410D44+5Er
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; DATA XREF: sub_410F8B+56r
					; sub_41AE9A+10r
; BOOL __stdcall FlushFileBuffers(HANDLE hFile)
		extrn FlushFileBuffers:dword ; DATA XREF: sub_411089+49r
; UINT GetConsoleCP(void)
		extrn GetConsoleCP:dword ; DATA	XREF: sub_4111A0+48r
; BOOL __stdcall GetConsoleMode(HANDLE hConsoleHandle,LPDWORD lpMode)
		extrn GetConsoleMode:dword ; DATA XREF:	sub_4115B6+5Dr
					; sub_412BEA+28Br
; BOOL __stdcall ReadFile(HANDLE hFile,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,LPDWORD lpNumberOfBytesRead,LPOVERLAPPED lpOverlapped)
		extrn ReadFile:dword	; DATA XREF: sub_412146+C7r
					; sub_4125E8+B3r ...
		extrn GetFileSizeEx:dword ; DATA XREF: sub_412556+5Fr
		extrn SetFilePointerEx:dword ; DATA XREF: sub_412556+50r
					; sub_41309E+39r
; BOOL __stdcall ReadConsoleW(HANDLE hConsoleInput,LPVOID lpBuffer,DWORD nNumberOfCharsToRead,LPDWORD lpNumberOfCharsRead,LPVOID lpReserved)
		extrn ReadConsoleW:dword ; DATA	XREF: sub_412BEA+2ADr
; LPVOID __stdcall HeapReAlloc(HANDLE hHeap,DWORD dwFlags,LPVOID lpMem,DWORD dwBytes)
		extrn HeapReAlloc:dword	; DATA XREF: sub_413298+5Dr
; BOOL __stdcall FindClose(HANDLE hFindFile)
		extrn FindClose:dword	; DATA XREF: sub_415CCD+22Br
; HANDLE __stdcall FindFirstFileExW(LPCWSTR lpFileName,FINDEX_INFO_LEVELS fInfoLevelId,LPVOID lpFindFileData,FINDEX_SEARCH_OPS fSearchOp,LPVOID	lpSearchFilter,DWORD dwAdditionalFlags)
		extrn FindFirstFileExW:dword ; DATA XREF: sub_415CCD+F0r
; BOOL __stdcall FindNextFileW(HANDLE hFindFile,LPWIN32_FIND_DATAW lpFindFileData)
		extrn FindNextFileW:dword ; DATA XREF: sub_415CCD+1CEr
; BOOL __stdcall IsValidCodePage(UINT CodePage)
		extrn IsValidCodePage:dword ; DATA XREF: sub_41670A+5Er
					; sub_4186DE+ECr ...
; UINT GetACP(void)
		extrn GetACP:dword	; DATA XREF: sub_4162A3+42r
					; sub_4186DE+C1r ...
; UINT GetOEMCP(void)
		extrn GetOEMCP:dword	; DATA XREF: sub_4162A3+2Br
; LPWSTR GetEnvironmentStringsW(void)
		extrn GetEnvironmentStringsW:dword ; DATA XREF:	sub_4169A7+9r
; BOOL __stdcall FreeEnvironmentStringsW(LPWSTR)
		extrn FreeEnvironmentStringsW:dword ; DATA XREF: sub_4169A7+77r
; BOOL __stdcall SetEnvironmentVariableW(LPCWSTR lpName,LPCWSTR	lpValue)
		extrn SetEnvironmentVariableW:dword ; DATA XREF: sub_41A838+6Br
; BOOL __stdcall SetStdHandle(DWORD nStdHandle,HANDLE hHandle)
		extrn SetStdHandle:dword ; DATA	XREF: sub_416F58:loc_416FB8r
; HANDLE GetProcessHeap(void)
		extrn GetProcessHeap:dword ; DATA XREF:	sub_4192B1r
; DWORD	__stdcall HeapSize(HANDLE hHeap,DWORD dwFlags,LPCVOID lpMem)
		extrn HeapSize:dword	; DATA XREF: sub_41ABD9+2Br
; HANDLE __stdcall CreateFileW(LPCWSTR lpFileName,DWORD	dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES	lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile)
		extrn CreateFileW:dword	; DATA XREF: sub_41AE5C+13r
; BOOL __stdcall WriteConsoleW(HANDLE hConsoleOutput,const void	*lpBuffer,DWORD	nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved)
		extrn WriteConsoleW:dword ; DATA XREF: sub_41AEB1+17r
					; sub_41AEB1+48r


; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 41D12Ch
off_41D12C	dd offset nullsub_1	; DATA XREF: sub_402FA1+2Er
					; sub_402FA1+46r ...
dword_41D130	dd 0			; DATA XREF: start-110o
		dd offset sub_405477
		dd offset sub_401000
		dd offset sub_401091
		dd offset sub_40104D
		dd offset sub_40102E
		dd offset sub_401087
		dd offset sub_4010B3
		dd offset sub_4010A7
		dd offset sub_401016
		dd offset sub_401022
dword_41D15C	dd 0			; DATA XREF: start:loc_4054F6o
dword_41D160	dd 0			; DATA XREF: start-136o
		dd offset sub_4053C4
		dd offset loc_40546F
		dd offset sub_404DA5
		dd offset sub_40A8E5
		dd offset sub_413ED4
		dd offset sub_415790
		dd offset sub_41A736
dword_41D180	dd 0			; DATA XREF: start-13Bo
dword_41D184	dd 0			; DATA XREF: sub_40CEE2+80o
		dd offset unk_40D45A
		dd offset sub_41AE9A
		dd offset sub_40A9BD
dword_41D194	dd 0			; DATA XREF: sub_40CEE2+7Bo
dword_41D198	dd 0			; DATA XREF: sub_40CEE2+91o
dword_41D19C	dd 0			; DATA XREF: sub_40CEE2:loc_40CF6Eo
		dd offset dword_42A354
off_41D1A4	dd offset sub_401400	; DATA XREF: sub_401400+Ao
					; sub_4018A0+35o ...
		dd offset byte_4067A1
		dd offset byte_4067A1
		dd offset dword_429A70
off_41D1B4	dd offset sub_4030D4	; DATA XREF: sub_402F60+1Eo
					; sub_403027+26o
		dd offset dword_401480
		dd offset dword_401480+10h
dword_41D1C0	dd 2Ah			; DATA XREF: sub_402F60+Co
					; sub_40322F:loc_403269o ...
dword_41D1C4	dd 43h			; DATA XREF: sub_403128+34o
dword_41D1C8	dd 66h			; DATA XREF: sub_4035A8+6o
		dd offset aAddressFamilyN ; "address family not	supported"
		dd 64h
		dd offset aAddressInUse	; "address in use"
		dd 65h
		dd offset aAddressNotAvai ; "address not available"
		dd 71h
		dd offset aAlreadyConnect ; "already connected"
		dd 7
		dd offset aArgumentListTo ; "argument list too long"
		dd 21h
		dd offset aArgumentOutOfD ; "argument out of domain"
		dd 0Eh
		dd offset aBadAddress	; "bad address"
		dd 9
		dd offset aBadFileDescrip ; "bad file descriptor"
		dd 68h
		dd offset aBadMessage	; "bad message"
		dd 20h
		dd offset aBrokenPipe	; "broken pipe"
		dd 6Ah
		dd offset aConnectionAbor ; "connection	aborted"
		dd 67h
		dd offset aConnectionAlre ; "connection	already	in progress"
		dd 6Bh
		dd offset aConnectionRefu ; "connection	refused"
		dd 6Ch
		dd offset aConnectionRese ; "connection	reset"
		dd 12h
		dd offset aCrossDeviceLin ; "cross device link"
		dd 6Dh
		dd offset aDestinationAdd ; "destination address required"
		dd 10h
		dd offset aDeviceOrResour ; "device or resource	busy"
		dd 29h
		dd offset aDirectoryNotEm ; "directory not empty"
		dd 8
		dd offset aExecutableForm ; "executable	format error"
		dd 11h
		dd offset aFileExists	; "file	exists"
		dd 1Bh
		dd offset aFileTooLarge	; "file	too large"
		dd 26h
		dd offset aFilenameTooLon ; "filename too long"
		dd 28h
		dd offset aFunctionNotSup ; "function not supported"
		dd 6Eh
		dd offset aHostUnreachabl ; "host unreachable"
		dd 6Fh
		dd offset aIdentifierRemo ; "identifier	removed"
		dd 2Ah
		dd offset aIllegalByteSeq ; "illegal byte sequence"
		dd 19h
		dd offset aInappropriateI ; "inappropriate io control operation"
		dd 4
		dd offset aInterrupted	; "interrupted"
		dd 16h
		dd offset aInvalidArgumen ; "invalid argument"
		dd 1Dh
		dd offset aInvalidSeek	; "invalid seek"
		dd 5
		dd offset aIoError	; "io error"
		dd 15h
		dd offset aIsADirectory	; "is a	directory"
		dd 73h
		dd offset aMessageSize	; "message size"
		dd 74h
		dd offset aNetworkDown	; "network down"
		dd 75h
		dd offset aNetworkReset	; "network reset"
		dd 76h
		dd offset aNetworkUnreach ; "network unreachable"
		dd 77h
		dd offset aNoBufferSpace ; "no buffer space"
		dd 0Ah
		dd offset aNoChildProcess ; "no	child process"
		dd 79h
		dd offset aNoLink	; "no link"
		dd 27h
		dd offset aNoLockAvailabl ; "no	lock available"
		dd 78h
		dd offset aNoMessageAvail ; "no	message	available"
		dd 7Ah
		dd offset aNoMessage	; "no message"
		dd 7Bh
		dd offset aNoProtocolOpti ; "no	protocol option"
		dd 1Ch
		dd offset aNoSpaceOnDevic ; "no	space on device"
		dd 7Ch
		dd offset aNoStreamResour ; "no	stream resources"
		dd 6
		dd offset aNoSuchDeviceOr ; "no	such device or address"
		dd 13h
		dd offset aNoSuchDevice	; "no such device"
		dd 2
		dd offset aNoSuchFileOrDi ; "no	such file or directory"
		dd 3
		dd offset aNoSuchProcess ; "no such process"
		dd 14h
		dd offset aNotADirectory ; "not	a directory"
		dd 80h
		dd offset aNotASocket	; "not a socket"
		dd 7Dh
		dd offset aNotAStream	; "not a stream"
		dd 7Eh
		dd offset aNotConnected	; "not connected"
		dd 0Ch
		dd offset aNotEnoughMemor ; "not enough	memory"
		dd 81h
		dd offset aNotSupported	; "not supported"
		dd 69h
		dd offset aOperationCance ; "operation canceled"
		dd 70h
		dd offset aOperationInPro ; "operation in progress"
		dd 1
		dd offset aOperationNotPe ; "operation not permitted"
		dd 82h
		dd offset aOperationNotSu ; "operation not supported"
		dd 8Ch
		dd offset aOperationWould ; "operation would block"
		dd 85h
		dd offset aOwnerDead	; "owner dead"
		dd 0Dh
		dd offset aPermissionDeni ; "permission	denied"
		dd 86h
		dd offset aProtocolError ; "protocol error"
		dd 87h
		dd offset aProtocolNotSup ; "protocol not supported"
		dd 1Eh
		dd offset aReadOnlyFileSy ; "read only file system"
		dd 24h
		dd offset aResourceDeadlo ; "resource deadlock would occur"
		dd 0Bh
		dd offset aResourceUnavai ; "resource unavailable try again"
		dd 22h
		dd offset aResultOutOfRan ; "result out	of range"
		dd 7Fh
		dd offset aStateNotRecove ; "state not recoverable"
		dd 89h
		dd offset aStreamTimeout ; "stream timeout"
		dd 8Bh
		dd offset aTextFileBusy	; "text	file busy"
		dd 8Ah
		dd offset aTimedOut	; "timed out"
		dd 17h
		dd offset aTooManyFilesOp ; "too many files open in system"
		dd 18h
		dd offset aTooManyFiles_0 ; "too many files open"
		dd 1Fh
		dd offset aTooManyLinks	; "too many links"
		dd 72h
		dd offset aTooManySymboli ; "too many symbolic link levels"
		dd 84h
		dd offset aValueTooLarge ; "value too large"
		dd 88h
		dd offset aWrongProtocolT ; "wrong protocol type"
dword_41D438	dd 5, 0Dh, 0B7h, 11h, 14h, 13h,	6Fh, 26h, 0AAh,	10h, 8Eh
					; DATA XREF: sub_4035A8+12o
		dd 10h,	52h, 0Dh, 3F3h,	5, 3F4h, 5, 3F5h, 5, 10h, 0Dh
		dd 37h,	13h, 964h, 10h,	91h, 29h, 10Bh,	16h, 70h, 1Ch
		dd 50h,	11h, 2 dup(2), 27h, 1Ch, 0Ch, 0Dh, 0Fh,	13h, 1
		dd 28h,	6, 16h,	7Bh, 16h, 57h, 16h, 21h, 27h, 0D4h, 27h
		dd 83h,	16h, 3E6h, 0Dh,	8, 0Ch,	15h, 0Bh, 11h, 12h, 32h
		dd 81h,	6Eh, 5,	961h, 10h, 3E3h, 69h, 0Eh, 0Ch,	3, 2, 1Eh
		dd 5, 1129h, 16h, 4D5h,	0Bh, 19h, 5, 20h, 0Dh, 4, 18h
		dd 1Dh,	5, 13h,	0Dh, 271Dh, 0Dh, 2740h,	64h, 2741h, 65h
		dd 273Fh, 66h, 2735h, 67h, 2719h, 9, 2745h, 6Ah, 274Dh
		dd 6Bh,	2746h, 6Ch, 2737h, 6Dh,	271Eh, 0Eh, 2751h, 6Eh
		dd 2734h, 70h, 2714h, 4, 2726h,	16h, 2748h, 71h, 2728h
		dd 18h,	2738h, 73h, 274Fh, 26h,	2742h, 74h, 2744h, 75h
		dd 2743h, 76h, 2747h, 77h, 273Ah, 7Bh, 2749h, 7Eh, 2736h
		dd 80h,	273Dh, 82h, 273Bh, 87h,	2739h, 88h, 274Ch, 8Ah
		dd 2733h, 8Ch
aAddressFamilyN	db 'address family not supported',0 ; DATA XREF: .rdata:0041D1CCo
		align 10h
aAddressInUse	db 'address in use',0   ; DATA XREF: .rdata:0041D1D4o
		align 10h
aAddressNotAvai	db 'address not available',0 ; DATA XREF: .rdata:0041D1DCo
		align 4
aAlreadyConnect	db 'already connected',0 ; DATA XREF: .rdata:0041D1E4o
		align 4
aArgumentListTo	db 'argument list too long',0 ; DATA XREF: .rdata:0041D1ECo
		align 4
aArgumentOutOfD	db 'argument out of domain',0 ; DATA XREF: .rdata:0041D1F4o
		align 4
aBadAddress	db 'bad address',0      ; DATA XREF: .rdata:0041D1FCo
aBadFileDescrip	db 'bad file descriptor',0 ; DATA XREF: .rdata:0041D204o
aBadMessage	db 'bad message',0      ; DATA XREF: .rdata:0041D20Co
aBrokenPipe	db 'broken pipe',0      ; DATA XREF: .rdata:0041D214o
aConnectionAbor	db 'connection aborted',0 ; DATA XREF: .rdata:0041D21Co
		align 4
aConnectionAlre	db 'connection already in progress',0 ; DATA XREF: .rdata:0041D224o
		align 4
aConnectionRefu	db 'connection refused',0 ; DATA XREF: .rdata:0041D22Co
		align 4
aConnectionRese	db 'connection reset',0 ; DATA XREF: .rdata:0041D234o
		align 10h
aCrossDeviceLin	db 'cross device link',0 ; DATA XREF: .rdata:0041D23Co
		align 4
aDestinationAdd	db 'destination address required',0 ; DATA XREF: .rdata:0041D244o
		align 4
aDeviceOrResour	db 'device or resource busy',0 ; DATA XREF: .rdata:0041D24Co
aDirectoryNotEm	db 'directory not empty',0 ; DATA XREF: .rdata:0041D254o
aExecutableForm	db 'executable format error',0 ; DATA XREF: .rdata:0041D25Co
aFileExists	db 'file exists',0      ; DATA XREF: .rdata:0041D264o
aFileTooLarge	db 'file too large',0   ; DATA XREF: .rdata:0041D26Co
		align 4
aFilenameTooLon	db 'filename too long',0 ; DATA XREF: .rdata:0041D274o
		align 4
aFunctionNotSup	db 'function not supported',0 ; DATA XREF: .rdata:0041D27Co
		align 10h
aHostUnreachabl	db 'host unreachable',0 ; DATA XREF: .rdata:0041D284o
		align 4
aIdentifierRemo	db 'identifier removed',0 ; DATA XREF: .rdata:0041D28Co
		align 4
aIllegalByteSeq	db 'illegal byte sequence',0 ; DATA XREF: .rdata:0041D294o
		align 10h
aInappropriateI	db 'inappropriate io control operation',0 ; DATA XREF: .rdata:0041D29Co
		align 4
aInterrupted	db 'interrupted',0      ; DATA XREF: .rdata:0041D2A4o
aInvalidArgumen	db 'invalid argument',0 ; DATA XREF: .rdata:0041D2ACo
		align 4
aInvalidSeek	db 'invalid seek',0     ; DATA XREF: .rdata:0041D2B4o
		align 4
aIoError	db 'io error',0         ; DATA XREF: .rdata:0041D2BCo
		align 10h
aIsADirectory	db 'is a directory',0   ; DATA XREF: .rdata:0041D2C4o
		align 10h
aMessageSize	db 'message size',0     ; DATA XREF: .rdata:0041D2CCo
		align 10h
aNetworkDown	db 'network down',0     ; DATA XREF: .rdata:0041D2D4o
		align 10h
aNetworkReset	db 'network reset',0    ; DATA XREF: .rdata:0041D2DCo
		align 10h
aNetworkUnreach	db 'network unreachable',0 ; DATA XREF: .rdata:0041D2E4o
aNoBufferSpace	db 'no buffer space',0  ; DATA XREF: .rdata:0041D2ECo
aNoChildProcess	db 'no child process',0 ; DATA XREF: .rdata:0041D2F4o
		align 4
aNoLink		db 'no link',0          ; DATA XREF: .rdata:0041D2FCo
aNoLockAvailabl	db 'no lock available',0 ; DATA XREF: .rdata:0041D304o
		align 4
aNoMessageAvail	db 'no message available',0 ; DATA XREF: .rdata:0041D30Co
		align 4
aNoMessage	db 'no message',0       ; DATA XREF: .rdata:0041D314o
		align 4
aNoProtocolOpti	db 'no protocol option',0 ; DATA XREF: .rdata:0041D31Co
		align 4
aNoSpaceOnDevic	db 'no space on device',0 ; DATA XREF: .rdata:0041D324o
		align 10h
aNoStreamResour	db 'no stream resources',0 ; DATA XREF: .rdata:0041D32Co
aNoSuchDeviceOr	db 'no such device or address',0 ; DATA XREF: .rdata:0041D334o
		align 10h
aNoSuchDevice	db 'no such device',0   ; DATA XREF: .rdata:0041D33Co
		align 10h
aNoSuchFileOrDi	db 'no such file or directory',0 ; DATA XREF: .rdata:0041D344o
		align 4
aNoSuchProcess	db 'no such process',0  ; DATA XREF: .rdata:0041D34Co
aNotADirectory	db 'not a directory',0  ; DATA XREF: .rdata:0041D354o
aNotASocket	db 'not a socket',0     ; DATA XREF: .rdata:0041D35Co
		align 4
aNotAStream	db 'not a stream',0     ; DATA XREF: .rdata:0041D364o
		align 4
aNotConnected	db 'not connected',0    ; DATA XREF: .rdata:0041D36Co
		align 4
aNotEnoughMemor	db 'not enough memory',0 ; DATA XREF: .rdata:0041D374o
		align 10h
aNotSupported	db 'not supported',0    ; DATA XREF: .rdata:0041D37Co
		align 10h
aOperationCance	db 'operation canceled',0 ; DATA XREF: .rdata:0041D384o
		align 4
aOperationInPro	db 'operation in progress',0 ; DATA XREF: .rdata:0041D38Co
		align 4
aOperationNotPe	db 'operation not permitted',0 ; DATA XREF: .rdata:0041D394o
aOperationNotSu	db 'operation not supported',0 ; DATA XREF: .rdata:0041D39Co
aOperationWould	db 'operation would block',0 ; DATA XREF: .rdata:0041D3A4o
		align 4
aOwnerDead	db 'owner dead',0       ; DATA XREF: .rdata:0041D3ACo
		align 10h
aPermissionDeni	db 'permission denied',0 ; DATA XREF: .rdata:0041D3B4o
		align 4
aProtocolError	db 'protocol error',0   ; DATA XREF: .rdata:0041D3BCo
		align 4
aProtocolNotSup	db 'protocol not supported',0 ; DATA XREF: .rdata:0041D3C4o
		align 4
aReadOnlyFileSy	db 'read only file system',0 ; DATA XREF: .rdata:0041D3CCo
		align 4
aResourceDeadlo	db 'resource deadlock would occur',0 ; DATA XREF: .rdata:0041D3D4o
		align 4
aResourceUnavai	db 'resource unavailable try again',0 ; DATA XREF: .rdata:0041D3DCo
		align 4
aResultOutOfRan	db 'result out of range',0 ; DATA XREF: .rdata:0041D3E4o
aStateNotRecove	db 'state not recoverable',0 ; DATA XREF: .rdata:0041D3ECo
		align 10h
aStreamTimeout	db 'stream timeout',0   ; DATA XREF: .rdata:0041D3F4o
		align 10h
aTextFileBusy	db 'text file busy',0   ; DATA XREF: .rdata:0041D3FCo
		align 10h
aTimedOut	db 'timed out',0        ; DATA XREF: .rdata:0041D404o
		align 4
aTooManyFilesOp	db 'too many files open in system',0 ; DATA XREF: .rdata:0041D40Co
		align 4
aTooManyFiles_0	db 'too many files open',0 ; DATA XREF: .rdata:0041D414o
aTooManyLinks	db 'too many links',0   ; DATA XREF: .rdata:0041D41Co
		align 10h
aTooManySymboli	db 'too many symbolic link levels',0 ; DATA XREF: .rdata:0041D424o
		align 10h
aValueTooLarge	db 'value too large',0  ; DATA XREF: .rdata:0041D42Co
aWrongProtocolT	db 'wrong protocol type',0 ; DATA XREF: .rdata:0041D434o
aUnknownError	db 'unknown error',0    ; DATA XREF: sub_4035A8+19o
		align 4
		dd offset dword_42A390
off_41DCD8	dd offset sub_401160	; DATA XREF: sub_4010D0+27o
					; sub_401120+Do ...
		dd offset sub_401150
		dd offset dword_42A37C
off_41DCE4	dd offset sub_401160	; DATA XREF: sub_401190+3Do
					; sub_4013C0+26o ...
		dd offset sub_401150
		dd offset dword_42A368
off_41DCF0	dd offset sub_401160	; DATA XREF: sub_401210+11o
					; sub_402820+26o
		dd offset sub_401150
		dd offset dword_42A340
off_41DCFC	dd offset sub_4018A0	; DATA XREF: .text:00401642o
					; sub_4018A0+9o
		dd offset dword_401480
		dd offset dword_401480+10h
		dd offset sub_401760
		dd offset sub_401740
		dd offset sub_4017D0
		dd offset sub_4017B0
		dd offset sub_401830
		dd offset sub_401820
		dd offset sub_401870
		dd offset sub_401860
		dd offset dword_42A32C
off_41DD2C	dd offset sub_401C80	; DATA XREF: .text:00401C4Bo
					; sub_401EB0+24o ...
		dd offset sub_401150
		dd offset dword_42A318
off_41DD38	dd offset sub_401C80	; DATA XREF: sub_401F00+3Bo
		dd offset sub_401150
		dd offset dword_42A304
off_41DD44	dd offset sub_401D40	; DATA XREF: sub_402EA0+6o
		dd offset sub_401CB0
		dd offset loc_401CC0
		dd offset sub_401900
		dd offset sub_401960
		dd offset sub_401920
		dd offset dword_42A2F0
off_41DD60	dd offset sub_401C80	; DATA XREF: .text:loc_401E0Do
					; sub_401EB0+3Bo
		dd offset sub_401150
		dd offset dword_429AC4
off_41DD6C	dd offset sub_403A83	; DATA XREF: sub_4038D8+27o
					; sub_403939+45o ...
		dd offset dword_429BB0
off_41DD74	dd offset sub_403A3E	; DATA XREF: sub_4037B8+10o
					; sub_403918+4o
		dd offset nullsub_1
		dd offset nullsub_1
		dd offset sub_404042
		dd offset sub_404042
		dd offset sub_4042D2
		dd offset sub_404514
		dd offset sub_404491
		dd offset sub_4045FF
		dd offset sub_4047AF
		dd offset sub_4041BC
		dd offset sub_404260
		dd offset sub_4042CD
		dd offset sub_404310
		dd offset nullsub_2
		dd offset dword_429CA0
off_41DDB4	dd offset sub_40399F	; DATA XREF: sub_40104D+1Do
					; sub_403880+29o
		dd offset sub_403D44
		dd offset sub_403DAE
		dd offset sub_403F3A
		dd offset sub_404048
		dd offset sub_4042D2
		dd offset sub_4044C4
		dd offset sub_404313
		dd offset sub_404518
		dd offset sub_4046DB
		dd offset sub_404106
		dd offset sub_4041DB
		dd offset sub_40427F
		dd offset sub_4042D7
		dd offset loc_403ED2
		dd offset dword_429B60
off_41DDF4	dd offset sub_4039C1	; DATA XREF: sub_4036AB+C7o
		dd offset dword_429C4C
off_41DDFC	dd offset sub_403997	; DATA XREF: sub_4036AB+E4o
					; sub_403939+2Bo
dword_41DE00	dd 0			; DATA XREF: sub_4036AB+C1o
		dd 8
		dd offset dword_429D2C
off_41DE0C	dd offset sub_403A60	; DATA XREF: sub_403B8B+42o
		dd offset dword_401480
		dd offset dword_401480+10h
		dd offset sub_403E40
		dd offset sub_403E43
		dd offset sub_403E43
		dd offset sub_403E47
		dd offset sub_403E47
		dd offset sub_403E76
		dd offset sub_403E61
; struct _RTL_CRITICAL_SECTION stru_41DE34
stru_41DE34	_RTL_CRITICAL_SECTION <61766E69h, 2064696Ch, 69727473h,	7020676Eh, \
					; DATA XREF: sub_403DBEo
				       7469736Fh, 6E6F69h>
		dd offset dword_429D84
off_41DE50	dd offset sub_404966	; DATA XREF: sub_4048A4+Eo
					; sub_4048BF+11o
		dd offset sub_401150
aBadAllocation	db 'bad allocation',0   ; DATA XREF: sub_4048BF+Ao
		align 4
		dd offset dword_429DD0
off_41DE6C	dd offset sub_404966	; DATA XREF: sub_404911+Eo
		dd offset sub_401150
		dd offset dword_429E1C
off_41DE78	dd offset sub_404966	; DATA XREF: sub_4048D7+Eo
					; sub_4048F2+12o
		dd offset sub_401150
		dd offset dword_429E6C
off_41DE84	dd offset sub_404966	; DATA XREF: sub_40492C+Eo
					; sub_404947+12o
		dd offset sub_401150
		align 10h
		dd 2 dup(0FFFFFFFFh)
; const	WCHAR ModuleName
ModuleName:				; DATA XREF: sub_404DA5+1o
		unicode	0, <kernel32.dll>,0
		align 4
; char aFlsalloc[]
aFlsalloc	db 'FlsAlloc',0         ; DATA XREF: sub_404DA5+Eo
					; sub_409915+Eo
		align 10h
; char aFlsfree[]
aFlsfree	db 'FlsFree',0          ; DATA XREF: sub_404DA5+20o
					; sub_409950+Eo
; char aFlsgetvalue[]
aFlsgetvalue	db 'FlsGetValue',0      ; DATA XREF: sub_404DA5+37o
					; sub_40998B+Eo
; char aFlssetvalue[]
aFlssetvalue	db 'FlsSetValue',0      ; DATA XREF: sub_404DA5+4Eo
					; sub_4099C6+Eo
; char aInitializecrit[]
aInitializecrit	db 'InitializeCriticalSectionEx',0 ; DATA XREF: sub_404DA5+65o
					; sub_409A04+Eo
; char aInitonceexecut[]
aInitonceexecut	db 'InitOnceExecuteOnce',0 ; DATA XREF: sub_404DA5+7Co
; char aCreateeventexw[]
aCreateeventexw	db 'CreateEventExW',0   ; DATA XREF: sub_404DA5+93o
		align 10h
; char aCreatesemaphor[]
aCreatesemaphor	db 'CreateSemaphoreW',0 ; DATA XREF: sub_404DA5+AAo
		align 4
; char aCreatesemaph_0[]
aCreatesemaph_0	db 'CreateSemaphoreExW',0 ; DATA XREF: sub_404DA5+C1o
		align 4
; char aCreatethreadpo[]
aCreatethreadpo	db 'CreateThreadpoolTimer',0 ; DATA XREF: sub_404DA5+D8o
		align 10h
; char aSetthreadpoolt[]
aSetthreadpoolt	db 'SetThreadpoolTimer',0 ; DATA XREF: sub_404DA5+EFo
		align 4
; char aWaitforthreadp[]
aWaitforthreadp	db 'WaitForThreadpoolTimerCallbacks',0 ; DATA XREF: sub_404DA5+106o
; char aClosethreadpoo[]
aClosethreadpoo	db 'CloseThreadpoolTimer',0 ; DATA XREF: sub_404DA5+11Do
		align 4
; char aCreatethread_0[]
aCreatethread_0	db 'CreateThreadpoolWait',0 ; DATA XREF: sub_404DA5+134o
		align 4
; char aSetthreadpoolw[]
aSetthreadpoolw	db 'SetThreadpoolWait',0 ; DATA XREF: sub_404DA5+14Bo
		align 4
; char aClosethreadp_0[]
aClosethreadp_0	db 'CloseThreadpoolWait',0 ; DATA XREF: sub_404DA5+162o
; char aFlushprocesswr[]
aFlushprocesswr	db 'FlushProcessWriteBuffers',0 ; DATA XREF: sub_404DA5+179o
		align 4
; char aFreelibrarywhe[]
aFreelibrarywhe	db 'FreeLibraryWhenCallbackReturns',0 ; DATA XREF: sub_404DA5+190o
		align 4
; char aGetcurrentproc[]
aGetcurrentproc	db 'GetCurrentProcessorNumber',0 ; DATA XREF: sub_404DA5+1A7o
		align 4
; char aCreatesymbolic[]
aCreatesymbolic	db 'CreateSymbolicLinkW',0 ; DATA XREF: sub_404DA5+1BEo
; char aGetcurrentpack[]
aGetcurrentpack	db 'GetCurrentPackageId',0 ; DATA XREF: sub_404DA5+1D5o
; char aGettickcount64[]
aGettickcount64	db 'GetTickCount64',0   ; DATA XREF: sub_404DA5+1ECo
		align 4
; char aGetfileinforma[]
aGetfileinforma	db 'GetFileInformationByHandleEx',0 ; DATA XREF: sub_404DA5+203o
		align 4
; char aSetfileinforma[]
aSetfileinforma	db 'SetFileInformationByHandle',0 ; DATA XREF: sub_404DA5+21Ao
		align 4
; char aGetsystemtimep[]
aGetsystemtimep	db 'GetSystemTimePreciseAsFileTime',0 ; DATA XREF: sub_404DA5+231o
		align 4
; char aInitializecond[]
aInitializecond	db 'InitializeConditionVariable',0 ; DATA XREF: sub_404DA5+248o
; char aWakeconditionv[]
aWakeconditionv	db 'WakeConditionVariable',0 ; DATA XREF: sub_404DA5+25Fo
		align 4
; char aWakeallconditi[]
aWakeallconditi	db 'WakeAllConditionVariable',0 ; DATA XREF: sub_404DA5+276o
		align 4
; char aSleepcondition[]
aSleepcondition	db 'SleepConditionVariableCS',0 ; DATA XREF: sub_404DA5+28Do
		align 4
; char aInitializesrwl[]
aInitializesrwl	db 'InitializeSRWLock',0 ; DATA XREF: sub_404DA5+2A4o
		align 4
; char aAcquiresrwlock[]
aAcquiresrwlock	db 'AcquireSRWLockExclusive',0 ; DATA XREF: sub_404DA5+2BBo
; char aTryacquiresrwl[]
aTryacquiresrwl	db 'TryAcquireSRWLockExclusive',0 ; DATA XREF: sub_404DA5+2D2o
		align 4
; char aReleasesrwlock[]
aReleasesrwlock	db 'ReleaseSRWLockExclusive',0 ; DATA XREF: sub_404DA5+2E9o
; char aSleepconditi_0[]
aSleepconditi_0	db 'SleepConditionVariableSRW',0 ; DATA XREF: sub_404DA5+300o
		align 10h
; char aCreatethread_1[]
aCreatethread_1	db 'CreateThreadpoolWork',0 ; DATA XREF: sub_404DA5+317o
		align 4
; char aSubmitthreadpo[]
aSubmitthreadpo	db 'SubmitThreadpoolWork',0 ; DATA XREF: sub_404DA5+32Eo
		align 10h
; char aClosethreadp_1[]
aClosethreadp_1	db 'CloseThreadpoolWork',0 ; DATA XREF: sub_404DA5+345o
; char aComparestrin_0[]
aComparestrin_0	db 'CompareStringEx',0  ; DATA XREF: sub_404DA5+35Co
; char aGetlocaleinf_0[]
aGetlocaleinf_0	db 'GetLocaleInfoEx',0  ; DATA XREF: sub_404DA5+373o
; char aLcmapstringe_0[]
aLcmapstringe_0	db 'LCMapStringEx',0    ; DATA XREF: sub_404DA5+38Ao
		align 4
dword_41E234	dd 0			; DATA XREF: .rdata:0041E4F4o
					; .rdata:off_41EA00o
dword_41E238	dd 2Dh,	33323130h, 37363534h, 62613938h, 66656463h, 6A696867h
					; DATA XREF: .rdata:00420560o
		dd 6E6D6C6Bh, 7271706Fh, 76757473h, 7A797877h, 0
		dd 15210000h, 0C0D0E11h, 0A0A0B0Bh, 9090909h, 8080809h
		dd 8080808h, 3 dup(7070707h), 7, 33323130h, 37363534h
		dd 62613938h, 66656463h, 6A696867h, 6E6D6C6Bh, 7271706Fh
		dd 76757473h, 7A797877h, 0
		dd 29410000h, 17191C21h, 13141516h, 11111212h, 10101011h
		dd 0F0F0F0Fh, 0E0E0E0Eh, 0D0E0E0Eh, 0D0D0D0Dh, 0Dh, 0
dword_41E2E0	dd 1			; DATA XREF: sub_405264+1Dr
		dd offset aAr_0		; "ar"
		dd 2
		dd offset aBg		; "bg"
		dd 3
		dd offset aCa		; "ca"
		dd 4
		dd offset aZhChs	; "zh-CHS"
		dd 5
		dd offset aCs		; "cs"
		dd 6
		dd offset aDa		; "da"
		dd 7
		dd offset aDe		; "de"
		dd 8
		dd offset aEl		; "el"
		dd 9
		dd offset aEn		; "en"
		dd 0Ah
		dd offset aEs		; "es"
		dd 0Bh
		dd offset aFi		; "fi"
		dd 0Ch
		dd offset aFr		; "fr"
		dd 0Dh
		dd offset aHe		; "he"
		dd 0Eh
		dd offset aHu		; "hu"
		dd 0Fh
		dd offset aIs		; "is"
		dd 10h
		dd offset aIt		; "it"
		dd 11h
		dd offset aJa		; "ja"
		dd 12h
		dd offset aKo		; "ko"
		dd 13h
		dd offset aNl		; "nl"
		dd 14h
		dd offset aNo		; "no"
		dd 15h
		dd offset aPl		; "pl"
		dd 16h
		dd offset aPt		; "pt"
		dd 18h
		dd offset aRo		; "ro"
		dd 19h
		dd offset aRu		; "ru"
		dd 1Ah
		dd offset aHr		; "hr"
		dd 1Bh
		dd offset aSk		; "sk"
		dd 1Ch
		dd offset aSq		; "sq"
		dd 1Dh
		dd offset aSv		; "sv"
		dd 1Eh
		dd offset aTh		; "th"
		dd 1Fh
		dd offset aTr		; "tr"
		dd 20h
		dd offset aUr		; "ur"
		dd 21h
		dd offset aId		; "id"
		dd 22h
		dd offset aUk		; "uk"
		dd 23h
		dd offset aBe		; "be"
		dd 24h
		dd offset aSl		; "sl"
		dd 25h
		dd offset aEt		; "et"
		dd 26h
		dd offset aLv		; "lv"
		dd 27h
		dd offset aLt		; "lt"
		dd 29h
		dd offset aFa		; "fa"
		dd 2Ah
		dd offset aVi		; "vi"
		dd 2Bh
		dd offset aHy		; "hy"
		dd 2Ch
		dd offset aAz		; "az"
		dd 2Dh
		dd offset aEu		; "eu"
		dd 2Fh
		dd offset aMk		; "mk"
		dd 36h
		dd offset aAf		; "af"
		dd 37h
		dd offset aKa		; "ka"
		dd 38h
		dd offset aFo		; "fo"
		dd 39h
		dd offset aHi		; "hi"
		dd 3Eh
		dd offset aMs		; "ms"
		dd 3Fh
		dd offset aKk		; "kk"
		dd 40h
		dd offset aKy		; "ky"
		dd 41h
		dd offset aSw		; "sw"
		dd 43h
		dd offset aUz		; "uz"
		dd 44h
		dd offset aTt		; "tt"
		dd 46h
		dd offset aPa		; "pa"
		dd 47h
		dd offset aGu		; "gu"
		dd 49h
		dd offset aTa		; "ta"
		dd 4Ah
		dd offset aTe		; "te"
		dd 4Bh
		dd offset aKn		; "kn"
		dd 4Eh
		dd offset aMr		; "mr"
		dd 4Fh
		dd offset aSa		; "sa"
		dd 50h
		dd offset aMn		; "mn"
		dd 56h
		dd offset aGl		; "gl"
		dd 57h
		dd offset aKok		; "kok"
		dd 5Ah
		dd offset aSyr		; "syr"
		dd 65h
		dd offset aDiv		; "div"
		dd 7Fh
		dd offset dword_41E234
		dd 401h
		dd offset aArSa		; "ar-SA"
		dd 402h
		dd offset aBgBg		; "bg-BG"
		dd 403h
		dd offset aCaEs		; "ca-ES"
		dd 404h
		dd offset aZhTw_0	; "zh-TW"
		dd 405h
		dd offset aCsCz		; "cs-CZ"
		dd 406h
		dd offset aDaDk		; "da-DK"
		dd 407h
		dd offset aDeDe		; "de-DE"
		dd 408h
		dd offset aElGr		; "el-GR"
		dd 409h
		dd offset aEnUs		; "en-US"
		dd 40Bh
		dd offset aFiFi		; "fi-FI"
		dd 40Ch
		dd offset aFrFr		; "fr-FR"
		dd 40Dh
		dd offset aHeIl		; "he-IL"
		dd 40Eh
		dd offset aHuHu		; "hu-HU"
		dd 40Fh
		dd offset aIsIs		; "is-IS"
		dd 410h
		dd offset aItIt		; "it-IT"
		dd 411h
		dd offset aJaJp_0	; "ja-JP"
		dd 412h
		dd offset aKoKr_0	; "ko-KR"
		dd 413h
		dd offset aNlNl		; "nl-NL"
		dd 414h
		dd offset aNbNo		; "nb-NO"
		dd 415h
		dd offset aPlPl		; "pl-PL"
		dd 416h
		dd offset aPtBr		; "pt-BR"
		dd 418h
		dd offset aRoRo		; "ro-RO"
		dd 419h
		dd offset aRuRu		; "ru-RU"
		dd 41Ah
		dd offset aHrHr		; "hr-HR"
		dd 41Bh
		dd offset aSkSk		; "sk-SK"
		dd 41Ch
		dd offset aSqAl		; "sq-AL"
		dd 41Dh
		dd offset aSvSe		; "sv-SE"
		dd 41Eh
		dd offset aThTh		; "th-TH"
		dd 41Fh
		dd offset aTrTr		; "tr-TR"
		dd 420h
		dd offset aUrPk		; "ur-PK"
		dd 421h
		dd offset aIdId		; "id-ID"
		dd 422h
		dd offset aUkUa		; "uk-UA"
		dd 423h
		dd offset aBeBy		; "be-BY"
		dd 424h
		dd offset aSlSi		; "sl-SI"
		dd 425h
		dd offset aEtEe		; "et-EE"
		dd 426h
		dd offset aLvLv		; "lv-LV"
		dd 427h
		dd offset aLtLt		; "lt-LT"
		dd 429h
		dd offset aFaIr		; "fa-IR"
		dd 42Ah
		dd offset aViVn		; "vi-VN"
		dd 42Bh
		dd offset aHyAm		; "hy-AM"
		dd 42Ch
		dd offset aAzAzLatn	; "az-AZ-Latn"
		dd 42Dh
		dd offset aEuEs		; "eu-ES"
		dd 42Fh
		dd offset aMkMk		; "mk-MK"
		dd 432h
		dd offset aTnZa		; "tn-ZA"
		dd 434h
		dd offset aXhZa		; "xh-ZA"
		dd 435h
		dd offset aZuZa		; "zu-ZA"
		dd 436h
		dd offset aAfZa		; "af-ZA"
		dd 437h
		dd offset aKaGe		; "ka-GE"
		dd 438h
		dd offset aFoFo		; "fo-FO"
		dd 439h
		dd offset aHiIn		; "hi-IN"
		dd 43Ah
		dd offset aMtMt		; "mt-MT"
		dd 43Bh
		dd offset aSeNo		; "se-NO"
		dd 43Eh
		dd offset aMsMy		; "ms-MY"
		dd 43Fh
		dd offset aKkKz		; "kk-KZ"
		dd 440h
		dd offset aKyKg		; "ky-KG"
		dd 441h
		dd offset aSwKe		; "sw-KE"
		dd 443h
		dd offset aUzUzLatn	; "uz-UZ-Latn"
		dd 444h
		dd offset aTtRu		; "tt-RU"
		dd 445h
		dd offset aBnIn		; "bn-IN"
		dd 446h
		dd offset aPaIn		; "pa-IN"
		dd 447h
		dd offset aGuIn		; "gu-IN"
		dd 449h
		dd offset aTaIn		; "ta-IN"
		dd 44Ah
		dd offset aTeIn		; "te-IN"
		dd 44Bh
		dd offset aKnIn		; "kn-IN"
		dd 44Ch
		dd offset aMlIn		; "ml-IN"
		dd 44Eh
		dd offset aMrIn		; "mr-IN"
		dd 44Fh
		dd offset aSaIn		; "sa-IN"
		dd 450h
		dd offset aMnMn		; "mn-MN"
		dd 452h
		dd offset aCyGb		; "cy-GB"
		dd 456h
		dd offset aGlEs		; "gl-ES"
		dd 457h
		dd offset aKokIn	; "kok-IN"
		dd 45Ah
		dd offset aSyrSy	; "syr-SY"
		dd 465h
		dd offset aDivMv	; "div-MV"
		dd 46Bh
		dd offset aQuzBo	; "quz-BO"
		dd 46Ch
		dd offset aNsZa		; "ns-ZA"
		dd 481h
		dd offset aMiNz		; "mi-NZ"
		dd 801h
		dd offset aArIq		; "ar-IQ"
		dd 804h
		dd offset aZhCn_0	; "zh-CN"
		dd 807h
		dd offset aDeCh		; "de-CH"
		dd 809h
		dd offset aEnGb		; "en-GB"
		dd 80Ah
		dd offset aEsMx		; "es-MX"
		dd 80Ch
		dd offset aFrBe		; "fr-BE"
		dd 810h
		dd offset aItCh		; "it-CH"
		dd 813h
		dd offset aNlBe		; "nl-BE"
		dd 814h
		dd offset aNnNo		; "nn-NO"
		dd 816h
		dd offset aPtPt		; "pt-PT"
		dd 81Ah
		dd offset aSrSpLatn	; "sr-SP-Latn"
		dd 81Dh
		dd offset aSvFi		; "sv-FI"
		dd 82Ch
		dd offset aAzAzCyrl	; "az-AZ-Cyrl"
		dd 83Bh
		dd offset aSeSe		; "se-SE"
		dd 83Eh
		dd offset aMsBn		; "ms-BN"
		dd 843h
		dd offset aUzUzCyrl	; "uz-UZ-Cyrl"
		dd 86Bh
		dd offset aQuzEc	; "quz-EC"
		dd 0C01h
		dd offset aArEg		; "ar-EG"
		dd 0C04h
		dd offset aZhHk		; "zh-HK"
		dd 0C07h
		dd offset aDeAt		; "de-AT"
		dd 0C09h
		dd offset aEnAu		; "en-AU"
		dd 0C0Ah
		dd offset aEsEs		; "es-ES"
		dd 0C0Ch
		dd offset aFrCa		; "fr-CA"
		dd 0C1Ah
		dd offset aSrSpCyrl	; "sr-SP-Cyrl"
		dd 0C3Bh
		dd offset aSeFi		; "se-FI"
		dd 0C6Bh
		dd offset aQuzPe	; "quz-PE"
		dd 1001h
		dd offset aArLy		; "ar-LY"
		dd 1004h
		dd offset aZhSg		; "zh-SG"
		dd 1007h
		dd offset aDeLu		; "de-LU"
		dd 1009h
		dd offset aEnCa		; "en-CA"
		dd 100Ah
		dd offset aEsGt		; "es-GT"
		dd 100Ch
		dd offset aFrCh		; "fr-CH"
		dd 101Ah
		dd offset aHrBa		; "hr-BA"
		dd 103Bh
		dd offset aSmjNo	; "smj-NO"
		dd 1401h
		dd offset aArDz		; "ar-DZ"
		dd 1404h
		dd offset aZhMo		; "zh-MO"
		dd 1407h
		dd offset aDeLi		; "de-LI"
		dd 1409h
		dd offset aEnNz		; "en-NZ"
		dd 140Ah
		dd offset aEsCr		; "es-CR"
		dd 140Ch
		dd offset aFrLu		; "fr-LU"
		dd 141Ah
		dd offset aBsBaLatn	; "bs-BA-Latn"
		dd 143Bh
		dd offset aSmjSe	; "smj-SE"
		dd 1801h
		dd offset aArMa		; "ar-MA"
		dd 1809h
		dd offset aEnIe		; "en-IE"
		dd 180Ah
		dd offset aEsPa		; "es-PA"
		dd 180Ch
		dd offset aFrMc		; "fr-MC"
		dd 181Ah
		dd offset aSrBaLatn	; "sr-BA-Latn"
		dd 183Bh
		dd offset aSmaNo	; "sma-NO"
		dd 1C01h
		dd offset aArTn		; "ar-TN"
		dd 1C09h
		dd offset aEnZa		; "en-ZA"
		dd 1C0Ah
		dd offset aEsDo		; "es-DO"
		dd 1C1Ah
		dd offset aSrBaCyrl	; "sr-BA-Cyrl"
		dd 1C3Bh
		dd offset aSmaSe	; "sma-SE"
		dd 2001h
		dd offset aArOm		; "ar-OM"
		dd 2009h
		dd offset aEnJm		; "en-JM"
		dd 200Ah
		dd offset aEsVe		; "es-VE"
		dd 203Bh
		dd offset aSmsFi	; "sms-FI"
		dd 2401h
		dd offset aArYe		; "ar-YE"
		dd 2409h
		dd offset aEnCb		; "en-CB"
		dd 240Ah
		dd offset aEsCo		; "es-CO"
		dd 243Bh
		dd offset aSmnFi	; "smn-FI"
		dd 2801h
		dd offset aArSy		; "ar-SY"
		dd 2809h
		dd offset aEnBz		; "en-BZ"
		dd 280Ah
		dd offset aEsPe		; "es-PE"
		dd 2C01h
		dd offset aArJo		; "ar-JO"
		dd 2C09h
		dd offset aEnTt		; "en-TT"
		dd 2C0Ah
		dd offset aEsAr		; "es-AR"
		dd 3001h
		dd offset aArLb		; "ar-LB"
		dd 3009h
		dd offset aEnZw		; "en-ZW"
		dd 300Ah
		dd offset aEsEc		; "es-EC"
		dd 3401h
		dd offset aArKw		; "ar-KW"
		dd 3409h
		dd offset aEnPh		; "en-PH"
		dd 340Ah
		dd offset aEsCl		; "es-CL"
		dd 3801h
		dd offset aArAe		; "ar-AE"
		dd 380Ah
		dd offset aEsUy		; "es-UY"
		dd 3C01h
		dd offset aArBh		; "ar-BH"
		dd 3C0Ah
		dd offset aEsPy		; "es-PY"
		dd 4001h
		dd offset aArQa		; "ar-QA"
		dd 400Ah
		dd offset aEsBo		; "es-BO"
		dd 440Ah
		dd offset aEsSv		; "es-SV"
		dd 480Ah
		dd offset aEsHn		; "es-HN"
		dd 4C0Ah
		dd offset aEsNi		; "es-NI"
		dd 500Ah
		dd offset aEsPr		; "es-PR"
		dd 7C04h
		dd offset aZhCht	; "zh-CHT"
		dd 7C1Ah
		dd offset aSr		; "sr"
off_41EA00	dd offset dword_41E234	; DATA XREF: sub_405216+19r
dword_41EA04	dd 42h			; DATA XREF: sub_405216:loc_405258r
		dd offset aAf		; "af"
		dd 2Ch
		dd offset aAfZa_0	; "af-za"
		dd 71h
		dd offset aAr_0		; "ar"
		align 10h
		dd offset aArAe_0	; "ar-ae"
		dd 0D8h
		dd offset aArBh_0	; "ar-bh"
		dd 0DAh
		dd offset aArDz_0	; "ar-dz"
		dd 0B1h
		dd offset aArEg_0	; "ar-eg"
		dd 0A0h
		dd offset aArIq_0	; "ar-iq"
		dd 8Fh
		dd offset aArJo_0	; "ar-jo"
		dd 0CFh
		dd offset aArKw_0	; "ar-kw"
		dd 0D5h
		dd offset aArLb_0	; "ar-lb"
		dd 0D2h
		dd offset aArLy_0	; "ar-ly"
		dd 0A9h
		dd offset aArMa_0	; "ar-ma"
		dd 0B9h
		dd offset aArOm_0	; "ar-om"
		dd 0C4h
		dd offset aArQa_0	; "ar-qa"
		dd 0DCh
		dd offset aArSa_0	; "ar-sa"
		dd 43h
		dd offset aArSy_0	; "ar-sy"
		dd 0CCh
		dd offset aArTn_0	; "ar-tn"
		dd 0BFh
		dd offset aArYe_0	; "ar-ye"
		dd 0C8h
		dd offset aAz		; "az"
		dd 29h
		dd offset aAzAzCyrl_0	; "az-az-cyrl"
		dd 9Bh
		dd offset aAzAzLatn_0	; "az-az-latn"
		dd 6Bh
		dd offset aBe		; "be"
		dd 21h
		dd offset aBeBy_0	; "be-by"
		dd 63h
		dd offset aBg		; "bg"
		dd 1
		dd offset aBgBg_0	; "bg-bg"
		dd 44h
		dd offset aBnIn_0	; "bn-in"
		dd 7Dh
		dd offset aBsBaLatn_0	; "bs-ba-latn"
		dd 0B7h
		dd offset aCa		; "ca"
		dd 2
		dd offset aCaEs_0	; "ca-es"
		dd 45h
		dd offset aCs		; "cs"
		dd 4
		dd offset aCsCz_0	; "cs-cz"
		dd 47h
		dd offset aCyGb_0	; "cy-gb"
		dd 87h
		dd offset aDa		; "da"
		dd 5
		dd offset aDaDk_0	; "da-dk"
		dd 48h
		dd offset aDe		; "de"
		dd 6
		dd offset aDeAt_0	; "de-at"
		dd 0A2h
		dd offset aDeCh_0	; "de-ch"
		dd 91h
		dd offset aDeDe_0	; "de-de"
		dd 49h
		dd offset aDeLi_0	; "de-li"
		dd 0B3h
		dd offset aDeLu_0	; "de-lu"
		dd 0ABh
		dd offset aDiv		; "div"
		dd 41h
		dd offset aDivMv_0	; "div-mv"
		dd 8Bh
		dd offset aEl		; "el"
		dd 7
		dd offset aElGr_0	; "el-gr"
		dd 4Ah
		dd offset aEn		; "en"
		dd 8
		dd offset aEnAu_0	; "en-au"
		dd 0A3h
		dd offset aEnBz_0	; "en-bz"
		dd 0CDh
		dd offset aEnCa_0	; "en-ca"
		dd 0ACh
		dd offset aEnCb_0	; "en-cb"
		dd 0C9h
		dd offset aEnGb_0	; "en-gb"
		dd 92h
		dd offset aEnIe_0	; "en-ie"
		dd 0BAh
		dd offset aEnJm_0	; "en-jm"
		dd 0C5h
		dd offset aEnNz_0	; "en-nz"
		dd 0B4h
		dd offset aEnPh_0	; "en-ph"
		dd 0D6h
		dd offset aEnTt_0	; "en-tt"
		dd 0D0h
		dd offset aEnUs_0	; "en-us"
		dd 4Bh
		dd offset aEnZa_0	; "en-za"
		dd 0C0h
		dd offset aEnZw_0	; "en-zw"
		dd 0D3h
		dd offset aEs		; "es"
		dd 9
		dd offset aEsAr_0	; "es-ar"
		dd 0D1h
		dd offset aEsBo_0	; "es-bo"
		dd 0DDh
		dd offset aEsCl_0	; "es-cl"
		dd 0D7h
		dd offset aEsCo_0	; "es-co"
		dd 0CAh
		dd offset aEsCr_0	; "es-cr"
		dd 0B5h
		dd offset aEsDo_0	; "es-do"
		dd 0C1h
		dd offset aEsEc_0	; "es-ec"
		dd 0D4h
		dd offset aEsEs_0	; "es-es"
		dd 0A4h
		dd offset aEsGt_0	; "es-gt"
		dd 0ADh
		dd offset aEsHn_0	; "es-hn"
		dd 0DFh
		dd offset aEsMx_0	; "es-mx"
		dd 93h
		dd offset aEsNi_0	; "es-ni"
		dd 0E0h
		dd offset aEsPa_0	; "es-pa"
		dd 0BBh
		dd offset aEsPe_0	; "es-pe"
		dd 0CEh
		dd offset aEsPr_0	; "es-pr"
		dd 0E1h
		dd offset aEsPy_0	; "es-py"
		dd 0DBh
		dd offset aEsSv_0	; "es-sv"
		dd 0DEh
		dd offset aEsUy_0	; "es-uy"
		dd 0D9h
		dd offset aEsVe_0	; "es-ve"
		dd 0C6h
		dd offset aEt		; "et"
		dd 23h
		dd offset aEtEe_0	; "et-ee"
		dd 65h
		dd offset aEu		; "eu"
		dd 2Ah
		dd offset aEuEs_0	; "eu-es"
		dd 6Ch
		dd offset aFa		; "fa"
		dd 26h
		dd offset aFaIr_0	; "fa-ir"
		dd 68h
		dd offset aFi		; "fi"
		dd 0Ah
		dd offset aFiFi_0	; "fi-fi"
		dd 4Ch
		dd offset aFo		; "fo"
		dd 2Eh
		dd offset aFoFo_0	; "fo-fo"
		dd 73h
		dd offset aFr		; "fr"
		dd 0Bh
		dd offset aFrBe_0	; "fr-be"
		dd 94h
		dd offset aFrCa_0	; "fr-ca"
		dd 0A5h
		dd offset aFrCh_0	; "fr-ch"
		dd 0AEh
		dd offset aFrFr_0	; "fr-fr"
		dd 4Dh
		dd offset aFrLu_0	; "fr-lu"
		dd 0B6h
		dd offset aFrMc_0	; "fr-mc"
		dd 0BCh
		dd offset aGl		; "gl"
		dd 3Eh
		dd offset aGlEs_0	; "gl-es"
		dd 88h
		dd offset aGu		; "gu"
		dd 37h
		dd offset aGuIn_0	; "gu-in"
		dd 7Fh
		dd offset aHe		; "he"
		dd 0Ch
		dd offset aHeIl_0	; "he-il"
		dd 4Eh
		dd offset aHi		; "hi"
		dd 2Fh
		dd offset aHiIn_0	; "hi-in"
		dd 74h
		dd offset aHr		; "hr"
		dd 18h
		dd offset aHrBa_0	; "hr-ba"
		dd 0AFh
		dd offset aHrHr_0	; "hr-hr"
		dd 5Ah
		dd offset aHu		; "hu"
		dd 0Dh
		dd offset aHuHu_0	; "hu-hu"
		dd 4Fh
		dd offset aHy		; "hy"
		dd 28h
		dd offset aHyAm_0	; "hy-am"
		dd 6Ah
		dd offset aId		; "id"
		dd 1Fh
		dd offset aIdId_0	; "id-id"
		dd 61h
		dd offset aIs		; "is"
		dd 0Eh
		dd offset aIsIs_0	; "is-is"
		dd 50h
		dd offset aIt		; "it"
		dd 0Fh
		dd offset aItCh_0	; "it-ch"
		dd 95h
		dd offset aItIt_0	; "it-it"
		dd 51h
		dd offset aJa		; "ja"
		dd 10h
		dd offset aJaJp_1	; "ja-jp"
		dd 52h
		dd offset aKa		; "ka"
		dd 2Dh
		dd offset aKaGe_0	; "ka-ge"
		dd 72h
		dd offset aKk		; "kk"
		dd 31h
		dd offset aKkKz_0	; "kk-kz"
		dd 78h
		dd offset aKn		; "kn"
		dd 3Ah
		dd offset aKnIn_0	; "kn-in"
		dd 82h
		dd offset aKo		; "ko"
		dd 11h
		dd offset aKoKr_1	; "ko-kr"
		dd 53h
		dd offset aKok		; "kok"
		dd 3Fh
		dd offset aKokIn_0	; "kok-in"
		dd 89h
		dd offset aKy		; "ky"
		dd 32h
		dd offset aKyKg_0	; "ky-kg"
		dd 79h
		dd offset aLt		; "lt"
		dd 25h
		dd offset aLtLt_0	; "lt-lt"
		dd 67h
		dd offset aLv		; "lv"
		dd 24h
		dd offset aLvLv_0	; "lv-lv"
		dd 66h
		dd offset aMiNz_0	; "mi-nz"
		dd 8Eh
		dd offset aMk		; "mk"
		dd 2Bh
		dd offset aMkMk_0	; "mk-mk"
		dd 6Dh
		dd offset aMlIn_0	; "ml-in"
		dd 83h
		dd offset aMn		; "mn"
		dd 3Dh
		dd offset aMnMn_0	; "mn-mn"
		dd 86h
		dd offset aMr		; "mr"
		dd 3Bh
		dd offset aMrIn_0	; "mr-in"
		dd 84h
		dd offset aMs		; "ms"
		dd 30h
		dd offset aMsBn_0	; "ms-bn"
		dd 9Dh
		dd offset aMsMy_0	; "ms-my"
		dd 77h
		dd offset aMtMt_0	; "mt-mt"
		dd 75h
		dd offset aNbNo_0	; "nb-no"
		dd 55h
		dd offset aNl		; "nl"
		dd 12h
		dd offset aNlBe_0	; "nl-be"
		dd 96h
		dd offset aNlNl_0	; "nl-nl"
		dd 54h
		dd offset aNnNo_0	; "nn-no"
		dd 97h
		dd offset aNo		; "no"
		dd 13h
		dd offset aNsZa_0	; "ns-za"
		dd 8Dh
		dd offset aPa		; "pa"
		dd 36h
		dd offset aPaIn_0	; "pa-in"
		dd 7Eh
		dd offset aPl		; "pl"
		dd 14h
		dd offset aPlPl_0	; "pl-pl"
		dd 56h
		dd offset aPt		; "pt"
		dd 15h
		dd offset aPtBr_0	; "pt-br"
		dd 57h
		dd offset aPtPt_0	; "pt-pt"
		dd 98h
		dd offset aQuzBo_0	; "quz-bo"
		dd 8Ch
		dd offset aQuzEc_0	; "quz-ec"
		dd 9Fh
		dd offset aQuzPe_0	; "quz-pe"
		dd 0A8h
		dd offset aRo		; "ro"
		dd 16h
		dd offset aRoRo_0	; "ro-ro"
		dd 58h
		dd offset aRu		; "ru"
		dd 17h
		dd offset aRuRu_0	; "ru-ru"
		dd 59h
		dd offset aSa		; "sa"
		dd 3Ch
		dd offset aSaIn_0	; "sa-in"
		dd 85h
		dd offset aSeFi_0	; "se-fi"
		dd 0A7h
		dd offset aSeNo_0	; "se-no"
		dd 76h
		dd offset aSeSe_0	; "se-se"
		dd 9Ch
		dd offset aSk		; "sk"
		dd 19h
		dd offset aSkSk_0	; "sk-sk"
		dd 5Bh
		dd offset aSl		; "sl"
		dd 22h
		dd offset aSlSi_0	; "sl-si"
		dd 64h
		dd offset aSmaNo_0	; "sma-no"
		dd 0BEh
		dd offset aSmaSe_0	; "sma-se"
		dd 0C3h
		dd offset aSmjNo_0	; "smj-no"
		dd 0B0h
		dd offset aSmjSe_0	; "smj-se"
		dd 0B8h
		dd offset aSmnFi_0	; "smn-fi"
		dd 0CBh
		dd offset aSmsFi_0	; "sms-fi"
		dd 0C7h
		dd offset aSq		; "sq"
		dd 1Ah
		dd offset aSqAl_0	; "sq-al"
		dd 5Ch
		dd offset aSr		; "sr"
		dd 0E3h
		dd offset aSrBaCyrl_0	; "sr-ba-cyrl"
		dd 0C2h
		dd offset aSrBaLatn_0	; "sr-ba-latn"
		dd 0BDh
		dd offset aSrSpCyrl_0	; "sr-sp-cyrl"
		dd 0A6h
		dd offset aSrSpLatn_0	; "sr-sp-latn"
		dd 99h
		dd offset aSv		; "sv"
		dd 1Bh
		dd offset aSvFi_0	; "sv-fi"
		dd 9Ah
		dd offset aSvSe_0	; "sv-se"
		dd 5Dh
		dd offset aSw		; "sw"
		dd 33h
		dd offset aSwKe_0	; "sw-ke"
		dd 7Ah
		dd offset aSyr		; "syr"
		dd 40h
		dd offset aSyrSy_0	; "syr-sy"
		dd 8Ah
		dd offset aTa		; "ta"
		dd 38h
		dd offset aTaIn_0	; "ta-in"
		dd 80h
		dd offset aTe		; "te"
		dd 39h
		dd offset aTeIn_0	; "te-in"
		dd 81h
		dd offset aTh		; "th"
		dd 1Ch
		dd offset aThTh_0	; "th-th"
		dd 5Eh
		dd offset aTnZa_0	; "tn-za"
		dd 6Eh
		dd offset aTr		; "tr"
		dd 1Dh
		dd offset aTrTr_0	; "tr-tr"
		dd 5Fh
		dd offset aTt		; "tt"
		dd 35h
		dd offset aTtRu_0	; "tt-ru"
		dd 7Ch
		dd offset aUk		; "uk"
		dd 20h
		dd offset aUkUa_0	; "uk-ua"
		dd 62h
		dd offset aUr		; "ur"
		dd 1Eh
		dd offset aUrPk_0	; "ur-pk"
		dd 60h
		dd offset aUz		; "uz"
		dd 34h
		dd offset aUzUzCyrl_0	; "uz-uz-cyrl"
		dd 9Eh
		dd offset aUzUzLatn_0	; "uz-uz-latn"
		dd 7Bh
		dd offset aVi		; "vi"
		dd 27h
		dd offset aViVn_0	; "vi-vn"
		dd 69h
		dd offset aXhZa_0	; "xh-za"
		dd 6Fh
		dd offset aZhChs_0	; "zh-chs"
		dd 3
		dd offset aZhCht_0	; "zh-cht"
		dd 0E2h
		dd offset aZhCn_1	; "zh-cn"
		dd 90h
		dd offset aZhHk_0	; "zh-hk"
		dd 0A1h
		dd offset aZhMo_0	; "zh-mo"
		dd 0B2h
		dd offset aZhSg_0	; "zh-sg"
		dd 0AAh
		dd offset aZhTw_1	; "zh-tw"
		dd 46h
		dd offset aZuZa_0	; "zu-za"
		dd 70h
aAr_0:					; DATA XREF: .rdata:0041E2E4o
					; .rdata:0041EA18o
		unicode	0, <ar>,0
		align 4
aBg:					; DATA XREF: .rdata:0041E2ECo
					; .rdata:0041EAC8o
		unicode	0, <bg>,0
		align 10h
aCa:					; DATA XREF: .rdata:0041E2F4o
					; .rdata:0041EAE8o
		unicode	0, <ca>,0
		align 4
aZhChs:					; DATA XREF: .rdata:0041E2FCo
		unicode	0, <zh-CHS>,0
		align 4
aCs:					; DATA XREF: .rdata:0041E304o
					; .rdata:0041EAF8o
		unicode	0, <cs>,0
		align 10h
aDa:					; DATA XREF: .rdata:0041E30Co
					; .rdata:0041EB10o
		unicode	0, <da>,0
		align 4
aDe:					; DATA XREF: .rdata:0041E314o
					; .rdata:0041EB20o
		unicode	0, <de>,0
		align 10h
aEl:					; DATA XREF: .rdata:0041E31Co
					; .rdata:0041EB60o
		unicode	0, <el>,0
		align 4
aEn:					; DATA XREF: .rdata:0041E324o
					; .rdata:0041EB70o
		unicode	0, <en>,0
		align 10h
aEs:					; DATA XREF: .rdata:0041E32Co
					; .rdata:0041EBE0o
		unicode	0, <es>,0
		align 4
aFi:					; DATA XREF: .rdata:0041E334o
					; .rdata:0041ECB0o
		unicode	0, <fi>,0
		align 10h
aFr:					; DATA XREF: .rdata:0041E33Co
					; .rdata:0041ECD0o
		unicode	0, <fr>,0
		align 4
aHe:					; DATA XREF: .rdata:0041E344o
					; .rdata:0041ED28o
		unicode	0, <he>,0
		align 10h
aHu:					; DATA XREF: .rdata:0041E34Co
					; .rdata:0041ED60o
		unicode	0, <hu>,0
		align 4
aIs:					; DATA XREF: .rdata:0041E354o
					; .rdata:0041ED90o
		unicode	0, <is>,0
		align 10h
aIt:					; DATA XREF: .rdata:0041E35Co
					; .rdata:0041EDA0o
		unicode	0, <it>,0
		align 4
aJa:					; DATA XREF: .rdata:0041E364o
					; .rdata:0041EDB8o
		unicode	0, <ja>,0
		align 10h
aKo:					; DATA XREF: .rdata:0041E36Co
					; .rdata:0041EDF8o
		unicode	0, <ko>,0
		align 4
aNl:					; DATA XREF: .rdata:0041E374o
					; .rdata:0041EEB0o
		unicode	0, <nl>,0
		align 10h
aNo:					; DATA XREF: .rdata:0041E37Co
					; .rdata:0041EED0o
		unicode	0, <no>,0
		align 4
aPl:					; DATA XREF: .rdata:0041E384o
					; .rdata:0041EEF0o
		unicode	0, <pl>,0
		align 10h
aPt:					; DATA XREF: .rdata:0041E38Co
					; .rdata:0041EF00o
		unicode	0, <pt>,0
		align 4
aRo:					; DATA XREF: .rdata:0041E394o
					; .rdata:0041EF30o
		unicode	0, <ro>,0
		align 10h
aRu:					; DATA XREF: .rdata:0041E39Co
					; .rdata:0041EF40o
		unicode	0, <ru>,0
		align 4
aHr:					; DATA XREF: .rdata:0041E3A4o
					; .rdata:0041ED48o
		unicode	0, <hr>,0
		align 10h
aSk:					; DATA XREF: .rdata:0041E3ACo
					; .rdata:0041EF78o
		unicode	0, <sk>,0
		align 4
aSq:					; DATA XREF: .rdata:0041E3B4o
					; .rdata:0041EFC8o
		unicode	0, <sq>,0
		align 10h
aSv:					; DATA XREF: .rdata:0041E3BCo
					; .rdata:0041F000o
		unicode	0, <sv>,0
		align 4
aTh:					; DATA XREF: .rdata:0041E3C4o
					; .rdata:0041F058o
		unicode	0, <th>,0
		align 10h
aTr:					; DATA XREF: .rdata:0041E3CCo
					; .rdata:0041F070o
		unicode	0, <tr>,0
		align 4
aUr:					; DATA XREF: .rdata:0041E3D4o
					; .rdata:0041F0A0o
		unicode	0, <ur>,0
		align 10h
aId:					; DATA XREF: .rdata:0041E3DCo
					; .rdata:0041ED80o
		unicode	0, <id>,0
		align 4
aUk:					; DATA XREF: .rdata:0041E3E4o
					; .rdata:0041F090o
		unicode	0, <uk>,0
		align 10h
aBe:					; DATA XREF: .rdata:0041E3ECo
					; .rdata:0041EAB8o
		unicode	0, <be>,0
		align 4
aSl:					; DATA XREF: .rdata:0041E3F4o
					; .rdata:0041EF88o
		unicode	0, <sl>,0
		align 10h
aEt:					; DATA XREF: .rdata:0041E3FCo
					; .rdata:0041EC80o
		unicode	0, <et>,0
		align 4
aLv:					; DATA XREF: .rdata:0041E404o
					; .rdata:0041EE38o
		unicode	0, <lv>,0
		align 10h
aLt:					; DATA XREF: .rdata:0041E40Co
					; .rdata:0041EE28o
		unicode	0, <lt>,0
		align 4
aFa:					; DATA XREF: .rdata:0041E414o
					; .rdata:0041ECA0o
		unicode	0, <fa>,0
		align 10h
aVi:					; DATA XREF: .rdata:0041E41Co
					; .rdata:0041F0C8o
		unicode	0, <vi>,0
		align 4
aHy:					; DATA XREF: .rdata:0041E424o
					; .rdata:0041ED70o
		unicode	0, <hy>,0
		align 10h
aAz:					; DATA XREF: .rdata:0041E42Co
					; .rdata:0041EAA0o
		unicode	0, <az>,0
		align 4
aEu:					; DATA XREF: .rdata:0041E434o
					; .rdata:0041EC90o
		unicode	0, <eu>,0
		align 10h
aMk:					; DATA XREF: .rdata:0041E43Co
					; .rdata:0041EE50o
		unicode	0, <mk>,0
		align 4
aAf:					; DATA XREF: .rdata:0041E444o
					; .rdata:0041EA08o
		unicode	0, <af>,0
		align 10h
aKa:					; DATA XREF: .rdata:0041E44Co
					; .rdata:0041EDC8o
		unicode	0, <ka>,0
		align 4
aFo:					; DATA XREF: .rdata:0041E454o
					; .rdata:0041ECC0o
		unicode	0, <fo>,0
		align 10h
aHi:					; DATA XREF: .rdata:0041E45Co
					; .rdata:0041ED38o
		unicode	0, <hi>,0
		align 4
aMs:					; DATA XREF: .rdata:0041E464o
					; .rdata:0041EE88o
		unicode	0, <ms>,0
		align 10h
aKk:					; DATA XREF: .rdata:0041E46Co
					; .rdata:0041EDD8o
		unicode	0, <kk>,0
		align 4
aKy:					; DATA XREF: .rdata:0041E474o
					; .rdata:0041EE18o
		unicode	0, <ky>,0
		align 10h
aSw:					; DATA XREF: .rdata:0041E47Co
					; .rdata:0041F018o
		unicode	0, <sw>,0
		align 4
aUz:					; DATA XREF: .rdata:0041E484o
					; .rdata:0041F0B0o
		unicode	0, <uz>,0
		align 10h
aTt:					; DATA XREF: .rdata:0041E48Co
					; .rdata:0041F080o
		unicode	0, <tt>,0
		align 4
aPa:					; DATA XREF: .rdata:0041E494o
					; .rdata:0041EEE0o
		unicode	0, <pa>,0
		align 10h
aGu:					; DATA XREF: .rdata:0041E49Co
					; .rdata:0041ED18o
		unicode	0, <gu>,0
		align 4
aTa:					; DATA XREF: .rdata:0041E4A4o
					; .rdata:0041F038o
		unicode	0, <ta>,0
		align 10h
aTe:					; DATA XREF: .rdata:0041E4ACo
					; .rdata:0041F048o
		unicode	0, <te>,0
		align 4
aKn:					; DATA XREF: .rdata:0041E4B4o
					; .rdata:0041EDE8o
		unicode	0, <kn>,0
		align 10h
aMr:					; DATA XREF: .rdata:0041E4BCo
					; .rdata:0041EE78o
		unicode	0, <mr>,0
		align 4
aSa:					; DATA XREF: .rdata:0041E4C4o
					; .rdata:0041EF50o
		unicode	0, <sa>,0
		align 10h
aMn:					; DATA XREF: .rdata:0041E4CCo
					; .rdata:0041EE68o
		unicode	0, <mn>,0
		align 4
aGl:					; DATA XREF: .rdata:0041E4D4o
					; .rdata:0041ED08o
		unicode	0, <gl>,0
		align 10h
aKok:					; DATA XREF: .rdata:0041E4DCo
					; .rdata:0041EE08o
		unicode	0, <kok>,0
aSyr:					; DATA XREF: .rdata:0041E4E4o
					; .rdata:0041F028o
		unicode	0, <syr>,0
aDiv:					; DATA XREF: .rdata:0041E4ECo
					; .rdata:0041EB50o
		unicode	0, <div>,0
aArSa:					; DATA XREF: .rdata:0041E4FCo
		unicode	0, <ar-SA>,0
aBgBg:					; DATA XREF: .rdata:0041E504o
		unicode	0, <bg-BG>,0
aCaEs:					; DATA XREF: .rdata:0041E50Co
		unicode	0, <ca-ES>,0
aZhTw_0:				; DATA XREF: .rdata:0041E514o
		unicode	0, <zh-TW>,0
aCsCz:					; DATA XREF: .rdata:0041E51Co
		unicode	0, <cs-CZ>,0
aDaDk:					; DATA XREF: .rdata:0041E524o
		unicode	0, <da-DK>,0
aDeDe:					; DATA XREF: .rdata:0041E52Co
		unicode	0, <de-DE>,0
aElGr:					; DATA XREF: .rdata:0041E534o
		unicode	0, <el-GR>,0
aEnUs:					; DATA XREF: .rdata:0041E53Co
		unicode	0, <en-US>,0
aFiFi:					; DATA XREF: .rdata:0041E544o
		unicode	0, <fi-FI>,0
aFrFr:					; DATA XREF: .rdata:0041E54Co
		unicode	0, <fr-FR>,0
aHeIl:					; DATA XREF: .rdata:0041E554o
		unicode	0, <he-IL>,0
aHuHu:					; DATA XREF: .rdata:0041E55Co
		unicode	0, <hu-HU>,0
aIsIs:					; DATA XREF: .rdata:0041E564o
		unicode	0, <is-IS>,0
aItIt:					; DATA XREF: .rdata:0041E56Co
		unicode	0, <it-IT>,0
aJaJp_0:				; DATA XREF: .rdata:0041E574o
		unicode	0, <ja-JP>,0
aKoKr_0:				; DATA XREF: .rdata:0041E57Co
		unicode	0, <ko-KR>,0
aNlNl:					; DATA XREF: .rdata:0041E584o
		unicode	0, <nl-NL>,0
aNbNo:					; DATA XREF: .rdata:0041E58Co
		unicode	0, <nb-NO>,0
aPlPl:					; DATA XREF: .rdata:0041E594o
		unicode	0, <pl-PL>,0
aPtBr:					; DATA XREF: .rdata:0041E59Co
		unicode	0, <pt-BR>,0
aRoRo:					; DATA XREF: .rdata:0041E5A4o
		unicode	0, <ro-RO>,0
aRuRu:					; DATA XREF: .rdata:0041E5ACo
		unicode	0, <ru-RU>,0
aHrHr:					; DATA XREF: .rdata:0041E5B4o
		unicode	0, <hr-HR>,0
aSkSk:					; DATA XREF: .rdata:0041E5BCo
		unicode	0, <sk-SK>,0
aSqAl:					; DATA XREF: .rdata:0041E5C4o
		unicode	0, <sq-AL>,0
aSvSe:					; DATA XREF: .rdata:0041E5CCo
		unicode	0, <sv-SE>,0
aThTh:					; DATA XREF: .rdata:0041E5D4o
		unicode	0, <th-TH>,0
aTrTr:					; DATA XREF: .rdata:0041E5DCo
		unicode	0, <tr-TR>,0
aUrPk:					; DATA XREF: .rdata:0041E5E4o
		unicode	0, <ur-PK>,0
aIdId:					; DATA XREF: .rdata:0041E5ECo
		unicode	0, <id-ID>,0
aUkUa:					; DATA XREF: .rdata:0041E5F4o
		unicode	0, <uk-UA>,0
aBeBy:					; DATA XREF: .rdata:0041E5FCo
		unicode	0, <be-BY>,0
aSlSi:					; DATA XREF: .rdata:0041E604o
		unicode	0, <sl-SI>,0
aEtEe:					; DATA XREF: .rdata:0041E60Co
		unicode	0, <et-EE>,0
aLvLv:					; DATA XREF: .rdata:0041E614o
		unicode	0, <lv-LV>,0
aLtLt:					; DATA XREF: .rdata:0041E61Co
		unicode	0, <lt-LT>,0
aFaIr:					; DATA XREF: .rdata:0041E624o
		unicode	0, <fa-IR>,0
aViVn:					; DATA XREF: .rdata:0041E62Co
		unicode	0, <vi-VN>,0
aHyAm:					; DATA XREF: .rdata:0041E634o
		unicode	0, <hy-AM>,0
aAzAzLatn:				; DATA XREF: .rdata:0041E63Co
		unicode	0, <az-AZ-Latn>,0
		align 10h
aEuEs:					; DATA XREF: .rdata:0041E644o
		unicode	0, <eu-ES>,0
aMkMk:					; DATA XREF: .rdata:0041E64Co
		unicode	0, <mk-MK>,0
aTnZa:					; DATA XREF: .rdata:0041E654o
		unicode	0, <tn-ZA>,0
aXhZa:					; DATA XREF: .rdata:0041E65Co
		unicode	0, <xh-ZA>,0
aZuZa:					; DATA XREF: .rdata:0041E664o
		unicode	0, <zu-ZA>,0
aAfZa:					; DATA XREF: .rdata:0041E66Co
		unicode	0, <af-ZA>,0
aKaGe:					; DATA XREF: .rdata:0041E674o
		unicode	0, <ka-GE>,0
aFoFo:					; DATA XREF: .rdata:0041E67Co
		unicode	0, <fo-FO>,0
aHiIn:					; DATA XREF: .rdata:0041E684o
		unicode	0, <hi-IN>,0
aMtMt:					; DATA XREF: .rdata:0041E68Co
		unicode	0, <mt-MT>,0
aSeNo:					; DATA XREF: .rdata:0041E694o
		unicode	0, <se-NO>,0
aMsMy:					; DATA XREF: .rdata:0041E69Co
		unicode	0, <ms-MY>,0
aKkKz:					; DATA XREF: .rdata:0041E6A4o
		unicode	0, <kk-KZ>,0
aKyKg:					; DATA XREF: .rdata:0041E6ACo
		unicode	0, <ky-KG>,0
aSwKe:					; DATA XREF: .rdata:0041E6B4o
		unicode	0, <sw-KE>,0
aUzUzLatn:				; DATA XREF: .rdata:0041E6BCo
		unicode	0, <uz-UZ-Latn>,0
		align 4
aTtRu:					; DATA XREF: .rdata:0041E6C4o
		unicode	0, <tt-RU>,0
aBnIn:					; DATA XREF: .rdata:0041E6CCo
		unicode	0, <bn-IN>,0
aPaIn:					; DATA XREF: .rdata:0041E6D4o
		unicode	0, <pa-IN>,0
aGuIn:					; DATA XREF: .rdata:0041E6DCo
		unicode	0, <gu-IN>,0
aTaIn:					; DATA XREF: .rdata:0041E6E4o
		unicode	0, <ta-IN>,0
aTeIn:					; DATA XREF: .rdata:0041E6ECo
		unicode	0, <te-IN>,0
aKnIn:					; DATA XREF: .rdata:0041E6F4o
		unicode	0, <kn-IN>,0
aMlIn:					; DATA XREF: .rdata:0041E6FCo
		unicode	0, <ml-IN>,0
aMrIn:					; DATA XREF: .rdata:0041E704o
		unicode	0, <mr-IN>,0
aSaIn:					; DATA XREF: .rdata:0041E70Co
		unicode	0, <sa-IN>,0
aMnMn:					; DATA XREF: .rdata:0041E714o
		unicode	0, <mn-MN>,0
aCyGb:					; DATA XREF: .rdata:0041E71Co
		unicode	0, <cy-GB>,0
aGlEs:					; DATA XREF: .rdata:0041E724o
		unicode	0, <gl-ES>,0
aKokIn:					; DATA XREF: .rdata:0041E72Co
		unicode	0, <kok-IN>,0
		align 4
aSyrSy:					; DATA XREF: .rdata:0041E734o
		unicode	0, <syr-SY>,0
		align 4
aDivMv:					; DATA XREF: .rdata:0041E73Co
		unicode	0, <div-MV>,0
		align 4
aQuzBo:					; DATA XREF: .rdata:0041E744o
		unicode	0, <quz-BO>,0
		align 4
aNsZa:					; DATA XREF: .rdata:0041E74Co
		unicode	0, <ns-ZA>,0
aMiNz:					; DATA XREF: .rdata:0041E754o
		unicode	0, <mi-NZ>,0
aArIq:					; DATA XREF: .rdata:0041E75Co
		unicode	0, <ar-IQ>,0
aZhCn_0:				; DATA XREF: .rdata:0041E764o
		unicode	0, <zh-CN>,0
aDeCh:					; DATA XREF: .rdata:0041E76Co
		unicode	0, <de-CH>,0
aEnGb:					; DATA XREF: .rdata:0041E774o
		unicode	0, <en-GB>,0
aEsMx:					; DATA XREF: .rdata:0041E77Co
		unicode	0, <es-MX>,0
aFrBe:					; DATA XREF: .rdata:0041E784o
		unicode	0, <fr-BE>,0
aItCh:					; DATA XREF: .rdata:0041E78Co
		unicode	0, <it-CH>,0
aNlBe:					; DATA XREF: .rdata:0041E794o
		unicode	0, <nl-BE>,0
aNnNo:					; DATA XREF: .rdata:0041E79Co
		unicode	0, <nn-NO>,0
aPtPt:					; DATA XREF: .rdata:0041E7A4o
		unicode	0, <pt-PT>,0
aSrSpLatn:				; DATA XREF: .rdata:0041E7ACo
		unicode	0, <sr-SP-Latn>,0
		align 10h
aSvFi:					; DATA XREF: .rdata:0041E7B4o
		unicode	0, <sv-FI>,0
aAzAzCyrl:				; DATA XREF: .rdata:0041E7BCo
		unicode	0, <az-AZ-Cyrl>,0
		align 4
aSeSe:					; DATA XREF: .rdata:0041E7C4o
		unicode	0, <se-SE>,0
aMsBn:					; DATA XREF: .rdata:0041E7CCo
		unicode	0, <ms-BN>,0
aUzUzCyrl:				; DATA XREF: .rdata:0041E7D4o
		unicode	0, <uz-UZ-Cyrl>,0
		align 4
aQuzEc:					; DATA XREF: .rdata:0041E7DCo
		unicode	0, <quz-EC>,0
		align 4
aArEg:					; DATA XREF: .rdata:0041E7E4o
		unicode	0, <ar-EG>,0
aZhHk:					; DATA XREF: .rdata:0041E7ECo
		unicode	0, <zh-HK>,0
aDeAt:					; DATA XREF: .rdata:0041E7F4o
		unicode	0, <de-AT>,0
aEnAu:					; DATA XREF: .rdata:0041E7FCo
		unicode	0, <en-AU>,0
aEsEs:					; DATA XREF: .rdata:0041E804o
		unicode	0, <es-ES>,0
aFrCa:					; DATA XREF: .rdata:0041E80Co
		unicode	0, <fr-CA>,0
aSrSpCyrl:				; DATA XREF: .rdata:0041E814o
		unicode	0, <sr-SP-Cyrl>,0
		align 4
aSeFi:					; DATA XREF: .rdata:0041E81Co
		unicode	0, <se-FI>,0
aQuzPe:					; DATA XREF: .rdata:0041E824o
		unicode	0, <quz-PE>,0
		align 10h
aArLy:					; DATA XREF: .rdata:0041E82Co
		unicode	0, <ar-LY>,0
aZhSg:					; DATA XREF: .rdata:0041E834o
		unicode	0, <zh-SG>,0
aDeLu:					; DATA XREF: .rdata:0041E83Co
		unicode	0, <de-LU>,0
aEnCa:					; DATA XREF: .rdata:0041E844o
		unicode	0, <en-CA>,0
aEsGt:					; DATA XREF: .rdata:0041E84Co
		unicode	0, <es-GT>,0
aFrCh:					; DATA XREF: .rdata:0041E854o
		unicode	0, <fr-CH>,0
aHrBa:					; DATA XREF: .rdata:0041E85Co
		unicode	0, <hr-BA>,0
aSmjNo:					; DATA XREF: .rdata:0041E864o
		unicode	0, <smj-NO>,0
		align 4
aArDz:					; DATA XREF: .rdata:0041E86Co
		unicode	0, <ar-DZ>,0
aZhMo:					; DATA XREF: .rdata:0041E874o
		unicode	0, <zh-MO>,0
aDeLi:					; DATA XREF: .rdata:0041E87Co
		unicode	0, <de-LI>,0
aEnNz:					; DATA XREF: .rdata:0041E884o
		unicode	0, <en-NZ>,0
aEsCr:					; DATA XREF: .rdata:0041E88Co
		unicode	0, <es-CR>,0
aFrLu:					; DATA XREF: .rdata:0041E894o
		unicode	0, <fr-LU>,0
aBsBaLatn:				; DATA XREF: .rdata:0041E89Co
		unicode	0, <bs-BA-Latn>,0
		align 4
aSmjSe:					; DATA XREF: .rdata:0041E8A4o
		unicode	0, <smj-SE>,0
		align 4
aArMa:					; DATA XREF: .rdata:0041E8ACo
		unicode	0, <ar-MA>,0
aEnIe:					; DATA XREF: .rdata:0041E8B4o
		unicode	0, <en-IE>,0
aEsPa:					; DATA XREF: .rdata:0041E8BCo
		unicode	0, <es-PA>,0
aFrMc:					; DATA XREF: .rdata:0041E8C4o
		unicode	0, <fr-MC>,0
aSrBaLatn:				; DATA XREF: .rdata:0041E8CCo
		unicode	0, <sr-BA-Latn>,0
		align 4
aSmaNo:					; DATA XREF: .rdata:0041E8D4o
		unicode	0, <sma-NO>,0
		align 4
aArTn:					; DATA XREF: .rdata:0041E8DCo
		unicode	0, <ar-TN>,0
aEnZa:					; DATA XREF: .rdata:0041E8E4o
		unicode	0, <en-ZA>,0
aEsDo:					; DATA XREF: .rdata:0041E8ECo
		unicode	0, <es-DO>,0
aSrBaCyrl:				; DATA XREF: .rdata:0041E8F4o
		unicode	0, <sr-BA-Cyrl>,0
		align 4
aSmaSe:					; DATA XREF: .rdata:0041E8FCo
		unicode	0, <sma-SE>,0
		align 4
aArOm:					; DATA XREF: .rdata:0041E904o
		unicode	0, <ar-OM>,0
aEnJm:					; DATA XREF: .rdata:0041E90Co
		unicode	0, <en-JM>,0
aEsVe:					; DATA XREF: .rdata:0041E914o
		unicode	0, <es-VE>,0
aSmsFi:					; DATA XREF: .rdata:0041E91Co
		unicode	0, <sms-FI>,0
		align 4
aArYe:					; DATA XREF: .rdata:0041E924o
		unicode	0, <ar-YE>,0
aEnCb:					; DATA XREF: .rdata:0041E92Co
		unicode	0, <en-CB>,0
aEsCo:					; DATA XREF: .rdata:0041E934o
		unicode	0, <es-CO>,0
aSmnFi:					; DATA XREF: .rdata:0041E93Co
		unicode	0, <smn-FI>,0
		align 10h
aArSy:					; DATA XREF: .rdata:0041E944o
		unicode	0, <ar-SY>,0
aEnBz:					; DATA XREF: .rdata:0041E94Co
		unicode	0, <en-BZ>,0
aEsPe:					; DATA XREF: .rdata:0041E954o
		unicode	0, <es-PE>,0
aArJo:					; DATA XREF: .rdata:0041E95Co
		unicode	0, <ar-JO>,0
aEnTt:					; DATA XREF: .rdata:0041E964o
		unicode	0, <en-TT>,0
aEsAr:					; DATA XREF: .rdata:0041E96Co
		unicode	0, <es-AR>,0
aArLb:					; DATA XREF: .rdata:0041E974o
		unicode	0, <ar-LB>,0
aEnZw:					; DATA XREF: .rdata:0041E97Co
		unicode	0, <en-ZW>,0
aEsEc:					; DATA XREF: .rdata:0041E984o
		unicode	0, <es-EC>,0
aArKw:					; DATA XREF: .rdata:0041E98Co
		unicode	0, <ar-KW>,0
aEnPh:					; DATA XREF: .rdata:0041E994o
		unicode	0, <en-PH>,0
aEsCl:					; DATA XREF: .rdata:0041E99Co
		unicode	0, <es-CL>,0
aArAe:					; DATA XREF: .rdata:0041E9A4o
		unicode	0, <ar-AE>,0
aEsUy:					; DATA XREF: .rdata:0041E9ACo
		unicode	0, <es-UY>,0
aArBh:					; DATA XREF: .rdata:0041E9B4o
		unicode	0, <ar-BH>,0
aEsPy:					; DATA XREF: .rdata:0041E9BCo
		unicode	0, <es-PY>,0
aArQa:					; DATA XREF: .rdata:0041E9C4o
		unicode	0, <ar-QA>,0
aEsBo:					; DATA XREF: .rdata:0041E9CCo
		unicode	0, <es-BO>,0
aEsSv:					; DATA XREF: .rdata:0041E9D4o
		unicode	0, <es-SV>,0
aEsHn:					; DATA XREF: .rdata:0041E9DCo
		unicode	0, <es-HN>,0
aEsNi:					; DATA XREF: .rdata:0041E9E4o
		unicode	0, <es-NI>,0
aEsPr:					; DATA XREF: .rdata:0041E9ECo
		unicode	0, <es-PR>,0
aZhCht:					; DATA XREF: .rdata:0041E9F4o
		unicode	0, <zh-CHT>,0
		align 4
aSr:					; DATA XREF: .rdata:0041E9FCo
					; .rdata:0041EFD8o
		unicode	0, <sr>,0
		align 10h
aAfZa_0:				; DATA XREF: .rdata:0041EA10o
		unicode	0, <af-za>,0
aArAe_0:				; DATA XREF: .rdata:0041EA20o
		unicode	0, <ar-ae>,0
aArBh_0:				; DATA XREF: .rdata:0041EA28o
		unicode	0, <ar-bh>,0
aArDz_0:				; DATA XREF: .rdata:0041EA30o
		unicode	0, <ar-dz>,0
aArEg_0:				; DATA XREF: .rdata:0041EA38o
		unicode	0, <ar-eg>,0
aArIq_0:				; DATA XREF: .rdata:0041EA40o
		unicode	0, <ar-iq>,0
aArJo_0:				; DATA XREF: .rdata:0041EA48o
		unicode	0, <ar-jo>,0
aArKw_0:				; DATA XREF: .rdata:0041EA50o
		unicode	0, <ar-kw>,0
aArLb_0:				; DATA XREF: .rdata:0041EA58o
		unicode	0, <ar-lb>,0
aArLy_0:				; DATA XREF: .rdata:0041EA60o
		unicode	0, <ar-ly>,0
aArMa_0:				; DATA XREF: .rdata:0041EA68o
		unicode	0, <ar-ma>,0
aArOm_0:				; DATA XREF: .rdata:0041EA70o
		unicode	0, <ar-om>,0
aArQa_0:				; DATA XREF: .rdata:0041EA78o
		unicode	0, <ar-qa>,0
aArSa_0:				; DATA XREF: .rdata:0041EA80o
		unicode	0, <ar-sa>,0
aArSy_0:				; DATA XREF: .rdata:0041EA88o
		unicode	0, <ar-sy>,0
aArTn_0:				; DATA XREF: .rdata:0041EA90o
		unicode	0, <ar-tn>,0
aArYe_0:				; DATA XREF: .rdata:0041EA98o
		unicode	0, <ar-ye>,0
aAzAzCyrl_0:				; DATA XREF: .rdata:0041EAA8o
		unicode	0, <az-az-cyrl>,0
		align 4
aAzAzLatn_0:				; DATA XREF: .rdata:0041EAB0o
		unicode	0, <az-az-latn>,0
		align 4
aBeBy_0:				; DATA XREF: .rdata:0041EAC0o
		unicode	0, <be-by>,0
aBgBg_0:				; DATA XREF: .rdata:0041EAD0o
		unicode	0, <bg-bg>,0
aBnIn_0:				; DATA XREF: .rdata:0041EAD8o
		unicode	0, <bn-in>,0
aBsBaLatn_0:				; DATA XREF: .rdata:0041EAE0o
		unicode	0, <bs-ba-latn>,0
		align 4
aCaEs_0:				; DATA XREF: .rdata:0041EAF0o
		unicode	0, <ca-es>,0
aCsCz_0:				; DATA XREF: .rdata:0041EB00o
		unicode	0, <cs-cz>,0
aCyGb_0:				; DATA XREF: .rdata:0041EB08o
		unicode	0, <cy-gb>,0
aDaDk_0:				; DATA XREF: .rdata:0041EB18o
		unicode	0, <da-dk>,0
aDeAt_0:				; DATA XREF: .rdata:0041EB28o
		unicode	0, <de-at>,0
aDeCh_0:				; DATA XREF: .rdata:0041EB30o
		unicode	0, <de-ch>,0
aDeDe_0:				; DATA XREF: .rdata:0041EB38o
		unicode	0, <de-de>,0
aDeLi_0:				; DATA XREF: .rdata:0041EB40o
		unicode	0, <de-li>,0
aDeLu_0:				; DATA XREF: .rdata:0041EB48o
		unicode	0, <de-lu>,0
aDivMv_0:				; DATA XREF: .rdata:0041EB58o
		unicode	0, <div-mv>,0
		align 4
aElGr_0:				; DATA XREF: .rdata:0041EB68o
		unicode	0, <el-gr>,0
aEnAu_0:				; DATA XREF: .rdata:0041EB78o
		unicode	0, <en-au>,0
aEnBz_0:				; DATA XREF: .rdata:0041EB80o
		unicode	0, <en-bz>,0
aEnCa_0:				; DATA XREF: .rdata:0041EB88o
		unicode	0, <en-ca>,0
aEnCb_0:				; DATA XREF: .rdata:0041EB90o
		unicode	0, <en-cb>,0
aEnGb_0:				; DATA XREF: .rdata:0041EB98o
		unicode	0, <en-gb>,0
aEnIe_0:				; DATA XREF: .rdata:0041EBA0o
		unicode	0, <en-ie>,0
aEnJm_0:				; DATA XREF: .rdata:0041EBA8o
		unicode	0, <en-jm>,0
aEnNz_0:				; DATA XREF: .rdata:0041EBB0o
		unicode	0, <en-nz>,0
aEnPh_0:				; DATA XREF: .rdata:0041EBB8o
		unicode	0, <en-ph>,0
aEnTt_0:				; DATA XREF: .rdata:0041EBC0o
		unicode	0, <en-tt>,0
aEnUs_0:				; DATA XREF: .rdata:0041EBC8o
		unicode	0, <en-us>,0
aEnZa_0:				; DATA XREF: .rdata:0041EBD0o
		unicode	0, <en-za>,0
aEnZw_0:				; DATA XREF: .rdata:0041EBD8o
		unicode	0, <en-zw>,0
aEsAr_0:				; DATA XREF: .rdata:0041EBE8o
		unicode	0, <es-ar>,0
aEsBo_0:				; DATA XREF: .rdata:0041EBF0o
		unicode	0, <es-bo>,0
aEsCl_0:				; DATA XREF: .rdata:0041EBF8o
		unicode	0, <es-cl>,0
aEsCo_0:				; DATA XREF: .rdata:0041EC00o
		unicode	0, <es-co>,0
aEsCr_0:				; DATA XREF: .rdata:0041EC08o
		unicode	0, <es-cr>,0
aEsDo_0:				; DATA XREF: .rdata:0041EC10o
		unicode	0, <es-do>,0
aEsEc_0:				; DATA XREF: .rdata:0041EC18o
		unicode	0, <es-ec>,0
aEsEs_0:				; DATA XREF: .rdata:0041EC20o
		unicode	0, <es-es>,0
aEsGt_0:				; DATA XREF: .rdata:0041EC28o
		unicode	0, <es-gt>,0
aEsHn_0:				; DATA XREF: .rdata:0041EC30o
		unicode	0, <es-hn>,0
aEsMx_0:				; DATA XREF: .rdata:0041EC38o
		unicode	0, <es-mx>,0
aEsNi_0:				; DATA XREF: .rdata:0041EC40o
		unicode	0, <es-ni>,0
aEsPa_0:				; DATA XREF: .rdata:0041EC48o
		unicode	0, <es-pa>,0
aEsPe_0:				; DATA XREF: .rdata:0041EC50o
		unicode	0, <es-pe>,0
aEsPr_0:				; DATA XREF: .rdata:0041EC58o
		unicode	0, <es-pr>,0
aEsPy_0:				; DATA XREF: .rdata:0041EC60o
		unicode	0, <es-py>,0
aEsSv_0:				; DATA XREF: .rdata:0041EC68o
		unicode	0, <es-sv>,0
aEsUy_0:				; DATA XREF: .rdata:0041EC70o
		unicode	0, <es-uy>,0
aEsVe_0:				; DATA XREF: .rdata:0041EC78o
		unicode	0, <es-ve>,0
aEtEe_0:				; DATA XREF: .rdata:0041EC88o
		unicode	0, <et-ee>,0
aEuEs_0:				; DATA XREF: .rdata:0041EC98o
		unicode	0, <eu-es>,0
aFaIr_0:				; DATA XREF: .rdata:0041ECA8o
		unicode	0, <fa-ir>,0
aFiFi_0:				; DATA XREF: .rdata:0041ECB8o
		unicode	0, <fi-fi>,0
aFoFo_0:				; DATA XREF: .rdata:0041ECC8o
		unicode	0, <fo-fo>,0
aFrBe_0:				; DATA XREF: .rdata:0041ECD8o
		unicode	0, <fr-be>,0
aFrCa_0:				; DATA XREF: .rdata:0041ECE0o
		unicode	0, <fr-ca>,0
aFrCh_0:				; DATA XREF: .rdata:0041ECE8o
		unicode	0, <fr-ch>,0
aFrFr_0:				; DATA XREF: .rdata:0041ECF0o
		unicode	0, <fr-fr>,0
aFrLu_0:				; DATA XREF: .rdata:0041ECF8o
		unicode	0, <fr-lu>,0
aFrMc_0:				; DATA XREF: .rdata:0041ED00o
		unicode	0, <fr-mc>,0
aGlEs_0:				; DATA XREF: .rdata:0041ED10o
		unicode	0, <gl-es>,0
aGuIn_0:				; DATA XREF: .rdata:0041ED20o
		unicode	0, <gu-in>,0
aHeIl_0:				; DATA XREF: .rdata:0041ED30o
		unicode	0, <he-il>,0
aHiIn_0:				; DATA XREF: .rdata:0041ED40o
		unicode	0, <hi-in>,0
aHrBa_0:				; DATA XREF: .rdata:0041ED50o
		unicode	0, <hr-ba>,0
aHrHr_0:				; DATA XREF: .rdata:0041ED58o
		unicode	0, <hr-hr>,0
aHuHu_0:				; DATA XREF: .rdata:0041ED68o
		unicode	0, <hu-hu>,0
aHyAm_0:				; DATA XREF: .rdata:0041ED78o
		unicode	0, <hy-am>,0
aIdId_0:				; DATA XREF: .rdata:0041ED88o
		unicode	0, <id-id>,0
aIsIs_0:				; DATA XREF: .rdata:0041ED98o
		unicode	0, <is-is>,0
aItCh_0:				; DATA XREF: .rdata:0041EDA8o
		unicode	0, <it-ch>,0
aItIt_0:				; DATA XREF: .rdata:0041EDB0o
		unicode	0, <it-it>,0
aJaJp_1:				; DATA XREF: .rdata:0041EDC0o
		unicode	0, <ja-jp>,0
aKaGe_0:				; DATA XREF: .rdata:0041EDD0o
		unicode	0, <ka-ge>,0
aKkKz_0:				; DATA XREF: .rdata:0041EDE0o
		unicode	0, <kk-kz>,0
aKnIn_0:				; DATA XREF: .rdata:0041EDF0o
		unicode	0, <kn-in>,0
aKoKr_1:				; DATA XREF: .rdata:0041EE00o
		unicode	0, <ko-kr>,0
aKokIn_0:				; DATA XREF: .rdata:0041EE10o
		unicode	0, <kok-in>,0
		align 10h
aKyKg_0:				; DATA XREF: .rdata:0041EE20o
		unicode	0, <ky-kg>,0
aLtLt_0:				; DATA XREF: .rdata:0041EE30o
		unicode	0, <lt-lt>,0
aLvLv_0:				; DATA XREF: .rdata:0041EE40o
		unicode	0, <lv-lv>,0
aMiNz_0:				; DATA XREF: .rdata:0041EE48o
		unicode	0, <mi-nz>,0
aMkMk_0:				; DATA XREF: .rdata:0041EE58o
		unicode	0, <mk-mk>,0
aMlIn_0:				; DATA XREF: .rdata:0041EE60o
					; .rdata:00422B60o ...
		unicode	0, <ml-in>,0
aMnMn_0:				; DATA XREF: .rdata:0041EE70o
		unicode	0, <mn-mn>,0
aMrIn_0:				; DATA XREF: .rdata:0041EE80o
		unicode	0, <mr-in>,0
aMsBn_0:				; DATA XREF: .rdata:0041EE90o
		unicode	0, <ms-bn>,0
aMsMy_0:				; DATA XREF: .rdata:0041EE98o
		unicode	0, <ms-my>,0
aMtMt_0:				; DATA XREF: .rdata:0041EEA0o
		unicode	0, <mt-mt>,0
aNbNo_0:				; DATA XREF: .rdata:0041EEA8o
		unicode	0, <nb-no>,0
aNlBe_0:				; DATA XREF: .rdata:0041EEB8o
		unicode	0, <nl-be>,0
aNlNl_0:				; DATA XREF: .rdata:0041EEC0o
		unicode	0, <nl-nl>,0
aNnNo_0:				; DATA XREF: .rdata:0041EEC8o
		unicode	0, <nn-no>,0
aNsZa_0:				; DATA XREF: .rdata:0041EED8o
		unicode	0, <ns-za>,0
aPaIn_0:				; DATA XREF: .rdata:0041EEE8o
		unicode	0, <pa-in>,0
aPlPl_0:				; DATA XREF: .rdata:0041EEF8o
		unicode	0, <pl-pl>,0
aPtBr_0:				; DATA XREF: .rdata:0041EF08o
		unicode	0, <pt-br>,0
aPtPt_0:				; DATA XREF: .rdata:0041EF10o
		unicode	0, <pt-pt>,0
aQuzBo_0:				; DATA XREF: .rdata:0041EF18o
		unicode	0, <quz-bo>,0
		align 10h
aQuzEc_0:				; DATA XREF: .rdata:0041EF20o
		unicode	0, <quz-ec>,0
		align 10h
aQuzPe_0:				; DATA XREF: .rdata:0041EF28o
		unicode	0, <quz-pe>,0
		align 10h
aRoRo_0:				; DATA XREF: .rdata:0041EF38o
		unicode	0, <ro-ro>,0
aRuRu_0:				; DATA XREF: .rdata:0041EF48o
		unicode	0, <ru-ru>,0
aSaIn_0:				; DATA XREF: .rdata:0041EF58o
		unicode	0, <sa-in>,0
aSeFi_0:				; DATA XREF: .rdata:0041EF60o
		unicode	0, <se-fi>,0
aSeNo_0:				; DATA XREF: .rdata:0041EF68o
		unicode	0, <se-no>,0
aSeSe_0:				; DATA XREF: .rdata:0041EF70o
		unicode	0, <se-se>,0
aSkSk_0:				; DATA XREF: .rdata:0041EF80o
		unicode	0, <sk-sk>,0
aSlSi_0:				; DATA XREF: .rdata:0041EF90o
		unicode	0, <sl-si>,0
aSmaNo_0:				; DATA XREF: .rdata:0041EF98o
		unicode	0, <sma-no>,0
		align 10h
aSmaSe_0:				; DATA XREF: .rdata:0041EFA0o
		unicode	0, <sma-se>,0
		align 10h
aSmjNo_0:				; DATA XREF: .rdata:0041EFA8o
		unicode	0, <smj-no>,0
		align 10h
aSmjSe_0:				; DATA XREF: .rdata:0041EFB0o
		unicode	0, <smj-se>,0
		align 10h
aSmnFi_0:				; DATA XREF: .rdata:0041EFB8o
		unicode	0, <smn-fi>,0
		align 10h
aSmsFi_0:				; DATA XREF: .rdata:0041EFC0o
		unicode	0, <sms-fi>,0
		align 10h
aSqAl_0:				; DATA XREF: .rdata:0041EFD0o
		unicode	0, <sq-al>,0
aSrBaCyrl_0:				; DATA XREF: .rdata:0041EFE0o
		unicode	0, <sr-ba-cyrl>,0
		align 4
aSrBaLatn_0:				; DATA XREF: .rdata:0041EFE8o
		unicode	0, <sr-ba-latn>,0
		align 4
aSrSpCyrl_0:				; DATA XREF: .rdata:0041EFF0o
		unicode	0, <sr-sp-cyrl>,0
		align 4
aSrSpLatn_0:				; DATA XREF: .rdata:0041EFF8o
		unicode	0, <sr-sp-latn>,0
		align 4
aSvFi_0:				; DATA XREF: .rdata:0041F008o
		unicode	0, <sv-fi>,0
aSvSe_0:				; DATA XREF: .rdata:0041F010o
		unicode	0, <sv-se>,0
aSwKe_0:				; DATA XREF: .rdata:0041F020o
		unicode	0, <sw-ke>,0
aSyrSy_0:				; DATA XREF: .rdata:0041F030o
		unicode	0, <syr-sy>,0
		align 10h
aTaIn_0:				; DATA XREF: .rdata:0041F040o
		unicode	0, <ta-in>,0
aTeIn_0:				; DATA XREF: .rdata:0041F050o
		unicode	0, <te-in>,0
aThTh_0:				; DATA XREF: .rdata:0041F060o
		unicode	0, <th-th>,0
aTnZa_0:				; DATA XREF: .rdata:0041F068o
		unicode	0, <tn-za>,0
aTrTr_0:				; DATA XREF: .rdata:0041F078o
		unicode	0, <tr-tr>,0
aTtRu_0:				; DATA XREF: .rdata:0041F088o
		unicode	0, <tt-ru>,0
aUkUa_0:				; DATA XREF: .rdata:0041F098o
		unicode	0, <uk-ua>,0
aUrPk_0:				; DATA XREF: .rdata:0041F0A8o
		unicode	0, <ur-pk>,0
aUzUzCyrl_0:				; DATA XREF: .rdata:0041F0B8o
		unicode	0, <uz-uz-cyrl>,0
		align 4
aUzUzLatn_0:				; DATA XREF: .rdata:0041F0C0o
		unicode	0, <uz-uz-latn>,0
		align 10h
aViVn_0:				; DATA XREF: .rdata:0041F0D0o
		unicode	0, <vi-vn>,0
aXhZa_0:				; DATA XREF: .rdata:0041F0D8o
		unicode	0, <xh-za>,0
aZhChs_0:				; DATA XREF: .rdata:0041F0E0o
		unicode	0, <zh-chs>,0
		align 4
aZhCht_0:				; DATA XREF: .rdata:0041F0E8o
		unicode	0, <zh-cht>,0
		align 4
aZhCn_1:				; DATA XREF: .rdata:0041F0F0o
		unicode	0, <zh-cn>,0
aZhHk_0:				; DATA XREF: .rdata:0041F0F8o
		unicode	0, <zh-hk>,0
aZhMo_0:				; DATA XREF: .rdata:0041F100o
		unicode	0, <zh-mo>,0
aZhSg_0:				; DATA XREF: .rdata:0041F108o
		unicode	0, <zh-sg>,0
aZhTw_1:				; DATA XREF: .rdata:0041F110o
		unicode	0, <zh-tw>,0
aZuZa_0:				; DATA XREF: .rdata:0041F118o
		unicode	0, <zu-za>,0
		dd offset dword_429EBC
off_420394	dd offset sub_40539C	; DATA XREF: sub_40539C+Ao
					; .data:off_42C9D0o ...
; struct _EXCEPTION_POINTERS ExceptionInfo
ExceptionInfo	_EXCEPTION_POINTERS <offset dword_42D1B0, offset dword_42D200>
					; DATA XREF: sub_405A80+EDo
					; sub_405B85+C2o
		dd offset dword_429F04
off_4203A4	dd offset sub_404966	; DATA XREF: sub_405C58+Eo
					; sub_405C73+11o
		dd offset sub_401150
aBadArrayNewLen	db 'bad array new length',0 ; DATA XREF: sub_405C73+Ao
		align 4
off_4203C4	dd offset sub_4065C8	; DATA XREF: sub_408540+DEr
					; sub_408540+E7o ...
dword_4203C8	dd 0E06D7363h, 1, 2 dup(0) ; DATA XREF:	sub_406D34+Fo
		dd 3, 19930520h, 2 dup(0)
		dd offset dword_429F54
off_4203EC	dd offset sub_404966	; DATA XREF: sub_4090E3+Eo
					; sub_4090FE+11o
		dd offset sub_401150
aBadException	db 'bad exception',0    ; DATA XREF: sub_4090FE+Ao
		align 4
; LPCWSTR lpLibFileName
lpLibFileName	dd offset aApiMsWinCoreFi ; DATA XREF: sub_4097E2:loc_40980Er
					; "api-ms-win-core-fibers-l1-1-1"
		dd offset aApiMsWinCoreSy ; "api-ms-win-core-synch-l1-2-0"
		dd offset aKernel32	; "kernel32"
aApiMsWinCoreFi:			; DATA XREF: .rdata:lpLibFileNameo
		unicode	0, <api-ms-win-core-fibers-l1-1-1>,0
aApiMsWinCoreSy:			; DATA XREF: .rdata:00420408o
		unicode	0, <api-ms-win-core-synch-l1-2-0>,0
		align 4
aKernel32:				; DATA XREF: .rdata:0042040Co
		unicode	0, <kernel32>,0
		align 4
aApiMs:					; DATA XREF: sub_4097E2+54o
		unicode	0, <api-ms->,0
aExtMs:					; DATA XREF: sub_4097E2+68o
		unicode	0, <ext-ms->,0
dword_4204BC	dd 0			; DATA XREF: sub_409915+9o
		dd 2
dword_4204C4	dd 0			; DATA XREF: sub_409915+4o
					; sub_409950+9o
		dd 2
dword_4204CC	dd 0			; DATA XREF: sub_409950+4o
					; sub_40998B+9o
		dd 2
dword_4204D4	dd 0			; DATA XREF: sub_40998B+4o
					; sub_4099C6+9o
		dd 2
dword_4204DC	dd 1, 2			; DATA XREF: sub_4099C6+4o
					; sub_409A04+9o
dword_4204E4	dd 0			; DATA XREF: sub_409A04+4o
		dd offset a__based	; "__based("
		dd offset a__cdecl	; "__cdecl"
		dd offset a__pascal	; "__pascal"
		dd offset a__stdcall	; "__stdcall"
		dd offset a__thiscall	; "__thiscall"
		dd offset a__fastcall	; "__fastcall"
		dd offset a__vectorcall	; "__vectorcall"
		dd offset a__clrcall	; "__clrcall"
		dd offset a__eabi	; "__eabi"
		dd offset a__swift_1	; "__swift_1"
		dd offset a__swift_2	; "__swift_2"
		dd offset a__ptr64	; "__ptr64"
		dd offset a__restrict	; "__restrict"
		dd offset a__unaligned	; "__unaligned"
		dd offset aRestrict	; "restrict("
		dd offset dword_4298B0
		dd offset aNew		; " new"
		dd offset aDelete	; " delete"
		dd offset asc_420740	; "="
		dd offset asc_420744	; ">>"
		dd offset asc_420748	; "<<"
		dd offset asc_42074C	; "!"
		dd offset asc_420750	; "=="
		dd offset asc_420754	; "!="
		dd offset asc_420758	; "[]"
		dd offset aOperator	; "operator"
		dd offset asc_420768	; "->"
		dd offset dword_41D1C0
		dd offset asc_42076C	; "++"
		dd offset asc_420770	; "--"
		dd offset dword_41E238
		dd offset asc_420774	; "+"
		dd offset asc_420778	; "&"
		dd offset asc_42077C	; "->*"
		dd offset asc_420780	; "/"
		dd offset asc_420784	; "%"
		dd offset asc_420788	; "<"
		dd offset asc_42078C	; "<="
		dd offset asc_420790	; ">"
		dd offset asc_420794	; ">="
		dd offset asc_420798	; ","
		dd offset asc_42079C	; "()"
		dd offset asc_4207A0	; "~"
		dd offset asc_4207A4	; "^"
		dd offset asc_4207A8	; "|"
		dd offset asc_4207AC	; "&&"
		dd offset asc_4207B0	; "||"
		dd offset asc_4207B4	; "*="
		dd offset asc_4207B8	; "+="
		dd offset asc_4207BC	; "-="
		dd offset asc_4207C0	; "/="
		dd offset asc_4207C4	; "%="
		dd offset asc_4207C8	; ">>="
		dd offset asc_4207CC	; "<<="
		dd offset asc_4207D0	; "&="
		dd offset asc_4207D4	; "|="
		dd offset asc_4207D8	; "^="
		dd offset aVftable	; "`vftable'"
		dd offset aVbtable	; "`vbtable'"
		dd offset aVcall	; "`vcall'"
		dd offset aTypeof	; "`typeof'"
		dd offset aLocalStaticGua ; "`local static guard'"
		dd offset aString	; "`string'"
		dd offset aVbaseDestructo ; "`vbase destructor'"
		dd offset aVectorDeleting ; "`vector deleting destructor'"
		dd offset aDefaultConstru ; "`default constructor closure'"
		dd offset aScalarDeleting ; "`scalar deleting destructor'"
		dd offset aVectorConstruc ; "`vector constructor iterator'"
		dd offset aVectorDestruct ; "`vector destructor	iterator'"
		dd offset aVectorVbaseCon ; "`vector vbase constructor iterator'"
		dd offset aVirtualDisplac ; "`virtual displacement map'"
		dd offset aEhVectorConstr ; "`eh vector	constructor iterator'"
		dd offset aEhVectorDestru ; "`eh vector	destructor iterator'"
		dd offset aEhVectorVbaseC ; "`eh vector	vbase constructor iterator'"
		dd offset aCopyConstructo ; "`copy constructor closure'"
		dd offset aUdtReturning	; "`udt	returning'"
		dd offset aEh		; "`EH"
		dd offset aRtti		; "`RTTI"
		dd offset aLocalVftable	; "`local vftable'"
		dd offset aLocalVftableCo ; "`local vftable constructor	closure'"
		dd offset aNew_0	; " new[]"
		dd offset aDelete_0	; " delete[]"
		dd offset aOmniCallsig	; "`omni callsig'"
		dd offset aPlacementDelet ; "`placement	delete closure'"
		dd offset aPlacementDel_0 ; "`placement	delete[] closure'"
		dd offset aManagedVectorC ; "`managed vector constructor iterator'"
		dd offset aManagedVectorD ; "`managed vector destructor	iterator'"
		dd offset aEhVectorCopyCo ; "`eh vector	copy constructor iterator'"
		dd offset aEhVectorVbas_0 ; "`eh vector	vbase copy constructor itera"...
		dd offset aDynamicInitial ; "`dynamic initializer for '"
		dd offset aDynamicAtexitD ; "`dynamic atexit destructor	for '"
		dd offset aVectorCopyCons ; "`vector copy constructor iterator'"
		dd offset aVectorVbaseCop ; "`vector vbase copy	constructor iterator"...
		dd offset aManagedVecto_0 ; "`managed vector copy constructor iterat"...
		dd offset aLocalStaticThr ; "`local static thread guard'"
		dd offset aOperator_0	; "operator \"\" "
		dd offset aOperatorCo_awa ; "operator co_await"
		dd offset dword_4298B0
		dd offset aTypeDescriptor ; " Type Descriptor'"
		dd offset aBaseClassDescr ; " Base Class Descriptor at ("
		dd offset aBaseClassArray ; " Base Class Array'"
		dd offset aClassHierarchy ; " Class Hierarchy Descriptor'"
		dd offset aCompleteObject ; " Complete Object Locator'"
a__based	db '__based(',0         ; DATA XREF: .rdata:004204E8o
		align 10h
a__cdecl	db '__cdecl',0          ; DATA XREF: .rdata:004204ECo
a__pascal	db '__pascal',0         ; DATA XREF: .rdata:004204F0o
		align 4
a__stdcall	db '__stdcall',0        ; DATA XREF: .rdata:004204F4o
		align 10h
a__thiscall	db '__thiscall',0       ; DATA XREF: .rdata:004204F8o
		align 4
a__fastcall	db '__fastcall',0       ; DATA XREF: .rdata:004204FCo
		align 4
a__vectorcall	db '__vectorcall',0     ; DATA XREF: .rdata:00420500o
		align 4
a__clrcall	db '__clrcall',0        ; DATA XREF: .rdata:00420504o
		align 4
a__eabi		db '__eabi',0           ; DATA XREF: .rdata:00420508o
		align 4
a__swift_1	db '__swift_1',0        ; DATA XREF: .rdata:0042050Co
		align 4
a__swift_2	db '__swift_2',0        ; DATA XREF: .rdata:00420510o
		align 4
a__ptr64	db '__ptr64',0          ; DATA XREF: .rdata:00420514o
a__restrict	db '__restrict',0       ; DATA XREF: .rdata:00420518o
		align 4
a__unaligned	db '__unaligned',0      ; DATA XREF: .rdata:0042051Co
aRestrict	db 'restrict(',0        ; DATA XREF: .rdata:00420520o
		align 10h
aNew		db ' new',0             ; DATA XREF: .rdata:00420528o
		align 4
aDelete		db ' delete',0          ; DATA XREF: .rdata:0042052Co
asc_420740:				; DATA XREF: .rdata:00420530o
		unicode	0, <=>,0
asc_420744	db '>>',0               ; DATA XREF: .rdata:00420534o
		align 4
asc_420748	db '<<',0               ; DATA XREF: .rdata:00420538o
		align 4
asc_42074C:				; DATA XREF: .rdata:0042053Co
		unicode	0, <!>,0
asc_420750	db '==',0               ; DATA XREF: .rdata:00420540o
		align 4
asc_420754	db '!=',0               ; DATA XREF: .rdata:00420544o
		align 4
asc_420758	db '[]',0               ; DATA XREF: .rdata:00420548o
		align 4
aOperator	db 'operator',0         ; DATA XREF: .rdata:0042054Co
		align 4
asc_420768	db '->',0               ; DATA XREF: .rdata:00420550o
		align 4
asc_42076C	db '++',0               ; DATA XREF: .rdata:00420558o
		align 10h
asc_420770	db '--',0               ; DATA XREF: .rdata:0042055Co
		align 4
asc_420774:				; DATA XREF: .rdata:00420564o
		unicode	0, <+>,0
asc_420778:				; DATA XREF: .rdata:00420568o
		unicode	0, <&>,0
asc_42077C	db '->*',0              ; DATA XREF: .rdata:0042056Co
asc_420780:				; DATA XREF: .rdata:00420570o
		unicode	0, </>,0
asc_420784:				; DATA XREF: .rdata:00420574o
		unicode	0, <%>,0
asc_420788:				; DATA XREF: .rdata:00420578o
		dw 3Ch
		unicode	0, <>,0
asc_42078C	db '<=',0               ; DATA XREF: .rdata:0042057Co
		align 10h
asc_420790:				; DATA XREF: .rdata:00420580o
		dw 3Eh
		unicode	0, <>,0
asc_420794	db '>=',0               ; DATA XREF: .rdata:00420584o
		align 4
asc_420798:				; DATA XREF: .rdata:00420588o
		unicode	0, <,>,0
asc_42079C	db '()',0               ; DATA XREF: .rdata:0042058Co
		align 10h
asc_4207A0:				; DATA XREF: .rdata:00420590o
		unicode	0, <~>,0
asc_4207A4:				; DATA XREF: .rdata:00420594o
		unicode	0, <^>,0
asc_4207A8:				; DATA XREF: .rdata:00420598o
		unicode	0, <|>,0
asc_4207AC	db '&&',0               ; DATA XREF: .rdata:0042059Co
		align 10h
asc_4207B0	db '||',0               ; DATA XREF: .rdata:004205A0o
		align 4
asc_4207B4	db '*=',0               ; DATA XREF: .rdata:004205A4o
		align 4
asc_4207B8	db '+=',0               ; DATA XREF: .rdata:004205A8o
		align 4
asc_4207BC	db '-=',0               ; DATA XREF: .rdata:004205ACo
		align 10h
asc_4207C0	db '/=',0               ; DATA XREF: .rdata:004205B0o
		align 4
asc_4207C4	db '%=',0               ; DATA XREF: .rdata:004205B4o
		align 4
asc_4207C8	db '>>=',0              ; DATA XREF: .rdata:004205B8o
asc_4207CC	db '<<=',0              ; DATA XREF: .rdata:004205BCo
asc_4207D0	db '&=',0               ; DATA XREF: .rdata:004205C0o
		align 4
asc_4207D4	db '|=',0               ; DATA XREF: .rdata:004205C4o
		align 4
asc_4207D8	db '^=',0               ; DATA XREF: .rdata:004205C8o
		align 4
aVftable	db '`vftable',27h,0     ; DATA XREF: .rdata:004205CCo
		align 4
aVbtable	db '`vbtable',27h,0     ; DATA XREF: .rdata:004205D0o
		align 4
aVcall		db '`vcall',27h,0       ; DATA XREF: .rdata:004205D4o
aTypeof		db '`typeof',27h,0      ; DATA XREF: .rdata:004205D8o
		align 4
aLocalStaticGua	db '`local static guard',27h,0 ; DATA XREF: .rdata:004205DCo
		align 10h
aString		db '`string',27h,0      ; DATA XREF: .rdata:004205E0o
		align 4
aVbaseDestructo	db '`vbase destructor',27h,0 ; DATA XREF: .rdata:004205E4o
		align 10h
aVectorDeleting	db '`vector deleting destructor',27h,0 ; DATA XREF: .rdata:004205E8o
		align 10h
aDefaultConstru	db '`default constructor closure',27h,0 ; DATA XREF: .rdata:004205ECo
		align 10h
aScalarDeleting	db '`scalar deleting destructor',27h,0 ; DATA XREF: .rdata:004205F0o
		align 10h
aVectorConstruc	db '`vector constructor iterator',27h,0 ; DATA XREF: .rdata:004205F4o
		align 10h
aVectorDestruct	db '`vector destructor iterator',27h,0 ; DATA XREF: .rdata:004205F8o
		align 10h
aVectorVbaseCon	db '`vector vbase constructor iterator',27h,0 ; DATA XREF: .rdata:004205FCo
aVirtualDisplac	db '`virtual displacement map',27h,0 ; DATA XREF: .rdata:00420600o
		align 10h
aEhVectorConstr	db '`eh vector constructor iterator',27h,0 ; DATA XREF: .rdata:00420604o
		align 4
aEhVectorDestru	db '`eh vector destructor iterator',27h,0 ; DATA XREF: .rdata:00420608o
aEhVectorVbaseC	db '`eh vector vbase constructor iterator',27h,0
					; DATA XREF: .rdata:0042060Co
		align 4
aCopyConstructo	db '`copy constructor closure',27h,0 ; DATA XREF: .rdata:00420610o
		align 4
aUdtReturning	db '`udt returning',27h,0 ; DATA XREF: .rdata:00420614o
aEh		db '`EH',0              ; DATA XREF: .rdata:00420618o
aRtti		db '`RTTI',0            ; DATA XREF: .rdata:0042061Co
		align 4
aLocalVftable	db '`local vftable',27h,0 ; DATA XREF: .rdata:00420620o
aLocalVftableCo	db '`local vftable constructor closure',27h,0 ; DATA XREF: .rdata:00420624o
aNew_0		db ' new[]',0           ; DATA XREF: .rdata:00420628o
		align 10h
aDelete_0	db ' delete[]',0        ; DATA XREF: .rdata:0042062Co
		align 4
aOmniCallsig	db '`omni callsig',27h,0 ; DATA XREF: .rdata:00420630o
		align 4
aPlacementDelet	db '`placement delete closure',27h,0 ; DATA XREF: .rdata:00420634o
		align 4
aPlacementDel_0	db '`placement delete[] closure',27h,0 ; DATA XREF: .rdata:00420638o
		align 4
aManagedVectorC	db '`managed vector constructor iterator',27h,0
					; DATA XREF: .rdata:0042063Co
		align 10h
aManagedVectorD	db '`managed vector destructor iterator',27h,0 ; DATA XREF: .rdata:00420640o
		align 4
aEhVectorCopyCo	db '`eh vector copy constructor iterator',27h,0
					; DATA XREF: .rdata:00420644o
		align 10h
aEhVectorVbas_0	db '`eh vector vbase copy constructor iterator',27h,0
					; DATA XREF: .rdata:00420648o
aDynamicInitial	db '`dynamic initializer for ',27h,0 ; DATA XREF: .rdata:0042064Co
		align 4
aDynamicAtexitD	db '`dynamic atexit destructor for ',27h,0 ; DATA XREF: .rdata:00420650o
		align 4
aVectorCopyCons	db '`vector copy constructor iterator',27h,0 ; DATA XREF: .rdata:00420654o
		align 10h
aVectorVbaseCop	db '`vector vbase copy constructor iterator',27h,0
					; DATA XREF: .rdata:00420658o
		align 4
aManagedVecto_0	db '`managed vector copy constructor iterator',27h,0
					; DATA XREF: .rdata:0042065Co
		align 4
aLocalStaticThr	db '`local static thread guard',27h,0 ; DATA XREF: .rdata:00420660o
aOperator_0	db 'operator "" ',0     ; DATA XREF: .rdata:00420664o
		align 4
aOperatorCo_awa	db 'operator co_await',0 ; DATA XREF: .rdata:00420668o
		align 4
aTypeDescriptor	db ' Type Descriptor',27h,0 ; DATA XREF: .rdata:00420670o
		align 4
aBaseClassDescr	db ' Base Class Descriptor at (',0 ; DATA XREF: .rdata:00420674o
aBaseClassArray	db ' Base Class Array',27h,0 ; DATA XREF: .rdata:00420678o
		align 4
aClassHierarchy	db ' Class Hierarchy Descriptor',27h,0 ; DATA XREF: .rdata:0042067Co
		align 4
aCompleteObject	db ' Complete Object Locator',27h,0 ; DATA XREF: .rdata:00420680o
		align 4
		dd 40h dup(0)
asc_420D78:				; DATA XREF: sub_40A4A8+40Co
					; .data:off_42C0C0o ...
		unicode	0, <	     (((((		    H>
		dw 10h
		dd 7 dup(100010h), 5 dup(840084h), 3 dup(100010h), 810010h
		dd 2 dup(810081h), 10081h, 9 dup(10001h), 100001h, 2 dup(100010h)
		dd 820010h, 2 dup(820082h), 20082h, 9 dup(20002h), 100002h
		dd 100010h, 200010h, 40h dup(0)
		dd 83828180h, 87868584h, 8B8A8988h, 8F8E8D8Ch, 93929190h
		dd 97969594h, 9B9A9998h, 9F9E9D9Ch, 0A3A2A1A0h,	0A7A6A5A4h
		dd 0ABAAA9A8h, 0AFAEADACh, 0B3B2B1B0h, 0B7B6B5B4h, 0BBBAB9B8h
		dd 0BFBEBDBCh, 0C3C2C1C0h, 0C7C6C5C4h, 0CBCAC9C8h, 0CFCECDCCh
		dd 0D3D2D1D0h, 0D7D6D5D4h, 0DBDAD9D8h, 0DFDEDDDCh, 0E3E2E1E0h
		dd 0E7E6E5E4h, 0EBEAE9E8h, 0EFEEEDECh, 0F3F2F1F0h, 0F7F6F5F4h
		dd 0FBFAF9F8h, 0FFFEFDFCh
dword_420FF8	dd 3020100h, 7060504h, 0B0A0908h, 0F0E0D0Ch, 13121110h
					; DATA XREF: sub_40A4A8+412o
					; .data:0042C294o
		dd 17161514h, 1B1A1918h, 1F1E1D1Ch, 23222120h, 27262524h
		dd 2B2A2928h, 2F2E2D2Ch, 33323130h, 37363534h, 3B3A3938h
		dd 3F3E3D3Ch, 63626140h, 67666564h, 6B6A6968h, 6F6E6D6Ch
		dd 73727170h, 77767574h, 5B7A7978h, 5F5E5D5Ch, 63626160h
		dd 67666564h, 6B6A6968h, 6F6E6D6Ch, 73727170h, 77767574h
		dd 7B7A7978h, 7F7E7D7Ch, 83828180h, 87868584h, 8B8A8988h
		dd 8F8E8D8Ch, 93929190h, 97969594h, 9B9A9998h, 9F9E9D9Ch
		dd 0A3A2A1A0h, 0A7A6A5A4h, 0ABAAA9A8h, 0AFAEADACh, 0B3B2B1B0h
		dd 0B7B6B5B4h, 0BBBAB9B8h, 0BFBEBDBCh, 0C3C2C1C0h, 0C7C6C5C4h
		dd 0CBCAC9C8h, 0CFCECDCCh, 0D3D2D1D0h, 0D7D6D5D4h, 0DBDAD9D8h
		dd 0DFDEDDDCh, 0E3E2E1E0h, 0E7E6E5E4h, 0EBEAE9E8h, 0EFEEEDECh
		dd 0F3F2F1F0h, 0F7F6F5F4h, 0FBFAF9F8h, 0FFFEFDFCh, 83828180h
		dd 87868584h, 8B8A8988h, 8F8E8D8Ch, 93929190h, 97969594h
		dd 9B9A9998h, 9F9E9D9Ch, 0A3A2A1A0h, 0A7A6A5A4h, 0ABAAA9A8h
		dd 0AFAEADACh, 0B3B2B1B0h, 0B7B6B5B4h, 0BBBAB9B8h, 0BFBEBDBCh
		dd 0C3C2C1C0h, 0C7C6C5C4h, 0CBCAC9C8h, 0CFCECDCCh, 0D3D2D1D0h
		dd 0D7D6D5D4h, 0DBDAD9D8h, 0DFDEDDDCh, 0E3E2E1E0h, 0E7E6E5E4h
		dd 0EBEAE9E8h, 0EFEEEDECh, 0F3F2F1F0h, 0F7F6F5F4h, 0FBFAF9F8h
		dd 0FFFEFDFCh
dword_421178	dd 3020100h, 7060504h, 0B0A0908h, 0F0E0D0Ch, 13121110h
					; DATA XREF: sub_40A4A8+41Co
					; .data:0042C298o
		dd 17161514h, 1B1A1918h, 1F1E1D1Ch, 23222120h, 27262524h
		dd 2B2A2928h, 2F2E2D2Ch, 33323130h, 37363534h, 3B3A3938h
		dd 3F3E3D3Ch, 43424140h, 47464544h, 4B4A4948h, 4F4E4D4Ch
		dd 53525150h, 57565554h, 5B5A5958h, 5F5E5D5Ch, 43424160h
		dd 47464544h, 4B4A4948h, 4F4E4D4Ch, 53525150h, 57565554h
		dd 7B5A5958h, 7F7E7D7Ch, 83828180h, 87868584h, 8B8A8988h
		dd 8F8E8D8Ch, 93929190h, 97969594h, 9B9A9998h, 9F9E9D9Ch
		dd 0A3A2A1A0h, 0A7A6A5A4h, 0ABAAA9A8h, 0AFAEADACh, 0B3B2B1B0h
		dd 0B7B6B5B4h, 0BBBAB9B8h, 0BFBEBDBCh, 0C3C2C1C0h, 0C7C6C5C4h
		dd 0CBCAC9C8h, 0CFCECDCCh, 0D3D2D1D0h, 0D7D6D5D4h, 0DBDAD9D8h
		dd 0DFDEDDDCh, 0E3E2E1E0h, 0E7E6E5E4h, 0EBEAE9E8h, 0EFEEEDECh
		dd 0F3F2F1F0h, 0F7F6F5F4h, 0FBFAF9F8h, 0FFFEFDFCh
		db 2 dup(0)
word_42127A	dw 20h			; DATA XREF: .data:off_42C0C4o
asc_42127C:				; DATA XREF: .data:off_42C1E4o
		unicode	0, <	    (((((		   H>
		dd 7 dup(100010h), 840010h, 4 dup(840084h), 100084h, 3 dup(100010h)
		dd 3 dup(1810181h), 0Ah	dup(1010101h), 3 dup(100010h)
		dd 3 dup(1820182h), 0Ah	dup(1020102h), 2 dup(100010h)
		dd 3 dup(200020h), 200028h, 0Ch	dup(200020h), 80020h, 4	dup(100010h)
		dd 1120010h, 100010h, 100030h, 100010h,	140010h, 100014h
		dd 100112h, 100010h, 1120014h, 2 dup(100010h), 1010010h
		dd 0Bh dup(1010101h), 1010010h,	3 dup(1010101h), 0Ch dup(1020102h)
		dd 1020010h, 3 dup(1020102h), 1010102h,	0
dword_421480	dd 1			; DATA XREF: sub_40BCF8:loc_40BD02r
dword_421484	dd 16h			; DATA XREF: sub_40BCF8:loc_40BD32r
		dd 2 dup(2), 3,	2, 4, 18h, 5, 0Dh, 6, 9, 7, 0Ch, 8, 0Ch
		dd 9, 0Ch, 0Ah,	7, 0Bh,	8, 0Ch,	16h, 0Dh, 16h, 0Fh, 2
		dd 10h,	0Dh, 11h, 2 dup(12h), 2, 21h, 0Dh, 35h,	2, 41h
		dd 0Dh,	43h, 2,	50h, 11h, 52h, 0Dh, 53h, 0Dh, 57h, 16h
		dd 59h,	0Bh, 6Ch, 0Dh, 6Dh, 20h, 70h, 1Ch, 72h,	9, 80h
		dd 0Ah,	81h, 0Ah, 82h, 9, 83h, 16h, 84h, 0Dh, 91h, 29h
		dd 9Eh,	0Dh, 0A1h, 2, 0A4h, 0Bh, 0A7h, 0Dh, 0B7h, 11h
		dd 0CEh, 2, 0D7h, 0Bh, 459h, 2Ah, 718h,	0Ch
dbl_4215E8	dq 1.0			; DATA XREF: .text:0041B861r
dword_4215F0	dd 776F70h		; DATA XREF: sub_40BE7D+68o
					; sub_40BE7D+85o
dbl_4215F4	dq 5.0e-1		; DATA XREF: sub_40C041+Er
		align 10h
dword_421600	dd 0C0000005h, 0Bh, 0	; DATA XREF: sub_40F226+16o
					; sub_40F2E2+Do
		dd 0C000001Dh, 4, 0
		dd 0C0000096h, 4, 0
		dd 0C000008Dh, 8, 0
		dd 0C000008Eh, 8, 0
		dd 0C000008Fh, 8, 0
		dd 0C0000090h, 8, 0
		dd 0C0000091h, 8, 0
		dd 0C0000092h, 8, 0
		dd 0C0000093h, 8, 0
		dd 0C00002B4h, 8, 0
		dd 0C00002B5h, 8, 0
dword_421690	dd 0Ch			; DATA XREF: sub_41529D+5r
dword_421694	dd 3			; DATA XREF: sub_415315+129r
dword_421698	dd 9			; DATA XREF: sub_415315+132r
aMscoree_dll:				; DATA XREF: sub_40D06D+Eo
		unicode	0, <mscoree.dll>,0
; char ProcName[]
ProcName	db 'CorExitProcess',0   ; DATA XREF: sub_40D06D+20o
		align 8
; const	CHAR dword_4216C8
dword_4216C8	dd 4030201h, 8070605h, 0C0B0A09h, 100F0E0Dh, 14131211h
					; DATA XREF: sub_40E00F+255o
		dd 18171615h, 1C1B1A19h, 201F1E1Dh, 24232221h, 28272625h
		dd 2C2B2A29h, 302F2E2Dh, 34333231h, 38373635h, 3C3B3A39h
		dd 403F3E3Dh, 44434241h, 48474645h, 4C4B4A49h, 504F4E4Dh
		dd 54535251h, 58575655h, 5C5B5A59h, 605F5E5Dh, 64636261h
		dd 68676665h, 6C6B6A69h, 706F6E6Dh, 74737271h, 78777675h
		dd 7C7B7A79h, 7F7E7Dh
		dd offset aLc_all	; "LC_ALL"
		align 10h
off_421750	dd offset sub_404310	; DATA XREF: sub_40E00F+2E2r
off_421754	dd offset aLc_collate	; DATA XREF: sub_40DB86+40r
					; sub_40DB86+53o ...
					; "LC_COLLATE"
		dd offset dword_42C2C0
		dd offset sub_404310
		dd offset aLc_ctype	; "LC_CTYPE"
		dd offset dword_42C2C0
		dd offset sub_40A4A8
		dd offset aLc_monetary	; "LC_MONETARY"
		dd offset dword_42C2C0
		dd offset sub_417151
		dd offset aLc_numeric	; "LC_NUMERIC"
		dd offset dword_42C2C0
		dd offset sub_417573
off_421784	dd offset aLc_time	; DATA XREF: sub_40DB86+E9o
					; sub_40DD23+111o
					; "LC_TIME"
		dd offset dword_42C2C0
		dd offset unk_417B1E
aLc_all:				; DATA XREF: .rdata:00421748o
		unicode	0, <LC_ALL>,0
		align 10h
aLc_collate:				; DATA XREF: .rdata:off_421754o
		unicode	0, <LC_COLLATE>,0
		align 4
aLc_ctype:				; DATA XREF: .rdata:00421760o
		unicode	0, <LC_CTYPE>,0
		align 4
aLc_monetary:				; DATA XREF: .rdata:0042176Co
		unicode	0, <LC_MONETARY>,0
aLc_numeric:				; DATA XREF: .rdata:00421778o
		unicode	0, <LC_NUMERIC>,0
		align 4
aLc_time:				; DATA XREF: .rdata:off_421784o
		unicode	0, <LC_TIME>,0
asc_42180C:				; DATA XREF: sub_40DD23:loc_40DDB1o
		unicode	0, <=;>,0
		align 4
asc_421814:				; DATA XREF: sub_40DB86:loc_40DBE4o
					; sub_40DD23+122o
		unicode	0, <;>,0
asc_421818:				; DATA XREF: sub_40DB86+3Bo
					; sub_40DB86+B9o
		unicode	0, <=>,0
aC:					; DATA XREF: sub_40D6E2+A5o
		unicode	0, <C>,0
aUtf8:					; DATA XREF: sub_40D6E2+24Fo
					; sub_418528+58o ...
		unicode	0, <utf8>,0
		align 4
aUtf8_0:				; DATA XREF: sub_40D6E2+266o
					; sub_418528+69o
		unicode	0, <utf-8>,0
a__:					; DATA XREF: sub_40D4F3:loc_40D558o
					; sub_40D4F3+131o
		unicode	0, <_.,>,0
a_:					; DATA XREF: sub_40D483+2Bo
		unicode	0, <_>,0
a__0:					; DATA XREF: sub_40D483+4Co
		unicode	0, <.>,0
off_421848	dd offset sub_40E760	; DATA XREF: sub_40E85D+5o
					; sub_40E86F+22o
		align 10h
		dd offset dword_40E788+7
		align 8
		dd offset sub_40FD84
		dd offset sub_40FDAF
		dd offset sub_403E40
		dd offset sub_403E40
		dd offset unk_409E96
		dd offset sub_409EEE
		dd offset sub_4192B1
		dd offset sub_4192C2
		dd 0
		dd offset dword_40E798+25h
		dd offset sub_40F608
		dd offset sub_40F634
		dd offset sub_410DF8
		dd offset unk_410E4E
		dd offset sub_40D17E
		dd offset sub_403E40
		dd offset sub_4166AF
		dd 2 dup(0)
		dd offset sub_403E40
		dd 0
		dd offset sub_40E7DF
		dd 0
		dd offset dword_40E798+2Eh
		dd offset sub_403E40
		dd offset byte_40E787
		dd offset sub_40E76D
		dd offset sub_403E40
; LPCWSTR off_4218C8
off_4218C8	dd offset aApiMsWinCoreDa ; DATA XREF: sub_40E85Do
					; sub_40E86F:loc_40E88Co ...
					; "api-ms-win-core-datetime-l1-1-1"
		dd offset aApiMsWinCore_0 ; "api-ms-win-core-fibers-l1-1-1"
		dd offset aApiMsWinCore_1 ; "api-ms-win-core-file-l1-2-2"
		dd offset aApiMsWinCoreLo ; "api-ms-win-core-localization-l1-2-1"
		dd offset aApiMsWinCore_2 ; "api-ms-win-core-localization-obsolete-l"...
		dd offset aApiMsWinCorePr ; "api-ms-win-core-processthreads-l1-1-2"
		dd offset aApiMsWinCoreSt ; "api-ms-win-core-string-l1-1-0"
		dd offset aApiMsWinCore_3 ; "api-ms-win-core-synch-l1-2-0"
		dd offset aApiMsWinCore_4 ; "api-ms-win-core-sysinfo-l1-2-1"
		dd offset aApiMsWinCoreWi ; "api-ms-win-core-winrt-l1-1-0"
		dd offset aApiMsWinCoreXs ; "api-ms-win-core-xstate-l2-1-0"
		dd offset aApiMsWinRtcore ; "api-ms-win-rtcore-ntuser-window-l1-1-0"
		dd offset aApiMsWinSecuri ; "api-ms-win-security-systemfunctions-l1-"...
		dd offset aExtMsWinNtuser ; "ext-ms-win-ntuser-dialogbox-l1-1-0"
		dd offset aExtMsWinNtus_0 ; "ext-ms-win-ntuser-windowstation-l1-1-0"
		dd offset aAdvapi32	; "advapi32"
		dd offset aKernel32_0	; "kernel32"
		dd offset aNtdll	; "ntdll"
		dd offset aApiMsWinAppmod ; "api-ms-win-appmodel-runtime-l1-1-2"
		dd offset aUser32	; "user32"
aApiMsWinCoreDa:			; DATA XREF: .rdata:off_4218C8o
		unicode	0, <api-ms-win-core-datetime-l1-1-1>,0
aApiMsWinCore_0:			; DATA XREF: .rdata:004218CCo
		unicode	0, <api-ms-win-core-fibers-l1-1-1>,0
aApiMsWinCore_1:			; DATA XREF: .rdata:004218D0o
		unicode	0, <api-ms-win-core-file-l1-2-2>,0
		align 10h
aApiMsWinCoreLo:			; DATA XREF: .rdata:004218D4o
		unicode	0, <api-ms-win-core-localization-l1-2-1>,0
aApiMsWinCore_2:			; DATA XREF: .rdata:004218D8o
		unicode	0, <api-ms-win-core-localization-obsolete-l1-2-0>,0
		align 8
aApiMsWinCorePr:			; DATA XREF: .rdata:004218DCo
		unicode	0, <api-ms-win-core-processthreads-l1-1-2>,0
aApiMsWinCoreSt:			; DATA XREF: .rdata:004218E0o
		unicode	0, <api-ms-win-core-string-l1-1-0>,0
aApiMsWinCore_3:			; DATA XREF: .rdata:004218E4o
		unicode	0, <api-ms-win-core-synch-l1-2-0>,0
		align 4
aApiMsWinCore_4:			; DATA XREF: .rdata:004218E8o
		unicode	0, <api-ms-win-core-sysinfo-l1-2-1>,0
		align 4
aApiMsWinCoreWi:			; DATA XREF: .rdata:004218ECo
		unicode	0, <api-ms-win-core-winrt-l1-1-0>,0
		align 4
aApiMsWinCoreXs:			; DATA XREF: .rdata:004218F0o
		unicode	0, <api-ms-win-core-xstate-l2-1-0>,0
		align 8
aApiMsWinRtcore:			; DATA XREF: .rdata:004218F4o
		unicode	0, <api-ms-win-rtcore-ntuser-window-l1-1-0>,0
		align 4
aApiMsWinSecuri:			; DATA XREF: .rdata:004218F8o
		unicode	0, <api-ms-win-security-systemfunctions-l1-1-0>,0
		align 10h
aExtMsWinNtuser:			; DATA XREF: .rdata:004218FCo
		unicode	0, <ext-ms-win-ntuser-dialogbox-l1-1-0>,0
		align 4
aExtMsWinNtus_0:			; DATA XREF: .rdata:00421900o
		unicode	0, <ext-ms-win-ntuser-windowstation-l1-1-0>,0
		align 4
aAdvapi32:				; DATA XREF: .rdata:00421904o
		unicode	0, <advapi32>,0
		align 4
aKernel32_0:				; DATA XREF: .rdata:00421908o
		unicode	0, <kernel32>,0
		align 10h
aNtdll:					; DATA XREF: .rdata:0042190Co
		unicode	0, <ntdll>,0
		align 10h
aApiMsWinAppmod:			; DATA XREF: .rdata:00421910o
		unicode	0, <api-ms-win-appmodel-runtime-l1-1-2>,0
		align 4
aUser32:				; DATA XREF: .rdata:00421914o
		unicode	0, <user32>,0
		align 4
aApiMs_0:				; DATA XREF: sub_40F81A+57o
		unicode	0, <api-ms->,0
aExtMs_0:				; DATA XREF: sub_40F81A+6Bo
		unicode	0, <ext-ms->,0
dword_421DE8	dd 10h			; DATA XREF: sub_40F6FC+5o
; char aArefileapisans[]
aArefileapisans	db 'AreFileApisANSI',0  ; DATA XREF: sub_40F6FCo sub_40F6FC+Ao
dword_421DFC	dd 6, 10h		; DATA XREF: sub_40F716+5o
; char aComparestringe[]
aComparestringe	db 'CompareStringEx',0  ; DATA XREF: sub_40F716o sub_40F716+Ao
dword_421E14	dd 3, 10h		; DATA XREF: sub_40F730+5o
; char aEnumsystemloca[]
aEnumsystemloca	db 'EnumSystemLocalesEx',0 ; DATA XREF: sub_40F730o
					; sub_40F730+Ao
dword_421E30	dd 1, 10h		; DATA XREF: sub_40FA78+Bo
; char aFlsalloc_0[]
aFlsalloc_0	db 'FlsAlloc',0         ; DATA XREF: sub_40FA78+6o
					; sub_40FA78+10o
		align 4
dword_421E44	dd 1, 10h		; DATA XREF: sub_40FAB7+Bo
; char aFlsfree_0[]
aFlsfree_0	db 'FlsFree',0          ; DATA XREF: sub_40FAB7+6o
					; sub_40FAB7+10o
dword_421E54	dd 1, 10h		; DATA XREF: sub_40FAF6+Bo
; char aFlsgetvalue_0[]
aFlsgetvalue_0	db 'FlsGetValue',0      ; DATA XREF: sub_40FAF6+6o
					; sub_40FAF6+10o
dword_421E68	dd 1, 10h		; DATA XREF: sub_40FB35+Bo
; char aFlssetvalue_0[]
aFlssetvalue_0	db 'FlsSetValue',0      ; DATA XREF: sub_40FB35+6o
					; sub_40FB35+10o
dword_421E7C	dd 0			; DATA XREF: sub_40F74A+5o
		dd 10h
; char aGetdateformate[]
aGetdateformate	db 'GetDateFormatEx',0  ; DATA XREF: sub_40F74Ao sub_40F74A+Ao
dword_421E94	dd 3, 10h		; DATA XREF: sub_40F764+5o
; char aGetlocaleinfoe[]
aGetlocaleinfoe	db 'GetLocaleInfoEx',0  ; DATA XREF: sub_40F764o sub_40F764+Ao
dword_421EAC	dd 0			; DATA XREF: sub_40F77E+5o
		dd 10h
; char aGettimeformate[]
aGettimeformate	db 'GetTimeFormatEx',0  ; DATA XREF: sub_40F77Eo sub_40F77E+Ao
dword_421EC4	dd 3, 10h		; DATA XREF: sub_40F798+5o
; char aGetuserdefault[]
aGetuserdefault	db 'GetUserDefaultLocaleName',0 ; DATA XREF: sub_40F798o
					; sub_40F798+Ao
		align 4
asc_421EE8:				; DATA XREF: sub_40FBF2+Bo
		dw 7
		unicode	0, <>,0
		dd 10h
; char aInitializecr_0[]
aInitializecr_0	db 'InitializeCriticalSectionEx',0 ; DATA XREF: sub_40FBF2+6o
					; sub_40FBF2+10o
dword_421F0C	dd 3, 10h		; DATA XREF: sub_40F7B2+5o
; char aIsvalidlocalen[]
aIsvalidlocalen	db 'IsValidLocaleName',0 ; DATA XREF: sub_40F7B2o
					; sub_40F7B2+Ao
		align 4
dword_421F28	dd 3, 10h		; DATA XREF: sub_40F7E6+5o
; char aLcmapstringex[]
aLcmapstringex	db 'LCMapStringEx',0    ; DATA XREF: sub_40F7E6o sub_40F7E6+Ao
		align 10h
dword_421F40	dd 4, 10h		; DATA XREF: sub_40F7CC+5o
; char aLcidtolocalena[]
aLcidtolocalena	db 'LCIDToLocaleName',0 ; DATA XREF: sub_40F7CCo sub_40F7CC+Ao
		align 4
dword_421F5C	dd 3, 10h		; DATA XREF: sub_40F800+5o
; char aLocalenametolc[]
aLocalenametolc	db 'LocaleNameToLCID',0 ; DATA XREF: sub_40F800o sub_40F800+Ao
		align 4
dword_421F78	dd 12h			; DATA XREF: sub_40F966+Bo
; char aApppolicygetpr[]
aApppolicygetpr	db 'AppPolicyGetProcessTerminationMethod',0 ; DATA XREF: sub_40F966+6o
					; sub_40F966+10o
		align 8
off_421FA8	dd offset dword_42210C	; DATA XREF: .text:00417B33o
					; sub_417E09+Co ...
		dd offset dword_422110
		dd offset dword_422114
		dd offset dword_422118
		dd offset dword_42211C
		dd offset dword_422120
		dd offset dword_422124
		dd offset aSunday	; "Sunday"
		dd offset aMonday	; "Monday"
		dd offset aTuesday	; "Tuesday"
		dd offset aWednesday	; "Wednesday"
		dd offset aThursday	; "Thursday"
		dd offset aFriday	; "Friday"
		dd offset aSaturday	; "Saturday"
		dd offset aJan		; "Jan"
		dd offset aFeb		; "Feb"
		dd offset aMar		; "Mar"
		dd offset aApr		; "Apr"
		dd offset aMay		; "May"
		dd offset aJun		; "Jun"
		dd offset aJul		; "Jul"
		dd offset aAug		; "Aug"
		dd offset aSep		; "Sep"
		dd offset aOct		; "Oct"
		dd offset aNov		; "Nov"
		dd offset aDec		; "Dec"
		dd offset aJanuary	; "January"
		dd offset aFebruary	; "February"
		dd offset aMarch	; "March"
		dd offset aApril	; "April"
		dd offset aMay		; "May"
		dd offset aJune		; "June"
		dd offset aJuly		; "July"
		dd offset aAugust	; "August"
		dd offset aSeptember	; "September"
		dd offset aOctober	; "October"
		dd offset aNovember	; "November"
		dd offset aDecember	; "December"
		dd offset aAm		; "AM"
		dd offset aPm		; "PM"
		dd offset aMmDdYy	; "MM/dd/yy"
		dd offset aDdddMmmmDdYyyy ; "dddd, MMMM	dd, yyyy"
		dd offset aHhMmSs	; "HH:mm:ss"
		dd 1, 0
		dd offset aSun		; "Sun"
		dd offset aMon		; "Mon"
		dd offset aTue		; "Tue"
		dd offset aWed		; "Wed"
		dd offset aThu		; "Thu"
		dd offset aFri		; "Fri"
		dd offset aSat		; "Sat"
		dd offset aSunday_0	; "Sunday"
		dd offset aMonday_0	; "Monday"
		dd offset aTuesday_0	; "Tuesday"
		dd offset aWednesday_0	; "Wednesday"
		dd offset aThursday_0	; "Thursday"
		dd offset aFriday_0	; "Friday"
		dd offset aSaturday_0	; "Saturday"
		dd offset aJan_0	; "Jan"
		dd offset aFeb_0	; "Feb"
		dd offset aMar_0	; "Mar"
		dd offset aApr_0	; "Apr"
		dd offset aMay_0	; "May"
		dd offset aJun_0	; "Jun"
		dd offset aJul_0	; "Jul"
		dd offset aAug_0	; "Aug"
		dd offset aSep_0	; "Sep"
		dd offset aOct_0	; "Oct"
		dd offset aNov_0	; "Nov"
		dd offset aDec_0	; "Dec"
		dd offset aJanuary_0	; "January"
		dd offset aFebruary_0	; "February"
		dd offset aMarch_0	; "March"
		dd offset aApril_0	; "April"
		dd offset aMay_0	; "May"
		dd offset aJune_0	; "June"
		dd offset aJuly_0	; "July"
		dd offset aAugust_0	; "August"
		dd offset aSeptember_0	; "September"
		dd offset aOctober_0	; "October"
		dd offset aNovember_0	; "November"
		dd offset aDecember_0	; "December"
		dd offset aAm_0		; "AM"
		dd offset aPm_0		; "PM"
		dd offset aMmDdYy_0	; "MM/dd/yy"
		dd offset aDdddMmmmDdYy_0 ; "dddd, MMMM	dd, yyyy"
		dd offset aHhMmSs_0	; "HH:mm:ss"
		dd offset aEnUs_1	; "en-US"
dword_42210C	dd 6E7553h		; DATA XREF: .rdata:off_421FA8o
dword_422110	dd 6E6F4Dh		; DATA XREF: .rdata:00421FACo
dword_422114	dd 657554h		; DATA XREF: .rdata:00421FB0o
dword_422118	dd 646557h		; DATA XREF: .rdata:00421FB4o
dword_42211C	dd 756854h		; DATA XREF: .rdata:00421FB8o
dword_422120	dd 697246h		; DATA XREF: .rdata:00421FBCo
dword_422124	dd 746153h		; DATA XREF: .rdata:00421FC0o
aSunday		db 'Sunday',0           ; DATA XREF: .rdata:00421FC4o
		align 10h
aMonday		db 'Monday',0           ; DATA XREF: .rdata:00421FC8o
		align 4
aTuesday	db 'Tuesday',0          ; DATA XREF: .rdata:00421FCCo
aWednesday	db 'Wednesday',0        ; DATA XREF: .rdata:00421FD0o
		align 4
aThursday	db 'Thursday',0         ; DATA XREF: .rdata:00421FD4o
		align 4
aFriday		db 'Friday',0           ; DATA XREF: .rdata:00421FD8o
		align 10h
aSaturday	db 'Saturday',0         ; DATA XREF: .rdata:00421FDCo
		align 4
aJan		db 'Jan',0              ; DATA XREF: .rdata:00421FE0o
aFeb		db 'Feb',0              ; DATA XREF: .rdata:00421FE4o
aMar		db 'Mar',0              ; DATA XREF: .rdata:00421FE8o
aApr		db 'Apr',0              ; DATA XREF: .rdata:00421FECo
aMay		db 'May',0              ; DATA XREF: .rdata:00421FF0o
					; .rdata:00422020o
aJun		db 'Jun',0              ; DATA XREF: .rdata:00421FF4o
aJul		db 'Jul',0              ; DATA XREF: .rdata:00421FF8o
aAug		db 'Aug',0              ; DATA XREF: .rdata:00421FFCo
aSep		db 'Sep',0              ; DATA XREF: .rdata:00422000o
aOct		db 'Oct',0              ; DATA XREF: .rdata:00422004o
aNov		db 'Nov',0              ; DATA XREF: .rdata:00422008o
aDec		db 'Dec',0              ; DATA XREF: .rdata:0042200Co
aJanuary	db 'January',0          ; DATA XREF: .rdata:00422010o
aFebruary	db 'February',0         ; DATA XREF: .rdata:00422014o
		align 10h
aMarch		db 'March',0            ; DATA XREF: .rdata:00422018o
		align 4
aApril		db 'April',0            ; DATA XREF: .rdata:0042201Co
		align 10h
aJune		db 'June',0             ; DATA XREF: .rdata:00422024o
		align 4
aJuly		db 'July',0             ; DATA XREF: .rdata:00422028o
		align 10h
aAugust		db 'August',0           ; DATA XREF: .rdata:0042202Co
		align 4
aSeptember	db 'September',0        ; DATA XREF: .rdata:00422030o
		align 4
aOctober	db 'October',0          ; DATA XREF: .rdata:00422034o
aNovember	db 'November',0         ; DATA XREF: .rdata:00422038o
		align 4
aDecember	db 'December',0         ; DATA XREF: .rdata:0042203Co
		align 4
aAm		db 'AM',0               ; DATA XREF: .rdata:00422040o
		align 4
aPm		db 'PM',0               ; DATA XREF: .rdata:00422044o
		align 4
aMmDdYy		db 'MM/dd/yy',0         ; DATA XREF: .rdata:00422048o
		align 4
aDdddMmmmDdYyyy	db 'dddd, MMMM dd, yyyy',0 ; DATA XREF: .rdata:0042204Co
aHhMmSs		db 'HH:mm:ss',0         ; DATA XREF: .rdata:00422050o
		align 4
aSun:					; DATA XREF: .rdata:0042205Co
		unicode	0, <Sun>,0
aMon:					; DATA XREF: .rdata:00422060o
		unicode	0, <Mon>,0
aTue:					; DATA XREF: .rdata:00422064o
		unicode	0, <Tue>,0
aWed:					; DATA XREF: .rdata:00422068o
		unicode	0, <Wed>,0
aThu:					; DATA XREF: .rdata:0042206Co
		unicode	0, <Thu>,0
aFri:					; DATA XREF: .rdata:00422070o
		unicode	0, <Fri>,0
aSat:					; DATA XREF: .rdata:00422074o
		unicode	0, <Sat>,0
aSunday_0:				; DATA XREF: .rdata:00422078o
		unicode	0, <Sunday>,0
		align 10h
aMonday_0:				; DATA XREF: .rdata:0042207Co
		unicode	0, <Monday>,0
		align 10h
aTuesday_0:				; DATA XREF: .rdata:00422080o
		unicode	0, <Tuesday>,0
aWednesday_0:				; DATA XREF: .rdata:00422084o
		unicode	0, <Wednesday>,0
aThursday_0:				; DATA XREF: .rdata:00422088o
		unicode	0, <Thursday>,0
		align 4
aFriday_0:				; DATA XREF: .rdata:0042208Co
		unicode	0, <Friday>,0
		align 4
aSaturday_0:				; DATA XREF: .rdata:00422090o
		unicode	0, <Saturday>,0
		align 4
aJan_0:					; DATA XREF: .rdata:00422094o
		unicode	0, <Jan>,0
aFeb_0:					; DATA XREF: .rdata:00422098o
		unicode	0, <Feb>,0
aMar_0:					; DATA XREF: .rdata:0042209Co
		unicode	0, <Mar>,0
aApr_0:					; DATA XREF: .rdata:004220A0o
		unicode	0, <Apr>,0
aMay_0:					; DATA XREF: .rdata:004220A4o
					; .rdata:004220D4o
		unicode	0, <May>,0
aJun_0:					; DATA XREF: .rdata:004220A8o
		unicode	0, <Jun>,0
aJul_0:					; DATA XREF: .rdata:004220ACo
		unicode	0, <Jul>,0
aAug_0:					; DATA XREF: .rdata:004220B0o
		unicode	0, <Aug>,0
aSep_0:					; DATA XREF: .rdata:004220B4o
		unicode	0, <Sep>,0
aOct_0:					; DATA XREF: .rdata:004220B8o
		unicode	0, <Oct>,0
aNov_0:					; DATA XREF: .rdata:004220BCo
		unicode	0, <Nov>,0
aDec_0:					; DATA XREF: .rdata:004220C0o
		unicode	0, <Dec>,0
aJanuary_0:				; DATA XREF: .rdata:004220C4o
		unicode	0, <January>,0
aFebruary_0:				; DATA XREF: .rdata:004220C8o
		unicode	0, <February>,0
		align 10h
aMarch_0:				; DATA XREF: .rdata:004220CCo
		unicode	0, <March>,0
aApril_0:				; DATA XREF: .rdata:004220D0o
		unicode	0, <April>,0
aJune_0:				; DATA XREF: .rdata:004220D8o
		unicode	0, <June>,0
		align 4
aJuly_0:				; DATA XREF: .rdata:004220DCo
		unicode	0, <July>,0
		align 10h
aAugust_0:				; DATA XREF: .rdata:004220E0o
		unicode	0, <August>,0
		align 10h
aSeptember_0:				; DATA XREF: .rdata:004220E4o
		unicode	0, <September>,0
aOctober_0:				; DATA XREF: .rdata:004220E8o
		unicode	0, <October>,0
aNovember_0:				; DATA XREF: .rdata:004220ECo
		unicode	0, <November>,0
		align 4
aDecember_0:				; DATA XREF: .rdata:004220F0o
		unicode	0, <December>,0
		align 4
aAm_0:					; DATA XREF: .rdata:004220F4o
		unicode	0, <AM>,0
		align 4
aPm_0:					; DATA XREF: .rdata:004220F8o
		unicode	0, <PM>,0
		align 4
aMmDdYy_0:				; DATA XREF: .rdata:004220FCo
		unicode	0, <MM/dd/yy>,0
		align 10h
aDdddMmmmDdYy_0:			; DATA XREF: .rdata:00422100o
		unicode	0, <dddd, MMMM dd, yyyy>,0
aHhMmSs_0:				; DATA XREF: .rdata:00422104o
		unicode	0, <HH:mm:ss>,0
		align 4
aEnUs_1:				; DATA XREF: .rdata:00422108o
					; .rdata:00423854o
		unicode	0, <en-US>,0
dword_422468	dd 14h			; DATA XREF: sub_4139A3:loc_4139B2r
off_42246C	dd offset dword_422550	; DATA XREF: sub_4139A3:loc_4139C3r
		dd 1Dh
		dd offset dword_422554
		dd 1Ah
		dd offset dword_422558
		dd 1Bh
		dd offset aLog10	; "log10"
		dd 1Fh
		dd offset aSinh		; "sinh"
		dd 13h
		dd offset aCosh		; "cosh"
		dd 21h
		dd offset aTanh		; "tanh"
		dd 0Eh
		dd offset aAsin		; "asin"
		dd 0Dh
		dd offset aAcos		; "acos"
		dd 0Fh
		dd offset aAtan		; "atan"
		dd 10h
		dd offset aAtan2	; "atan2"
		dd 5
		dd offset aSqrt		; "sqrt"
		dd 1Eh
		dd offset aSin		; "sin"
		dd 12h
		dd offset aCos		; "cos"
		dd 20h
		dd offset aTan		; "tan"
		dd 0Ch
		dd offset aCeil		; "ceil"
		dd 0Bh
		dd offset aFloor	; "floor"
		dd 15h
		dd offset aFabs		; "fabs"
		dd 1Ch
		dd offset aModf		; "modf"
		dd 19h
		dd offset aLdexp	; "ldexp"
		dd 11h
		dd offset a_cabs	; "_cabs"
		dd 18h
		dd offset a_hypot	; "_hypot"
		dd 16h
		dd offset aFmod		; "fmod"
		dd 17h
		dd offset aFrexp	; "frexp"
		dd 22h
		dd offset a_y0		; "_y0"
		dd 23h
		dd offset a_y1		; "_y1"
		dd 24h
		dd offset a_yn		; "_yn"
		dd 25h
		dd offset a_logb	; "_logb"
		dd 26h
		dd offset a_nextafter	; "_nextafter"
dword_422550	dd 707865h		; DATA XREF: sub_419DD8+98o
					; sub_419DD8:loc_419ED5o ...
dword_422554	dd 776F70h		; DATA XREF: sub_419DD8+B7o
					; sub_419DD8:loc_419F39o ...
dword_422558	dd 676F6Ch		; DATA XREF: sub_419DD8:loc_419E4Eo
					; sub_419DD8+85o ...
aLog10		db 'log10',0            ; DATA XREF: sub_419DD8+5Bo
					; sub_419DD8+6Ao ...
		align 4
aSinh		db 'sinh',0             ; DATA XREF: .rdata:0042248Co
		align 4
aCosh		db 'cosh',0             ; DATA XREF: .rdata:00422494o
		align 4
aTanh		db 'tanh',0             ; DATA XREF: .rdata:0042249Co
		align 4
aAsin		db 'asin',0             ; DATA XREF: sub_419DD8:loc_419F1Eo
					; .rdata:004224A4o
		align 4
aAcos		db 'acos',0             ; DATA XREF: sub_419DD8:loc_419F27o
					; .rdata:004224ACo
		align 4
aAtan		db 'atan',0             ; DATA XREF: .rdata:004224B4o
		align 4
aAtan2		db 'atan2',0            ; DATA XREF: .rdata:004224BCo
		align 4
aSqrt		db 'sqrt',0             ; DATA XREF: sub_419DD8:loc_419F30o
					; .rdata:004224C4o
		align 4
aSin		db 'sin',0              ; DATA XREF: .rdata:004224CCo
aCos		db 'cos',0              ; DATA XREF: .rdata:004224D4o
aTan		db 'tan',0              ; DATA XREF: .rdata:004224DCo
aCeil		db 'ceil',0             ; DATA XREF: .rdata:004224E4o
		align 4
aFloor		db 'floor',0            ; DATA XREF: .rdata:004224ECo
		align 10h
aFabs		db 'fabs',0             ; DATA XREF: .rdata:004224F4o
		align 4
aModf		db 'modf',0             ; DATA XREF: .rdata:004224FCo
		align 10h
aLdexp		db 'ldexp',0            ; DATA XREF: .rdata:00422504o
		align 4
a_cabs		db '_cabs',0            ; DATA XREF: .rdata:0042250Co
		align 10h
a_hypot		db '_hypot',0           ; DATA XREF: .rdata:00422514o
		align 4
aFmod		db 'fmod',0             ; DATA XREF: .rdata:0042251Co
		align 10h
aFrexp		db 'frexp',0            ; DATA XREF: .rdata:00422524o
		align 4
a_y0		db '_y0',0              ; DATA XREF: .rdata:0042252Co
a_y1		db '_y1',0              ; DATA XREF: .rdata:00422534o
a_yn		db '_yn',0              ; DATA XREF: .rdata:0042253Co
a_logb		db '_logb',0            ; DATA XREF: .rdata:00422544o
		align 4
a_nextafter	db '_nextafter',0       ; DATA XREF: .rdata:0042254Co
		align 4
dbl_422618	dq 1.797693134862316e308 ; DATA	XREF: sub_41346E:loc_41353Dr
					; sub_41346E:loc_413545r ...
dbl_422620	dq 1.797693134862316e308 ; DATA	XREF: sub_41346E+88r
					; sub_41346E+A3r ...
dbl_422628	db 0, 0, 0, 0, 0, 0, 0,	80h ; DATA XREF: sub_4150D6+116r
tbyte_422630	dt 2.3562723457267347066e313 ; DATA XREF: sub_413C65+10r
					; sub_413C65+22r
		align 4
tbyte_42263C	dt 1.9149954921904370718e-1233 ; DATA XREF: sub_413C65+34r
		align 10h
qword_422650	dq 4338000000000000h	; DATA XREF: sub_413F09+26Cr
					; sub_413F09+278r ...
		dd 0
		dd 43380000h
oword_422660	db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0Fh, 0, 0FFh, 0FFh
					; DATA XREF: sub_413F09+6r
					; sub_413F09+A4r ...
		db 0FFh, 0FFh, 0FFh, 0FFh, 0Fh,	0
oword_422670	db 0, 0, 0, 0, 0, 0, 0F0h, 3Fh,	0, 0, 0, 0, 0, 0, 0F0h
					; DATA XREF: sub_413F09+Er
					; sub_413F09+D6r ...
		db 3Fh
oword_422680	db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 7Fh, 0FFh
					; DATA XREF: sub_413F09+354r
					; sub_413F09+401r ...
		db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 7Fh
oword_422690	db 31h,	67h, 8Ah, 0E7h,	7Fh, 0D8h, 55h,	3Fh, 0BFh, 0A0h
					; DATA XREF: sub_413F09+298r
					; sub_413F09+894r
		db 4, 0D7h, 8, 6Bh, 0ACh, 3Fh
oword_4226A0	db 77h,	4Eh, 0BAh, 6Fh,	0ABh, 0B2h, 83h, 3Fh, 8Eh, 0C5h
					; DATA XREF: sub_413F09+2E7r
					; sub_413F09+8F8r
		db 82h,	0FFh, 0BDh, 0BFh, 0CEh,	3Fh
oword_4226B0	db 0EFh, 39h, 0FAh, 0FEh, 42h, 2Eh, 0E6h, 3Fh, 0, 0, 0
					; DATA XREF: sub_413F09+2C7r
					; sub_413F09+8B5r ...
		db 0F8h, 0FFh, 0FFh, 0FFh, 0FFh
oword_4226C0	db 0, 0, 0, 40h, 47h, 15h, 0F7h, 0BFh, 1, 0, 0,	0, 0, 0
					; DATA XREF: sub_413F09+100r
					; sub_413F09+6A1r
		db 0F0h, 7Fh
dbl_4226D0	dq 1.797693134862316e308 ; DATA	XREF: sub_413F09:loc_41466Fr
dbl_4226D8	dq -1.797693134862316e308 ; DATA XREF: sub_413F09:loc_414530r
oword_4226E0	db 0, 0, 0, 0, 0, 0, 0,	80h, 0,	0, 0, 0, 0, 0, 0E0h, 0FFh
					; DATA XREF: sub_413F09+412r
					; sub_413F09:loc_414529r ...
oword_4226F0	db 0, 0, 0, 0, 0, 0, 0E0h, 7Fh,	0, 0, 0, 0, 0, 0, 10h
					; DATA XREF: sub_413F09+A63r
					; sub_413F09:loc_414979r ...
		db 0
oword_422700	db 0, 0, 0, 0, 0, 0, 0F8h, 0FFh, 0, 0, 0, 0, 0,	0, 0, 0
					; DATA XREF: sub_413F09+6A9r
tbyte_422710	dt 1.1897314953572317651e4932 ;	DATA XREF: sub_40BE7D+16Fr
					; .text:00414A8Br ...
tbyte_42271A	dt -1.1897314953572317651e4932 ; DATA XREF: .text:00414ABCr
					; sub_41AF68+8Er
		dd 0B9D7A7DCh, 0B1716685h
		db 0Dh,	40h
tbyte_42272E	dt 3.27675e4		; DATA XREF: sub_414B6D+4r
		dd 0C4336F7h, 95F61998h
		db 0FDh, 3Fh
dbl_422742	dq 5.0e-1		; DATA XREF: sub_414BB0+Er
		dw 6503h
		dd 7078h, 0
		dd 1000000h
		db 14h,	0
		dd offset sub_414A30
		dd offset sub_414D70
		dd offset sub_414D80
		dd offset sub_414B60
		align 10h
tbyte_422770	dt -1.7845972430358476476e4932 ; DATA XREF: sub_40BE7D+1B4r
					; .text:00414E34r ...
		dw 0C235h
		dd 0DAA22168h, 3FFFC90Fh
tbyte_422784	dt 7.8539816339744830963e-1 ; DATA XREF: .text:00414E54r
dbl_42278E	dq 1.0			; DATA XREF: sub_414D80+24r
dbl_422796	dq 3.0			; DATA XREF: .text:00414E64r
word_42279E	dw 408h			; DATA XREF: .text:00414C48o
					; .text:00414CBDo
		dd 4080808h, 4000808h, 400080Ch, 80Ch
dbl_4227B0	dq 1.0			; DATA XREF: sub_414F0C:loc_414F19r
word_4227B8	dw 27Fh			; DATA XREF: sub_41AF68+13r
		dw 0C235h
		dd 0DAA22168h, 403EC90Fh
dbl_4227C4	dq 1.797693134862316e308 ; DATA	XREF: sub_414FC9+8Ar
dbl_4227CC	dq 2.225073858507201e-308 ; DATA XREF: sub_414FC9+61r
dbl_4227D4	dq -1.536e3		; DATA XREF: sub_414FC9:loc_415043r
dbl_4227DC	dq 1.536e3		; DATA XREF: sub_414FC9:loc_41501Ar
dbl_4227E4	dq 1.797693134862316e308 ; DATA	XREF: sub_414FC9+9Br
dbl_4227EC	dq 0.0			; DATA XREF: sub_414FC9+72r
		align 8
dbl_4227F8	dq 5.0e-1		; DATA XREF: sub_41506C+37r
off_422800	dd offset aJaJp		; DATA XREF: sub_416265:loc_41629Cr
					; "ja-JP"
off_422804	dd offset aZhCn		; DATA XREF: sub_416265:loc_416295r
					; "zh-CN"
off_422808	dd offset aKoKr		; DATA XREF: sub_416265:loc_41628Er
					; "ko-KR"
off_42280C	dd offset aZhTw		; DATA XREF: sub_416265:loc_416287r
					; "zh-TW"
aJaJp:					; DATA XREF: .rdata:off_422800o
					; .rdata:0042388Co
		unicode	0, <ja-JP>,0
aZhCn:					; DATA XREF: .rdata:off_422804o
					; .rdata:00423A7Co
		unicode	0, <zh-CN>,0
aKoKr:					; DATA XREF: .rdata:off_422808o
					; .rdata:00423894o
		unicode	0, <ko-KR>,0
aZhTw:					; DATA XREF: .rdata:off_42280Co
					; .rdata:0042382Co
		unicode	0, <zh-TW>,0
off_422840	dd offset aAmerican	; DATA XREF: sub_4186DE+77o
					; sub_41904D+B9o
					; "american"
aEnu:
		unicode	0, <ENU>,0
		dd offset aAmericanEnglis ; "american english"
aEnu_0:
		unicode	0, <ENU>,0
		dd offset aAmericanEngl_0 ; "american-english"
aEnu_1:
		unicode	0, <ENU>,0
		dd offset aAustralian	; "australian"
aEna:
		unicode	0, <ENA>,0
		dd offset aBelgian	; "belgian"
aNlb:
		unicode	0, <NLB>,0
		dd offset aCanadian	; "canadian"
aEnc:
		unicode	0, <ENC>,0
		dd offset aChh		; "chh"
aZhh:
		unicode	0, <ZHH>,0
		dd offset aChi		; "chi"
aZhi:
		unicode	0, <ZHI>,0
		dd offset aChinese	; "chinese"
aChs:
		unicode	0, <CHS>,0
		dd offset aChineseHongkon ; "chinese-hongkong"
aZhh_0:
		unicode	0, <ZHH>,0
		dd offset aChineseSimplif ; "chinese-simplified"
aChs_0:
		unicode	0, <CHS>,0
		dd offset aChineseSingapo ; "chinese-singapore"
aZhi_0:
		unicode	0, <ZHI>,0
		dd offset aChineseTraditi ; "chinese-traditional"
aCht:
		unicode	0, <CHT>,0
		dd offset aDutchBelgian	; "dutch-belgian"
aNlb_0:
		unicode	0, <NLB>,0
		dd offset aEnglishAmerica ; "english-american"
aEnu_2:
		unicode	0, <ENU>,0
		dd offset aEnglishAus	; "english-aus"
aEna_0:
		unicode	0, <ENA>,0
		dd offset aEnglishBelize ; "english-belize"
aEnl:
		unicode	0, <ENL>,0
		dd offset aEnglishCan	; "english-can"
aEnc_0:
		unicode	0, <ENC>,0
		dd offset aEnglishCaribbe ; "english-caribbean"
aEnb:
		unicode	0, <ENB>,0
		dd offset aEnglishIre	; "english-ire"
aEni:
		unicode	0, <ENI>,0
		dd offset aEnglishJamaica ; "english-jamaica"
aEnj:
		unicode	0, <ENJ>,0
		dd offset aEnglishNz	; "english-nz"
aEnz:
		unicode	0, <ENZ>,0
		dd offset aEnglishSouthAf ; "english-south africa"
aEns:
		unicode	0, <ENS>,0
		dd offset aEnglishTrinida ; "english-trinidad y	tobago"
aEnt:
		unicode	0, <ENT>,0
		dd offset aEnglishUk	; "english-uk"
aEng:
		unicode	0, <ENG>,0
		dd offset aEnglishUs	; "english-us"
aEnu_3:
		unicode	0, <ENU>,0
		dd offset aEnglishUsa	; "english-usa"
aEnu_4:
		unicode	0, <ENU>,0
		dd offset aFrenchBelgian ; "french-belgian"
aFrb:
		unicode	0, <FRB>,0
		dd offset aFrenchCanadian ; "french-canadian"
aFrc:
		unicode	0, <FRC>,0
		dd offset aFrenchLuxembou ; "french-luxembourg"
aFrl:
		unicode	0, <FRL>,0
		dd offset aFrenchSwiss	; "french-swiss"
aFrs:
		unicode	0, <FRS>,0
		dd offset aGermanAustrian ; "german-austrian"
aDea:
		unicode	0, <DEA>,0
		dd offset aGermanLichtens ; "german-lichtenstein"
aDec_1:
		unicode	0, <DEC>,0
		dd offset aGermanLuxembou ; "german-luxembourg"
aDel:
		unicode	0, <DEL>,0
		dd offset aGermanSwiss	; "german-swiss"
aDes:
		unicode	0, <DES>,0
		dd offset aIrishEnglish	; "irish-english"
aEni_0:
		unicode	0, <ENI>,0
		dd offset aItalianSwiss	; "italian-swiss"
aIts:
		unicode	0, <ITS>,0
		dd offset aNorwegian	; "norwegian"
aNor:
		unicode	0, <NOR>,0
		dd offset aNorwegianBokma ; "norwegian-bokmal"
aNor_0:
		unicode	0, <NOR>,0
		dd offset aNorwegianNynor ; "norwegian-nynorsk"
aNon:
		unicode	0, <NON>,0
		dd offset aPortugueseBraz ; "portuguese-brazilian"
aPtb:
		unicode	0, <PTB>,0
		dd offset aSpanishArgenti ; "spanish-argentina"
aEss:
		unicode	0, <ESS>,0
		dd offset aSpanishBolivia ; "spanish-bolivia"
aEsb:
		unicode	0, <ESB>,0
		dd offset aSpanishChile	; "spanish-chile"
aEsl:
		unicode	0, <ESL>,0
		dd offset aSpanishColombi ; "spanish-colombia"
aEso:
		unicode	0, <ESO>,0
		dd offset aSpanishCostaRi ; "spanish-costa rica"
aEsc:
		unicode	0, <ESC>,0
		dd offset aSpanishDominic ; "spanish-dominican republic"
aEsd:
		unicode	0, <ESD>,0
		dd offset aSpanishEcuador ; "spanish-ecuador"
aEsf:
		unicode	0, <ESF>,0
		dd offset aSpanishElSalva ; "spanish-el	salvador"
aEse:
		unicode	0, <ESE>,0
		dd offset aSpanishGuatema ; "spanish-guatemala"
aEsg:
		unicode	0, <ESG>,0
		dd offset aSpanishHondura ; "spanish-honduras"
aEsh:
		unicode	0, <ESH>,0
		dd offset aSpanishMexican ; "spanish-mexican"
aEsm:
		unicode	0, <ESM>,0
		dd offset aSpanishModern ; "spanish-modern"
aEsn:
		unicode	0, <ESN>,0
		dd offset aSpanishNicarag ; "spanish-nicaragua"
aEsi:
		unicode	0, <ESI>,0
		dd offset aSpanishPanama ; "spanish-panama"
aEsa:
		unicode	0, <ESA>,0
		dd offset aSpanishParagua ; "spanish-paraguay"
aEsz:
		unicode	0, <ESZ>,0
		dd offset aSpanishPeru	; "spanish-peru"
aEsr:
		unicode	0, <ESR>,0
		dd offset aSpanishPuertoR ; "spanish-puerto rico"
aEsu:
		unicode	0, <ESU>,0
		dd offset aSpanishUruguay ; "spanish-uruguay"
aEsy:
		unicode	0, <ESY>,0
		dd offset aSpanishVenezue ; "spanish-venezuela"
aEsv:
		unicode	0, <ESV>,0
		dd offset aSwedishFinland ; "swedish-finland"
aSvf:
		unicode	0, <SVF>,0
		dd offset aSwiss	; "swiss"
aDes_0:
		unicode	0, <DES>,0
		dd offset aUk_0		; "uk"
aEng_0:
		unicode	0, <ENG>,0
		dd offset aUs		; "us"
aEnu_5:
		unicode	0, <ENU>,0
		dd offset aUsa		; "usa"
aEnu_6:
		unicode	0, <ENU>,0
dword_422B4C	dd 41h			; DATA XREF: sub_41904D+AFr
off_422B50	dd offset aAmerica	; DATA XREF: sub_4186DE+42o
					; sub_41904D+65o
					; "america"
aUsa_0:
		unicode	0, <USA>,0
		dd offset aBritain	; "britain"
		dd offset aMlIn_0+0Bh
		dd 52h
		dd offset aChina	; "china"
aChn:
		unicode	0, <CHN>,0
		dd offset aCzech	; "czech"
aCze:
		unicode	0, <CZE>,0
		dd offset aEngland	; "england"
		dd offset aMlIn_0+0Bh
		dd 52h
		dd offset aGreatBritain	; "great britain"
		dd offset aMlIn_0+0Bh
		dd 52h
		dd offset aHolland	; "holland"
aNld:
		unicode	0, <NLD>,0
		dd offset aHongKong	; "hong-kong"
aHkg:
		unicode	0, <HKG>,0
		dd offset aNewZealand	; "new-zealand"
aNzl:
		unicode	0, <NZL>,0
		dd offset aNz		; "nz"
aNzl_0:
		unicode	0, <NZL>,0
		dd offset aPrChina	; "pr china"
aChn_0:
		unicode	0, <CHN>,0
		dd offset aPrChina_0	; "pr-china"
aChn_1:
		unicode	0, <CHN>,0
		dd offset aPuertoRico	; "puerto-rico"
aPri:
		unicode	0, <PRI>,0
		dd offset aSlovak	; "slovak"
aSvk:
		unicode	0, <SVK>,0
		dd offset aSouthAfrica	; "south africa"
aZaf:
		unicode	0, <ZAF>,0
		dd offset aSouthKorea	; "south korea"
aKor:
		unicode	0, <KOR>,0
		dd offset aSouthAfrica_0 ; "south-africa"
aZaf_0:
		unicode	0, <ZAF>,0
		dd offset aSouthKorea_0	; "south-korea"
aKor_0:
		unicode	0, <KOR>,0
		dd offset aTrinidadTobago ; "trinidad &	tobago"
aTto:
		unicode	0, <TTO>,0
		dd offset aUk_0		; "uk"
		dd offset aMlIn_0+0Bh
		dd 52h
		dd offset aUnitedKingdom ; "united-kingdom"
		dd offset aMlIn_0+0Bh
		dd 52h
		dd offset aUnitedStates	; "united-states"
aUsa_1:
		unicode	0, <USA>,0
		dd offset aUs		; "us"
aUsa_2:
		unicode	0, <USA>,0
dword_422C64	dd 17h			; DATA XREF: sub_41904D+5Dr
aAmerican:				; DATA XREF: .rdata:off_422840o
		unicode	0, <american>,0
		align 4
aAmericanEnglis:			; DATA XREF: .rdata:0042284Co
		unicode	0, <american english>,0
		align 10h
aAmericanEngl_0:			; DATA XREF: .rdata:00422858o
		unicode	0, <american-english>,0
		align 4
aAustralian:				; DATA XREF: .rdata:00422864o
		unicode	0, <australian>,0
		align 4
aBelgian:				; DATA XREF: .rdata:00422870o
		unicode	0, <belgian>,0
aCanadian:				; DATA XREF: .rdata:0042287Co
		unicode	0, <canadian>,0
		align 10h
aChh:					; DATA XREF: .rdata:00422888o
		unicode	0, <chh>,0
aChi:					; DATA XREF: .rdata:00422894o
		unicode	0, <chi>,0
aChinese:				; DATA XREF: .rdata:004228A0o
		unicode	0, <chinese>,0
aChineseHongkon:			; DATA XREF: .rdata:004228ACo
		unicode	0, <chinese-hongkong>,0
		align 4
aChineseSimplif:			; DATA XREF: .rdata:004228B8o
		unicode	0, <chinese-simplified>,0
		align 4
aChineseSingapo:			; DATA XREF: .rdata:004228C4o
		unicode	0, <chinese-singapore>,0
aChineseTraditi:			; DATA XREF: .rdata:004228D0o
		unicode	0, <chinese-traditional>,0
aDutchBelgian:				; DATA XREF: .rdata:004228DCo
		unicode	0, <dutch-belgian>,0
aEnglishAmerica:			; DATA XREF: .rdata:004228E8o
		unicode	0, <english-american>,0
		align 4
aEnglishAus:				; DATA XREF: .rdata:004228F4o
		unicode	0, <english-aus>,0
aEnglishBelize:				; DATA XREF: .rdata:00422900o
		unicode	0, <english-belize>,0
		align 10h
aEnglishCan:				; DATA XREF: .rdata:0042290Co
		unicode	0, <english-can>,0
aEnglishCaribbe:			; DATA XREF: .rdata:00422918o
		unicode	0, <english-caribbean>,0
aEnglishIre:				; DATA XREF: .rdata:00422924o
		unicode	0, <english-ire>,0
aEnglishJamaica:			; DATA XREF: .rdata:00422930o
		unicode	0, <english-jamaica>,0
aEnglishNz:				; DATA XREF: .rdata:0042293Co
		unicode	0, <english-nz>,0
		align 4
aEnglishSouthAf:			; DATA XREF: .rdata:00422948o
		unicode	0, <english-south africa>,0
		align 4
aEnglishTrinida:			; DATA XREF: .rdata:00422954o
		unicode	0, <english-trinidad y tobago>,0
aEnglishUk:				; DATA XREF: .rdata:00422960o
		unicode	0, <english-uk>,0
		align 4
aEnglishUs:				; DATA XREF: .rdata:0042296Co
		unicode	0, <english-us>,0
		align 4
aEnglishUsa:				; DATA XREF: .rdata:00422978o
		unicode	0, <english-usa>,0
aFrenchBelgian:				; DATA XREF: .rdata:00422984o
		unicode	0, <french-belgian>,0
		align 4
aFrenchCanadian:			; DATA XREF: .rdata:00422990o
		unicode	0, <french-canadian>,0
aFrenchLuxembou:			; DATA XREF: .rdata:0042299Co
		unicode	0, <french-luxembourg>,0
aFrenchSwiss:				; DATA XREF: .rdata:004229A8o
		unicode	0, <french-swiss>,0
		align 4
aGermanAustrian:			; DATA XREF: .rdata:004229B4o
		unicode	0, <german-austrian>,0
aGermanLichtens:			; DATA XREF: .rdata:004229C0o
		unicode	0, <german-lichtenstein>,0
aGermanLuxembou:			; DATA XREF: .rdata:004229CCo
		unicode	0, <german-luxembourg>,0
aGermanSwiss:				; DATA XREF: .rdata:004229D8o
		unicode	0, <german-swiss>,0
		align 4
aIrishEnglish:				; DATA XREF: .rdata:004229E4o
		unicode	0, <irish-english>,0
aItalianSwiss:				; DATA XREF: .rdata:004229F0o
		unicode	0, <italian-swiss>,0
aNorwegian:				; DATA XREF: .rdata:004229FCo
		unicode	0, <norwegian>,0
aNorwegianBokma:			; DATA XREF: .rdata:00422A08o
		unicode	0, <norwegian-bokmal>,0
		align 4
aNorwegianNynor:			; DATA XREF: .rdata:00422A14o
		unicode	0, <norwegian-nynorsk>,0
aPortugueseBraz:			; DATA XREF: .rdata:00422A20o
		unicode	0, <portuguese-brazilian>,0
		align 4
aSpanishArgenti:			; DATA XREF: .rdata:00422A2Co
		unicode	0, <spanish-argentina>,0
aSpanishBolivia:			; DATA XREF: .rdata:00422A38o
		unicode	0, <spanish-bolivia>,0
aSpanishChile:				; DATA XREF: .rdata:00422A44o
		unicode	0, <spanish-chile>,0
aSpanishColombi:			; DATA XREF: .rdata:00422A50o
		unicode	0, <spanish-colombia>,0
		align 10h
aSpanishCostaRi:			; DATA XREF: .rdata:00422A5Co
		unicode	0, <spanish-costa rica>,0
		align 4
aSpanishDominic:			; DATA XREF: .rdata:00422A68o
		unicode	0, <spanish-dominican republic>,0
		align 10h
aSpanishEcuador:			; DATA XREF: .rdata:00422A74o
		unicode	0, <spanish-ecuador>,0
aSpanishElSalva:			; DATA XREF: .rdata:00422A80o
		unicode	0, <spanish-el salvador>,0
aSpanishGuatema:			; DATA XREF: .rdata:00422A8Co
		unicode	0, <spanish-guatemala>,0
aSpanishHondura:			; DATA XREF: .rdata:00422A98o
		unicode	0, <spanish-honduras>,0
		align 10h
aSpanishMexican:			; DATA XREF: .rdata:00422AA4o
		unicode	0, <spanish-mexican>,0
aSpanishModern:				; DATA XREF: .rdata:00422AB0o
		unicode	0, <spanish-modern>,0
		align 10h
aSpanishNicarag:			; DATA XREF: .rdata:00422ABCo
		unicode	0, <spanish-nicaragua>,0
aSpanishPanama:				; DATA XREF: .rdata:00422AC8o
		unicode	0, <spanish-panama>,0
		align 4
aSpanishParagua:			; DATA XREF: .rdata:00422AD4o
		unicode	0, <spanish-paraguay>,0
		align 4
aSpanishPeru:				; DATA XREF: .rdata:00422AE0o
		unicode	0, <spanish-peru>,0
		align 4
aSpanishPuertoR:			; DATA XREF: .rdata:00422AECo
		unicode	0, <spanish-puerto rico>,0
aSpanishUruguay:			; DATA XREF: .rdata:00422AF8o
		unicode	0, <spanish-uruguay>,0
aSpanishVenezue:			; DATA XREF: .rdata:00422B04o
		unicode	0, <spanish-venezuela>,0
aSwedishFinland:			; DATA XREF: .rdata:00422B10o
		unicode	0, <swedish-finland>,0
aSwiss:					; DATA XREF: .rdata:00422B1Co
		unicode	0, <swiss>,0
aUk_0:					; DATA XREF: .rdata:00422B28o
					; .rdata:00422C34o ...
		unicode	0, <uk>,0
		align 4
aUs:					; DATA XREF: .rdata:00422B34o
					; .rdata:00422C58o
		unicode	0, <us>,0
		align 4
aUsa:					; DATA XREF: .rdata:00422B40o
		unicode	0, <usa>,0
aAmerica:				; DATA XREF: .rdata:off_422B50o
		unicode	0, <america>,0
aBritain:				; DATA XREF: .rdata:00422B5Co
		unicode	0, <britain>,0
aChina:					; DATA XREF: .rdata:00422B68o
		unicode	0, <china>,0
aCzech:					; DATA XREF: .rdata:00422B74o
		unicode	0, <czech>,0
aEngland:				; DATA XREF: .rdata:00422B80o
		unicode	0, <england>,0
aGreatBritain:				; DATA XREF: .rdata:00422B8Co
		unicode	0, <great britain>,0
aHolland:				; DATA XREF: .rdata:00422B98o
		unicode	0, <holland>,0
aHongKong:				; DATA XREF: .rdata:00422BA4o
		unicode	0, <hong-kong>,0
aNewZealand:				; DATA XREF: .rdata:00422BB0o
		unicode	0, <new-zealand>,0
aNz:					; DATA XREF: .rdata:00422BBCo
		unicode	0, <nz>,0
		align 4
aPrChina:				; DATA XREF: .rdata:00422BC8o
		unicode	0, <pr china>,0
		align 10h
aPrChina_0:				; DATA XREF: .rdata:00422BD4o
		unicode	0, <pr-china>,0
		align 4
aPuertoRico:				; DATA XREF: .rdata:00422BE0o
		unicode	0, <puerto-rico>,0
aSlovak:				; DATA XREF: .rdata:00422BECo
		unicode	0, <slovak>,0
		align 4
aSouthAfrica:				; DATA XREF: .rdata:00422BF8o
		unicode	0, <south africa>,0
		align 4
aSouthKorea:				; DATA XREF: .rdata:00422C04o
		unicode	0, <south korea>,0
aSouthAfrica_0:				; DATA XREF: .rdata:00422C10o
		unicode	0, <south-africa>,0
		align 4
aSouthKorea_0:				; DATA XREF: .rdata:00422C1Co
		unicode	0, <south-korea>,0
aTrinidadTobago:			; DATA XREF: .rdata:00422C28o
		unicode	0, <trinidad & tobago>,0
aUnitedKingdom:				; DATA XREF: .rdata:00422C40o
		unicode	0, <united-kingdom>,0
		align 4
aUnitedStates:				; DATA XREF: .rdata:00422C4Co
		unicode	0, <united-states>,0
aAcp:					; DATA XREF: sub_418528+1Eo
					; sub_418E72+1Eo
		unicode	0, <ACP>,0
aOcp:					; DATA XREF: sub_418528+7Ao
					; sub_418E72+54o
		unicode	0, <OCP>,0
word_4235E4	dw 0C0Ch		; DATA XREF: sub_418F55:loc_418F60r
		dw 0C1Ah
		dd 4361007h, 42D080Ch, 100C0403h, 81D0810h
dword_4235F8	dd 1			; DATA XREF: sub_41985D+45r
					; sub_419907+1Fr
off_4235FC	dd offset aAr		; DATA XREF: sub_41985D+65r
					; "ar"
		dd 2
		dd offset aBg_0		; "bg"
		dd 3
		dd offset aCa_0		; "ca"
		dd 4
		dd offset aZhChs_1	; "zh-CHS"
		dd 5
		dd offset aCs_0		; "cs"
		dd 6
		dd offset aDa_0		; "da"
		dd 7
		dd offset aDe_0		; "de"
		dd 8
		dd offset aEl_0		; "el"
		dd 9
		dd offset aEn_0		; "en"
		dd 0Ah
		dd offset aEs_0		; "es"
		dd 0Bh
		dd offset aFi_0		; "fi"
		dd 0Ch
		dd offset aFr_0		; "fr"
		dd 0Dh
		dd offset aHe_0		; "he"
		dd 0Eh
		dd offset aHu_0		; "hu"
		dd 0Fh
		dd offset aIs_0		; "is"
		dd 10h
		dd offset aIt_0		; "it"
		dd 11h
		dd offset aJa_0		; "ja"
		dd 12h
		dd offset aKo_0		; "ko"
		dd 13h
		dd offset aNl_0		; "nl"
		dd 14h
		dd offset aNo_0		; "no"
		dd 15h
		dd offset aPl_0		; "pl"
		dd 16h
		dd offset aPt_0		; "pt"
		dd 18h
		dd offset aRo_0		; "ro"
		dd 19h
		dd offset aRu_0		; "ru"
		dd 1Ah
		dd offset aHr_0		; "hr"
		dd 1Bh
		dd offset aSk_0		; "sk"
		dd 1Ch
		dd offset aSq_0		; "sq"
		dd 1Dh
		dd offset aSv_0		; "sv"
		dd 1Eh
		dd offset aTh_0		; "th"
		dd 1Fh
		dd offset aTr_0		; "tr"
		dd 20h
		dd offset aUr_0		; "ur"
		dd 21h
		dd offset aId_0		; "id"
		dd 22h
		dd offset aUk_0		; "uk"
		dd 23h
		dd offset aBe_0		; "be"
		dd 24h
		dd offset aSl_0		; "sl"
		dd 25h
		dd offset aEt_0		; "et"
		dd 26h
		dd offset aLv_0		; "lv"
		dd 27h
		dd offset aLt_0		; "lt"
		dd 29h
		dd offset aFa_0		; "fa"
		dd 2Ah
		dd offset aVi_0		; "vi"
		dd 2Bh
		dd offset aHy_0		; "hy"
		dd 2Ch
		dd offset aAz_0		; "az"
		dd 2Dh
		dd offset aEu_0		; "eu"
		dd 2Fh
		dd offset aMk_0		; "mk"
		dd 36h
		dd offset aAf_0		; "af"
		dd 37h
		dd offset aKa_0		; "ka"
		dd 38h
		dd offset aFo_0		; "fo"
		dd 39h
		dd offset aHi_0		; "hi"
		dd 3Eh
		dd offset aMs_0		; "ms"
		dd 3Fh
		dd offset aKk_0		; "kk"
		dd 40h
		dd offset aKy_0		; "ky"
		dd 41h
		dd offset aSw_0		; "sw"
		dd 43h
		dd offset aUz_0		; "uz"
		dd 44h
		dd offset aTt_0		; "tt"
		dd 46h
		dd offset aPa_0		; "pa"
		dd 47h
		dd offset aGu_0		; "gu"
		dd 49h
		dd offset aTa_0		; "ta"
		dd 4Ah
		dd offset aTe_0		; "te"
		dd 4Bh
		dd offset aKn_0		; "kn"
		dd 4Eh
		dd offset aMr_0		; "mr"
		dd 4Fh
		dd offset aSa_0		; "sa"
		dd 50h
		dd offset aMn_0		; "mn"
		dd 56h
		dd offset aGl_0		; "gl"
		dd 57h
		dd offset aKok_0	; "kok"
		dd 5Ah
		dd offset aSyr_0	; "syr"
		dd 65h
		dd offset aDiv_0	; "div"
		dd 7Fh
		dd offset dword_423F28
		dd 401h
		dd offset aArSa_1	; "ar-SA"
		dd 402h
		dd offset aBgBg_1	; "bg-BG"
		dd 403h
		dd offset aCaEs_1	; "ca-ES"
		dd 404h
		dd offset aZhTw		; "zh-TW"
		dd 405h
		dd offset aCsCz_1	; "cs-CZ"
		dd 406h
		dd offset aDaDk_1	; "da-DK"
		dd 407h
		dd offset aDeDe_1	; "de-DE"
		dd 408h
		dd offset aElGr_1	; "el-GR"
		dd 409h
		dd offset aEnUs_1	; "en-US"
		dd 40Bh
		dd offset aFiFi_1	; "fi-FI"
		dd 40Ch
		dd offset aFrFr_1	; "fr-FR"
		dd 40Dh
		dd offset aHeIl_1	; "he-IL"
		dd 40Eh
		dd offset aHuHu_1	; "hu-HU"
		dd 40Fh
		dd offset aIsIs_1	; "is-IS"
		dd 410h
		dd offset aItIt_1	; "it-IT"
		dd 411h
		dd offset aJaJp		; "ja-JP"
		dd 412h
		dd offset aKoKr		; "ko-KR"
		dd 413h
		dd offset aNlNl_1	; "nl-NL"
		dd 414h
		dd offset aNbNo_1	; "nb-NO"
		dd 415h
		dd offset aPlPl_1	; "pl-PL"
		dd 416h
		dd offset aPtBr_1	; "pt-BR"
		dd 418h
		dd offset aRoRo_1	; "ro-RO"
		dd 419h
		dd offset aRuRu_1	; "ru-RU"
		dd 41Ah
		dd offset aHrHr_1	; "hr-HR"
		dd 41Bh
		dd offset aSkSk_1	; "sk-SK"
		dd 41Ch
		dd offset aSqAl_1	; "sq-AL"
		dd 41Dh
		dd offset aSvSe_1	; "sv-SE"
		dd 41Eh
		dd offset aThTh_1	; "th-TH"
		dd 41Fh
		dd offset aTrTr_1	; "tr-TR"
		dd 420h
		dd offset aUrPk_1	; "ur-PK"
		dd 421h
		dd offset aIdId_1	; "id-ID"
		dd 422h
		dd offset aUkUa_1	; "uk-UA"
		dd 423h
		dd offset aBeBy_1	; "be-BY"
		dd 424h
		dd offset aSlSi_1	; "sl-SI"
		dd 425h
		dd offset aEtEe_1	; "et-EE"
		dd 426h
		dd offset aLvLv_1	; "lv-LV"
		dd 427h
		dd offset aLtLt_1	; "lt-LT"
		dd 429h
		dd offset aFaIr_1	; "fa-IR"
		dd 42Ah
		dd offset aViVn_1	; "vi-VN"
		dd 42Bh
		dd offset aHyAm_1	; "hy-AM"
		dd 42Ch
		dd offset aAzAzLatn_1	; "az-AZ-Latn"
		dd 42Dh
		dd offset aEuEs_1	; "eu-ES"
		dd 42Fh
		dd offset aMkMk_1	; "mk-MK"
		dd 432h
		dd offset aTnZa_1	; "tn-ZA"
		dd 434h
		dd offset aXhZa_1	; "xh-ZA"
		dd 435h
		dd offset aZuZa_1	; "zu-ZA"
		dd 436h
		dd offset aAfZa_1	; "af-ZA"
		dd 437h
		dd offset aKaGe_1	; "ka-GE"
		dd 438h
		dd offset aFoFo_1	; "fo-FO"
		dd 439h
		dd offset aHiIn_1	; "hi-IN"
		dd 43Ah
		dd offset aMtMt_1	; "mt-MT"
		dd 43Bh
		dd offset aSeNo_1	; "se-NO"
		dd 43Eh
		dd offset aMsMy_1	; "ms-MY"
		dd 43Fh
		dd offset aKkKz_1	; "kk-KZ"
		dd 440h
		dd offset aKyKg_1	; "ky-KG"
		dd 441h
		dd offset aSwKe_1	; "sw-KE"
		dd 443h
		dd offset aUzUzLatn_1	; "uz-UZ-Latn"
		dd 444h
		dd offset aTtRu_1	; "tt-RU"
		dd 445h
		dd offset aBnIn_1	; "bn-IN"
		dd 446h
		dd offset aPaIn_1	; "pa-IN"
		dd 447h
		dd offset aGuIn_1	; "gu-IN"
		dd 449h
		dd offset aTaIn_1	; "ta-IN"
		dd 44Ah
		dd offset aTeIn_1	; "te-IN"
		dd 44Bh
		dd offset aKnIn_1	; "kn-IN"
		dd 44Ch
		dd offset aMlIn_1	; "ml-IN"
		dd 44Eh
		dd offset aMrIn_1	; "mr-IN"
		dd 44Fh
		dd offset aSaIn_1	; "sa-IN"
		dd 450h
		dd offset aMnMn_1	; "mn-MN"
		dd 452h
		dd offset aCyGb_1	; "cy-GB"
		dd 456h
		dd offset aGlEs_1	; "gl-ES"
		dd 457h
		dd offset aKokIn_1	; "kok-IN"
		dd 45Ah
		dd offset aSyrSy_1	; "syr-SY"
		dd 465h
		dd offset aDivMv_1	; "div-MV"
		dd 46Bh
		dd offset aQuzBo_1	; "quz-BO"
		dd 46Ch
		dd offset aNsZa_1	; "ns-ZA"
		dd 481h
		dd offset aMiNz_1	; "mi-NZ"
		dd 801h
		dd offset aArIq_1	; "ar-IQ"
		dd 804h
		dd offset aZhCn		; "zh-CN"
		dd 807h
		dd offset aDeCh_1	; "de-CH"
		dd 809h
		dd offset aEnGb_1	; "en-GB"
		dd 80Ah
		dd offset aEsMx_1	; "es-MX"
		dd 80Ch
		dd offset aFrBe_1	; "fr-BE"
		dd 810h
		dd offset aItCh_1	; "it-CH"
		dd 813h
		dd offset aNlBe_1	; "nl-BE"
		dd 814h
		dd offset aNnNo_1	; "nn-NO"
		dd 816h
		dd offset aPtPt_1	; "pt-PT"
		dd 81Ah
		dd offset aSrSpLatn_1	; "sr-SP-Latn"
		dd 81Dh
		dd offset aSvFi_1	; "sv-FI"
		dd 82Ch
		dd offset aAzAzCyrl_1	; "az-AZ-Cyrl"
		dd 83Bh
		dd offset aSeSe_1	; "se-SE"
		dd 83Eh
		dd offset aMsBn_1	; "ms-BN"
		dd 843h
		dd offset aUzUzCyrl_1	; "uz-UZ-Cyrl"
		dd 86Bh
		dd offset aQuzEc_1	; "quz-EC"
		dd 0C01h
		dd offset aArEg_1	; "ar-EG"
		dd 0C04h
		dd offset aZhHk_1	; "zh-HK"
		dd 0C07h
		dd offset aDeAt_1	; "de-AT"
		dd 0C09h
		dd offset aEnAu_1	; "en-AU"
		dd 0C0Ah
		dd offset aEsEs_1	; "es-ES"
		dd 0C0Ch
		dd offset aFrCa_1	; "fr-CA"
		dd 0C1Ah
		dd offset aSrSpCyrl_1	; "sr-SP-Cyrl"
		dd 0C3Bh
		dd offset aSeFi_1	; "se-FI"
		dd 0C6Bh
		dd offset aQuzPe_1	; "quz-PE"
		dd 1001h
		dd offset aArLy_1	; "ar-LY"
		dd 1004h
		dd offset aZhSg_1	; "zh-SG"
		dd 1007h
		dd offset aDeLu_1	; "de-LU"
		dd 1009h
		dd offset aEnCa_1	; "en-CA"
		dd 100Ah
		dd offset aEsGt_1	; "es-GT"
		dd 100Ch
		dd offset aFrCh_1	; "fr-CH"
		dd 101Ah
		dd offset aHrBa_1	; "hr-BA"
		dd 103Bh
		dd offset aSmjNo_1	; "smj-NO"
		dd 1401h
		dd offset aArDz_1	; "ar-DZ"
		dd 1404h
		dd offset aZhMo_1	; "zh-MO"
		dd 1407h
		dd offset aDeLi_1	; "de-LI"
		dd 1409h
		dd offset aEnNz_1	; "en-NZ"
		dd 140Ah
		dd offset aEsCr_1	; "es-CR"
		dd 140Ch
		dd offset aFrLu_1	; "fr-LU"
		dd 141Ah
		dd offset aBsBaLatn_1	; "bs-BA-Latn"
		dd 143Bh
		dd offset aSmjSe_1	; "smj-SE"
		dd 1801h
		dd offset aArMa_1	; "ar-MA"
		dd 1809h
		dd offset aEnIe_1	; "en-IE"
		dd 180Ah
		dd offset aEsPa_1	; "es-PA"
		dd 180Ch
		dd offset aFrMc_1	; "fr-MC"
		dd 181Ah
		dd offset aSrBaLatn_1	; "sr-BA-Latn"
		dd 183Bh
		dd offset aSmaNo_1	; "sma-NO"
		dd 1C01h
		dd offset aArTn_1	; "ar-TN"
		dd 1C09h
		dd offset aEnZa_1	; "en-ZA"
		dd 1C0Ah
		dd offset aEsDo_1	; "es-DO"
		dd 1C1Ah
		dd offset aSrBaCyrl_1	; "sr-BA-Cyrl"
		dd 1C3Bh
		dd offset aSmaSe_1	; "sma-SE"
		dd 2001h
		dd offset aArOm_1	; "ar-OM"
		dd 2009h
		dd offset aEnJm_1	; "en-JM"
		dd 200Ah
		dd offset aEsVe_1	; "es-VE"
		dd 203Bh
		dd offset aSmsFi_1	; "sms-FI"
		dd 2401h
		dd offset aArYe_1	; "ar-YE"
		dd 2409h
		dd offset aEnCb_1	; "en-CB"
		dd 240Ah
		dd offset aEsCo_1	; "es-CO"
		dd 243Bh
		dd offset aSmnFi_1	; "smn-FI"
		dd 2801h
		dd offset aArSy_1	; "ar-SY"
		dd 2809h
		dd offset aEnBz_1	; "en-BZ"
		dd 280Ah
		dd offset aEsPe_1	; "es-PE"
		dd 2C01h
		dd offset aArJo_1	; "ar-JO"
		dd 2C09h
		dd offset aEnTt_1	; "en-TT"
		dd 2C0Ah
		dd offset aEsAr_1	; "es-AR"
		dd 3001h
		dd offset aArLb_1	; "ar-LB"
		dd 3009h
		dd offset aEnZw_1	; "en-ZW"
		dd 300Ah
		dd offset aEsEc_1	; "es-EC"
		dd 3401h
		dd offset aArKw_1	; "ar-KW"
		dd 3409h
		dd offset aEnPh_1	; "en-PH"
		dd 340Ah
		dd offset aEsCl_1	; "es-CL"
		dd 3801h
		dd offset aArAe_1	; "ar-AE"
		dd 380Ah
		dd offset aEsUy_1	; "es-UY"
		dd 3C01h
		dd offset aArBh_1	; "ar-BH"
		dd 3C0Ah
		dd offset aEsPy_1	; "es-PY"
		dd 4001h
		dd offset aArQa_1	; "ar-QA"
		dd 400Ah
		dd offset aEsBo_1	; "es-BO"
		dd 440Ah
		dd offset aEsSv_1	; "es-SV"
		dd 480Ah
		dd offset aEsHn_1	; "es-HN"
		dd 4C0Ah
		dd offset aEsNi_1	; "es-NI"
		dd 500Ah
		dd offset aEsPr_1	; "es-PR"
		dd 7C04h
		dd offset aZhCht_1	; "zh-CHT"
		dd 7C1Ah
		dd offset aSr_0		; "sr"
aAr:					; DATA XREF: .rdata:off_4235FCo
					; .rdata:00424730o
		unicode	0, <ar>,0
		align 10h
aBg_0:					; DATA XREF: .rdata:00423604o
					; .rdata:004247E0o
		unicode	0, <bg>,0
		align 4
aCa_0:					; DATA XREF: .rdata:0042360Co
					; .rdata:00424800o
		unicode	0, <ca>,0
		align 10h
aZhChs_1:				; DATA XREF: .rdata:00423614o
		unicode	0, <zh-CHS>,0
		align 10h
aCs_0:					; DATA XREF: .rdata:0042361Co
					; .rdata:00424810o
		unicode	0, <cs>,0
		align 4
aDa_0:					; DATA XREF: .rdata:00423624o
					; .rdata:00424828o
		unicode	0, <da>,0
		align 10h
aDe_0:					; DATA XREF: .rdata:0042362Co
					; .rdata:00424838o
		unicode	0, <de>,0
		align 4
aEl_0:					; DATA XREF: .rdata:00423634o
					; .rdata:00424878o
		unicode	0, <el>,0
		align 10h
aEn_0:					; DATA XREF: .rdata:0042363Co
					; .rdata:00424888o
		unicode	0, <en>,0
		align 4
aEs_0:					; DATA XREF: .rdata:00423644o
					; .rdata:004248F8o
		unicode	0, <es>,0
		align 10h
aFi_0:					; DATA XREF: .rdata:0042364Co
					; .rdata:004249C8o
		unicode	0, <fi>,0
		align 4
aFr_0:					; DATA XREF: .rdata:00423654o
					; .rdata:004249E8o
		unicode	0, <fr>,0
		align 10h
aHe_0:					; DATA XREF: .rdata:0042365Co
					; .rdata:00424A40o
		unicode	0, <he>,0
		align 4
aHu_0:					; DATA XREF: .rdata:00423664o
					; .rdata:00424A78o
		unicode	0, <hu>,0
		align 10h
aIs_0:					; DATA XREF: .rdata:0042366Co
					; .rdata:00424AA8o
		unicode	0, <is>,0
		align 4
aIt_0:					; DATA XREF: .rdata:00423674o
					; .rdata:00424AB8o
		unicode	0, <it>,0
		align 10h
aJa_0:					; DATA XREF: .rdata:0042367Co
					; .rdata:00424AD0o
		unicode	0, <ja>,0
		align 4
aKo_0:					; DATA XREF: .rdata:00423684o
					; .rdata:00424B10o
		unicode	0, <ko>,0
		align 10h
aNl_0:					; DATA XREF: .rdata:0042368Co
					; .rdata:00424BC8o
		unicode	0, <nl>,0
		align 4
aNo_0:					; DATA XREF: .rdata:00423694o
					; .rdata:00424BE8o
		unicode	0, <no>,0
		align 10h
aPl_0:					; DATA XREF: .rdata:0042369Co
					; .rdata:00424C08o
		unicode	0, <pl>,0
		align 4
aPt_0:					; DATA XREF: .rdata:004236A4o
					; .rdata:00424C18o
		unicode	0, <pt>,0
		align 10h
aRo_0:					; DATA XREF: .rdata:004236ACo
					; .rdata:00424C48o
		unicode	0, <ro>,0
		align 4
aRu_0:					; DATA XREF: .rdata:004236B4o
					; .rdata:00424C58o
		unicode	0, <ru>,0
		align 10h
aHr_0:					; DATA XREF: .rdata:004236BCo
					; .rdata:00424A60o
		unicode	0, <hr>,0
		align 4
aSk_0:					; DATA XREF: .rdata:004236C4o
					; .rdata:00424C90o
		unicode	0, <sk>,0
		align 10h
aSq_0:					; DATA XREF: .rdata:004236CCo
					; .rdata:00424CE0o
		unicode	0, <sq>,0
		align 4
aSv_0:					; DATA XREF: .rdata:004236D4o
					; .rdata:00424D18o
		unicode	0, <sv>,0
		align 10h
aTh_0:					; DATA XREF: .rdata:004236DCo
					; .rdata:00424D70o
		unicode	0, <th>,0
		align 4
aTr_0:					; DATA XREF: .rdata:004236E4o
					; .rdata:00424D88o
		unicode	0, <tr>,0
		align 10h
aUr_0:					; DATA XREF: .rdata:004236ECo
					; .rdata:00424DB8o
		unicode	0, <ur>,0
		align 4
aId_0:					; DATA XREF: .rdata:004236F4o
					; .rdata:00424A98o
		unicode	0, <id>,0
		align 10h
aBe_0:					; DATA XREF: .rdata:00423704o
					; .rdata:004247D0o
		unicode	0, <be>,0
		align 4
aSl_0:					; DATA XREF: .rdata:0042370Co
					; .rdata:00424CA0o
		unicode	0, <sl>,0
		align 10h
aEt_0:					; DATA XREF: .rdata:00423714o
					; .rdata:00424998o
		unicode	0, <et>,0
		align 4
aLv_0:					; DATA XREF: .rdata:0042371Co
					; .rdata:00424B50o
		unicode	0, <lv>,0
		align 10h
aLt_0:					; DATA XREF: .rdata:00423724o
					; .rdata:00424B40o
		unicode	0, <lt>,0
		align 4
aFa_0:					; DATA XREF: .rdata:0042372Co
					; .rdata:004249B8o
		unicode	0, <fa>,0
		align 10h
aVi_0:					; DATA XREF: .rdata:00423734o
					; .rdata:00424DE0o
		unicode	0, <vi>,0
		align 4
aHy_0:					; DATA XREF: .rdata:0042373Co
					; .rdata:00424A88o
		unicode	0, <hy>,0
		align 10h
aAz_0:					; DATA XREF: .rdata:00423744o
					; .rdata:004247B8o
		unicode	0, <az>,0
		align 4
aEu_0:					; DATA XREF: .rdata:0042374Co
					; .rdata:004249A8o
		unicode	0, <eu>,0
		align 10h
aMk_0:					; DATA XREF: .rdata:00423754o
					; .rdata:00424B68o
		unicode	0, <mk>,0
		align 4
aAf_0:					; DATA XREF: .rdata:0042375Co
					; .rdata:00424720o
		unicode	0, <af>,0
		align 10h
aKa_0:					; DATA XREF: .rdata:00423764o
					; .rdata:00424AE0o
		unicode	0, <ka>,0
		align 4
aFo_0:					; DATA XREF: .rdata:0042376Co
					; .rdata:004249D8o
		unicode	0, <fo>,0
		align 10h
aHi_0:					; DATA XREF: .rdata:00423774o
					; .rdata:00424A50o
		unicode	0, <hi>,0
		align 4
aMs_0:					; DATA XREF: .rdata:0042377Co
					; .rdata:00424BA0o
		unicode	0, <ms>,0
		align 10h
aKk_0:					; DATA XREF: .rdata:00423784o
					; .rdata:00424AF0o
		unicode	0, <kk>,0
		align 4
aKy_0:					; DATA XREF: .rdata:0042378Co
					; .rdata:00424B30o
		unicode	0, <ky>,0
		align 10h
aSw_0:					; DATA XREF: .rdata:00423794o
					; .rdata:00424D30o
		unicode	0, <sw>,0
		align 4
aUz_0:					; DATA XREF: .rdata:0042379Co
					; .rdata:00424DC8o
		unicode	0, <uz>,0
		align 10h
aTt_0:					; DATA XREF: .rdata:004237A4o
					; .rdata:00424D98o
		unicode	0, <tt>,0
		align 4
aPa_0:					; DATA XREF: .rdata:004237ACo
					; .rdata:00424BF8o
		unicode	0, <pa>,0
		align 10h
aGu_0:					; DATA XREF: .rdata:004237B4o
					; .rdata:00424A30o
		unicode	0, <gu>,0
		align 4
aTa_0:					; DATA XREF: .rdata:004237BCo
					; .rdata:00424D50o
		unicode	0, <ta>,0
		align 10h
aTe_0:					; DATA XREF: .rdata:004237C4o
					; .rdata:00424D60o
		unicode	0, <te>,0
		align 4
aKn_0:					; DATA XREF: .rdata:004237CCo
					; .rdata:00424B00o
		unicode	0, <kn>,0
		align 10h
aMr_0:					; DATA XREF: .rdata:004237D4o
					; .rdata:00424B90o
		unicode	0, <mr>,0
		align 4
aSa_0:					; DATA XREF: .rdata:004237DCo
					; .rdata:00424C68o
		unicode	0, <sa>,0
		align 10h
aMn_0:					; DATA XREF: .rdata:004237E4o
					; .rdata:00424B80o
		unicode	0, <mn>,0
		align 4
aGl_0:					; DATA XREF: .rdata:004237ECo
					; .rdata:00424A20o
		unicode	0, <gl>,0
		align 10h
aKok_0:					; DATA XREF: .rdata:004237F4o
					; .rdata:00424B18o
		unicode	0, <kok>,0
aSyr_0:					; DATA XREF: .rdata:004237FCo
					; .rdata:00424D40o
		unicode	0, <syr>,0
aDiv_0:					; DATA XREF: .rdata:00423804o
					; .rdata:00424868o
		unicode	0, <div>,0
dword_423F28	dd 0			; DATA XREF: .rdata:0042380Co
					; .rdata:off_424718o
aArSa_1:				; DATA XREF: .rdata:00423814o
		unicode	0, <ar-SA>,0
aBgBg_1:				; DATA XREF: .rdata:0042381Co
		unicode	0, <bg-BG>,0
aCaEs_1:				; DATA XREF: .rdata:00423824o
		unicode	0, <ca-ES>,0
aCsCz_1:				; DATA XREF: .rdata:00423834o
		unicode	0, <cs-CZ>,0
aDaDk_1:				; DATA XREF: .rdata:0042383Co
		unicode	0, <da-DK>,0
aDeDe_1:				; DATA XREF: .rdata:00423844o
		unicode	0, <de-DE>,0
aElGr_1:				; DATA XREF: .rdata:0042384Co
		unicode	0, <el-GR>,0
aFiFi_1:				; DATA XREF: .rdata:0042385Co
		unicode	0, <fi-FI>,0
aFrFr_1:				; DATA XREF: .rdata:00423864o
		unicode	0, <fr-FR>,0
aHeIl_1:				; DATA XREF: .rdata:0042386Co
		unicode	0, <he-IL>,0
aHuHu_1:				; DATA XREF: .rdata:00423874o
		unicode	0, <hu-HU>,0
aIsIs_1:				; DATA XREF: .rdata:0042387Co
		unicode	0, <is-IS>,0
aItIt_1:				; DATA XREF: .rdata:00423884o
		unicode	0, <it-IT>,0
aNlNl_1:				; DATA XREF: .rdata:0042389Co
		unicode	0, <nl-NL>,0
aNbNo_1:				; DATA XREF: .rdata:004238A4o
		unicode	0, <nb-NO>,0
aPlPl_1:				; DATA XREF: .rdata:004238ACo
		unicode	0, <pl-PL>,0
aPtBr_1:				; DATA XREF: .rdata:004238B4o
		unicode	0, <pt-BR>,0
aRoRo_1:				; DATA XREF: .rdata:004238BCo
		unicode	0, <ro-RO>,0
aRuRu_1:				; DATA XREF: .rdata:004238C4o
		unicode	0, <ru-RU>,0
aHrHr_1:				; DATA XREF: .rdata:004238CCo
		unicode	0, <hr-HR>,0
aSkSk_1:				; DATA XREF: .rdata:004238D4o
		unicode	0, <sk-SK>,0
aSqAl_1:				; DATA XREF: .rdata:004238DCo
		unicode	0, <sq-AL>,0
aSvSe_1:				; DATA XREF: .rdata:004238E4o
		unicode	0, <sv-SE>,0
aThTh_1:				; DATA XREF: .rdata:004238ECo
		unicode	0, <th-TH>,0
aTrTr_1:				; DATA XREF: .rdata:004238F4o
		unicode	0, <tr-TR>,0
aUrPk_1:				; DATA XREF: .rdata:004238FCo
		unicode	0, <ur-PK>,0
aIdId_1:				; DATA XREF: .rdata:00423904o
		unicode	0, <id-ID>,0
aUkUa_1:				; DATA XREF: .rdata:0042390Co
		unicode	0, <uk-UA>,0
aBeBy_1:				; DATA XREF: .rdata:00423914o
		unicode	0, <be-BY>,0
aSlSi_1:				; DATA XREF: .rdata:0042391Co
		unicode	0, <sl-SI>,0
aEtEe_1:				; DATA XREF: .rdata:00423924o
		unicode	0, <et-EE>,0
aLvLv_1:				; DATA XREF: .rdata:0042392Co
		unicode	0, <lv-LV>,0
aLtLt_1:				; DATA XREF: .rdata:00423934o
		unicode	0, <lt-LT>,0
aFaIr_1:				; DATA XREF: .rdata:0042393Co
		unicode	0, <fa-IR>,0
aViVn_1:				; DATA XREF: .rdata:00423944o
		unicode	0, <vi-VN>,0
aHyAm_1:				; DATA XREF: .rdata:0042394Co
		unicode	0, <hy-AM>,0
aAzAzLatn_1:				; DATA XREF: .rdata:00423954o
		unicode	0, <az-AZ-Latn>,0
		align 4
aEuEs_1:				; DATA XREF: .rdata:0042395Co
		unicode	0, <eu-ES>,0
aMkMk_1:				; DATA XREF: .rdata:00423964o
		unicode	0, <mk-MK>,0
aTnZa_1:				; DATA XREF: .rdata:0042396Co
		unicode	0, <tn-ZA>,0
aXhZa_1:				; DATA XREF: .rdata:00423974o
		unicode	0, <xh-ZA>,0
aZuZa_1:				; DATA XREF: .rdata:0042397Co
		unicode	0, <zu-ZA>,0
aAfZa_1:				; DATA XREF: .rdata:00423984o
		unicode	0, <af-ZA>,0
aKaGe_1:				; DATA XREF: .rdata:0042398Co
		unicode	0, <ka-GE>,0
aFoFo_1:				; DATA XREF: .rdata:00423994o
		unicode	0, <fo-FO>,0
aHiIn_1:				; DATA XREF: .rdata:0042399Co
		unicode	0, <hi-IN>,0
aMtMt_1:				; DATA XREF: .rdata:004239A4o
		unicode	0, <mt-MT>,0
aSeNo_1:				; DATA XREF: .rdata:004239ACo
		unicode	0, <se-NO>,0
aMsMy_1:				; DATA XREF: .rdata:004239B4o
		unicode	0, <ms-MY>,0
aKkKz_1:				; DATA XREF: .rdata:004239BCo
		unicode	0, <kk-KZ>,0
aKyKg_1:				; DATA XREF: .rdata:004239C4o
		unicode	0, <ky-KG>,0
aSwKe_1:				; DATA XREF: .rdata:004239CCo
		unicode	0, <sw-KE>,0
aUzUzLatn_1:				; DATA XREF: .rdata:004239D4o
		unicode	0, <uz-UZ-Latn>,0
		align 10h
aTtRu_1:				; DATA XREF: .rdata:004239DCo
		unicode	0, <tt-RU>,0
aBnIn_1:				; DATA XREF: .rdata:004239E4o
		unicode	0, <bn-IN>,0
aPaIn_1:				; DATA XREF: .rdata:004239ECo
		unicode	0, <pa-IN>,0
aGuIn_1:				; DATA XREF: .rdata:004239F4o
		unicode	0, <gu-IN>,0
aTaIn_1:				; DATA XREF: .rdata:004239FCo
		unicode	0, <ta-IN>,0
aTeIn_1:				; DATA XREF: .rdata:00423A04o
		unicode	0, <te-IN>,0
aKnIn_1:				; DATA XREF: .rdata:00423A0Co
		unicode	0, <kn-IN>,0
aMlIn_1:				; DATA XREF: .rdata:00423A14o
		unicode	0, <ml-IN>,0
aMrIn_1:				; DATA XREF: .rdata:00423A1Co
		unicode	0, <mr-IN>,0
aSaIn_1:				; DATA XREF: .rdata:00423A24o
		unicode	0, <sa-IN>,0
aMnMn_1:				; DATA XREF: .rdata:00423A2Co
		unicode	0, <mn-MN>,0
aCyGb_1:				; DATA XREF: .rdata:00423A34o
		unicode	0, <cy-GB>,0
aGlEs_1:				; DATA XREF: .rdata:00423A3Co
		unicode	0, <gl-ES>,0
aKokIn_1:				; DATA XREF: .rdata:00423A44o
		unicode	0, <kok-IN>,0
		align 4
aSyrSy_1:				; DATA XREF: .rdata:00423A4Co
		unicode	0, <syr-SY>,0
		align 4
aDivMv_1:				; DATA XREF: .rdata:00423A54o
		unicode	0, <div-MV>,0
		align 4
aQuzBo_1:				; DATA XREF: .rdata:00423A5Co
		unicode	0, <quz-BO>,0
		align 4
aNsZa_1:				; DATA XREF: .rdata:00423A64o
		unicode	0, <ns-ZA>,0
aMiNz_1:				; DATA XREF: .rdata:00423A6Co
		unicode	0, <mi-NZ>,0
aArIq_1:				; DATA XREF: .rdata:00423A74o
		unicode	0, <ar-IQ>,0
aDeCh_1:				; DATA XREF: .rdata:00423A84o
		unicode	0, <de-CH>,0
aEnGb_1:				; DATA XREF: .rdata:00423A8Co
		unicode	0, <en-GB>,0
aEsMx_1:				; DATA XREF: .rdata:00423A94o
		unicode	0, <es-MX>,0
aFrBe_1:				; DATA XREF: .rdata:00423A9Co
		unicode	0, <fr-BE>,0
aItCh_1:				; DATA XREF: .rdata:00423AA4o
		unicode	0, <it-CH>,0
aNlBe_1:				; DATA XREF: .rdata:00423AACo
		unicode	0, <nl-BE>,0
aNnNo_1:				; DATA XREF: .rdata:00423AB4o
		unicode	0, <nn-NO>,0
aPtPt_1:				; DATA XREF: .rdata:00423ABCo
		unicode	0, <pt-PT>,0
aSrSpLatn_1:				; DATA XREF: .rdata:00423AC4o
		unicode	0, <sr-SP-Latn>,0
		align 4
aSvFi_1:				; DATA XREF: .rdata:00423ACCo
		unicode	0, <sv-FI>,0
aAzAzCyrl_1:				; DATA XREF: .rdata:00423AD4o
		unicode	0, <az-AZ-Cyrl>,0
		align 4
aSeSe_1:				; DATA XREF: .rdata:00423ADCo
		unicode	0, <se-SE>,0
aMsBn_1:				; DATA XREF: .rdata:00423AE4o
		unicode	0, <ms-BN>,0
aUzUzCyrl_1:				; DATA XREF: .rdata:00423AECo
		unicode	0, <uz-UZ-Cyrl>,0
		align 4
aQuzEc_1:				; DATA XREF: .rdata:00423AF4o
		unicode	0, <quz-EC>,0
		align 4
aArEg_1:				; DATA XREF: .rdata:00423AFCo
		unicode	0, <ar-EG>,0
aZhHk_1:				; DATA XREF: .rdata:00423B04o
		unicode	0, <zh-HK>,0
aDeAt_1:				; DATA XREF: .rdata:00423B0Co
		unicode	0, <de-AT>,0
aEnAu_1:				; DATA XREF: .rdata:00423B14o
		unicode	0, <en-AU>,0
aEsEs_1:				; DATA XREF: .rdata:00423B1Co
		unicode	0, <es-ES>,0
aFrCa_1:				; DATA XREF: .rdata:00423B24o
		unicode	0, <fr-CA>,0
aSrSpCyrl_1:				; DATA XREF: .rdata:00423B2Co
		unicode	0, <sr-SP-Cyrl>,0
		align 4
aSeFi_1:				; DATA XREF: .rdata:00423B34o
		unicode	0, <se-FI>,0
aQuzPe_1:				; DATA XREF: .rdata:00423B3Co
		unicode	0, <quz-PE>,0
		align 4
aArLy_1:				; DATA XREF: .rdata:00423B44o
		unicode	0, <ar-LY>,0
aZhSg_1:				; DATA XREF: .rdata:00423B4Co
		unicode	0, <zh-SG>,0
aDeLu_1:				; DATA XREF: .rdata:00423B54o
		unicode	0, <de-LU>,0
aEnCa_1:				; DATA XREF: .rdata:00423B5Co
		unicode	0, <en-CA>,0
aEsGt_1:				; DATA XREF: .rdata:00423B64o
		unicode	0, <es-GT>,0
aFrCh_1:				; DATA XREF: .rdata:00423B6Co
		unicode	0, <fr-CH>,0
aHrBa_1:				; DATA XREF: .rdata:00423B74o
		unicode	0, <hr-BA>,0
aSmjNo_1:				; DATA XREF: .rdata:00423B7Co
		unicode	0, <smj-NO>,0
		align 4
aArDz_1:				; DATA XREF: .rdata:00423B84o
		unicode	0, <ar-DZ>,0
aZhMo_1:				; DATA XREF: .rdata:00423B8Co
		unicode	0, <zh-MO>,0
aDeLi_1:				; DATA XREF: .rdata:00423B94o
		unicode	0, <de-LI>,0
aEnNz_1:				; DATA XREF: .rdata:00423B9Co
		unicode	0, <en-NZ>,0
aEsCr_1:				; DATA XREF: .rdata:00423BA4o
		unicode	0, <es-CR>,0
aFrLu_1:				; DATA XREF: .rdata:00423BACo
		unicode	0, <fr-LU>,0
aBsBaLatn_1:				; DATA XREF: .rdata:00423BB4o
		unicode	0, <bs-BA-Latn>,0
		align 4
aSmjSe_1:				; DATA XREF: .rdata:00423BBCo
		unicode	0, <smj-SE>,0
		align 4
aArMa_1:				; DATA XREF: .rdata:00423BC4o
		unicode	0, <ar-MA>,0
aEnIe_1:				; DATA XREF: .rdata:00423BCCo
		unicode	0, <en-IE>,0
aEsPa_1:				; DATA XREF: .rdata:00423BD4o
		unicode	0, <es-PA>,0
aFrMc_1:				; DATA XREF: .rdata:00423BDCo
		unicode	0, <fr-MC>,0
aSrBaLatn_1:				; DATA XREF: .rdata:00423BE4o
		unicode	0, <sr-BA-Latn>,0
		align 4
aSmaNo_1:				; DATA XREF: .rdata:00423BECo
		unicode	0, <sma-NO>,0
		align 4
aArTn_1:				; DATA XREF: .rdata:00423BF4o
		unicode	0, <ar-TN>,0
aEnZa_1:				; DATA XREF: .rdata:00423BFCo
		unicode	0, <en-ZA>,0
aEsDo_1:				; DATA XREF: .rdata:00423C04o
		unicode	0, <es-DO>,0
aSrBaCyrl_1:				; DATA XREF: .rdata:00423C0Co
		unicode	0, <sr-BA-Cyrl>,0
		align 10h
aSmaSe_1:				; DATA XREF: .rdata:00423C14o
		unicode	0, <sma-SE>,0
		align 10h
aArOm_1:				; DATA XREF: .rdata:00423C1Co
		unicode	0, <ar-OM>,0
aEnJm_1:				; DATA XREF: .rdata:00423C24o
		unicode	0, <en-JM>,0
aEsVe_1:				; DATA XREF: .rdata:00423C2Co
		unicode	0, <es-VE>,0
aSmsFi_1:				; DATA XREF: .rdata:00423C34o
		unicode	0, <sms-FI>,0
		align 4
aArYe_1:				; DATA XREF: .rdata:00423C3Co
		unicode	0, <ar-YE>,0
aEnCb_1:				; DATA XREF: .rdata:00423C44o
		unicode	0, <en-CB>,0
aEsCo_1:				; DATA XREF: .rdata:00423C4Co
		unicode	0, <es-CO>,0
aSmnFi_1:				; DATA XREF: .rdata:00423C54o
		unicode	0, <smn-FI>,0
		align 4
aArSy_1:				; DATA XREF: .rdata:00423C5Co
		unicode	0, <ar-SY>,0
aEnBz_1:				; DATA XREF: .rdata:00423C64o
		unicode	0, <en-BZ>,0
aEsPe_1:				; DATA XREF: .rdata:00423C6Co
		unicode	0, <es-PE>,0
aArJo_1:				; DATA XREF: .rdata:00423C74o
		unicode	0, <ar-JO>,0
aEnTt_1:				; DATA XREF: .rdata:00423C7Co
		unicode	0, <en-TT>,0
aEsAr_1:				; DATA XREF: .rdata:00423C84o
		unicode	0, <es-AR>,0
aArLb_1:				; DATA XREF: .rdata:00423C8Co
		unicode	0, <ar-LB>,0
aEnZw_1:				; DATA XREF: .rdata:00423C94o
		unicode	0, <en-ZW>,0
aEsEc_1:				; DATA XREF: .rdata:00423C9Co
		unicode	0, <es-EC>,0
aArKw_1:				; DATA XREF: .rdata:00423CA4o
		unicode	0, <ar-KW>,0
aEnPh_1:				; DATA XREF: .rdata:00423CACo
		unicode	0, <en-PH>,0
aEsCl_1:				; DATA XREF: .rdata:00423CB4o
		unicode	0, <es-CL>,0
aArAe_1:				; DATA XREF: .rdata:00423CBCo
		unicode	0, <ar-AE>,0
aEsUy_1:				; DATA XREF: .rdata:00423CC4o
		unicode	0, <es-UY>,0
aArBh_1:				; DATA XREF: .rdata:00423CCCo
		unicode	0, <ar-BH>,0
aEsPy_1:				; DATA XREF: .rdata:00423CD4o
		unicode	0, <es-PY>,0
aArQa_1:				; DATA XREF: .rdata:00423CDCo
		unicode	0, <ar-QA>,0
aEsBo_1:				; DATA XREF: .rdata:00423CE4o
		unicode	0, <es-BO>,0
aEsSv_1:				; DATA XREF: .rdata:00423CECo
		unicode	0, <es-SV>,0
aEsHn_1:				; DATA XREF: .rdata:00423CF4o
		unicode	0, <es-HN>,0
aEsNi_1:				; DATA XREF: .rdata:00423CFCo
		unicode	0, <es-NI>,0
aEsPr_1:				; DATA XREF: .rdata:00423D04o
		unicode	0, <es-PR>,0
aZhCht_1:				; DATA XREF: .rdata:00423D0Co
		unicode	0, <zh-CHT>,0
		align 10h
aSr_0:					; DATA XREF: .rdata:00423D14o
					; .rdata:00424CF0o
		unicode	0, <sr>,0
		align 4
off_424718	dd offset dword_423F28	; DATA XREF: sub_4197A9+2Er
dword_42471C	dd 42h			; DATA XREF: sub_4197A9:loc_41984Fr
		dd offset aAf_0		; "af"
		dd 2Ch
		dd offset aAfZa_2	; "af-za"
		dd 71h
		dd offset aAr		; "ar"
		align 8
		dd offset aArAe_2	; "ar-ae"
		dd 0D8h
		dd offset aArBh_2	; "ar-bh"
		dd 0DAh
		dd offset aArDz_2	; "ar-dz"
		dd 0B1h
		dd offset aArEg_2	; "ar-eg"
		dd 0A0h
		dd offset aArIq_2	; "ar-iq"
		dd 8Fh
		dd offset aArJo_2	; "ar-jo"
		dd 0CFh
		dd offset aArKw_2	; "ar-kw"
		dd 0D5h
		dd offset aArLb_2	; "ar-lb"
		dd 0D2h
		dd offset aArLy_2	; "ar-ly"
		dd 0A9h
		dd offset aArMa_2	; "ar-ma"
		dd 0B9h
		dd offset aArOm_2	; "ar-om"
		dd 0C4h
		dd offset aArQa_2	; "ar-qa"
		dd 0DCh
		dd offset aArSa_2	; "ar-sa"
		dd 43h
		dd offset aArSy_2	; "ar-sy"
		dd 0CCh
		dd offset aArTn_2	; "ar-tn"
		dd 0BFh
		dd offset aArYe_2	; "ar-ye"
		dd 0C8h
		dd offset aAz_0		; "az"
		dd 29h
		dd offset aAzAzCyrl_2	; "az-az-cyrl"
		dd 9Bh
		dd offset aAzAzLatn_2	; "az-az-latn"
		dd 6Bh
		dd offset aBe_0		; "be"
		dd 21h
		dd offset aBeBy_2	; "be-by"
		dd 63h
		dd offset aBg_0		; "bg"
		dd 1
		dd offset aBgBg_2	; "bg-bg"
		dd 44h
		dd offset aBnIn_2	; "bn-in"
		dd 7Dh
		dd offset aBsBaLatn_2	; "bs-ba-latn"
		dd 0B7h
		dd offset aCa_0		; "ca"
		dd 2
		dd offset aCaEs_2	; "ca-es"
		dd 45h
		dd offset aCs_0		; "cs"
		dd 4
		dd offset aCsCz_2	; "cs-cz"
		dd 47h
		dd offset aCyGb_2	; "cy-gb"
		dd 87h
		dd offset aDa_0		; "da"
		dd 5
		dd offset aDaDk_2	; "da-dk"
		dd 48h
		dd offset aDe_0		; "de"
		dd 6
		dd offset aDeAt_2	; "de-at"
		dd 0A2h
		dd offset aDeCh_2	; "de-ch"
		dd 91h
		dd offset aDeDe_2	; "de-de"
		dd 49h
		dd offset aDeLi_2	; "de-li"
		dd 0B3h
		dd offset aDeLu_2	; "de-lu"
		dd 0ABh
		dd offset aDiv_0	; "div"
		dd 41h
		dd offset aDivMv_2	; "div-mv"
		dd 8Bh
		dd offset aEl_0		; "el"
		dd 7
		dd offset aElGr_2	; "el-gr"
		dd 4Ah
		dd offset aEn_0		; "en"
		dd 8
		dd offset aEnAu_2	; "en-au"
		dd 0A3h
		dd offset aEnBz_2	; "en-bz"
		dd 0CDh
		dd offset aEnCa_2	; "en-ca"
		dd 0ACh
		dd offset aEnCb_2	; "en-cb"
		dd 0C9h
		dd offset aEnGb_2	; "en-gb"
		dd 92h
		dd offset aEnIe_2	; "en-ie"
		dd 0BAh
		dd offset aEnJm_2	; "en-jm"
		dd 0C5h
		dd offset aEnNz_2	; "en-nz"
		dd 0B4h
		dd offset aEnPh_2	; "en-ph"
		dd 0D6h
		dd offset aEnTt_2	; "en-tt"
		dd 0D0h
		dd offset aEnUs_2	; "en-us"
		dd 4Bh
		dd offset aEnZa_2	; "en-za"
		dd 0C0h
		dd offset aEnZw_2	; "en-zw"
		dd 0D3h
		dd offset aEs_0		; "es"
		dd 9
		dd offset aEsAr_2	; "es-ar"
		dd 0D1h
		dd offset aEsBo_2	; "es-bo"
		dd 0DDh
		dd offset aEsCl_2	; "es-cl"
		dd 0D7h
		dd offset aEsCo_2	; "es-co"
		dd 0CAh
		dd offset aEsCr_2	; "es-cr"
		dd 0B5h
		dd offset aEsDo_2	; "es-do"
		dd 0C1h
		dd offset aEsEc_2	; "es-ec"
		dd 0D4h
		dd offset aEsEs_2	; "es-es"
		dd 0A4h
		dd offset aEsGt_2	; "es-gt"
		dd 0ADh
		dd offset aEsHn_2	; "es-hn"
		dd 0DFh
		dd offset aEsMx_2	; "es-mx"
		dd 93h
		dd offset aEsNi_2	; "es-ni"
		dd 0E0h
		dd offset aEsPa_2	; "es-pa"
		dd 0BBh
		dd offset aEsPe_2	; "es-pe"
		dd 0CEh
		dd offset aEsPr_2	; "es-pr"
		dd 0E1h
		dd offset aEsPy_2	; "es-py"
		dd 0DBh
		dd offset aEsSv_2	; "es-sv"
		dd 0DEh
		dd offset aEsUy_2	; "es-uy"
		dd 0D9h
		dd offset aEsVe_2	; "es-ve"
		dd 0C6h
		dd offset aEt_0		; "et"
		dd 23h
		dd offset aEtEe_2	; "et-ee"
		dd 65h
		dd offset aEu_0		; "eu"
		dd 2Ah
		dd offset aEuEs_2	; "eu-es"
		dd 6Ch
		dd offset aFa_0		; "fa"
		dd 26h
		dd offset aFaIr_2	; "fa-ir"
		dd 68h
		dd offset aFi_0		; "fi"
		dd 0Ah
		dd offset aFiFi_2	; "fi-fi"
		dd 4Ch
		dd offset aFo_0		; "fo"
		dd 2Eh
		dd offset aFoFo_2	; "fo-fo"
		dd 73h
		dd offset aFr_0		; "fr"
		dd 0Bh
		dd offset aFrBe_2	; "fr-be"
		dd 94h
		dd offset aFrCa_2	; "fr-ca"
		dd 0A5h
		dd offset aFrCh_2	; "fr-ch"
		dd 0AEh
		dd offset aFrFr_2	; "fr-fr"
		dd 4Dh
		dd offset aFrLu_2	; "fr-lu"
		dd 0B6h
		dd offset aFrMc_2	; "fr-mc"
		dd 0BCh
		dd offset aGl_0		; "gl"
		dd 3Eh
		dd offset aGlEs_2	; "gl-es"
		dd 88h
		dd offset aGu_0		; "gu"
		dd 37h
		dd offset aGuIn_2	; "gu-in"
		dd 7Fh
		dd offset aHe_0		; "he"
		dd 0Ch
		dd offset aHeIl_2	; "he-il"
		dd 4Eh
		dd offset aHi_0		; "hi"
		dd 2Fh
		dd offset aHiIn_2	; "hi-in"
		dd 74h
		dd offset aHr_0		; "hr"
		dd 18h
		dd offset aHrBa_2	; "hr-ba"
		dd 0AFh
		dd offset aHrHr_2	; "hr-hr"
		dd 5Ah
		dd offset aHu_0		; "hu"
		dd 0Dh
		dd offset aHuHu_2	; "hu-hu"
		dd 4Fh
		dd offset aHy_0		; "hy"
		dd 28h
		dd offset aHyAm_2	; "hy-am"
		dd 6Ah
		dd offset aId_0		; "id"
		dd 1Fh
		dd offset aIdId_2	; "id-id"
		dd 61h
		dd offset aIs_0		; "is"
		dd 0Eh
		dd offset aIsIs_2	; "is-is"
		dd 50h
		dd offset aIt_0		; "it"
		dd 0Fh
		dd offset aItCh_2	; "it-ch"
		dd 95h
		dd offset aItIt_2	; "it-it"
		dd 51h
		dd offset aJa_0		; "ja"
		dd 10h
		dd offset aJaJp_2	; "ja-jp"
		dd 52h
		dd offset aKa_0		; "ka"
		dd 2Dh
		dd offset aKaGe_2	; "ka-ge"
		dd 72h
		dd offset aKk_0		; "kk"
		dd 31h
		dd offset aKkKz_2	; "kk-kz"
		dd 78h
		dd offset aKn_0		; "kn"
		dd 3Ah
		dd offset aKnIn_2	; "kn-in"
		dd 82h
		dd offset aKo_0		; "ko"
		dd 11h
		dd offset aKok_0	; "kok"
		dd 3Fh
		dd offset aKokIn_2	; "kok-in"
		dd 89h
		dd offset aKoKr_2	; "ko-kr"
		dd 53h
		dd offset aKy_0		; "ky"
		dd 32h
		dd offset aKyKg_2	; "ky-kg"
		dd 79h
		dd offset aLt_0		; "lt"
		dd 25h
		dd offset aLtLt_2	; "lt-lt"
		dd 67h
		dd offset aLv_0		; "lv"
		dd 24h
		dd offset aLvLv_2	; "lv-lv"
		dd 66h
		dd offset aMiNz_2	; "mi-nz"
		dd 8Eh
		dd offset aMk_0		; "mk"
		dd 2Bh
		dd offset aMkMk_2	; "mk-mk"
		dd 6Dh
		dd offset aMlIn_2	; "ml-in"
		dd 83h
		dd offset aMn_0		; "mn"
		dd 3Dh
		dd offset aMnMn_2	; "mn-mn"
		dd 86h
		dd offset aMr_0		; "mr"
		dd 3Bh
		dd offset aMrIn_2	; "mr-in"
		dd 84h
		dd offset aMs_0		; "ms"
		dd 30h
		dd offset aMsBn_2	; "ms-bn"
		dd 9Dh
		dd offset aMsMy_2	; "ms-my"
		dd 77h
		dd offset aMtMt_2	; "mt-mt"
		dd 75h
		dd offset aNbNo_2	; "nb-no"
		dd 55h
		dd offset aNl_0		; "nl"
		dd 12h
		dd offset aNlBe_2	; "nl-be"
		dd 96h
		dd offset aNlNl_2	; "nl-nl"
		dd 54h
		dd offset aNnNo_2	; "nn-no"
		dd 97h
		dd offset aNo_0		; "no"
		dd 13h
		dd offset aNsZa_2	; "ns-za"
		dd 8Dh
		dd offset aPa_0		; "pa"
		dd 36h
		dd offset aPaIn_2	; "pa-in"
		dd 7Eh
		dd offset aPl_0		; "pl"
		dd 14h
		dd offset aPlPl_2	; "pl-pl"
		dd 56h
		dd offset aPt_0		; "pt"
		dd 15h
		dd offset aPtBr_2	; "pt-br"
		dd 57h
		dd offset aPtPt_2	; "pt-pt"
		dd 98h
		dd offset aQuzBo_2	; "quz-bo"
		dd 8Ch
		dd offset aQuzEc_2	; "quz-ec"
		dd 9Fh
		dd offset aQuzPe_2	; "quz-pe"
		dd 0A8h
		dd offset aRo_0		; "ro"
		dd 16h
		dd offset aRoRo_2	; "ro-ro"
		dd 58h
		dd offset aRu_0		; "ru"
		dd 17h
		dd offset aRuRu_2	; "ru-ru"
		dd 59h
		dd offset aSa_0		; "sa"
		dd 3Ch
		dd offset aSaIn_2	; "sa-in"
		dd 85h
		dd offset aSeFi_2	; "se-fi"
		dd 0A7h
		dd offset aSeNo_2	; "se-no"
		dd 76h
		dd offset aSeSe_2	; "se-se"
		dd 9Ch
		dd offset aSk_0		; "sk"
		dd 19h
		dd offset aSkSk_2	; "sk-sk"
		dd 5Bh
		dd offset aSl_0		; "sl"
		dd 22h
		dd offset aSlSi_2	; "sl-si"
		dd 64h
		dd offset aSmaNo_2	; "sma-no"
		dd 0BEh
		dd offset aSmaSe_2	; "sma-se"
		dd 0C3h
		dd offset aSmjNo_2	; "smj-no"
		dd 0B0h
		dd offset aSmjSe_2	; "smj-se"
		dd 0B8h
		dd offset aSmnFi_2	; "smn-fi"
		dd 0CBh
		dd offset aSmsFi_2	; "sms-fi"
		dd 0C7h
		dd offset aSq_0		; "sq"
		dd 1Ah
		dd offset aSqAl_2	; "sq-al"
		dd 5Ch
		dd offset aSr_0		; "sr"
		dd 0E3h
		dd offset aSrBaCyrl_2	; "sr-ba-cyrl"
		dd 0C2h
		dd offset aSrBaLatn_2	; "sr-ba-latn"
		dd 0BDh
		dd offset aSrSpCyrl_2	; "sr-sp-cyrl"
		dd 0A6h
		dd offset aSrSpLatn_2	; "sr-sp-latn"
		dd 99h
		dd offset aSv_0		; "sv"
		dd 1Bh
		dd offset aSvFi_2	; "sv-fi"
		dd 9Ah
		dd offset aSvSe_2	; "sv-se"
		dd 5Dh
		dd offset aSw_0		; "sw"
		dd 33h
		dd offset aSwKe_2	; "sw-ke"
		dd 7Ah
		dd offset aSyr_0	; "syr"
		dd 40h
		dd offset aSyrSy_2	; "syr-sy"
		dd 8Ah
		dd offset aTa_0		; "ta"
		dd 38h
		dd offset aTaIn_2	; "ta-in"
		dd 80h
		dd offset aTe_0		; "te"
		dd 39h
		dd offset aTeIn_2	; "te-in"
		dd 81h
		dd offset aTh_0		; "th"
		dd 1Ch
		dd offset aThTh_2	; "th-th"
		dd 5Eh
		dd offset aTnZa_2	; "tn-za"
		dd 6Eh
		dd offset aTr_0		; "tr"
		dd 1Dh
		dd offset aTrTr_2	; "tr-tr"
		dd 5Fh
		dd offset aTt_0		; "tt"
		dd 35h
		dd offset aTtRu_2	; "tt-ru"
		dd 7Ch
		dd offset aUk_0		; "uk"
		dd 20h
		dd offset aUkUa_2	; "uk-ua"
		dd 62h
		dd offset aUr_0		; "ur"
		dd 1Eh
		dd offset aUrPk_2	; "ur-pk"
		dd 60h
		dd offset aUz_0		; "uz"
		dd 34h
		dd offset aUzUzCyrl_2	; "uz-uz-cyrl"
		dd 9Eh
		dd offset aUzUzLatn_2	; "uz-uz-latn"
		dd 7Bh
		dd offset aVi_0		; "vi"
		dd 27h
		dd offset aViVn_2	; "vi-vn"
		dd 69h
		dd offset aXhZa_2	; "xh-za"
		dd 6Fh
		dd offset aZhChs_2	; "zh-chs"
		dd 3
		dd offset aZhCht_2	; "zh-cht"
		dd 0E2h
		dd offset aZhCn_2	; "zh-cn"
		dd 90h
		dd offset aZhHk_2	; "zh-hk"
		dd 0A1h
		dd offset aZhMo_2	; "zh-mo"
		dd 0B2h
		dd offset aZhSg_2	; "zh-sg"
		dd 0AAh
		dd offset aZhTw_2	; "zh-tw"
		dd 46h
		dd offset aZuZa_2	; "zu-za"
		dd 70h
aAfZa_2:				; DATA XREF: .rdata:00424728o
		unicode	0, <af-za>,0
aArAe_2:				; DATA XREF: .rdata:00424738o
		unicode	0, <ar-ae>,0
aArBh_2:				; DATA XREF: .rdata:00424740o
		unicode	0, <ar-bh>,0
aArDz_2:				; DATA XREF: .rdata:00424748o
		unicode	0, <ar-dz>,0
aArEg_2:				; DATA XREF: .rdata:00424750o
		unicode	0, <ar-eg>,0
aArIq_2:				; DATA XREF: .rdata:00424758o
		unicode	0, <ar-iq>,0
aArJo_2:				; DATA XREF: .rdata:00424760o
		unicode	0, <ar-jo>,0
aArKw_2:				; DATA XREF: .rdata:00424768o
		unicode	0, <ar-kw>,0
aArLb_2:				; DATA XREF: .rdata:00424770o
		unicode	0, <ar-lb>,0
aArLy_2:				; DATA XREF: .rdata:00424778o
		unicode	0, <ar-ly>,0
aArMa_2:				; DATA XREF: .rdata:00424780o
		unicode	0, <ar-ma>,0
aArOm_2:				; DATA XREF: .rdata:00424788o
		unicode	0, <ar-om>,0
aArQa_2:				; DATA XREF: .rdata:00424790o
		unicode	0, <ar-qa>,0
aArSa_2:				; DATA XREF: .rdata:00424798o
		unicode	0, <ar-sa>,0
aArSy_2:				; DATA XREF: .rdata:004247A0o
		unicode	0, <ar-sy>,0
aArTn_2:				; DATA XREF: .rdata:004247A8o
		unicode	0, <ar-tn>,0
aArYe_2:				; DATA XREF: .rdata:004247B0o
		unicode	0, <ar-ye>,0
aAzAzCyrl_2:				; DATA XREF: .rdata:004247C0o
		unicode	0, <az-az-cyrl>,0
		align 4
aAzAzLatn_2:				; DATA XREF: .rdata:004247C8o
		unicode	0, <az-az-latn>,0
		align 4
aBeBy_2:				; DATA XREF: .rdata:004247D8o
		unicode	0, <be-by>,0
aBgBg_2:				; DATA XREF: .rdata:004247E8o
		unicode	0, <bg-bg>,0
aBnIn_2:				; DATA XREF: .rdata:004247F0o
		unicode	0, <bn-in>,0
aBsBaLatn_2:				; DATA XREF: .rdata:004247F8o
		unicode	0, <bs-ba-latn>,0
		align 10h
aCaEs_2:				; DATA XREF: .rdata:00424808o
		unicode	0, <ca-es>,0
aCsCz_2:				; DATA XREF: .rdata:00424818o
		unicode	0, <cs-cz>,0
aCyGb_2:				; DATA XREF: .rdata:00424820o
		unicode	0, <cy-gb>,0
aDaDk_2:				; DATA XREF: .rdata:00424830o
		unicode	0, <da-dk>,0
aDeAt_2:				; DATA XREF: .rdata:00424840o
		unicode	0, <de-at>,0
aDeCh_2:				; DATA XREF: .rdata:00424848o
		unicode	0, <de-ch>,0
aDeDe_2:				; DATA XREF: .rdata:00424850o
		unicode	0, <de-de>,0
aDeLi_2:				; DATA XREF: .rdata:00424858o
		unicode	0, <de-li>,0
aDeLu_2:				; DATA XREF: .rdata:00424860o
		unicode	0, <de-lu>,0
aDivMv_2:				; DATA XREF: .rdata:00424870o
		unicode	0, <div-mv>,0
		align 4
aElGr_2:				; DATA XREF: .rdata:00424880o
		unicode	0, <el-gr>,0
aEnAu_2:				; DATA XREF: .rdata:00424890o
		unicode	0, <en-au>,0
aEnBz_2:				; DATA XREF: .rdata:00424898o
		unicode	0, <en-bz>,0
aEnCa_2:				; DATA XREF: .rdata:004248A0o
		unicode	0, <en-ca>,0
aEnCb_2:				; DATA XREF: .rdata:004248A8o
		unicode	0, <en-cb>,0
aEnGb_2:				; DATA XREF: .rdata:004248B0o
		unicode	0, <en-gb>,0
aEnIe_2:				; DATA XREF: .rdata:004248B8o
		unicode	0, <en-ie>,0
aEnJm_2:				; DATA XREF: .rdata:004248C0o
		unicode	0, <en-jm>,0
aEnNz_2:				; DATA XREF: .rdata:004248C8o
		unicode	0, <en-nz>,0
aEnPh_2:				; DATA XREF: .rdata:004248D0o
		unicode	0, <en-ph>,0
aEnTt_2:				; DATA XREF: .rdata:004248D8o
		unicode	0, <en-tt>,0
aEnUs_2:				; DATA XREF: .rdata:004248E0o
		unicode	0, <en-us>,0
aEnZa_2:				; DATA XREF: .rdata:004248E8o
		unicode	0, <en-za>,0
aEnZw_2:				; DATA XREF: .rdata:004248F0o
		unicode	0, <en-zw>,0
aEsAr_2:				; DATA XREF: .rdata:00424900o
		unicode	0, <es-ar>,0
aEsBo_2:				; DATA XREF: .rdata:00424908o
		unicode	0, <es-bo>,0
aEsCl_2:				; DATA XREF: .rdata:00424910o
		unicode	0, <es-cl>,0
aEsCo_2:				; DATA XREF: .rdata:00424918o
		unicode	0, <es-co>,0
aEsCr_2:				; DATA XREF: .rdata:00424920o
		unicode	0, <es-cr>,0
aEsDo_2:				; DATA XREF: .rdata:00424928o
		unicode	0, <es-do>,0
aEsEc_2:				; DATA XREF: .rdata:00424930o
		unicode	0, <es-ec>,0
aEsEs_2:				; DATA XREF: .rdata:00424938o
		unicode	0, <es-es>,0
aEsGt_2:				; DATA XREF: .rdata:00424940o
		unicode	0, <es-gt>,0
aEsHn_2:				; DATA XREF: .rdata:00424948o
		unicode	0, <es-hn>,0
aEsMx_2:				; DATA XREF: .rdata:00424950o
		unicode	0, <es-mx>,0
aEsNi_2:				; DATA XREF: .rdata:00424958o
		unicode	0, <es-ni>,0
aEsPa_2:				; DATA XREF: .rdata:00424960o
		unicode	0, <es-pa>,0
aEsPe_2:				; DATA XREF: .rdata:00424968o
		unicode	0, <es-pe>,0
aEsPr_2:				; DATA XREF: .rdata:00424970o
		unicode	0, <es-pr>,0
aEsPy_2:				; DATA XREF: .rdata:00424978o
		unicode	0, <es-py>,0
aEsSv_2:				; DATA XREF: .rdata:00424980o
		unicode	0, <es-sv>,0
aEsUy_2:				; DATA XREF: .rdata:00424988o
		unicode	0, <es-uy>,0
aEsVe_2:				; DATA XREF: .rdata:00424990o
		unicode	0, <es-ve>,0
aEtEe_2:				; DATA XREF: .rdata:004249A0o
		unicode	0, <et-ee>,0
aEuEs_2:				; DATA XREF: .rdata:004249B0o
		unicode	0, <eu-es>,0
aFaIr_2:				; DATA XREF: .rdata:004249C0o
		unicode	0, <fa-ir>,0
aFiFi_2:				; DATA XREF: .rdata:004249D0o
		unicode	0, <fi-fi>,0
aFoFo_2:				; DATA XREF: .rdata:004249E0o
		unicode	0, <fo-fo>,0
aFrBe_2:				; DATA XREF: .rdata:004249F0o
		unicode	0, <fr-be>,0
aFrCa_2:				; DATA XREF: .rdata:004249F8o
		unicode	0, <fr-ca>,0
aFrCh_2:				; DATA XREF: .rdata:00424A00o
		unicode	0, <fr-ch>,0
aFrFr_2:				; DATA XREF: .rdata:00424A08o
		unicode	0, <fr-fr>,0
aFrLu_2:				; DATA XREF: .rdata:00424A10o
		unicode	0, <fr-lu>,0
aFrMc_2:				; DATA XREF: .rdata:00424A18o
		unicode	0, <fr-mc>,0
aGlEs_2:				; DATA XREF: .rdata:00424A28o
		unicode	0, <gl-es>,0
aGuIn_2:				; DATA XREF: .rdata:00424A38o
		unicode	0, <gu-in>,0
aHeIl_2:				; DATA XREF: .rdata:00424A48o
		unicode	0, <he-il>,0
aHiIn_2:				; DATA XREF: .rdata:00424A58o
		unicode	0, <hi-in>,0
aHrBa_2:				; DATA XREF: .rdata:00424A68o
		unicode	0, <hr-ba>,0
aHrHr_2:				; DATA XREF: .rdata:00424A70o
		unicode	0, <hr-hr>,0
aHuHu_2:				; DATA XREF: .rdata:00424A80o
		unicode	0, <hu-hu>,0
aHyAm_2:				; DATA XREF: .rdata:00424A90o
		unicode	0, <hy-am>,0
aIdId_2:				; DATA XREF: .rdata:00424AA0o
		unicode	0, <id-id>,0
aIsIs_2:				; DATA XREF: .rdata:00424AB0o
		unicode	0, <is-is>,0
aItCh_2:				; DATA XREF: .rdata:00424AC0o
		unicode	0, <it-ch>,0
aItIt_2:				; DATA XREF: .rdata:00424AC8o
		unicode	0, <it-it>,0
aJaJp_2:				; DATA XREF: .rdata:00424AD8o
		unicode	0, <ja-jp>,0
aKaGe_2:				; DATA XREF: .rdata:00424AE8o
		unicode	0, <ka-ge>,0
aKkKz_2:				; DATA XREF: .rdata:00424AF8o
		unicode	0, <kk-kz>,0
aKnIn_2:				; DATA XREF: .rdata:00424B08o
		unicode	0, <kn-in>,0
aKokIn_2:				; DATA XREF: .rdata:00424B20o
		unicode	0, <kok-in>,0
		align 4
aKoKr_2:				; DATA XREF: .rdata:00424B28o
		unicode	0, <ko-kr>,0
aKyKg_2:				; DATA XREF: .rdata:00424B38o
		unicode	0, <ky-kg>,0
aLtLt_2:				; DATA XREF: .rdata:00424B48o
		unicode	0, <lt-lt>,0
aLvLv_2:				; DATA XREF: .rdata:00424B58o
		unicode	0, <lv-lv>,0
aMiNz_2:				; DATA XREF: .rdata:00424B60o
		unicode	0, <mi-nz>,0
aMkMk_2:				; DATA XREF: .rdata:00424B70o
		unicode	0, <mk-mk>,0
aMlIn_2:				; DATA XREF: .rdata:00424B78o
		unicode	0, <ml-in>,0
aMnMn_2:				; DATA XREF: .rdata:00424B88o
		unicode	0, <mn-mn>,0
aMrIn_2:				; DATA XREF: .rdata:00424B98o
		unicode	0, <mr-in>,0
aMsBn_2:				; DATA XREF: .rdata:00424BA8o
		unicode	0, <ms-bn>,0
aMsMy_2:				; DATA XREF: .rdata:00424BB0o
		unicode	0, <ms-my>,0
aMtMt_2:				; DATA XREF: .rdata:00424BB8o
		unicode	0, <mt-mt>,0
aNbNo_2:				; DATA XREF: .rdata:00424BC0o
		unicode	0, <nb-no>,0
aNlBe_2:				; DATA XREF: .rdata:00424BD0o
		unicode	0, <nl-be>,0
aNlNl_2:				; DATA XREF: .rdata:00424BD8o
		unicode	0, <nl-nl>,0
aNnNo_2:				; DATA XREF: .rdata:00424BE0o
		unicode	0, <nn-no>,0
aNsZa_2:				; DATA XREF: .rdata:00424BF0o
		unicode	0, <ns-za>,0
aPaIn_2:				; DATA XREF: .rdata:00424C00o
		unicode	0, <pa-in>,0
aPlPl_2:				; DATA XREF: .rdata:00424C10o
		unicode	0, <pl-pl>,0
aPtBr_2:				; DATA XREF: .rdata:00424C20o
		unicode	0, <pt-br>,0
aPtPt_2:				; DATA XREF: .rdata:00424C28o
		unicode	0, <pt-pt>,0
aQuzBo_2:				; DATA XREF: .rdata:00424C30o
		unicode	0, <quz-bo>,0
		align 4
aQuzEc_2:				; DATA XREF: .rdata:00424C38o
		unicode	0, <quz-ec>,0
		align 4
aQuzPe_2:				; DATA XREF: .rdata:00424C40o
		unicode	0, <quz-pe>,0
		align 4
aRoRo_2:				; DATA XREF: .rdata:00424C50o
		unicode	0, <ro-ro>,0
aRuRu_2:				; DATA XREF: .rdata:00424C60o
		unicode	0, <ru-ru>,0
aSaIn_2:				; DATA XREF: .rdata:00424C70o
		unicode	0, <sa-in>,0
aSeFi_2:				; DATA XREF: .rdata:00424C78o
		unicode	0, <se-fi>,0
aSeNo_2:				; DATA XREF: .rdata:00424C80o
		unicode	0, <se-no>,0
aSeSe_2:				; DATA XREF: .rdata:00424C88o
		unicode	0, <se-se>,0
aSkSk_2:				; DATA XREF: .rdata:00424C98o
		unicode	0, <sk-sk>,0
aSlSi_2:				; DATA XREF: .rdata:00424CA8o
		unicode	0, <sl-si>,0
aSmaNo_2:				; DATA XREF: .rdata:00424CB0o
		unicode	0, <sma-no>,0
		align 4
aSmaSe_2:				; DATA XREF: .rdata:00424CB8o
		unicode	0, <sma-se>,0
		align 4
aSmjNo_2:				; DATA XREF: .rdata:00424CC0o
		unicode	0, <smj-no>,0
		align 4
aSmjSe_2:				; DATA XREF: .rdata:00424CC8o
		unicode	0, <smj-se>,0
		align 4
aSmnFi_2:				; DATA XREF: .rdata:00424CD0o
		unicode	0, <smn-fi>,0
		align 4
aSmsFi_2:				; DATA XREF: .rdata:00424CD8o
		unicode	0, <sms-fi>,0
		align 4
aSqAl_2:				; DATA XREF: .rdata:00424CE8o
		unicode	0, <sq-al>,0
aSrBaCyrl_2:				; DATA XREF: .rdata:00424CF8o
		unicode	0, <sr-ba-cyrl>,0
		align 4
aSrBaLatn_2:				; DATA XREF: .rdata:00424D00o
		unicode	0, <sr-ba-latn>,0
		align 4
aSrSpCyrl_2:				; DATA XREF: .rdata:00424D08o
		unicode	0, <sr-sp-cyrl>,0
		align 4
aSrSpLatn_2:				; DATA XREF: .rdata:00424D10o
		unicode	0, <sr-sp-latn>,0
		align 4
aSvFi_2:				; DATA XREF: .rdata:00424D20o
		unicode	0, <sv-fi>,0
aSvSe_2:				; DATA XREF: .rdata:00424D28o
		unicode	0, <sv-se>,0
aSwKe_2:				; DATA XREF: .rdata:00424D38o
		unicode	0, <sw-ke>,0
aSyrSy_2:				; DATA XREF: .rdata:00424D48o
		unicode	0, <syr-sy>,0
		align 4
aTaIn_2:				; DATA XREF: .rdata:00424D58o
		unicode	0, <ta-in>,0
aTeIn_2:				; DATA XREF: .rdata:00424D68o
		unicode	0, <te-in>,0
aThTh_2:				; DATA XREF: .rdata:00424D78o
		unicode	0, <th-th>,0
aTnZa_2:				; DATA XREF: .rdata:00424D80o
		unicode	0, <tn-za>,0
aTrTr_2:				; DATA XREF: .rdata:00424D90o
		unicode	0, <tr-tr>,0
aTtRu_2:				; DATA XREF: .rdata:00424DA0o
		unicode	0, <tt-ru>,0
aUkUa_2:				; DATA XREF: .rdata:00424DB0o
		unicode	0, <uk-ua>,0
aUrPk_2:				; DATA XREF: .rdata:00424DC0o
		unicode	0, <ur-pk>,0
aUzUzCyrl_2:				; DATA XREF: .rdata:00424DD0o
		unicode	0, <uz-uz-cyrl>,0
		align 10h
aUzUzLatn_2:				; DATA XREF: .rdata:00424DD8o
		unicode	0, <uz-uz-latn>,0
		align 4
aViVn_2:				; DATA XREF: .rdata:00424DE8o
		unicode	0, <vi-vn>,0
aXhZa_2:				; DATA XREF: .rdata:00424DF0o
		unicode	0, <xh-za>,0
aZhChs_2:				; DATA XREF: .rdata:00424DF8o
		unicode	0, <zh-chs>,0
		align 10h
aZhCht_2:				; DATA XREF: .rdata:00424E00o
		unicode	0, <zh-cht>,0
		align 10h
aZhCn_2:				; DATA XREF: .rdata:00424E08o
		unicode	0, <zh-cn>,0
aZhHk_2:				; DATA XREF: .rdata:00424E10o
		unicode	0, <zh-hk>,0
aZhMo_2:				; DATA XREF: .rdata:00424E18o
		unicode	0, <zh-mo>,0
aZhSg_2:				; DATA XREF: .rdata:00424E20o
		unicode	0, <zh-sg>,0
aZhTw_2:				; DATA XREF: .rdata:00424E28o
		unicode	0, <zh-tw>,0
aZuZa_2:				; DATA XREF: .rdata:00424E30o
		unicode	0, <zu-za>,0
dword_425668	dd 2 dup(0)		; DATA XREF: sub_41AC0C+33o
oword_425670	db 0, 0, 0, 0, 0, 0, 0F0h, 3Fh,	0, 0, 0, 0, 80h, 0C0h
					; DATA XREF: sub_413F09+3Er
					; sub_413F09+47r ...
		db 0EFh, 3Fh
		dd 0
		dd 3FEF8200h, 0
aAdq?		db 'Dя?',0
		align 4
aQ?		db 'Р',7,'я?',0
		align 4
		dd 3FEECC00h, 0
a@su?		db '@ю?',0
		align 4
a@wu?		db '@Wю?',0
		align 4
		dd 3FEE1E00h, 0
aXa?		db 'Рхэ?',0
		align 4
aAoa?		db 'Ўэ?',0
		align 4
aWa?		db 'Рwэ?',0
		align 4
aAa?		db 'РAэ?',0
		align 4
		dd 3FED0CC0h, 0
a@?		db '@иь?',0
		align 4
aD?		db 'РЄь?',0
		align 4
aQ?_0		db 'Рqь?',0
		align 4
aA??		db '?ь?',0
		align 4
		dd 3FEC0E00h, 0
a@I?		db '@ны?',0
		align 4
		dd 3FEBAD00h, 0
aAI?		db '}ы?',0
		align 4
aAni?		db 'Nы?',0
		align 4
a@I?_0		db '@ ы?',0
		align 4
		dd 3FEAF280h, 0
aA?		db 'Хъ?',0
		align 4
		dd 3FEA9900h, 0
		dd 3FEA6D00h, 0
aA?_0		db 'РAъ?',0
		align 4
		dd 3FEA16C0h, 0
aAS?		db 'ьщ?',0
		align 4
aS?		db 'РТщ?',0
		align 4
aAss?		db 'щ?',0
		align 4
		dd 3FE97100h, 0
aHs?		db 'РHщ?',0
		align 4
		dd 3FE92100h, 0
		dd 3FE8F9C0h, 0
		dd 3FE8D300h, 0
aMs?		db 'РЌш?',0
		align 4
		dd 3FE88700h, 0
aAas?		db 'aш?',0
		align 4
aAS?_0		db '<ш?',0
		align 4
		dd 3FE81800h, 0
		dd 3FE7F400h, 0
a@C?		db '@ач?',0
		align 4
a@nc?		db '@­ч?',0
		align 4
a@kc?		db '@ч?',0
		align 4
aGc?		db 'Рgч?',0
		align 4
aEc?		db 'РEч?',0
		align 4
a@C?_0		db '@$ч?',0
		align 4
		dd 3FE70300h, 0
		dd 3FE6E200h, 0
aAC?		db 'Сц?',0
		align 4
a@bc?		db '@Ёц?',0
		align 4
aAbc?		db 'ц?',0
		align 4
		dd 3FE66200h, 0
aBc?		db 'РBц?',0
		align 4
		dd 3FE62400h, 0
		dd 3FE60580h, 0
a@cx?		db '@чх?',0
		align 4
aAX?		db 'Щх?',0
		align 4
		dd 3FE5AC00h, 0
aOx?		db 'Рх?',0
		align 4
		dd 3FE57200h, 0
a@ux?		db '@Uх?',0
		align 4
		dd 3FE53900h, 0
		dd 3FE51D00h, 0
		dd 3FE50140h, 0
		dd 3FE4E600h, 0
aF?		db 'РЪф?',0
		align 4
aPf?		db 'РЏф?',0
		align 4
a@xf?		db '@ф?',0
		align 4
		dd 3FE47B00h, 0
aF?_0		db 'Р`ф?',0
		align 4
		dd 3FE44700h, 0
aAF?		db '-ф?',0
		align 4
		dd 3FE41400h, 0
		dd 3FE3FB00h, 0
a@tu?		db '@ту?',0
		align 4
aAU?		db 'Щу?',0
		align 4
a@U?		db '@Бу?',0
		align 4
		dd 3FE39900h, 0
a@bu?		db '@у?',0
		align 4
aAiu?		db 'iу?',0
		align 4
		dd 3FE35200h, 0
		dd 3FE33B00h, 0
		dd 3FE32400h, 0
		dd 3FE30D00h, 0
		dd 3FE2F680h, 0
a@rt?		db '@рт?',0
		align 4
		dd 3FE2CA00h, 0
		dd 3FE2B400h, 0
a@ut?		db '@т?',0
		align 4
aIt?		db 'Рт?',0
		align 4
a@st?		db '@sт?',0
		align 4
a@T?		db '@^т?',0
		align 4
a@it?		db '@Iт?',0
		align 4
a@4t?		db '@4т?',0
		align 4
		dd 3FE21FC0h, 0
a@T?_0		db '@',0Bh,'т?',0
		align 4
		dd 3FE1F700h, 0
		dd 3FE1E300h, 0
		dd 3FE1CF00h, 0
a@S?		db '@Лс?',0
		align 4
aZs?		db 'РЇс?',0
		align 4
a@fs?		db '@с?',0
		align 4
		dd 3FE18100h, 0
		dd 3FE16E00h, 0
		dd 3FE15B00h, 0
a@hs?		db '@Hс?',0
		align 4
a5s?		db 'Р5с?',0
		align 4
a@S?_0		db '@#с?',0
		align 4
		dd 3FE11100h, 0
		dd 3FE0FF00h, 0
		dd 3FE0ED00h, 0
a@R?		db '@лр?',0
		align 4
aAR?		db 'Щр?',0
		align 4
		dd 3FE0B800h, 0
aAjr?		db 'Ір?',0
		align 4
a@xr?		db '@р?',0
		align 4
a@dr?		db '@р?',0
		align 4
a@sr?		db '@sр?',0
		align 4
a@br?		db '@bр?',0
		align 4
aAqr?		db 'Qр?',0
		align 4
		dd 3FE04100h, 0
aA0r?		db '0р?',0
		align 4
a@R?_0		db '@ р?',0
		align 4
		dd 3FE01000h, 0
		dd 3FE00000h, 2	dup(0)
oword_425A80	db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
					; DATA XREF: sub_413F09+52r
					; sub_413F09+50Er
		dd 61D20000h, 3F86FDF4h, 46D9F6F7h, 3D3C9EFCh, 317A0000h
		dd 3F96E625h, 645614DBh, 3D453F0Eh, 97920000h, 3FA11A62h
		dd 0D7D436D6h, 3D4D925Ch, 0A01F0000h, 3FA6BB01h, 7439DB70h
		dd 3D3C995Eh, 635C8000h, 3FAC4EB3h, 0BDCAD609h,	3D4A8192h
		dd 80338000h, 3FB0EA8Bh, 942F1BE5h, 3D4E1797h, 62A90000h
		dd 3FB3A9F0h, 2E155A44h, 3D3011EFh, 4FF80000h, 3FB66568h
		dd 8DA93FAFh, 3D3084F2h, 335D0000h, 3FB919BCh, 0ED03FE7Fh
		dd 3D246082h, 0D7C04000h, 3FBBC6B9h, 42652658h,	3D45B7E8h
		dd 0E1DC8000h, 3FBE7272h, 2333A25Ch, 3D4A2EA9h,	820EC000h
		dd 3FC08CD7h, 11B40206h, 3D3543C5h, 3A33C000h, 3FC1DC8Fh
		dd 0AB6D744Ch, 3D45598Ch, 27AF4000h, 3FC32B7Ah,	0FD6522B1h
		dd 3D07ABA1h, 4C740000h, 3FC47656h, 249B8F70h, 3D4DC39Fh
		dd 64906000h, 3FC5C048h, 7E5F3668h, 3D28C5D4h, 0EF786000h
		dd 3FC707A4h, 591DE6F8h, 3D4F86EAh, 0FAC38000h,	3FC84C59h
		dd 51B14A77h, 3D435CD3h, 6AACC000h, 3FC98E55h, 0D156EE10h
		dd 3D341C88h, 32BE000h,	3FCACF30h, 0DEBF9165h, 3D2E3733h
		dd 13AE6000h, 3FCC0D32h, 0B18BE2EDh, 3D4B15BCh,	0D6D66000h
		dd 3FCD49F9h, 0C2A12D29h, 3D30B557h, 8A2D0000h,	3FCE83C9h
		dd 0D10D18F2h, 3D442AF5h, 0E396E000h, 3FCFBC44h, 28665437h
		dd 3D47B3F9h, 936E000h,	3FD078D4h, 8125902h, 3D38F1F6h
		dd 25B29000h, 3FD112CEh, 0F45BAE5h, 3D3C851Ch, 77E3F000h
		dd 3FD1AC0Bh, 0B047EA3h, 3D3F9710h, 90D2B000h, 3FD243A5h
		dd 0E8E9D45Dh, 3D3C9B75h, 0AD935000h, 3FD2DB57h, 238AC23Eh
		dd 3CF934F5h, 0BE940000h, 3FD37158h, 42E3F4DEh,	3D4A16D1h
		dd 445FB000h, 3FD40684h, 4BFBFC6Dh, 3D469BA1h, 0A118D000h
		dd 3FD49AD4h, 7302CCA5h, 3D45CD37h, 0E2114000h,	3FD52D5Bh
		dd 0F883E4Bh, 3D3A8364h, 67828000h, 3FD5BFE3h, 3DEA7D5Ah
		dd 3D49755Ch, 94738000h, 3FD6517Eh, 223A67C4h, 3D4E8A28h
		dd 92EF1000h, 3FD6E227h, 0E7E9039h, 3D314F24h, 7FD10000h
		dd 3FD771D8h, 31D36EDBh, 3D258AAFh, 6B297000h, 3FD8008Bh
		dd 8CCAD976h, 3D1605B8h, 58A56000h, 3FD88E3Ah, 572E71DFh
		dd 3D2097FFh, 9E695000h, 3FD91BD1h, 0E4F6C667h,	3D4DBB3Eh
		dd 0ABBE1000h, 3FD9A85Bh, 0A61B2D6h, 3D4D889Ah,	5FCB1000h
		dd 3FDA33D2h, 0D92C8DD6h, 3D4F5875h, 8EC96000h,	3FDABE2Fh
		dd 90E2CC83h, 3D3C7731h, 273ED000h, 3FDB4865h, 99E1F60h
		dd 3D4AB54Ah, 0E781000h, 3FDBD07Eh, 1C0DCF20h, 3D268AC2h
		dd 0BA6E1000h, 3FDC5960h, 96CB81FEh, 3D43B4BDh,	8B913000h
		dd 3FDCE116h, 55D19E2h,	3D2FADA3h, 20231000h, 3FDD6799h
		dd 96E87504h, 3D18ED50h, 0DFFC000h, 3FDDECE2h, 2CED8AAAh
		dd 3D43E26Ch, 0AD35F000h, 3FDE71EBh, 0E08E95E1h, 3D011609h
		dd 0D3444000h, 3FDEF6B3h, 2D1614FAh, 3D40B35Bh,	9E747000h
		dd 3FDF7A34h, 81D99120h, 3D4A6E70h, 9E8CC000h, 3FDFFD6Ch
		dd 2E86699Dh, 3CFA6745h, 7E79F000h, 3FE03FA9h, 0E74F8BEEh
		dd 3D275E12h, 8D542800h, 3FE08074h, 78CE0ADBh, 3D3B8C3Bh
		dd 50CF0000h, 3FE0C116h, 0EB1152A5h, 3D461752h,	26B18000h
		dd 3FE10108h, 8A07D258h, 3D4EA3C9h, 0DD4AE800h,	3FE140CCh
		dd 197ED2C1h, 3D1FCADAh, 3D744800h, 3FE18063h, 7E07A41h
		dd 3D225517h, 6E8E9800h, 3FE1BF42h, 6C055F55h, 3D376AFFh
		dd 5DB3A000h, 3FE1FDEFh, 8501D871h, 3D4442DEh, 0C8201000h
		dd 3FE23C68h, 9129A57Ah, 3D270C74h, 0A05A8000h,	3FE27A23h
		dd 30B214A6h, 3D4CB0EAh, 1C354000h, 0BFDA8F9Dh,	4F4F9853h
		dd 0BD4604F5h, 0AEE3B000h, 0BFDA1506h, 0DBB28C80h, 0BD44FF93h
		dd 8AA53000h, 0BFD99AE4h, 3DFDF5h, 0BD0E6ED7h, 57DF2000h
		dd 0BFD92139h, 0C01B3F7Fh, 0BD3E186Ah, 8A043000h, 0BFD8A922h
		dd 0CF8DD883h, 0BD49BC20h, 0BF51C000h, 0BFD8306Eh, 6E480596h
		dd 0BD45C826h, 57F9000h, 0BFD7B83Ah, 9F443745h,	0BD35F4F7h
		dd 37FCA000h, 0BFD741A6h, 9FF0180Dh, 0BD4025F4h, 0E7AA4000h
		dd 0BFD6CB99h, 0D5A7002Ah, 0BD412B5Ah, 0E853D000h, 0BFD654F5h
		dd 8C4A72A7h, 0BD44C700h, 91D34000h, 0BFD5DFFFh, 0D390BA95h
		dd 0BD3F544Eh, 33779000h, 0BFD56B99h, 31BAE772h, 0BD391DC0h
		dd 5D830000h, 0BFD4F69Fh, 0D24BAE46h, 0BD38F36Dh, 2143D000h
		dd 0BFD48360h, 9A327931h, 0BCE09C59h, 8A0D4000h, 0BFD410B9h
		dd 28E8042Ah, 0BD156A3Ch, 0E4060000h, 0BFD39D83h, 43C10456h
		dd 0BD447F16h, 0F8B57000h, 0BFD32C15h, 0E01D9231h, 0BD0D6EE2h
		dd 891F000h, 0BFD2BA1Ch, 6C3DA632h, 0BD379507h,	0ADA03000h
		dd 0BFD249F2h, 0FEB5964Fh, 0BD2A7809h, 6C900000h, 0BFD1D940h
		dd 3EA7C032h, 0BD4546D7h, 0D34FB000h, 0BFD16935h, 348D84A4h
		dd 0BD2151C6h, 3A3FD000h, 0BFD0FB09h, 943A5h, 0BD2BACACh
		dd 8CDA7000h, 0BFD08C58h, 4F78DFA1h, 0BD43C72Ch, 8CF40000h
		dd 0BFD01D22h, 0C813E541h, 0BD3C6972h, 7E71A000h, 0BFCF5FAAh
		dd 20C552C1h, 0BD3D1576h, 93DC000h, 0BFCE867Eh,	0F3FFFCC0h
		dd 0BD366FA6h, 0FE6D4000h, 0BFCDAC50h, 0BB8F2009h, 0BD2B6484h
		dd 0E83E8000h, 0BFCCD398h, 0E492C839h, 0BD05F5CDh, 1D5BE000h
		dd 0BFCBFC5Ch, 0E42B538h, 0BD278490h, 0FB83E000h, 0BFCB26A0h
		dd 0E91F69B7h, 0BD4A5B99h, 5ABBA000h, 0BFCA4FEDh, 8062C61Fh
		dd 0BD45976Eh, 0E2448000h, 0BFC97D45h, 6755CD02h, 0BD401C63h
		dd 948A000h, 0BFC8A9ADh, 64F25A55h, 0BD4C89BAh,	0A4220000h
		dd 0BFC7D520h, 0D008A53Dh, 0BD216A44h, 0C17F0000h, 0BFC704B6h
		dd 6D56D6EEh, 0BD413A80h, 9CB64000h, 0BFC63360h, 177EC11Ch
		dd 0BD33F125h, 0FF6B0000h, 0BFC563ADh, 79422C3h, 0BD4D0837h
		dd 82FF2000h, 0BFC495A5h, 13709EF4h, 0BD3EBD93h, 2529A000h
		dd 0BFC3C6B6h, 8296BF5Ch, 0BD42D2B0h, 6AD2E000h, 0BFC2F978h
		dd 0C2483623h, 0BD3B5188h, 2746000h, 0BFC22DF3h, 0C2505D3Dh
		dd 0BD3048E3h, 543B8000h, 0BFC1618Ch, 0A3B61BD1h, 0BD45B8D6h
		dd 0A2260000h, 0BFC096E5h, 232D61F6h, 0BD4BDE98h, 5C568000h
		dd 0BFBF9C0Bh, 0B7A56256h, 0BD4D3483h, 92EE4000h, 0BFBE0894h
		dd 0FCD57F86h, 0BD405589h, 0E5580000h, 0BFBC78BAh, 387C197h
		dd 0BD35351Dh, 0FAF64000h, 0BFBAEC8Bh, 0ABEA0E44h, 0BD3D13CBh
		dd 4969C000h, 0BFB95EB2h, 0B299D747h, 0BD3727FAh, 41A08000h
		dd 0BFB7D493h, 0BCF7AA55h, 0BD4EEEF8h, 0AA930000h, 0BFB64E3Ch
		dd 31E3ECAh, 0BD31AAD2h, 0D2EA8000h, 0BFB4C647h, 115C4FB7h
		dd 0BCEB43C4h, 94A24000h, 0BFB3422Bh, 3A67E318h, 0BD421B49h
		dd 0CF5A4000h, 0BFB1BC75h, 139E8397h, 0BD4D7DB2h, 0F8DC8000h
		dd 0BFB03AA8h, 0E9AF5428h, 0BD153121h, 0F48F8000h, 0BFAD6E8Eh
		dd 51765DBCh, 0BD38293Ch, 0D7680000h, 0BFAA6FBEh, 0DB7CD724h
		dd 0BD2B1C66h, 0C1828000h, 0BFA778FDh, 0F2AF5332h, 0BD34378Ah
		dd 22550000h, 0BFA47F2Eh, 93C56DCDh, 0BD2A4246h, 0A5368000h
		dd 0BFA18249h, 5FDF534Bh, 0BD441B0Dh, 0EE200000h, 0BF9D1B35h
		dd 2DB4F24Dh, 0BD431FB7h, 317A0000h, 0BF97427Dh, 4B03B093h
		dd 0BD4700F1h, 0D100000h, 0BF9163D2h, 664FE33Fh, 0BD46E8B9h
		dd 4CF00000h, 0BF872C1Fh, 580FE573h, 0BD2B4934h, 6D780000h
		dd 0BF7709C4h, 56CDE924h, 0BD4563BAh, 4	dup(0)
qword_426290	dq 3FF0000000000000h	; DATA XREF: sub_413F09+B9r
					; sub_413F09+C2r
		dd 0
		dd 3FEFFF40h, 0
		dd 3FEFFE40h, 0
		dd 3FEFFD40h, 0
		dd 3FEFFC40h, 0
		dd 3FEFFB40h, 0
		dd 3FEFFA40h, 0
		dd 3FEFF940h, 0
		dd 3FEFF840h, 0
		dd 3FEFF740h, 0
		dd 3FEFF640h, 0
		dd 3FEFF540h, 0
		dd 3FEFF440h, 0
		dd 3FEFF340h, 0
		dd 3FEFF240h, 0
		dd 3FEFF140h, 0
		dd 3FEFF040h, 0
a@qq?		db '@яя?',0
		align 4
a@uq?		db '@юя?',0
		align 4
a@aq?		db '@эя?',0
		align 4
a@Q?		db '@ья?',0
		align 4
a@iq?		db '@ыя?',0
		align 4
a@Q?_0		db '@ъя?',0
		align 4
a@sq?		db '@щя?',0
		align 4
a@sq?_0		db '@шя?',0
		align 4
a@cq?		db '@чя?',0
		align 4
a@cq?_0		db '@ця?',0
		align 4
a@xq?		db '@хя?',0
		align 4
a@fq?		db '@фя?',0
		align 4
a@uq?_0		db '@уя?',0
		align 4
a@tq?		db '@тя?',0
		align 4
a@sq?_1		db '@ся?',0
		align 4
a@rq?		db '@ря?',0
		align 4
a@Q?_1		db '@пя?',0
		align 4
a@Q?_2		db '@оя?',0
		align 4
a@Q?_3		db '@ня?',0
		align 4
a@Q?_4		db '@мя?',0
		align 4
a@Q?_5		db '@ля?',0
		align 4
a@Q?_6		db '@кя?',0
		align 4
a@Q?_7		db '@йя?',0
		align 4
a@Q?_8		db '@ия?',0
		align 4
a@Q?_9		db '@зя?',0
		align 4
a@Q?_10		db '@жя?',0
		align 4
a@Q?_11		db '@ея?',0
		align 4
a@Q?_12		db '@дя?',0
		align 4
a@Q?_13		db '@гя?',0
		align 4
aAQ?		db 'вя?',0
		align 4
aAQ?_0		db 'бя?',0
		align 4
aAQ?_1		db 'ая?',0
		align 4
aAQ?_2		db 'Яя?',0
		align 4
aAQ?_3		db 'Юя?',0
		align 4
aAQ?_4		db 'Эя?',0
		align 4
aAQ?_5		db 'Ья?',0
		align 4
aAQ?_6		db 'Ыя?',0
		align 4
aAQ?_7		db 'Ъя?',0
		align 4
aAQ?_8		db 'Щя?',0
		align 4
aAQ?_9		db 'Шя?',0
		align 4
aAQ?_10		db 'Чя?',0
		align 4
aAQ?_11		db 'Ця?',0
		align 4
aAQ?_12		db 'Хя?',0
		align 4
aAQ?_13		db 'Фя?',0
		align 4
aAQ?_14		db 'Уя?',0
		align 4
aAQ?_15		db 'Тя?',0
		align 4
aAQ?_16		db 'Ся?',0
		align 4
		dd 3FF01000h, 0
		dd 3FF00FC0h, 0
		dd 3FF00F80h, 0
		dd 3FF00F40h, 0
		dd 3FF00F00h, 0
		dd 3FF00EC0h, 0
		dd 3FF00E80h, 0
		dd 3FF00E40h, 0
		dd 3FF00E00h, 0
		dd 3FF00DC0h, 0
		dd 3FF00D80h, 0
		dd 3FF00D40h, 0
		dd 3FF00D00h, 0
		dd 3FF00CC0h, 0
		dd 3FF00C80h, 0
		dd 3FF00C40h, 0
		dd 3FF00C00h, 0
		dd 3FF00BC0h, 0
		dd 3FF00B80h, 0
		dd 3FF00B40h, 0
		dd 3FF00B00h, 0
		dd 3FF00AC0h, 0
		dd 3FF00A80h, 0
		dd 3FF00A40h, 0
		dd 3FF00A00h, 0
		dd 3FF009C0h, 0
		dd 3FF00980h, 0
		dd 3FF00940h, 0
		dd 3FF00900h, 0
		dd 3FF008C0h, 0
		dd 3FF00880h, 0
		dd 3FF00840h, 0
		dd 3FF00800h, 0
		dd 3FF007C0h, 0
		dd 3FF00780h, 0
		dd 3FF00740h, 0
		dd 3FF00700h, 0
		dd 3FF006C0h, 0
		dd 3FF00680h, 0
		dd 3FF00640h, 0
		dd 3FF00600h, 0
		dd 3FF005C0h, 0
		dd 3FF00580h, 0
		dd 3FF00540h, 0
		dd 3FF00500h, 0
		dd 3FF004C0h, 0
		dd 3FF00480h, 0
		dd 3FF00440h, 0
		dd 3FF00400h, 0
		dd 3FF003C0h, 0
		dd 3FF00380h, 0
		dd 3FF00340h, 0
		dd 3FF00300h, 0
		dd 3FF002C0h, 0
		dd 3FF00280h, 0
		dd 3FF00240h, 0
		dd 3FF00200h, 0
		dd 3FF001C0h, 0
		dd 3FF00180h, 0
		dd 3FF00140h, 0
		dd 3FF00100h, 0
		dd 3FF000C0h, 0
		dd 3FF00080h, 0
		dd 3FF00040h, 0
		dd 3FF00000h, 2	dup(0)
oword_4266A0	db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
					; DATA XREF: sub_413F09+CDr
		dd 7C800000h, 3F215029h, 0F6306155h, 3D210909h,	0E0000000h
		dd 3F34332Bh, 0E032F41Dh, 3D09518Ch, 60C00000h,	3F3FBE9Fh
		dd 570C3B37h, 3D4AC9BCh, 0A3600000h, 3F45A537h,	6127AF86h
		dd 3D432500h, 0CBC00000h, 3F4B6B4Dh, 0BC9E2AD6h, 3D3C621Fh
		dd 16300000h, 3F5098C9h, 2CAD082Ah, 3D3F7AECh, 64100000h
		dd 3F537C02h, 54A94BBEh, 3D4BDF27h, 0D1000000h,	3F565F52h
		dd 976214ECh, 3D46F089h, 5E700000h, 3F5942BAh, 0FEFAD48Ah
		dd 3D2645F4h, 0DC00000h, 3F5C2639h, 87DFF47Fh, 3D394ECBh
		dd 0E0700000h, 3F5F09CEh, 6245ADDFh, 3D415D32h,	0EBF80000h
		dd 3F60F6BDh, 0D5B7121Ch, 3D492366h, 0FAE00000h, 3F62689Fh
		dd 1790324Fh, 3D336048h, 9DA00000h, 3F63DA8Dh, 0B7973265h
		dd 3D31FE61h, 0D4F00000h, 3F654C86h, 0BF82BE32h, 3D4D5202h
		dd 0A1980000h, 3F66BE8Bh, 1A33F641h, 3D3A5F8Dh,	4400000h
		dd 3F68309Ch, 3283BC5Bh, 3D4F6569h, 0FDB00000h,	3F69A2B7h
		dd 72311CDEh, 3D4B05A0h, 8EA00000h, 3F6B14DFh, 84A38084h
		dd 3D2DA3CEh, 0B7C00000h, 3F6C8712h, 0CCF9E4BCh, 3D385B88h
		dd 79D00000h, 3F6DF951h, 7C1EB13Eh, 3D413857h, 0D5880000h
		dd 3F6F6B9Bh, 71123EC2h, 3D4EB2DDh, 0E5D40000h,	3F706EF8h
		dd 6D01207Ah, 3D4D0D7Bh, 0AE740000h, 3F712829h,	0F52C6D10h
		dd 3D44FE53h, 45000000h, 3F71E160h, 657D9491h, 3D3F031Fh
		dd 0A9D40000h, 3F729A9Ch, 3A7E7DA0h, 3D45D966h,	0DD500000h
		dd 3F7353DEh, 0D5DFD1BFh, 3D418E26h, 0DFD00000h, 3F740D26h
		dd 9AF0262Ch, 3D38DC82h, 0B1B00000h, 3F74C674h,	0B4D165E5h
		dd 3D408E4Eh, 53500000h, 3F757FC8h, 6F3F705Eh, 3D309234h
		dd 0C5080000h, 3F763921h, 0E85711EEh, 3D4E3FA9h, 73C0000h
		dd 3F76F281h, 9023862Bh, 3D4D5947h, 1A480000h, 3F77ABE6h
		dd 80430771h, 3D40C389h, 0FE880000h, 3F786550h,	260B1230h
		dd 3D1F92DBh, 0B4580000h, 3F791EC1h, 0C4B502C5h, 3D150038h
		dd 3C140000h, 3F79D838h, 7B281721h, 3D48CD3Dh, 96200000h
		dd 3F7A91B4h, 472C64BAh, 3D42C11Fh, 0C2D40000h,	3F7B4B36h
		dd 0EAF29DD2h, 3D4D0945h, 0C2940000h, 3F7C04BEh, 8833BE77h
		dd 3D21E731h, 95B40000h, 3F7CBE4Ch, 105EF8BFh, 3D462D58h
		dd 3C980000h, 3F7D77E0h, 9E901C30h, 3D4F8521h, 0B7A00000h
		dd 3F7E3179h, 0AFC4227Ch, 3D3C51FBh, 7240000h, 3F7EEB19h
		dd 896BF3BAh, 3D400766h, 2B840000h, 3F7FA4BEh, 62BA179Ch
		dd 3D435583h, 92900000h, 3F802F34h, 5F4B8D2Ah, 3D2A3CCBh
		dd 9A3C0000h, 3F8074D6h, 8DCC06D5h, 3D490B78h, 320E0000h
		dd 3F80D1B1h, 56CF5977h, 3D2B4125h, 0B4FC0000h,	3F812E8Eh
		dd 732B1F78h, 3D45C237h, 23380000h, 3F818B6Fh, 0EFD365C1h
		dd 3D45669Dh, 7CF00000h, 3F81E852h, 0DE73054Bh,	3D4589B8h
		dd 0C2540000h, 3F824538h, 14103D9Ch, 3D28FAB9h,	0F3900000h
		dd 3F82A221h, 829F58Ah,	3D47DF97h, 10D60000h, 3F82FF0Eh
		dd 0D80E4623h, 3D4B0D87h, 1A560000h, 3F835BFDh,	0D497E17Fh
		dd 3CF61343h, 103A0000h, 3F83B8EFh, 0EF56F96Bh,	3D49F7F4h
		dd 0F2B60000h, 3F8415E3h, 0F817F2FAh, 3D4859D5h, 0C1F80000h
		dd 3F8472DBh, 0E7BF7114h, 3D3B2734h, 7E2E0000h,	3F84CFD6h
		dd 3D1EEBA1h, 3D375390h, 27880000h, 3F852CD4h, 0A8F8BA37h
		dd 3D23A058h, 0BE340000h, 3F8589D4h, 6BDCCA43h,	3D37C2ECh
		dd 42620000h, 3F85E6D8h, 45ACF2C4h, 3D43701Dh, 0B4420000h
		dd 3F8643DEh, 7832AB27h, 3D3D6B19h, 14020000h, 3F86A0E8h
		dd 5557B8CCh, 3D411A9Bh, 6D780000h, 0BF7709C4h,	56CDE924h
		dd 0BD4563BAh, 91CC0000h, 0BF76ADCAh, 5BC6B74Bh, 0BD37A1A0h
		dd 479C0000h, 0BF7651CFh, 6C8B2465h, 0BD461BFAh, 8EE00000h
		dd 0BF75F5D2h, 0D49E79D0h, 0BD48FC8Fh, 678C0000h, 0BF7599D4h
		dd 0C7B88C7Ch, 0BD4925A3h, 0D1940000h, 0BF753DD4h, 33FB2BEh
		dd 0BD4B4606h, 0CCF00000h, 0BF74E1D3h, 71A52753h, 0BD202109h
		dd 598C0000h, 0BF7485D1h, 7C384C12h, 0BD4812A0h, 77640000h
		dd 0BF7429CDh, 9B769BAAh, 0BD4C0723h, 266C0000h, 0BF73CDC8h
		dd 3EA90181h, 0BD44838Ah, 66980000h, 0BF7371C1h, 0C7F77E67h
		dd 0BD288537h, 37D80000h, 0BF7315B9h, 536968Ch,	0BD4575A3h
		dd 9A280000h, 0BF72B9AFh, 1E2E7675h, 0BD2C45E1h, 8D740000h
		dd 0BF725DA4h, 0C38B4CE6h, 0BD4F8176h, 11BC0000h, 0BF720198h
		dd 0D79AC8A3h, 0BD1A700Bh, 26E80000h, 0BF71A58Ah, 22850043h
		dd 0BD46FB35h, 0CCF40000h, 0BF71497Ah, 0DDD3E76Fh, 0BD4F08E7h
		dd 3D40000h, 0BF70ED6Ah, 0FB0FA804h, 0BD4FF2A8h, 0CB7C0000h
		dd 0BF709157h, 0AEC80D04h, 0BD4E2FC0h, 23E00000h, 0BF703544h
		dd 0CFABFF4Fh, 0BD4E332Fh, 19F00000h, 0BF6FB25Eh, 490C8214h
		dd 0BD21AEBEh, 0D600000h, 0BF6EFA31h, 44A21404h, 0BD4543B1h
		dd 22080000h, 0BF6E4201h, 0A197589h, 0BD45215Eh, 57D00000h
		dd 0BF6D89CEh, 2DBEF9DDh, 0BD30CD2Dh, 0AE980000h, 0BF6CD198h
		dd 0EBB44E84h, 0BD4370F2h, 26500000h, 0BF6C1960h, 1180F792h
		dd 0BD4A99C2h, 0BEE80000h, 0BF6B6124h, 0A788B3A9h, 0BD11B04Eh
		dd 78380000h, 0BF6AA8E6h, 40E5BB2h, 0BD3D2D0Dh,	52380000h
		dd 0BF69F0A5h, 7EAE8A79h, 0BD201EAAh, 4CC80000h, 0BF693861h
		dd 0ACD98F5Bh, 0BD2B467Ah, 67D00000h, 0BF68801Ah, 0D3F33C6Bh
		dd 0BD4B3840h, 0A3480000h, 0BF67C7D0h, 0DA83377Dh, 0BD25EC92h
		dd 0FF080000h, 0BF670F83h, 31D4676Dh, 0BD33AB26h, 7B000000h
		dd 0BF665734h, 49B69DFEh, 0BD38FD13h, 17180000h, 0BF659EE2h
		dd 0A44FB97Dh, 0BD41A8BAh, 0D3380000h, 0BF64E68Ch, 0BC5C5FF3h
		dd 0BD4D828Ch, 0AF500000h, 0BF642E34h, 0A8B3C316h, 0BD44361Ah
		dd 0AB400000h, 0BF6375D9h, 0F704DE99h, 0BD49E932h, 0C6F80000h
		dd 0BF62BD7Bh, 0C254B5E3h, 0BD42BD57h, 2600000h, 0BF62051Bh
		dd 72942EE0h, 0BD167DF3h, 5D580000h, 0BF614CB7h, 0C54D36CDh
		dd 0BD3C729Eh, 0D7D00000h, 0BF609450h, 0C63BCDF1h, 0BD490EA5h
		dd 0E3700000h, 0BF5FB7CEh, 0EA0E76A9h, 0BD2D803Ch, 55D00000h
		dd 0BF5E46F6h, 96B4F4D5h, 0BD4D398Bh, 6B00000h,	0BF5CD618h
		dd 0A3058BBDh, 0BD4EA2CCh, 0F5E00000h, 0BF5B6533h, 0A7BBDD88h
		dd 0BD3F3E6Bh, 23200000h, 0BF59F44Ah, 5082614h,	0BD442DDCh
		dd 8E500000h, 0BF58835Ah, 34D8FE6Dh, 0BD404985h, 37400000h
		dd 0BF571265h, 0FD4FCA1Ch, 0BD2FA2A0h, 1DB00000h, 0BF55A16Ah
		dd 9949B49Bh, 0BD4EFD6Ch, 41900000h, 0BF543069h, 0B715781h
		dd 0BD4975AAh, 0A2A00000h, 0BF52BF62h, 6D7C16E7h, 0BD4B3AE8h
		dd 40C00000h, 0BF514E56h, 0C2477C3Fh, 0BD3064BEh, 37600000h
		dd 0BF4FBA88h, 34CEB438h, 0BD20F3D8h, 66800000h, 0BF4CD858h
		dd 0D88C7AA2h, 0BD433742h, 0EA00000h, 0BF49F61Dh, 25223470h
		dd 0BD48F98Bh, 2F600000h, 0BF4713D6h, 0AF53AD3h, 0BD4957C3h
		dd 0C8600000h, 0BF443183h, 1305B92Fh, 0BD48218Dh, 0D9400000h
		dd 0BF414F25h, 0F241B9B9h, 0BD492239h, 0C3800000h, 0BF3CD978h
		dd 36EA2A75h, 0BCD06422h, 0C2800000h, 0BF37148Eh, 47087803h
		dd 0BD40DFE4h, 0AF400000h, 0BF314F8Dh, 284F9CB2h, 0BD3E3BCFh
		dd 11800000h, 0BF2714EBh, 0DD523885h, 0BD4E94D8h, 3B000000h
		dd 0BF171519h, 328B2AFEh, 0BD17D35Dh, 4	dup(0)
qword_426EB0	dq 3FF7154740000000h	; DATA XREF: sub_413F09+115r
					; sub_413F09+11Er
		dd 0C0000000h, 3FF71545h, 40000000h, 3FF71544h,	0
		dd 3FF71543h, 80000000h, 3FF71541h, 0
		dd 3FF71540h, 80000000h, 3FF7153Eh, 40000000h, 3FF7153Dh
		dd 0C0000000h, 3FF7153Bh, 40000000h, 3FF7153Ah,	0C0000000h
		dd 3FF71538h, 80000000h, 3FF71537h, 0
		dd 3FF71536h, 80000000h, 3FF71534h, 0
		dd 3FF71533h, 80000000h, 3FF71531h, 40000000h, 3FF71530h
		dd 0C0000000h, 3FF7152Eh, 40000000h, 3FF7152Dh,	0C0000000h
		dd 3FF7152Bh, 80000000h, 3FF7152Ah, 0
		dd 3FF71529h, 80000000h, 3FF71527h, 0
		dd 3FF71526h, 0C0000000h, 3FF71524h, 40000000h,	3FF71523h
		dd 0C0000000h, 3FF71521h, 40000000h, 3FF71520h,	0C0000000h
		dd 3FF7151Eh, 80000000h, 3FF7151Dh, 0
		dd 3FF7151Ch, 80000000h, 3FF7151Ah, 0
		dd 3FF71519h, 0C0000000h, 3FF71517h, 40000000h,	3FF71516h
		dd 0C0000000h, 3FF71514h, 40000000h, 3FF71513h,	0C0000000h
		dd 3FF71511h, 80000000h, 3FF71510h, 0
		dd 3FF7150Fh, 80000000h, 3FF7150Dh, 0
		dd 3FF7150Ch, 0C0000000h, 3FF7150Ah, 40000000h,	3FF71509h
		dd 0C0000000h, 3FF71507h, 40000000h, 3FF71506h,	0
		dd 3FF71505h, 80000000h, 3FF71503h, 0
		dd 3FF71502h, 80000000h, 3FF71500h, 0
		dd 3FF714FFh, 0C0000000h, 3FF714FDh, 40000000h,	3FF714FCh
		dd 0C0000000h, 3FF714FAh, 40000000h, 3FF714F9h,	0
		dd 3FF714F8h, 80000000h, 3FF714F6h, 0
		dd 3FF714F5h, 80000000h, 3FF714F3h, 40000000h, 3FF714F2h
		dd 0C0000000h, 3FF714F0h, 40000000h, 3FF714EFh,	0C0000000h
		dd 3FF714EDh, 40000000h, 3FF714ECh, 0
		dd 3FF714EBh, 80000000h, 3FF714E9h, 0
		dd 3FF714E8h, 80000000h, 3FF714E6h, 40000000h, 3FF714E5h
		dd 0C0000000h, 3FF714E3h, 40000000h, 3FF714E2h,	0C0000000h
		dd 3FF714E0h, 80000000h, 3FF714DFh, 0
		dd 3FF714DEh, 80000000h, 3FF714DCh, 0
		dd 3FF714DBh, 80000000h, 3FF714D9h, 40000000h, 3FF714D8h
		dd 0C0000000h, 3FF714D6h, 40000000h, 3FF714D5h,	0C0000000h
		dd 3FF714D3h, 80000000h, 3FF714D2h, 0
		dd 3FF714D1h, 80000000h, 3FF714CFh, 0
		dd 3FF714CEh, 0C0000000h, 3FF714CCh, 40000000h,	3FF714CBh
		dd 0C0000000h, 3FF714C9h, 40000000h, 3FF714C8h,	0C0000000h
		dd 3FF714C6h, 80000000h, 3FF714C5h, 0
		dd 3FF714C4h, 80000000h, 3FF714C2h, 0
		dd 3FF714C1h, 0C0000000h, 3FF714BFh, 40000000h,	3FF714BEh
		dd 0C0000000h, 3FF714BCh, 40000000h, 3FF714BBh,	0
		dd 3FF714BAh, 80000000h, 3FF714B8h, 0
		dd 3FF714B7h, 80000000h, 3FF714B5h, 0
		dd 3FF714B4h, 0C0000000h, 3FF714B2h, 40000000h,	3FF714B1h
		dd 0C0000000h, 3FF714AFh, 40000000h, 3FF714AEh,	0
		dd 3FF714ADh, 80000000h, 3FF714ABh, 0
		dd 3FF714AAh, 80000000h, 3FF714A8h, 40000000h, 3FF714A7h
		dd 0C0000000h, 3FF714A5h, 40000000h, 3FF714A4h,	0C0000000h
		dd 3FF714A2h, 40000000h, 3FF714A1h, 0
		dd 3FF714A0h, 80000000h, 3FF7149Eh, 0
		dd 3FF7149Dh, 80000000h, 3FF7149Bh, 40000000h, 3FF7149Ah
		dd 0C0000000h, 3FF71498h, 40000000h, 3FF71497h,	0C0000000h
		dd 3FF71495h, 80000000h, 3FF71494h, 0
		dd 3FF71493h, 80000000h, 3FF71491h, 0
		dd 3FF71490h, 80000000h, 3FF715A3h, 0C0000000h,	3FF715A2h
		dd 40000000h, 3FF715A2h, 80000000h, 3FF715A1h, 0C0000000h
		dd 3FF715A0h, 0
		dd 3FF715A0h, 40000000h, 3FF7159Fh, 80000000h, 3FF7159Eh
		dd 0C0000000h, 3FF7159Dh, 0
		dd 3FF7159Dh, 40000000h, 3FF7159Ch, 0C0000000h,	3FF7159Bh
		dd 0
		dd 3FF7159Bh, 40000000h, 3FF7159Ah, 80000000h, 3FF71599h
		dd 0C0000000h, 3FF71598h, 0
		dd 3FF71598h, 40000000h, 3FF71597h, 80000000h, 3FF71596h
		dd 0
		dd 3FF71596h, 40000000h, 3FF71595h, 80000000h, 3FF71594h
		dd 0C0000000h, 3FF71593h, 0
		dd 3FF71593h, 40000000h, 3FF71592h, 80000000h, 3FF71591h
		dd 0C0000000h, 3FF71590h, 0
		dd 3FF71590h, 80000000h, 3FF7158Fh, 0C0000000h,	3FF7158Eh
		dd 0
		dd 3FF7158Eh, 40000000h, 3FF7158Dh, 80000000h, 3FF7158Ch
		dd 0C0000000h, 3FF7158Bh, 0
		dd 3FF7158Bh, 40000000h, 3FF7158Ah, 80000000h, 3FF71589h
		dd 0
		dd 3FF71589h, 40000000h, 3FF71588h, 80000000h, 3FF71587h
		dd 0C0000000h, 3FF71586h, 0
		dd 3FF71586h, 40000000h, 3FF71585h, 80000000h, 3FF71584h
		dd 0C0000000h, 3FF71583h, 0
		dd 3FF71583h, 80000000h, 3FF71582h, 0C0000000h,	3FF71581h
		dd 0
		dd 3FF71581h, 40000000h, 3FF71580h, 80000000h, 3FF7157Fh
		dd 0C0000000h, 3FF7157Eh, 0
		dd 3FF7157Eh, 40000000h, 3FF7157Dh, 0C0000000h,	3FF7157Ch
		dd 0
		dd 3FF7157Ch, 40000000h, 3FF7157Bh, 80000000h, 3FF7157Ah
		dd 0C0000000h, 3FF71579h, 0
		dd 3FF71579h, 40000000h, 3FF71578h, 80000000h, 3FF71577h
		dd 0C0000000h, 3FF71576h, 40000000h, 3FF71576h,	80000000h
		dd 3FF71575h, 0C0000000h, 3FF71574h, 0
		dd 3FF71574h, 40000000h, 3FF71573h, 80000000h, 3FF71572h
		dd 0C0000000h, 3FF71571h, 0
		dd 3FF71571h, 40000000h, 3FF71570h, 0C0000000h,	3FF7156Fh
		dd 0
		dd 3FF7156Fh, 40000000h, 3FF7156Eh, 80000000h, 3FF7156Dh
		dd 0C0000000h, 3FF7156Ch, 0
		dd 3FF7156Ch, 40000000h, 3FF7156Bh, 80000000h, 3FF7156Ah
		dd 0
		dd 3FF7156Ah, 40000000h, 3FF71569h, 80000000h, 3FF71568h
		dd 0C0000000h, 3FF71567h, 0
		dd 3FF71567h, 40000000h, 3FF71566h, 80000000h, 3FF71565h
		dd 0C0000000h, 3FF71564h, 0
		dd 3FF71564h, 80000000h, 3FF71563h, 0C0000000h,	3FF71562h
		dd 0
		dd 3FF71562h, 40000000h, 3FF71561h, 80000000h, 3FF71560h
		dd 0C0000000h, 3FF7155Fh, 0
		dd 3FF7155Fh, 40000000h, 3FF7155Eh, 80000000h, 3FF7155Dh
		dd 0
		dd 3FF7155Dh, 40000000h, 3FF7155Ch, 80000000h, 3FF7155Bh
		dd 0C0000000h, 3FF7155Ah, 0
		dd 3FF7155Ah, 40000000h, 3FF71559h, 80000000h, 3FF71558h
		dd 0C0000000h, 3FF71557h, 0
		dd 3FF71557h, 80000000h, 3FF71556h, 0C0000000h,	3FF71555h
		dd 0
		dd 3FF71555h, 40000000h, 3FF71554h, 80000000h, 3FF71553h
		dd 0C0000000h, 3FF71552h, 0
		dd 3FF71552h, 40000000h, 3FF71551h, 0C0000000h,	3FF71550h
		dd 0
		dd 3FF71550h, 40000000h, 3FF7154Fh, 80000000h, 3FF7154Eh
		dd 0C0000000h, 3FF7154Dh, 0
		dd 3FF7154Dh, 40000000h, 3FF7154Ch, 80000000h, 3FF7154Bh
		dd 0C0000000h, 3FF7154Ah, 40000000h, 3FF7154Ah,	80000000h
		dd 3FF71549h, 0C0000000h, 3FF71548h, 0
		dd 3FF71548h, 40000000h, 3FF71547h, 2 dup(0)
oword_4276C0	db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
					; DATA XREF: sub_413F09+127r
		dd 0C0000000h, 3EB80000h, 9BE959h, 3D4722F0h, 0A0000000h
		dd 3EC80001h, 6CB6DC2Eh, 3D45E657h, 0A0000000h,	3ED10001h
		dd 0A98BDB6Ah, 3D480762h, 0
		dd 3ED70003h, 495EC799h, 3D231A4Ch, 0B0000000h,	3EDD0004h
		dd 6928CDA3h, 3D492684h, 68000000h, 3EE18003h, 9FDDE667h
		dd 3D452750h, 70000000h, 3EE40004h, 292AE6DAh, 3D44FBD1h
		dd 0D8000000h, 3EE70005h, 0B226FD03h, 3D4EF91Ch, 78000000h
		dd 3EEA0007h, 9DC43B2Eh, 3D40978Ch, 48000000h, 3EED0009h
		dd 0BBE97951h, 3D33AE75h, 0F0000000h, 3EEF800Ah, 0A1639C05h
		dd 3D2D81B9h, 8C000000h, 3EF14006h, 0A1DD8452h,	3D3D3AA4h
		dd 0B8000000h, 3EF2C007h, 110BFB09h, 3D4D7BBEh,	0
		dd 3EF44009h, 9AB61086h, 3D43FBCBh, 60000000h, 3EF5C00Ah
		dd 0DFF79062h, 3D421D94h, 98000000h, 3EF7000Bh,	647408A2h
		dd 3D43B8E9h, 24000000h, 3EF8800Dh, 39E1FDD4h, 3D4FD8CEh
		dd 0CC000000h, 3EFA000Eh, 4E20BC42h, 3D439AB8h,	8C000000h
		dd 3EFB8010h, 269C6AC2h, 3D3DFD83h, 14000000h, 3EFCC012h
		dd 0CD8004E0h, 3D3CA32Eh, 0
		dd 3EFE4014h, 936C6005h, 3D47B472h, 8000000h, 3EFFC016h
		dd 0E8EF8E21h, 3D31736Ch, 14000000h, 3F00A00Ch,	0C138CCABh
		dd 3D0617CFh, 0FE000000h, 3F01400Ch, 0D620108Ah, 3D4E6D11h
		dd 26000000h, 3F02000Eh, 7455B88Dh, 3D245182h, 58000000h
		dd 3F02C00Fh, 8E426950h, 3D435E7Bh, 98000000h, 3F038010h
		dd 37D77647h, 3D3296F9h, 0E4000000h, 3F044011h,	0E16CAE71h
		dd 3D2B6DF6h, 2000000h,	3F04E013h, 6A2EA421h, 3D2FF937h
		dd 64000000h, 3F05A014h, 204C10D2h, 3D438EBDh, 0D4000000h
		dd 3F066015h, 0E2FC6DEBh, 3D2B09D7h, 50000000h,	3F072017h
		dd 641F4F35h, 3D099925h, 96000000h, 3F07C018h, 0F07288E3h
		dd 3CEDFBF4h, 28000000h, 3F08801Ah, 6748CA2Ah, 3D32A061h
		dd 0C6000000h, 3F09401Bh, 9CBA43ABh, 3D49CC1Eh,	72000000h
		dd 3F0A001Dh, 8173F5DBh, 3D41EBD3h, 2A000000h, 3F0AC01Fh
		dd 54471A92h, 3D41AF69h, 0A2000000h, 3F0B6020h,	0D59F4B89h
		dd 3D44A88Bh, 72000000h, 3F0C2022h, 0B27044E6h,	3D137160h
		dd 4C000000h, 3F0CE024h, 0C97EF2FCh, 3D47D7F6h,	34000000h
		dd 3F0DA026h, 0E1BB0DB2h, 3D44E605h, 0D4000000h, 3F0E4027h
		dd 17D4EBCFh, 3D459D84h, 0D4000000h, 3F0F0029h,	5F05027h
		dd 3CF5CA7Fh, 0DE000000h, 3F0FC02Bh, 0C234F566h, 3D4363B1h
		dd 0FB000000h, 3F104016h, 0D1035771h, 3D3B7B6Eh, 0DF000000h
		dd 3F109017h, 204367EFh, 3D38699Eh, 0F6000000h,	3F10F018h
		dd 0D9581118h, 3D44924Bh, 14000000h, 3F11501Ah,	0EB13B47h
		dd 3D2252E8h, 37000000h, 3F11B01Bh, 81CE38A0h, 3D4C3C33h
		dd 61000000h, 3F12101Ch, 4672A90Dh, 3D4B88D2h, 5E000000h
		dd 3F12601Dh, 55055FEFh, 3D4E1FC9h, 94000000h, 3F12C01Eh
		dd 547F3BC2h, 3D36E18Ah, 0D0000000h, 3F13201Fh,	0C6119AD4h
		dd 3CE9CBF2h, 11000000h, 3F138021h, 2A579871h, 3D4D0323h
		dd 22000000h, 3F13D022h, 0AB96AA1h, 3D4D5C82h, 70000000h
		dd 3F143023h, 5A37497Ch, 3D2FF623h, 0C3000000h,	3F149024h
		dd 0E61BB95Eh, 3D4A4461h, 1D000000h, 3F14F026h,	2C3EC2F0h
		dd 3D443127h, 42000000h, 3F154027h, 9E3A8113h, 3D424E2Bh
		dd 0A7000000h, 3F15A028h, 0AD7A3180h, 3D4A40BAh, 13000000h
		dd 3F16002Ah, 0F1B1988Bh, 3D33B2FEh, 85000000h,	3F16602Bh
		dd 34559377h, 3D01893Fh, 0FC000000h, 3F16C02Ch,	0FB3EF44h
		dd 3D4FFE12h, 3B000000h, 3F17102Eh, 0C162D124h,	3D120082h
		dd 0BE000000h, 3F17702Fh, 5B282967h, 3D3E587Ch,	48000000h
		dd 3F17D031h, 56673EACh, 3D1DF8F9h, 0D7000000h,	3F183032h
		dd 42DE4F13h, 3D4FF8CDh, 2A000000h, 3F188034h, 4915062h
		dd 3C83F841h, 0C5000000h, 3F18E035h, 65AD0E81h,	3D3484A7h
		dd 66000000h, 3F194037h, 827B5B7Ch, 3D4C2A7Eh, 0E000000h
		dd 3F19A039h, 0E619A5FEh, 3D45B9D9h, 74000000h,	3F19F03Ah
		dd 0E2D65D47h, 3D4389FDh, 27000000h, 3F1A503Ch,	0BB6D7BCCh
		dd 3D4B2175h, 0E1000000h, 3F1AB03Dh, 5C760A80h,	3D34C0CFh
		dd 0A1000000h, 3F1B103Fh, 0E6D3E9A5h, 3D046EDAh, 66000000h
		dd 3F1B7041h, 0AF377BFCh, 3D4FD521h, 0E6000000h, 3F1BC042h
		dd 0E6AB1BFDh, 3D0CF59Fh, 0B7000000h, 3F1C2044h, 0CC753DB5h
		dd 3D3CCD20h, 8F000000h, 3F1C8046h, 0A92669CCh,	3D152DF2h
		dd 6C000000h, 3F1CE048h, 0BE6FF5D7h, 3D4E8CFDh,	0FF000000h
		dd 3F1D3049h, 37245449h, 3D4E51B6h, 0E9000000h,	3F1D904Bh
		dd 0CDDA9DD0h, 3D30855Ch, 0D8000000h, 3F1DF04Dh, 97D07430h
		dd 3D49DC01h, 0CE000000h, 3F1E504Fh, 0BD27E20Ah, 3D431DC9h
		dd 75000000h, 3F1EA051h, 2534FEA4h, 3D40AE40h, 76000000h
		dd 3F1F0053h, 710AAD2Ah, 3D47FA77h, 7E000000h, 3F1F6055h
		dd 0E113204Bh, 3D2BBDB4h, 8B000000h, 3F1FC057h,	6E50D246h
		dd 3D4D8D3Bh, 0CF800000h, 3F20102Ch, 6A15DE9h, 3D4BD3FCh
		dd 0AF800000h, 3F20382Dh, 498EC6C9h, 3D4D93A1h,	0BF800000h
		dd 3F20682Eh, 0F935A7F0h, 3D33CB6Dh, 0D2000000h, 3F20982Fh
		dd 9920CFDAh, 3D4DE108h, 0E8000000h, 3F20C830h,	12A6B1ACh
		dd 3D4985B0h, 0D2000000h, 3F20F031h, 0B9BA2290h, 3D4913E1h
		dd 0EE000000h, 3F212032h, 7980EDBCh, 3D1624A5h,	0C800000h
		dd 3F215034h, 9125FF3h,	3D441EE7h, 2E800000h, 3F218035h
		dd 75F48B5Dh, 3D3A45E5h, 22800000h, 3F21A836h, 1E238A6Ch
		dd 3D3501DDh, 4A000000h, 3F21D837h, 1EA6AA2Ch, 3D4191BCh
		dd 75000000h, 3F220838h, 7921F7B0h, 3CE32323h, 0A2800000h
		dd 3F223839h, 0D0781FF4h, 3D46B179h, 0D3800000h, 3F22683Ah
		dd 0DA134362h, 3D44C09Dh, 0D4000000h, 3F22903Bh, 1DE50175h
		dd 3D4652E3h, 0B000000h, 3F22C03Dh, 0DCD68A32h,	3D137D77h
		dd 44800000h, 3F22F03Eh, 2840CC02h, 3D4636FBh, 81800000h
		dd 3F23203Fh, 979C27F4h, 3D41A8E1h, 8C000000h, 3F234840h
		dd 84163334h, 3D410DBFh, 0CE800000h, 3F237841h,	2A7D4E75h
		dd 3D4A8E04h, 14800000h, 3F23A843h, 3772BE29h, 3D377259h
		dd 5D800000h, 3F23D844h, 2E8C031Dh, 3D223D4Bh, 72000000h
		dd 3F240045h, 0CA9DAD06h, 3D0C8072h, 0C0800000h, 3F243046h
		dd 0EE313D33h, 3D315A83h, 12000000h, 3F246048h,	88B7C68h
		dd 3D473DC4h, 67000000h, 3F249049h, 0A9DCEAE1h,	3D3AF34Eh
		dd 0BF000000h, 3F24C04Ah, 0A0653485h, 3D36C20Bh, 0E0000000h
		dd 3F24E84Bh, 847BE3FFh, 3D39A63Ch, 3D800000h, 3F25184Dh
		dd 50A55975h, 3D48CA77h, 9E800000h, 3F25484Eh, 2D1381BBh
		dd 3D38DB2Ah, 2800000h,	3F257850h, 1FBE7983h, 3D2EF246h
		dd 2D800000h, 3F25A051h, 0C40C395Ch, 3D2C153Bh,	97000000h
		dd 3F25D052h, 5A39C232h, 3D4064FCh, 4000000h, 3F260054h
		dd 7C4B597Eh, 3D070D1Fh, 73800000h, 3F263055h, 0BDBBC457h
		dd 3D4A28E9h, 0A8800000h, 3F265856h, 0ECC252F3h, 3D474989h
		dd 1E000000h, 3F268858h, 0FC01D57h, 3D4E1309h, 97000000h
		dd 3F26B859h, 0C8678403h, 3D391227h, 13000000h,	3F26E85Bh
		dd 0F244140Dh, 3D155E22h, 10000000h, 0BF170FD2h, 29329AEEh
		dd 0BD24CAA4h, 0CE000000h, 0BF16DFD2h, 8562DC37h, 0BD4CB96Dh
		dd 4D000000h, 0BF16BFD3h, 9B9DBFB8h, 0BD2813E1h, 9000000h
		dd 0BF168FD4h, 53011CC5h, 0BD34C1A4h, 0C3000000h, 0BF165FD4h
		dd 0C43E09BCh, 0BD4CD61Ah, 7C000000h, 0BF162FD5h, 0F90CA8BAh
		dd 0BD4D64CEh, 34000000h, 0BF15FFD6h, 13B1C267h, 0BD3819D7h
		dd 0EA000000h, 0BF15CFD6h, 711DB032h, 0BD319CDAh, 9E000000h
		dd 0BF159FD7h, 0C71A6171h, 0BD43A950h, 51000000h, 0BF156FD8h
		dd 0EECE00B9h, 0BD393B25h, 2000000h, 0BF153FD9h, 8B5FE712h
		dd 0BD43AB30h, 77000000h, 0BF151FD9h, 36256734h, 0BD4CA5E7h
		dd 26000000h, 0BF14EFDAh, 3B9C924Dh, 0BD40886Bh, 0D3000000h
		dd 0BF14BFDAh, 0FF31AA38h, 0BD428441h, 7F000000h, 0BF148FDBh
		dd 1675C431h, 0BD14CB42h, 29000000h, 0BF145FDCh, 0BAEBB8Dh
		dd 0BCF8FB59h, 0D1000000h, 0BF142FDCh, 0A38E93F3h, 0BD3A1F2Ch
		dd 78000000h, 0BF13FFDDh, 83D52ED1h, 0BD2DC25Eh, 1D000000h
		dd 0BF13CFDEh, 0EFA081F3h, 0BD3FD5B6h, 8A000000h, 0BF13AFDEh
		dd 0D4F2BF07h, 0BD49D89Dh, 2D000000h, 0BF137FDFh, 5D3A13B4h
		dd 0BD3E4F3Dh, 0CE000000h
		dd 0BF134FDFh, 6A5F7723h, 0BD428FD9h, 6E000000h, 0BF131FE0h
		dd 288690A5h, 0BD20452Bh, 0C000000h, 0BF12EFE1h, 7E56EA2Dh
		dd 0BD1D5F7Ch, 0A8000000h, 0BF12BFE1h, 7D421DEBh, 0BD415FC4h
		dd 43000000h, 0BF128FE2h, 0A8DC214Bh, 0BD3A598Ch, 0DC000000h
		dd 0BF125FE2h, 0D7350F14h, 0BD4712F1h, 74000000h, 0BF122FE3h
		dd 8EFA43E1h, 0BD3E2487h, 0D8000000h, 0BF120FE3h, 0EE23F9F0h
		dd 0BD48ADFFh, 6D000000h, 0BF11DFE4h, 0AEC2D96h, 0BD4D81E0h
		dd 1000000h, 0BF11AFE5h, 0EF9956B1h, 0BD406EDDh, 93000000h
		dd 0BF117FE5h, 5E105551h, 0BD4174F6h, 24000000h, 0BF114FE6h
		dd 6B71311h, 0BCF284C3h, 0B2000000h, 0BF111FE6h, 0DFEDBEC3h
		dd 0BD4DCC69h, 40000000h, 0BF10EFE7h, 0EE38AA4Bh, 0BD323B7Ch
		dd 0CC000000h, 0BF10BFE7h, 0FD28C140h, 0BD144104h, 56000000h
		dd 0BF108FE8h, 36D6A695h, 0BD34171Ah, 0B1000000h, 0BF106FE8h
		dd 0ACEA06CDh, 0BD4354A0h, 39000000h, 0BF103FE9h, 0FAE67526h
		dd 0BD2EB1B1h, 0BF000000h, 0BF100FE9h, 0FC467E03h, 0BD343A73h
		dd 86000000h, 0BF0FBFD4h, 0ED090ECAh, 0BD4AA705h, 8C000000h
		dd 0BF0F5FD5h, 0D4CDE8Eh, 0BD4949CDh, 90000000h, 0BF0EFFD6h
		dd 8340BD3Dh, 0BD281630h, 90000000h, 0BF0E9FD7h, 2E8624A6h
		dd 0BCFB47FDh, 8C000000h, 0BF0E3FD8h, 5233867Dh, 0BD338FCAh
		dd 86000000h, 0BF0DDFD9h, 342E7C21h, 0BCF9CF14h, 2A000000h
		dd 0BF0D9FDAh, 7D84B6E0h, 0BD338882h, 1E000000h, 0BF0D3FDBh
		dd 6D6A2247h, 0BD3B3E0Ah, 0E000000h, 0BF0CDFDCh, 0C1DF2A86h
		dd 0BD4F92AEh, 0FC000000h, 0BF0C7FDCh, 0A2200D30h, 0BD4F9F3Ah
		dd 0E8000000h, 0BF0C1FDDh, 32AD9B9Fh, 0BD3B894Bh, 0D0000000h
		dd 0BF0BBFDEh, 0D2C46051h, 0BD3405D8h, 0B4000000h, 0BF0B5FDFh
		dd 0D420A715h, 0BD445A0Bh, 96000000h, 0BF0AFFE0h, 36E0A90Fh
		dd 0BD399401h, 2A000000h, 0BF0ABFE1h, 0F2AF86BBh, 0BD46B0A6h
		dd 6000000h, 0BF0A5FE2h, 0CA335408h, 0BD4BF4A2h, 0E0000000h
		dd 0BF09FFE2h, 0B12E4D93h, 0BD3EA2D6h, 0B6000000h, 0BF099FE3h
		dd 5FB7F840h, 0BD40C6FDh, 8A000000h, 0BF093FE4h, 5C9C3116h
		dd 0BCE55568h, 58000000h, 0BF08DFE5h, 0DFA2E7C3h, 0BD4DFC70h
		dd 26000000h, 0BF087FE6h, 0B84AC785h, 0BD337897h, 0F0000000h
		dd 0BF081FE6h, 0C6ACD2D7h, 0BD1CA71Ah, 0B6000000h, 0BF07BFE7h
		dd 2F1DE078h, 0BD370C68h, 38000000h, 0BF077FE8h, 76C79D4Ch
		dd 0BD45185Dh, 0FA000000h, 0BF071FE8h, 0DD985699h, 0BD33BB0Ch
		dd 0B8000000h, 0BF06BFE9h, 642B301h, 0BD3976C0h, 72000000h
		dd 0BF065FEAh, 0F5A163E7h, 0BD4DB1E6h, 2A000000h, 0BF05FFEBh
		dd 8263596h, 0BD4CC118h, 0E0000000h, 0BF059FEBh, 0F912D171h
		dd 0BD33D1DFh, 92000000h, 0BF053FECh, 52911A3Ah, 0BD24A5AEh
		dd 40000000h, 0BF04DFEDh, 249F8EDCh, 0BD3D050Fh, 0EC000000h
		dd 0BF047FEDh, 0DD924B0Eh, 0BD27D102h, 5C000000h, 0BF043FEEh
		dd 7BAAD081h, 0BD3E6295h, 2000000h, 0BF03DFEFh,	4524F2A0h
		dd 0BD4376ADh, 0A6000000h, 0BF037FEFh, 3877E949h, 0BD275291h
		dd 46000000h, 0BF031FF0h, 6A5FF847h, 0BD292CB2h, 0E2000000h
		dd 0BF02BFF0h, 0EC6A2BAEh, 0BD44DA42h, 7C000000h, 0BF025FF1h
		dd 56B600Bh, 0BD4181E4h, 12000000h, 0BF01FFF2h,	0A7722725h
		dd 0BD4C420Ch, 0A6000000h, 0BF019FF2h, 9454BC09h, 0BD451AB9h
		dd 6000000h, 0BF015FF3h, 0FAC61211h, 0BD4F4702h, 96000000h
		dd 0BF00FFF3h, 691E23E3h, 0BD23CCBFh, 20000000h, 0BF009FF4h
		dd 5EDE8A3Bh, 0BD48B7D8h, 0A8000000h, 0BF003FF4h, 4A602836h
		dd 0BD4A94F9h, 5C000000h, 0BEFFBFEAh, 0BD4248B6h, 0BD35151Eh
		dd 60000000h, 0BEFEFFEBh, 0BAEBDE60h, 0BD31312Eh, 5C000000h
		dd 0BEFE3FECh, 8B2A851h, 0BD44BF0Eh, 54000000h,	0BEFD7FEDh
		dd 44563CDDh, 0BD3DFBE0h, 44000000h, 0BEFCBFEEh, 6BB2CF4Dh
		dd 0BD47553Ah, 0E4000000h, 0BEFC3FEEh, 2C9E1514h, 0BD02B327h
		dd 0C8000000h, 0BEFB7FEFh, 0D79568B8h, 0BD4655CDh, 0A8000000h
		dd 0BEFABFF0h, 0C6A29955h, 0BD4998C8h, 84000000h, 0BEF9FFF1h
		dd 3879074h, 0BD35E840h, 58000000h, 0BEF93FF2h,	9595F318h
		dd 0BD34CFA0h, 24000000h, 0BEF87FF3h, 6389E086h, 0BD47F3D6h
		dd 0EC000000h, 0BEF7BFF3h, 0DD1DF79h, 0BD43982Fh, 0AC000000h
		dd 0BEF6FFF4h, 0B7407C7h, 0BD4D54D7h, 68000000h, 0BEF63FF5h
		dd 1E4119E9h, 0BD4529CBh, 0E0000000h, 0BEF5BFF5h, 63B0E57Ah
		dd 0BD4EA8CFh, 94000000h, 0BEF4FFF6h, 0D1F9867Bh, 0BD1A872Dh
		dd 3C000000h, 0BEF43FF7h, 80238647h, 0BD46113Fh, 0E0000000h
		dd 0BEF37FF7h, 772D7DA6h, 0BD46E9D9h, 80000000h, 0BEF2BFF8h
		dd 84B1770Ch, 0BD276AC1h, 18000000h, 0BEF1FFF9h, 0FF78E451h
		dd 0BD171E07h, 0A8000000h, 0BEF13FF9h, 2A88BDF6h, 0BD3C0A10h
		dd 34000000h, 0BEF07FFAh, 8BE9E4A8h, 0BD2CFA09h, 70000000h
		dd 0BEEF7FF5h, 55BEDC7Eh, 0BD3D2059h, 18000000h, 0BEEE7FF6h
		dd 0CBD1C3D4h, 0BD47B79Ah, 10000000h, 0BEECFFF7h, 0FF9B8582h
		dd 0BD37B870h, 0F8000000h, 0BEEB7FF7h, 1038DD6Dh, 0BD3C31FBh
		dd 0D0000000h, 0BEE9FFF8h, 0A68AA227h, 0BD4E6DE6h, 0A0000000h
		dd 0BEE87FF9h, 9CE4E699h, 0BD4CDAF0h, 68000000h, 0BEE6FFFAh
		dd 59EEE94Bh, 0BD32C030h, 20000000h, 0BEE57FFBh, 0C4719FCCh
		dd 0BD1FEAD0h, 0C8000000h, 0BEE3FFFBh, 42E976ADh, 0BD396566h
		dd 30000000h, 0BEE2FFFCh, 9DB21925h, 0BD46C732h, 0C8000000h
		dd 0BEE17FFCh, 4517A5CEh, 0BD389EABh, 0A0000000h, 0BEDFFFFAh
		dd 3DA560D7h, 0BD3FDF0Eh, 0A0000000h, 0BEDCFFFBh, 4511FBCBh
		dd 0BD0A7C3Dh, 80000000h, 0BED9FFFCh, 4D13DF75h, 0BD078088h
		dd 40000000h, 0BED6FFFDh, 0E439AE99h, 0BD3EC0A3h, 0F0000000h
		dd 0BED3FFFDh, 0BBFACE01h, 0BD36C139h, 80000000h, 0BED0FFFEh
		dd 0A3C176Bh, 0BD4578E6h, 0
		dd 0BECBFFFEh, 714383F2h, 0BD3B5254h, 80000000h, 0BEC7FFFEh
		dd 85E2F8BBh, 0BD4764E1h, 20000000h, 0BEC1FFFFh, 0D84712A6h
		dd 0BD4C67C0h, 40000000h, 0BEB7FFFFh, 0DD0685Fh, 0BD3F0525h
		dd 80000000h, 0BEA7FFFFh, 538E0E0Ch, 0BD40B553h, 4 dup(0)
oword_4286D0	db 16h,	0B8h, 0B3h, 62h, 0D4h, 7Fh, 0C4h, 3Fh, 0EEh, 57h
					; DATA XREF: sub_413F09+211r
		db 64h,	96h, 0A6h, 0C3h, 79h, 3Eh
oword_4286E0	db 63h,	0B4h, 8Bh, 2Ah,	47h, 50h, 0B5h,	0BFh, 7, 41h, 69h
					; DATA XREF: sub_413F09+225r
		db 46h,	43h, 2Eh, 0D6h,	0BFh
oword_4286F0	db 0, 0, 0, 0, 0, 0, 0F0h, 3Fh,	0, 0, 0, 0, 0, 0, 0, 0
					; DATA XREF: sub_413F09+290r
					; sub_413F09+88Cr
		dd 0A9FB3335h, 3FF0163Dh, 9AB8CDB7h, 3C9B6129h,	3E778061h
		dd 3FF02C9Ah, 535B085Dh, 0BC719083h, 0E86E7F85h, 3FF04315h
		dd 1977C96Eh, 0BC90A31Ch, 0D3158574h, 3FF059B0h, 0A475B465h
		dd 3C8D73E2h, 29DDF6DEh, 3FF0706Bh, 0E2B13C26h,	0BC8C91DFh
		dd 18759BC8h, 3FF08745h, 4BB284FFh, 3C6186BEh, 0CAC6F383h
		dd 3FF09E3Eh, 18316135h, 3C914878h, 6CF9890Fh, 3FF0B558h
		dd 4ADC610Ah, 3C98A62Eh, 2B7247F7h, 3FF0CC92h, 16E24F71h
		dd 3C901EDCh, 32D3D1A2h, 3FF0E3ECh, 27C57B52h, 3C403A17h
		dd 0AFFED31Bh, 3FF0FB66h, 0C44EBD7Bh, 0BC6B9BEDh, 0D0125B51h
		dd 3FF11301h, 39449B39h, 0BC96C510h, 0C06C31CCh, 3FF12ABDh
		dd 0B36CA5C7h, 0BC51B514h, 0AEA92DE0h, 3FF1429Ah, 9AF1369Eh
		dd 0BC932FBFh, 0C8A58E51h, 3FF15A98h, 0B9EEAB09h, 3C82406Ah
		dd 3C7D517Bh, 3FF172B8h, 0B9D78A75h, 0BC819041h, 388C8DEAh
		dd 3FF18AF9h, 0D1970F6Bh, 0BC911023h, 0EB6FCB75h, 3FF1A35Bh
		dd 7B4968E4h, 3C8E5B4Ch, 84045CD4h, 3FF1BBE0h, 352EF607h
		dd 0BC995386h, 3168B9AAh, 3FF1D487h, 0A2643Ch, 3C9E016Eh
		dd 22FCD91Dh, 3FF1ED50h, 27BB78Bh, 0BC91DF98h, 88628CD6h
		dd 3FF2063Bh, 814A8494h, 3C8DC775h, 917DDC96h, 3FF21F49h
		dd 9494A5EDh, 3C82A97Eh, 6E756238h, 3FF2387Ah, 0B6C70572h
		dd 3C99B07Eh, 4FB2A63Fh, 3FF251CEh, 0BEF4F4A4h,	3C8AC155h
		dd 65E27CDDh, 3FF26B45h, 9940E9D9h, 3C82BD33h, 0E1F56381h
		dd 3FF284DFh, 8C3F0D7Dh, 0BC9A4C3Ah, 0F51FDEE1h, 3FF29E9Dh
		dd 0AFAD1255h, 3C8612E8h, 0D0DAD990h, 3FF2B87Fh, 0D6381AA3h
		dd 0BC410ADCh, 0A6E4030Bh, 3FF2D285h, 54DB41D4h, 3C900247h
		dd 0A93E2F56h, 3FF2ECAFh, 45D52383h, 3C71CA0Fh,	0A31B715h
		dd 3FF306FEh, 0D23182E4h, 3C86F46Ah, 0FC4CD831h, 3FF32170h
		dd 8E18047Ch, 3C8A9CE7h, 0B26416FFh, 3FF33C08h,	843659A5h
		dd 3C932721h, 5F929FF1h, 3FF356C5h, 5C4E4628h, 0BC8B5CEEh
		dd 373AA9CBh, 3FF371A7h, 0BF42EAE1h, 0BC963AEAh, 6D05D866h
		dd 3FF38CAEh, 3C9904BCh, 0BC9E958Dh, 34E59FF7h,	3FF3A7DBh
		dd 0D661F5E2h, 0BC75E436h, 0C313A8E5h, 3FF3C32Dh, 375D29C3h
		dd 0BC9EFFF8h, 4C123422h, 3FF3DEA6h, 11F09EBBh,	3C8ADA09h
		dd 4AC801Ch, 3FF3FA45h,	0F956F9F3h, 0BC97D023h,	21F72E2Ah
		dd 3FF4160Ah, 1C309278h, 0BC5EF369h, 0D950A897h, 3FF431F5h
		dd 0E35F7998h, 0BC81C7DDh, 6061892Dh, 3FF44E08h, 4EF80CFh
		dd 3C489B7Ah, 0ED1D0057h, 3FF46A41h, 0D1648A76h, 3C9C944Bh
		dd 0B5C13CD0h, 3FF486A2h, 0B69062F0h, 3C73C1A3h, 0F0D7D3DEh
		dd 3FF4A32Ah, 0F3D1BE56h, 3C99CB62h, 0D5362A27h, 3FF4BFDAh
		dd 0AFEC42E2h, 3C7D4397h, 99FDDD0Dh, 3FF4DCB2h,	0BC6A7833h
		dd 3C98ECDBh, 769D2CA7h, 3FF4F9B2h, 0D25957E3h,	0BC94B309h
		dd 0A2CF6642h, 3FF516DAh, 69BD93EEh, 0BC8F7685h, 569D4F82h
		dd 3FF5342Bh, 1DB13CACh, 0BC807ABEh, 0CA5D920Fh, 3FF551A4h
		dd 0EFEDE59Ah, 0BC8D689Ch, 36B527DAh, 3FF56F47h, 11D93ACh
		dd 3C99BB2Ch, 0D497C7FDh, 3FF58D12h, 5B9A1DE7h,	3C8295E1h
		dd 0DD485429h, 3FF5AB07h, 54647ACh, 3C96324Ch, 8A5946B7h
		dd 3FF5C926h, 816986A2h, 3C3C4B1Bh, 15AD2148h, 3FF5E76Fh
		dd 3080E65Dh, 3C9BA6F9h, 0B976DC09h, 3FF605E1h,	9B56DE47h
		dd 0BC93E242h, 0B03A5585h, 3FF6247Eh, 7E40B496h, 0BC9383C1h
		dd 34CCC320h, 3FF64346h, 759D8932h, 0BC8C483Ch,	82552225h
		dd 3FF66238h, 87591C33h, 0BC9BB609h, 0D44CA973h, 3FF68155h
		dd 44F73E64h, 3C6038AEh, 667F3BCDh, 3FF6A09Eh, 13B26455h
		dd 0BC9BDD34h, 750BDABFh, 3FF6C012h, 67FF0B0Ch,	0BC728956h
		dd 3C651A2Fh, 3FF6DFB2h, 683C88AAh, 0BC6BBE3Ah,	0F9519484h
		dd 3FF6FF7Dh, 25860EF6h, 0BC883C0Fh, 0E8EC5F74h, 3FF71F75h
		dd 86887A99h, 0BC816E47h, 48A58174h, 3FF73F9Ah,	6C65D53Bh
		dd 0BC90A8D9h, 564267C9h, 3FF75FEBh, 57316DD3h,	0BC902459h
		dd 4FDE5D3Fh, 3FF78069h, 0A02162Ch, 3C9866B8h, 73EB0187h
		dd 3FF7A114h, 0EE04992Fh, 0BC841577h, 130C132h,	3FF7C1EDh
		dd 0D1164DD5h, 3C9F124Ch, 36CF4E62h, 3FF7E2F3h,	0BA15797Eh
		dd 3C705D02h, 543E1A12h, 3FF80427h, 626D972Ah, 0BC927C86h
		dd 994CCE13h, 3FF82589h, 0D41532D7h, 0BC9D4C1Dh, 4623C7ADh
		dd 3FF8471Ah, 0A341CDFBh, 0BC88D684h, 9B4492EDh, 3FF868D9h
		dd 9BD4F6BAh, 0BC9FC6F8h, 0D98A6699h, 3FF88AC7h, 0F37CB53Ah
		dd 3C9994C2h, 422AA0DBh, 3FF8ACE5h, 56864B26h, 3C96E9F1h
		dd 16B5448Ch, 3FF8CF32h, 32E9E3AAh, 0BC70D55Eh,	99157736h
		dd 3FF8F1AEh, 0A2E3976Ch, 3C85CC13h, 0B91FFC6h,	3FF9145Bh
		dd 2E582523h, 0BC9DD679h, 0B0CDC5E5h, 3FF93737h, 81B57EBBh
		dd 0BC675FC7h, 0CBC8520Fh, 3FF95A44h, 96A5F039h, 0BC764B7Ch
		dd 9FDE4E50h, 3FF97D82h, 7C1B85D0h, 0BC9D185Bh,	70CA07BAh
		dd 3FF9A0F1h, 91CEE632h, 0BC9173BDh, 82A3F090h,	3FF9C491h
		dd 0B071F2BEh, 3C7C7C46h, 19E32323h, 3FF9E863h,	78E64C6Eh
		dd 3C7824CAh, 7B5DE565h, 3FFA0C66h, 5D1CD532h, 0BC935949h
		dd 0EC4A2D33h, 3FFA309Bh, 7DDC36ABh, 3C96305Ch,	0B23E255Dh
		dd 3FFA5503h, 0DB8D41E1h, 0BC9D2F6Eh, 1330B358h, 3FFA799Eh
		dd 0CAC563C6h, 3C9BCB7Eh, 5579FDBFh, 3FFA9E6Bh,	0EF7FD31h
		dd 3C90FAC9h, 0BFD3F37Ah, 3FFAC36Bh, 0CAE76CD0h, 0BC8F9234h
		dd 995AD3ADh, 3FFAE89Fh, 345DCC81h, 3C97A1CDh, 298DB666h
		dd 3FFB0E07h, 4C80E424h, 0BC9BDEF5h, 0B84F15FBh, 3FFB33A2h
		dd 3084D707h, 0BC62805Eh, 8DE5593Ah, 3FFB5972h,	0BBBA6DE3h
		dd 0BC9C71DFh, 0F2FB5E47h, 3FFB7F76h, 7E54AC3Ah, 0BC75584Fh
		dd 30A1064Ah, 3FFBA5B0h, 0E54292Eh, 0BC9EFCD3h,	904BC1D2h
		dd 3FFBCC1Eh, 7A2D9E84h, 3C823DD0h, 5BD71E09h, 3FFBF2C2h
		dd 3F6B9C72h, 0BC9EFDCAh, 0DD85529Ch, 3FFC199Bh, 895048DDh
		dd 3C811065h, 5FFFD07Ah, 3FFC40ABh, 0E083C60Ah,	3C9B4537h
		dd 2E57D14Bh, 3FFC67F1h, 0FF483CACh, 3C92884Dh,	9406E7B5h
		dd 3FFC8F6Dh, 48805C44h, 3C71ACBCh, 0DCEF9069h,	3FFCB720h
		dd 0D1E949DBh, 3C7503CBh, 555DC3FAh, 3FFCDF0Bh,	53829D72h
		dd 0BC8DD83Bh, 4A07897Ch, 3FFD072Dh, 43797A9Ch,	0BC9CBC37h
		dd 80D89F2h, 3FFD2F87h,	719D8577h, 0BC9D487Bh, 0DCFBA487h
		dd 3FFD5818h, 0D75B3706h, 3C82ED02h, 16C98398h,	3FFD80E3h
		dd 8BEDDFE8h, 0BC911EC1h, 3DB3285h, 3FFDA9E6h, 696DB532h
		dd 3C9C2300h, 0F301B460h, 3FFDD321h, 78F018C2h,	3C92DA57h
		dd 337B9B5Fh, 3FFDFC97h, 4F184B5Bh, 0BC91A5CDh,	14F5A129h
		dd 3FFE2646h, 817A1496h, 0BC97B627h, 0E78B3FF6h, 3FFE502Eh
		dd 80A9CC8Fh, 3C839E89h, 0FBC74C83h, 3FFE7A51h,	0CA0C8DE1h
		dd 3C92D522h, 0A2A490DAh, 3FFEA4AFh, 179C2893h,	0BC9E9C23h
		dd 2D8E67F1h, 3FFECF48h, 0B411AD8Ch, 0BC9C93F3h, 0EE615A27h
		dd 3FFEFA1Bh, 86A4B6B0h, 3C9DC7F4h, 376BBA97h, 3FFF252Bh
		dd 0BF0D8E43h, 3C93A1A5h, 5B6E4540h, 3FFF5076h,	2DD8A18Ah
		dd 3C99D3E1h, 0AD9CBE14h, 3FFF7BFDh, 0D0063509h, 0BC9DBB12h
		dd 819E90D8h, 3FFFA7C1h, 0F3A5931Eh, 3C874853h,	2B8F71F1h
		dd 3FFFD3C2h, 966579E7h, 3C62EB74h
; const	WCHAR FileName
FileName:				; DATA XREF: sub_41AE5C+Eo
		unicode	0, <CONOUT$>,0
aLog10_0	db 'log10',0            ; DATA XREF: sub_41AF68+3Ao
					; sub_41AF68+A6o
		align 10h
oword_428F10	db 0, 0, 0, 0, 0, 0, 0F0h, 3Fh,	0, 0, 0, 0, 0, 0, 0F0h
					; DATA XREF: .text:0041B103r
					; .text:0041B12Ar
		db 3Fh
oword_428F20	db 33h,	4, 0, 0, 0, 0, 0, 0, 33h, 4, 0,	0, 0, 0, 0, 0
					; DATA XREF: .text:0041B066r
oword_428F30	db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
					; DATA XREF: .text:loc_41B121r
oword_428F40	db 0FFh, 7, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0
					; DATA XREF: .text:0041B07Fr
dbl_428F50	db 0, 0, 0, 0, 0, 0, 0,	80h ; DATA XREF: .text:loc_41B11Ar
		align 10h
oword_428F60	db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0Fh, 0, 0FFh, 0FFh
					; DATA XREF: sub_41B59E+17r
					; sub_41B59E+188r
		db 0FFh, 0FFh, 0FFh, 0FFh, 0Fh,	0
oword_428F70	db 0, 0, 0, 0, 0, 0C0h,	0DBh, 3Fh, 0, 0, 0, 0, 0, 0C0h
					; DATA XREF: sub_41B59E+1Fr
		db 0DBh, 3Fh
oword_428F80	db 10h,	0F8h, 0FFh, 0FFh, 0FFh,	0FFh, 8Fh, 42h,	10h, 0F8h
					; DATA XREF: sub_41B59E+2Fr
		db 0FFh, 0FFh, 0FFh, 0FFh, 8Fh,	42h
oword_428F90	db 0, 0, 0, 80h, 0FFh, 0FFh, 0FFh, 7Fh,	0, 0, 0, 80h, 0FFh
					; DATA XREF: sub_41B59E+37r
		db 0FFh, 0FFh, 7Fh
oword_428FA0	db 0, 78h, 9Fh,	50h, 13h, 44h, 0D3h, 3Fh, 58h, 0B3h, 12h
					; DATA XREF: sub_41B59E+EBr
		db 1Fh,	31h, 0EFh, 1Fh,	3Dh
oword_428FB0	db 0, 0, 0, 0, 0, 0, 0,	0, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh
					; DATA XREF: sub_41B59E+F7r
		db 0FFh, 0FFh, 0FFh
		dd 2 dup(0FFFFFFFFh), 2	dup(0)
oword_428FD0	db 0, 0, 0, 0, 0, 0, 0F0h, 3Fh,	0, 0, 0, 0, 0, 0, 0F0h
					; DATA XREF: sub_41B59E+27r
					; sub_41B59E+190r ...
		db 3Fh
oword_428FE0	db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
					; DATA XREF: sub_41B59E+15Er
oword_428FF0	db 0, 0, 0, 0, 0, 0, 30h, 43h, 0, 0, 0,	0, 0, 0, 30h, 43h
					; DATA XREF: sub_41B59E:loc_41B776r
byte_429000	db 6 dup(0), 0F0h, 0FFh	; DATA XREF: sub_41B59E+1C9r
dbl_429008	dq 1.797693134862316e308 ; DATA	XREF: sub_41B59E+1AFr
		dd 1, 7FF00000h, 1, 7FF00000h
oword_429020	db 0F9h, 0CEh, 97h, 0C6h, 14h, 89h, 35h, 40h, 3Dh, 81h
					; DATA XREF: sub_41B59E+BFr
		db 29h,	64h, 9,	93h, 8,	0C0h
oword_429030	db 55h,	84h, 35h, 6Ah, 80h, 0C9h, 25h, 0C0h, 0D2h, 35h
					; DATA XREF: sub_41B59E+CBr
		db 96h,	0DCh, 2, 6Ah, 0FCh, 3Fh
oword_429040	db 0F7h, 99h, 18h, 7Eh,	9Fh, 0ABh, 16h,	40h, 35h, 0B1h
					; DATA XREF: sub_41B59E+DFr
		db 77h,	0DCh, 0F2h, 7Ah, 0F2h, 0BFh
oword_429050	db 8, 41h, 2Eh,	0BFh, 6Ch, 7Ah,	5Ah, 3Fh, 0, 0,	0, 0, 0
					; DATA XREF: sub_41B59E+117r
		db 0, 0, 0
oword_429060	db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
					; DATA XREF: sub_41B59E+5Dr
		dd 0AE40000h, 3F7C03A8h, 2D51F71Bh, 3D3E0538h, 0B6DE0000h
		dd 3F8B579Dh, 0FEFB3005h, 3D386B09h, 0DE968000h, 3F9470AEh
		dd 0C91E11Dh, 3D39FC78h, 8E3E0000h, 3F9ADA2Eh, 9E6E701Ah
		dd 3D351BD1h, 0F759C000h, 3FA0ADD8h, 90000A1h, 3D1B2A51h
		dd 0C6630000h, 3FA3FAF7h, 0F181F53Fh, 3D083662h, 59EFC000h
		dd 3FA7171Eh, 3FCF54DBh, 3D16BD1Ah, 2C70000h, 3FAA3E90h
		dd 0C8D0D386h, 3D21D257h, 2DC34000h, 3FAD3233h,	0F8D9441Fh
		dd 3D1B7ADBh, 70D6A000h, 3FB02811h, 28AF5076h, 3D1BF38Bh
		dd 0ECF16000h, 3FB19C1Fh, 1E5355D4h, 3D3EE03Fh,	0FD65C000h
		dd 3FB3151Bh, 48C6795h,	3D37E280h, 80C56000h, 3FB49327h
		dd 0CD62A5F3h, 3D2FC4ACh, 5EE98000h, 3FB60573h,	23A17D9Fh
		dd 3D17C3CFh, 8D4AA000h, 3FB76B77h, 12A06E7Ah, 3D1C03E8h
		dd 4EE4C000h, 3FB8D60Bh, 0CC4E4C82h, 3D3900E5h,	22244000h
		dd 3FBA33B4h, 34675735h, 3D36F170h, 54A78000h, 3FBB95B6h
		dd 24764EC7h, 3D290E5Eh, 2E9E000h, 3FBCEA26h, 822ECBCBh
		dd 3CEBD129h, 0C16CA000h, 3FBE42B4h, 0F38D4DE9h, 3D25E50Fh
		dd 0B16A6000h, 3FBF8D05h, 0A2B777A7h, 3D2A8EA5h, 0C53C2000h
		dd 3FC06D9Bh, 0EEE1FA45h, 3D32818Dh, 0ACDE0000h, 3FC10D3Eh
		dd 0CB83F0AEh, 3D1E8A45h, 1574D000h, 3FC1B83Fh,	0F193FFD4h
		dd 3D010B19h, 54FD000h,	3FC251FEh, 402877C0h, 3CFEAC09h
		dd 1CF4E000h, 3FC2F730h, 0D1A6341h, 3D30F5C7h, 0F795000h
		dd 3FC39470h, 791A7264h, 3D1FE93Fh, 53B4A000h, 3FC42974h
		dd 0C5BC4B34h, 3D3ECE09h, 0FAFEC000h, 3FC4CA24h, 42E66851h
		dd 3D2E2043h, 12093000h, 3FC56275h, 0B3AA172Dh,	3D30DFECh
		dd 1AF60000h, 3FC5F21Ah, 2D3E6113h, 3D3FEF1Bh, 16900000h
		dd 3FC68DA2h, 0FC9699D0h, 3CED942Ch, 6C280000h,	3FC72058h
		dd 624054CDh, 3D3D20A8h, 0FF1C5000h, 3FC7B495h,	689133C5h
		dd 3D25012Ch, 66CEA000h, 3FC83FA2h, 8687239Fh, 3D20C6C1h
		dd 0C56F000h, 3FC8CC0Eh, 0A1CFA0DFh, 3D36E3B4h,	0EFE7D000h
		dd 3FC959DFh, 7AFFE0E5h, 3D242002h, 47D2C000h, 3FC9E91Fh
		dd 6CF22420h, 3D35330Eh, 8B034000h, 3FCA6EA4h, 0B92B5B7Fh
		dd 3D33EBACh, 0C552F000h, 3FCB00B7h, 4C64AA73h,	3D3DF469h
		dd 7CF97000h, 3FCB88E6h, 2278A072h, 3D32FF23h, 0BA2E4000h
		dd 3FCC06E3h, 0CD55BD7Ch, 3D32CB15h, 0D46C0000h, 3FCC919Dh
		dd 94E6AC72h, 3D0EB646h, 61139000h, 3FCD11FBh, 91AE960Bh
		dd 3D1A34DBh, 0ABFD1000h, 3FCD9F59h, 0BCD76C73h, 3D207B23h
		dd 527E6000h, 3FCE163Dh, 0F22E93E4h, 3D319D69h,	0DC02A000h
		dd 3FCE9A2Ch, 9081F187h, 3D20EBF5h, 76949000h, 3FCF1F58h
		dd 0EA179000h, 3D07AFEBh, 1FDB7000h, 3FCF9980h,	0F7F29668h
		dd 3D22737Dh, 4509D000h, 3FD00A5Bh, 2353257Fh, 3D1F6B5Bh
		dd 37FBE800h, 3FD04880h, 0B9B912C6h, 3D1B6A93h,	5621A800h
		dd 3FD08731h, 7DBFF3AEh, 3D3261DAh, 1D6AB800h, 3FD0C671h
		dd 8D30C132h, 3D35E94Ah, 0CDD2A800h, 3FD0FFD9h,	0F6F19D80h
		dd 3D16350Eh, 0BEC27800h, 3FD1402Fh, 4222BA8Bh,	3D313C20h
		dd 19699000h, 3FD17A97h, 212D5C99h, 3D21F279h, 30AC5800h
		dd 3FD1B57Ah, 62FF847Eh, 3D3DCF3Eh, 153AB800h, 3FD1F0DBh
		dd 230C0EDFh, 3D27582Eh, 4F424800h, 3FD2260Eh, 28A41FF9h
		dd 3D157E10h, 0A6117800h, 3FD26262h, 2E0C1912h,	3D12B01Ah
		dd 0C043D800h, 3FD29871h, 0AC9E3779h, 3D2B3969h, 760B8000h
		dd 3FD2D5C1h, 0BE0F08BFh, 3D3AEADEh, 0A7BB3000h, 3FD30CB3h
		dd 19B6D832h, 3D389299h, 509F7800h, 3FD34413h, 1F12B358h
		dd 3D1FEF31h
oword_429470	db 0, 0, 0, 0, 0, 0C0h,	0DBh, 3Fh, 0, 0, 0, 0, 0, 0C0h
					; DATA XREF: sub_41B59E+55r
		db 0DBh, 3Fh
		dd 0
		dd 3FDB5100h, 0
		dd 3FDB5100h, 0
		dd 3FDAE8F0h, 0
		dd 3FDAE8F0h, 0
aRa?		db 'рк?',0
		align 4
aRa?_0		db 'рк?',0
		align 4
		dd 3FDA1FC0h, 0
		dd 3FDA1FC0h, 0
aA?_1		db ' Ой?',0
		align 4
aA?_2		db ' Ой?',0
		align 4
aA?_3		db ']й?',0
		align 4
aA?_4		db ']й?',0
		align 4
		dd 3FD90350h, 0
		dd 3FD90350h, 0
aI?		db ' Љи?',0
		align 4
aI?_0		db ' Љи?',0
		align 4
aRu?		db 'рUи?',0
		align 4
aRu?_0		db 'рUи?',0
		align 4
		dd 3FD7FF28h, 0
		dd 3FD7FF28h, 0
aP?		db '`Џз?',0
		align 4
aP?_0		db '`Џз?',0
		align 4
aS_?		db '_з?',0
		align 4
aS_?_0		db '_з?',0
		align 4
		dd 3FD70FD0h, 0
		dd 3FD70FD0h, 0
aA?_5		db 'Уж?',0
		align 4
aA?_6		db 'Уж?',0
		align 4
aIz?		db 'Јzж?',0
		align 4
aIz?_0		db 'Јzж?',0
		align 4
a1?		db 'а1ж?',0
		align 4
a1?_0		db 'а1ж?',0
		align 4
aP?_1		db 'pье?',0
		align 4
aP?_2		db 'pье?',0
		align 4
		dd 3FD5A710h, 0
		dd 3FD5A710h, 0
aE?		db '(eе?',0
		align 4
aE?_0		db '(eе?',0
		align 4
a@?_0		db '@#е?',0
		align 4
a@?_1		db '@#е?',0
		align 4
aF?_1		db 'афд?',0
		align 4
aF?_2		db 'афд?',0
		align 4
aJ?		db '`Ід?',0
		align 4
aJ?_0		db '`Ід?',0
		align 4
aHk?		db 'hkд?',0
		align 4
aHk?_0		db 'hkд?',0
		align 4
		dd 3FD42CF8h, 0
		dd 3FD42CF8h, 0
		dd 3FD3F578h, 0
		dd 3FD3F578h, 0
aA?_7		db 'Кг?',0
		align 4
aA?_8		db 'Кг?',0
		align 4
		dd 3FD38300h, 0
		dd 3FD38300h, 0
		dd 3FD34EF8h, 0
		dd 3FD34EF8h, 0
		dd 3FD31778h, 0
		dd 3FD31778h, 0
aPu?		db 'pув?',0
		align 4
aPu?_0		db 'pув?',0
		align 4
aR?		db 'рВв?',0
		align 4
aR?_0		db 'рВв?',0
		align 4
a?		db 'и~в?',0
		align 4
a?_0		db 'и~в?',0
		align 4
aHn?		db 'HNв?',0
		align 4
aHn?_0		db 'HNв?',0
		align 4
		dd 3FD21DB8h, 0
		dd 3FD21DB8h, 0
		dd 3FD1F0A0h, 0
		dd 3FD1F0A0h, 0
aI?_1		db 'Уб?',0
		align 4
aI?_2		db 'Уб?',0
		align 4
aPc?		db 'pб?',0
		align 4
aPc?_0		db 'pб?',0
		align 4
aXi?		db 'Xiб?',0
		align 4
aXi?_0		db 'Xiб?',0
		align 4
a??		db 'И?б?',0
		align 4
a??_0		db 'И?б?',0
		align 4
		dd 3FD112A0h, 0
		dd 3FD112A0h, 0
		dd 3FD0E900h, 0
		dd 3FD0E900h, 0
a?_1		db 'иТа?',0
		align 4
a?_2		db 'иТа?',0
		align 4
a8s?		db '8а?',0
		align 4
a8s?_0		db '8а?',0
		align 4
		dd 3FD07310h, 0
		dd 3FD07310h, 0
aPi?		db 'pIа?',0
		align 4
aPi?_0		db 'pIа?',0
		align 4
a?_3		db 'Р&а?',0
		align 4
a?_4		db 'Р&а?',0
		align 4
aS		db '',0
a?_5		db 'а?',0
		align 4
aS_0		db '',0
a?_6		db 'а?',0
		align 4
aR?_1		db 'рДЯ?',0
		align 4
aR?_2		db 'рДЯ?',0
		align 4
aAo?		db 'oЯ?',0
		align 4
aAo?_0		db 'oЯ?',0
		align 4
a?_7		db ' *Я?',0
		align 4
a?_8		db ' *Я?',0
		align 4
aF?_3		db 'РфЮ?',0
		align 4
aF?_4		db 'РфЮ?',0
		align 4
aQ?_1		db '`Ю?',0
		align 4
aQ?_2		db '`Ю?',0
		align 4
		dd 3FCE5A00h, 0
		dd 3FCE5A00h, 0
aR?_3		db '',1Bh,'Ю?',0
		align 4
aR?_4		db '',1Bh,'Ю?',0
		align 4
a0?		db '0жЭ?',0
		align 4
a0?_0		db '0жЭ?',0
		align 4
aC?		db 'РЭ?',0
		align 4
aC?_0		db 'РЭ?',0
		align 4
aPy?		db 'PYЭ?',0
		align 4
aPy?_0		db 'PYЭ?',0
		align 4
		dd 3FCD1AE0h, 0
		dd 3FCD1AE0h, 0
aU?		db '`уЬ?',0
		align 4
aU?_0		db '`уЬ?',0
		align 4
		dd 3FCCA4F0h, 0
		dd 3FCCA4F0h, 0
aPm?		db 'pmЬ?',0
		align 4
aPm?_0		db 'pmЬ?',0
		align 4
		dd 3FCC2F00h, 0
		dd 3FCC2F00h, 0
		dd 3FCBF780h, 0
		dd 3FCBF780h, 0
		dd 3FCBC000h, 0
		dd 3FCBC000h
aUnknownExcepti	db 'Unknown exception',0 ; DATA XREF: sub_401150+3o
		align 4
aBadCast	db 'bad cast',0         ; DATA XREF: sub_401210+Ao
		align 10h
aBadLocaleName	db 'bad locale name',0  ; DATA XREF: .text:loc_4012C8o
					; .text:loc_401717o
dword_4298B0	dd 0			; DATA XREF: sub_401500+7o
					; .text:004015CDo ...
asc_4298B4	db ': ',0               ; DATA XREF: .text:00401ADDo
		align 4
aIostream	db 'iostream',0         ; DATA XREF: sub_401CB0o
		align 4
aIostreamStream	db 'iostream stream error',0 ; DATA XREF: .text:00401CD3o
		align 4
aIos_baseBadbit	db 'ios_base::badbit set',0 ; DATA XREF: .text:00401E67o
		align 4
aIos_baseFailbi	db 'ios_base::failbit set',0 ; DATA XREF: .text:00401E71o
		align 4
aIos_baseEofbit	db 'ios_base::eofbit set',0 ; DATA XREF: .text:00401E76o
		align 4
aTrue		db 'TRUE',0             ; DATA XREF: sub_401FA0+33o
		align 4
aFalse		db 'FALSE',0            ; DATA XREF: sub_401FA0+51o
		align 4
aVmDetected	db 'VM detected : ',0   ; DATA XREF: sub_401FA0+43o
		align 4
aStringTooLong	db 'string too long',0  ; DATA XREF: .text:loc_402970o
		dd 4 dup(0)
		dd 5D0F9840h, 0
		dd 2, 62h, 2A42Ch, 2902Ch, 0
		dd 5D0F9840h, 0
		dd 0Ch,	14h, 2A490h, 29090h, 0
		dd 5D0F9840h, 0
		dd 0Dh,	314h, 2A4A4h, 290A4h, 0
		dd 5D0F9840h, 0
		dd 0Eh,	3 dup(0)
		dd 0A0h, 0Eh dup(0)
		dd offset dword_42C06C
		dd offset dword_42A3B0
		dd 1Fh
		dd offset off_41D12C
		dd 3 dup(0)
		dd 100h, 11h dup(0)
dword_429A70	dd 3 dup(0)		; DATA XREF: .rdata:0041D1B0o
		dd offset off_42C9D0
		dd offset dword_429A84
dword_429A84	dd 0			; DATA XREF: .rdata:00429A80o
					; .rdata:00429AC0o
		dd 1, 4
		dd offset off_429A94
off_429A94	dd offset off_429AA8	; DATA XREF: .rdata:00429A90o
		dd offset off_42A168
		dd offset off_42A1A0
		dd offset off_42A14C
		align 8
off_429AA8	dd offset off_42C9D0	; DATA XREF: .rdata:off_429A94o
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429A84
dword_429AC4	dd 3 dup(0)		; DATA XREF: .rdata:0041DD68o
		dd offset off_42C9F4
		dd offset dword_429AD8
dword_429AD8	dd 2 dup(0)		; DATA XREF: .rdata:00429AD4o
					; .rdata:00429B0Co ...
		dd 2
		dd offset off_429AE8
off_429AE8	dd offset off_429AF4	; DATA XREF: .rdata:00429AE4o
		dd offset off_429B10
		dd 0
off_429AF4	dd offset off_42C9F4	; DATA XREF: .rdata:off_429AE8o
					; .rdata:00429B88o
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429AD8
off_429B10	dd offset off_42CA10	; DATA XREF: .rdata:00429AECo
					; .rdata:00429B8Co
		align 8
		dd 8, 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429B2C
dword_429B2C	dd 2 dup(0)		; DATA XREF: .rdata:00429B28o
					; .rdata:00429B5Co ...
		dd 1
		dd offset off_429B3C
off_429B3C	dd offset off_429B44	; DATA XREF: .rdata:00429B38o
		dd 0
off_429B44	dd offset off_42CA10	; DATA XREF: .rdata:off_429B3Co
		align 10h
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429B2C
dword_429B60	dd 3 dup(0)		; DATA XREF: .rdata:0041DDF0o
		dd offset off_42CA2C
		dd offset dword_429B74
dword_429B74	dd 2 dup(0)		; DATA XREF: .rdata:00429B70o
					; .rdata:00429BACo ...
		dd 3
		dd offset off_429B84
off_429B84	dd offset off_429B94	; DATA XREF: .rdata:00429B80o
		dd offset off_429AF4
		dd offset off_429B10
		dd 0
off_429B94	dd offset off_42CA2C	; DATA XREF: .rdata:off_429B84o
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429B74
dword_429BB0	dd 3 dup(0)		; DATA XREF: .rdata:0041DD70o
		dd offset off_42CA64
		dd offset dword_429BC4
dword_429BC4	dd 2 dup(0)		; DATA XREF: .rdata:00429BC0o
					; .rdata:00429BF4o
		dd 1
		dd offset off_429BD4
off_429BD4	dd offset off_429BDC	; DATA XREF: .rdata:00429BD0o
		dd 0
off_429BDC	dd offset off_42CA64	; DATA XREF: .rdata:off_429BD4o
					; .rdata:00429CC8o
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429BC4
off_429BF8	dd offset off_42CA2C	; DATA XREF: .rdata:00429C74o
		dd 2, 2	dup(0)
		dd 4, 50h
		dd offset dword_429B74
off_429C14	dd offset off_42C9F4	; DATA XREF: .rdata:00429C78o
		dd 1, 2	dup(0)
		dd 4, 40h
		dd offset dword_429AD8
off_429C30	dd offset off_42CA10	; DATA XREF: .rdata:00429C7Co
		align 8
		dd 8, 0
		dd 4, 40h
		dd offset dword_429B2C
dword_429C4C	dd 0			; DATA XREF: .rdata:0041DDF8o
		dd 8, 4
		dd offset off_42CAA0
		dd offset dword_429C60
dword_429C60	dd 2 dup(0)		; DATA XREF: .rdata:00429C5Co
					; .rdata:00429C9Co
		dd 4
		dd offset off_429C70
off_429C70	dd offset off_429C84	; DATA XREF: .rdata:00429C6Co
		dd offset off_429BF8
		dd offset off_429C14
		dd offset off_429C30
		dd 0
off_429C84	dd offset off_42CAA0	; DATA XREF: .rdata:off_429C70o
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429C60
dword_429CA0	dd 3 dup(0)		; DATA XREF: .rdata:0041DDB0o
		dd offset off_42CADC
		dd offset dword_429CB4
dword_429CB4	dd 2 dup(0)		; DATA XREF: .rdata:00429CB0o
					; .rdata:00429CE8o
		dd 2
		dd offset off_429CC4
off_429CC4	dd offset off_429CD0	; DATA XREF: .rdata:00429CC0o
		dd offset off_429BDC
		align 10h
off_429CD0	dd offset off_42CADC	; DATA XREF: .rdata:off_429CC4o
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429CB4
unk_429CEC	db    0			; DATA XREF: .rdata:00429D28o
		db    0
		db    0
		db    0
		dd 1, 4
		dd offset off_429CFC
off_429CFC	dd offset off_429D10	; DATA XREF: .rdata:00429CF8o
		dd offset off_42A168
		dd offset off_42A1A0
		dd offset off_42A14C
		align 10h
off_429D10	dd offset off_42CB18	; DATA XREF: .rdata:off_429CFCo
					; .rdata:00429D54o
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset unk_429CEC
dword_429D2C	dd 3 dup(0)		; DATA XREF: .rdata:0041DE08o
		dd offset off_42CB38
		dd offset dword_429D40
dword_429D40	dd 0			; DATA XREF: .rdata:00429D3Co
					; .rdata:00429D80o
		dd 1, 5
		dd offset off_429D50
off_429D50	dd offset off_429D68	; DATA XREF: .rdata:00429D4Co
		dd offset off_429D10
		dd offset off_42A168
		dd offset off_42A1A0
		dd offset off_42A14C
		align 8
off_429D68	dd offset off_42CB38	; DATA XREF: .rdata:off_429D50o
		dd 4, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429D40
dword_429D84	dd 3 dup(0)		; DATA XREF: .rdata:0041DE4Co
		dd offset off_42CB64
		dd offset dword_429D98
dword_429D98	dd 2 dup(0)		; DATA XREF: .rdata:00429D94o
					; .rdata:00429DCCo
		dd 2
		dd offset off_429DA8
off_429DA8	dd offset off_429DB4	; DATA XREF: .rdata:00429DA4o
		dd offset off_42A1F4
		dd 0
off_429DB4	dd offset off_42CB64	; DATA XREF: .rdata:off_429DA8o
					; .rdata:00429F2Co
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429D98
dword_429DD0	dd 3 dup(0)		; DATA XREF: .rdata:0041DE68o
		dd offset off_42CB80
		dd offset dword_429DE4
dword_429DE4	dd 2 dup(0)		; DATA XREF: .rdata:00429DE0o
					; .rdata:00429E18o
		dd 2
		dd offset off_429DF4
off_429DF4	dd offset off_429E00	; DATA XREF: .rdata:00429DF0o
		dd offset off_42A1F4
		align 10h
off_429E00	dd offset off_42CB80	; DATA XREF: .rdata:off_429DF4o
					; .rdata:00429E44o ...
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429DE4
dword_429E1C	dd 3 dup(0)		; DATA XREF: .rdata:0041DE74o
		dd offset off_42CBA0
		dd offset dword_429E30
dword_429E30	dd 2 dup(0)		; DATA XREF: .rdata:00429E2Co
					; .rdata:00429E68o
		dd 3
		dd offset off_429E40
off_429E40	dd offset off_429E50	; DATA XREF: .rdata:00429E3Co
		dd offset off_429E00
		dd offset off_42A1F4
		align 10h
off_429E50	dd offset off_42CBA0	; DATA XREF: .rdata:off_429E40o
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429E30
dword_429E6C	dd 3 dup(0)		; DATA XREF: .rdata:0041DE80o
		dd offset off_42CBC0
		dd offset dword_429E80
dword_429E80	dd 2 dup(0)		; DATA XREF: .rdata:00429E7Co
					; .rdata:00429EB8o
		dd 3
		dd offset off_429E90
off_429E90	dd offset off_429EA0	; DATA XREF: .rdata:00429E8Co
		dd offset off_429E00
		dd offset off_42A1F4
		align 10h
off_429EA0	dd offset off_42CBC0	; DATA XREF: .rdata:off_429E90o
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429E80
dword_429EBC	dd 3 dup(0)		; DATA XREF: .rdata:00420390o
		dd offset off_42CBE0
		dd offset dword_429ED0
dword_429ED0	dd 2 dup(0)		; DATA XREF: .rdata:00429ECCo
					; .rdata:00429F00o
		dd 1
		dd offset off_429EE0
off_429EE0	dd offset off_429EE8	; DATA XREF: .rdata:00429EDCo
		align 8
off_429EE8	dd offset off_42CBE0	; DATA XREF: .rdata:off_429EE0o
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429ED0
dword_429F04	dd 3 dup(0)		; DATA XREF: .rdata:004203A0o
		dd offset off_42CBF8
		dd offset dword_429F18
dword_429F18	dd 2 dup(0)		; DATA XREF: .rdata:00429F14o
					; .rdata:00429F50o
		dd 3
		dd offset off_429F28
off_429F28	dd offset off_429F38	; DATA XREF: .rdata:00429F24o
		dd offset off_429DB4
		dd offset off_42A1F4
		align 8
off_429F38	dd offset off_42CBF8	; DATA XREF: .rdata:off_429F28o
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429F18
dword_429F54	dd 3 dup(0)		; DATA XREF: .rdata:004203E8o
		dd offset off_42CC20
		dd offset dword_429F68
dword_429F68	dd 2 dup(0)		; DATA XREF: .rdata:00429F64o
					; .rdata:00429F9Co
		dd 2
		dd offset off_429F78
off_429F78	dd offset off_429F84	; DATA XREF: .rdata:00429F74o
		dd offset off_42A1F4
		dd 0
off_429F84	dd offset off_42CC20	; DATA XREF: .rdata:off_429F78o
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_429F68
off_429FA0	dd offset off_42A06C	; DATA XREF: .rdata:0042A21Co
		dd offset off_42A0C0
		dd offset off_42A0DC
		dd offset off_42A1D8
		dd offset off_42A1F4
		align 8
off_429FB8	dd offset off_42A088	; DATA XREF: .rdata:0042A22Co
		dd offset off_42A0A4
		dd offset off_42A0F8
		align 8
off_429FC8	dd offset off_42A0A4	; DATA XREF: .rdata:0042A23Co
		dd offset off_42A0F8
		dd 0
off_429FD4	dd offset off_42A0C0	; DATA XREF: .rdata:0042A24Co
		dd offset off_42A0DC
		dd offset off_42A1D8
		dd offset off_42A1F4
		align 8
off_429FE8	dd offset off_42A0DC	; DATA XREF: .rdata:0042A25Co
		dd offset off_42A1D8
		dd offset off_42A1F4
		align 8
off_429FF8	dd offset off_42A0F8	; DATA XREF: .rdata:0042A26Co
		align 10h
off_42A000	dd offset off_42A114	; DATA XREF: .rdata:0042A27Co
		dd offset off_42A130
		dd offset off_42A168
		dd offset off_42A1A0
		dd offset off_42A14C
		align 8
off_42A018	dd offset off_42A130	; DATA XREF: .rdata:0042A28Co
		dd offset off_42A168
		dd offset off_42A1A0
		dd offset off_42A14C
		dd 0
off_42A02C	dd offset off_42A168	; DATA XREF: .rdata:0042A29Co
		dd offset off_42A1A0
		dd offset off_42A14C
		dd 0
off_42A03C	dd offset off_42A184	; DATA XREF: .rdata:0042A2ACo
		dd 0
off_42A044	dd offset off_42A1A0	; DATA XREF: .rdata:0042A2BCo
		dd 0
off_42A04C	dd offset off_42A1BC	; DATA XREF: .rdata:0042A2CCo
		dd offset off_42A1F4
		align 8
off_42A058	dd offset off_42A1D8	; DATA XREF: .rdata:0042A2DCo
		dd offset off_42A1F4
		dd 0
off_42A064	dd offset off_42A1F4	; DATA XREF: .rdata:0042A2ECo
		dd 0
off_42A06C	dd offset off_42CDB8	; DATA XREF: .rdata:off_429FA0o
		dd 4, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A210
off_42A088	dd offset off_42CC40	; DATA XREF: .rdata:off_429FB8o
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A220
off_42A0A4	dd offset off_42CC6C	; DATA XREF: .rdata:00429FBCo
					; .rdata:off_429FC8o
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A230
off_42A0C0	dd offset off_42CD98	; DATA XREF: .rdata:00429FA4o
					; .rdata:off_429FD4o
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A240
off_42A0DC	dd offset off_42CD78	; DATA XREF: .rdata:00429FA8o
					; .rdata:00429FD8o ...
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A250
off_42A0F8	dd offset off_42CC98	; DATA XREF: .rdata:00429FC0o
					; .rdata:00429FCCo ...
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A260
off_42A114	dd offset off_42CCBC	; DATA XREF: .rdata:off_42A000o
		dd 4, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A270
off_42A130	dd offset off_42CCD8	; DATA XREF: .rdata:0042A004o
					; .rdata:off_42A018o
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A280
off_42A14C	dd offset off_42CD18	; DATA XREF: .rdata:00429AA0o
					; .rdata:00429D08o ...
		dd 0
		dd 4, 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A2A0
off_42A168	dd offset off_42CCF8	; DATA XREF: .rdata:00429A98o
					; .rdata:00429D00o ...
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A290
off_42A184	dd offset off_42CD18	; DATA XREF: .rdata:off_42A03Co
		align 10h
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A2A0
off_42A1A0	dd offset off_42CD3C	; DATA XREF: .rdata:00429A9Co
					; .rdata:00429D04o ...
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A2B0
off_42A1BC	dd offset off_42CD5C	; DATA XREF: .rdata:off_42A04Co
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A2C0
off_42A1D8	dd offset off_42CDF8	; DATA XREF: .rdata:00429FACo
					; .rdata:00429FDCo ...
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A2D0
off_42A1F4	dd offset off_42CDDC	; DATA XREF: .rdata:00429DACo
					; .rdata:00429DF8o ...
		align 10h
		dd 0FFFFFFFFh, 0
		dd 40h
		dd offset dword_42A2E0
dword_42A210	dd 2 dup(0)		; DATA XREF: .rdata:0042A084o
					; .rdata:0042A300o
		dd 5
		dd offset off_429FA0
dword_42A220	dd 2 dup(0)		; DATA XREF: .rdata:0042A0A0o
					; .rdata:0042A314o
		dd 3
		dd offset off_429FB8
dword_42A230	dd 2 dup(0)		; DATA XREF: .rdata:0042A0BCo
		dd 2
		dd offset off_429FC8
dword_42A240	dd 2 dup(0)		; DATA XREF: .rdata:0042A0D8o
					; .rdata:0042A328o
		dd 4
		dd offset off_429FD4
dword_42A250	dd 2 dup(0)		; DATA XREF: .rdata:0042A0F4o
					; .rdata:0042A33Co
		dd 3
		dd offset off_429FE8
dword_42A260	dd 2 dup(0)		; DATA XREF: .rdata:0042A110o
		dd 1
		dd offset off_429FF8
dword_42A270	dd 0			; DATA XREF: .rdata:0042A12Co
					; .rdata:0042A350o
		dd 1, 5
		dd offset off_42A000
dword_42A280	dd 0			; DATA XREF: .rdata:0042A148o
		dd 1, 4
		dd offset off_42A018
dword_42A290	dd 0			; DATA XREF: .rdata:0042A180o
		dd 1, 3
		dd offset off_42A02C
dword_42A2A0	dd 2 dup(0)		; DATA XREF: .rdata:0042A164o
					; .rdata:0042A19Co
		dd 1
		dd offset off_42A03C
dword_42A2B0	dd 2 dup(0)		; DATA XREF: .rdata:0042A1B8o
					; .rdata:0042A364o
		dd 1
		dd offset off_42A044
dword_42A2C0	dd 2 dup(0)		; DATA XREF: .rdata:0042A1D4o
					; .rdata:0042A378o
		dd 2
		dd offset off_42A04C
dword_42A2D0	dd 2 dup(0)		; DATA XREF: .rdata:0042A1F0o
					; .rdata:0042A38Co
		dd 2
		dd offset off_42A058
dword_42A2E0	dd 2 dup(0)		; DATA XREF: .rdata:0042A20Co
					; .rdata:0042A3A0o
		dd 1
		dd offset off_42A064
dword_42A2F0	dd 3 dup(0)		; DATA XREF: .rdata:0041DD5Co
		dd offset off_42CDB8
		dd offset dword_42A210
dword_42A304	dd 3 dup(0)		; DATA XREF: .rdata:0041DD40o
		dd offset off_42CC40
		dd offset dword_42A220
dword_42A318	dd 3 dup(0)		; DATA XREF: .rdata:0041DD34o
		dd offset off_42CD98
		dd offset dword_42A240
dword_42A32C	dd 3 dup(0)		; DATA XREF: .rdata:0041DD28o
		dd offset off_42CD78
		dd offset dword_42A250
dword_42A340	dd 3 dup(0)		; DATA XREF: .rdata:0041DCF8o
		dd offset off_42CCBC
		dd offset dword_42A270
dword_42A354	dd 3 dup(0)		; DATA XREF: .rdata:0041D1A0o
		dd offset off_42CD3C
		dd offset dword_42A2B0
dword_42A368	dd 3 dup(0)		; DATA XREF: .rdata:0041DCECo
		dd offset off_42CD5C
		dd offset dword_42A2C0
dword_42A37C	dd 3 dup(0)		; DATA XREF: .rdata:0041DCE0o
		dd offset off_42CDF8
		dd offset dword_42A2D0
dword_42A390	dd 3 dup(0)		; DATA XREF: .rdata:0041DCD4o
		dd offset off_42CDDC
		dd offset dword_42A2E0
		align 10h
dword_42A3B0	dd 645Bh, 64F5h, 8540h,	96A0h, 9B11h, 1C14Ah, 1C170h, 1C190h
					; DATA XREF: .rdata:00429A10o
		dd 1C1F7h, 1C230h, 1C268h, 1C2A0h, 1C2D8h, 1C300h, 1C328h
		dd 1C358h, 1C390h, 1C3C8h, 1C3F0h, 1C40Bh, 1C42Eh, 1C451h
		dd 1C47Ch, 1C4B3h, 1C4CEh, 1C4E9h, 1C504h, 1C52Ch, 1C54Fh
		dd 1C574h, 1C597h, 53445352h, 990A2979h, 49691F7Dh, 314602A2h
		dd 8ED19D1Ch, 9, 555C3A43h, 73726573h, 72655A5Ch, 65445C30h
		dd 6F746B73h, 6F435C70h, 6C6F736Eh, 70704165h, 6163696Ch
		dd 6E6F6974h, 65525C31h, 7361656Ch, 6F435C65h, 6C6F736Eh
		dd 70704165h, 6163696Ch, 6E6F6974h, 64702E31h, 62h, 0
		dd 2 dup(118h),	2, 116h, 4C544347h, 1000h, 0D0h, 7865742Eh
		dd 69642474h, 0
		dd 10D0h, 1B030h, 7865742Eh, 6E6D2474h,	0
		dd 1C100h, 4BCh, 7865742Eh, 782474h, 1C5BCh, 50h, 7865742Eh
		dd 64792474h, 0
		dd 1D000h, 12Ch, 6164692Eh, 35246174h, 0
		dd 1D12Ch, 4, 6330302Eh, 6766h,	1D130h,	4, 5452432Eh, 41435824h
		dd 0
		dd 1D134h, 4, 5452432Eh, 41435824h, 41h, 1D138h, 1Ch, 5452432Eh
		dd 43435824h, 0
		dd 1D154h, 8, 5452432Eh, 4C435824h, 0
		dd 1D15Ch, 4, 5452432Eh, 5A435824h, 0
		dd 1D160h, 4, 5452432Eh, 41495824h, 0
		dd 1D164h, 4, 5452432Eh, 41495824h, 41h, 1D168h, 4, 5452432Eh
		dd 41495824h, 43h, 1D16Ch, 14h,	5452432Eh, 43495824h, 0
		dd 1D180h, 4, 5452432Eh, 5A495824h, 0
		dd 1D184h, 4, 5452432Eh, 41505824h, 0
		dd 1D188h, 8, 5452432Eh, 58505824h, 0
		dd 1D190h, 4, 5452432Eh, 58505824h, 41h, 1D194h, 4, 5452432Eh
		dd 5A505824h, 0
		dd 1D198h, 4, 5452432Eh, 41545824h, 0
		dd 1D19Ch, 4, 5452432Eh, 5A545824h, 0
		dd 1D1A0h, 0C8D0h, 6164722Eh, 6174h, 29A70h, 940h, 6164722Eh
		dd 72246174h, 0
		dd 2A3B0h, 7Ch,	6164722Eh, 73246174h, 74616478h, 61h, 2A42Ch
		dd 38Ch, 6164722Eh, 7A246174h, 62647A7Ah, 67h, 2A7B8h
		dd 4, 6374722Eh, 41414924h, 0
		dd 2A7BCh, 4, 6374722Eh, 5A5A4924h, 0
		dd 2A7C0h, 4, 6374722Eh, 41415424h, 0
		dd 2A7C4h, 4, 6374722Eh, 5A5A5424h, 0
		dd 2A7C8h, 0E1Ch, 6164782Eh, 78246174h,	0
		dd 2B5E4h, 14h,	6164692Eh, 32246174h, 0
		dd 2B5F8h, 14h,	6164692Eh, 33246174h, 0
		dd 2B60Ch, 12Ch, 6164692Eh, 34246174h, 0
		dd 2B738h, 55Eh, 6164692Eh, 36246174h, 0
		dd 2C000h, 9D0h, 7461642Eh, 61h, 2C9D0h, 448h, 7461642Eh
		dd 722461h, 2CE18h, 0E7Ch, 7373622Eh, 0
		dd 2E000h, 60h,	7273722Eh, 31302463h, 0
		dd 2E060h, 180h, 7273722Eh, 32302463h, 2 dup(0)
dword_42A7BC	dd 2 dup(0)		; DATA XREF: sub_405F82+2o
					; sub_405F82+7o
dword_42A7C4	dd 0			; DATA XREF: sub_405FAE+2o
					; sub_405FAE+7o
dword_42A7C8	dd 19930522h, 7		; DATA XREF: .text:0041C15Bo
		dd offset dword_42A7EC
		dd 5 dup(0)
		dd 1
dword_42A7EC	dd 0FFFFFFFFh		; DATA XREF: .rdata:0042A7D0o
		dd offset sub_41C100
		align 8
		dd offset sub_41C108
		dd 1
		dd offset sub_41C113
		dd 2
		dd offset sub_41C11E
		dd 3
		dd offset sub_41C129
		dd 4
		dd offset sub_41C134
		dd 5
		dd offset sub_41C13F
dword_42A824	dd 19930522h, 7	dup(0)	; DATA XREF: .text:0041C181o
					; .text:0041C1A1o ...
		dd 5
dword_42A848	dd 19930522h, 9		; DATA XREF: .text:0041C208o
		dd offset dword_42A870
		dd 5 dup(0)
		dd 1, 0
dword_42A870	dd 0FFFFFFFFh		; DATA XREF: .rdata:0042A850o
		dd offset sub_41C1B0
		dd 0
		dd offset sub_41C1BF
		dd 1
		dd offset sub_41C1C7
		dd 2
		dd offset sub_41C1CF
		dd 3
		dd offset sub_41C1D7
		dd 4
		dd offset sub_41C1DF
		dd 5
		dd offset sub_41C1E7
		dd 6
		dd offset sub_41C1EF
		dd 0FFFFFFFFh
		dd offset sub_406705
dword_42A8B8	dd 19930522h, 2		; DATA XREF: .text:0041C24Bo
		dd offset dword_42A8DC
		dd 5 dup(0)
		dd 1
dword_42A8DC	dd 0FFFFFFFFh		; DATA XREF: .rdata:0042A8C0o
		dd offset sub_41C220
		align 8
		dd offset sub_41C228
dword_42A8EC	dd 19930522h, 1		; DATA XREF: .text:0041C279o
		dd offset dword_42A910
		dd 5 dup(0)
		dd 1
dword_42A910	dd 0FFFFFFFFh		; DATA XREF: .rdata:0042A8F4o
		dd offset sub_41C260
dword_42A918	dd 19930522h, 6		; DATA XREF: .text:0041C2B1o
		dd offset dword_42A93C
		dd 1
		dd offset dword_42A96C
		dd 3 dup(0)
		dd 1
dword_42A93C	dd 0FFFFFFFFh		; DATA XREF: .rdata:0042A920o
		dd offset sub_41C290
		dd 0FFFFFFFFh
		dd offset sub_41C298
		dd 1, 0
		dd 1, 0
		dd 0FFFFFFFFh
		dd offset sub_406705
		dd 4
		dd offset sub_406705
dword_42A96C	dd 2 dup(2), 3,	1	; DATA XREF: .rdata:0042A928o
		dd offset dword_42A980
dword_42A980	dd 40h,	2 dup(0)	; DATA XREF: .rdata:0042A97Co
		dd offset sub_4023FD
dword_42A990	dd 19930522h, 5		; DATA XREF: .text:0041C2F3o
		dd offset dword_42A9B4
		dd 5 dup(0)
		dd 1
dword_42A9B4	dd 0FFFFFFFFh		; DATA XREF: .rdata:0042A998o
		dd offset sub_406705
		dd 0FFFFFFFFh
		dd offset sub_41C2C0
		dd 1
		dd offset sub_41C2C8
		dd 2
		dd offset sub_41C2D0
		dd 0FFFFFFFFh
		dd offset sub_406705
dword_42A9DC	dd 19930522h, 1		; DATA XREF: .text:0041C311o
		dd offset dword_42AA00
		dd 5 dup(0)
		dd 5
dword_42AA00	dd 0FFFFFFFFh		; DATA XREF: .rdata:0042A9E4o
		dd offset sub_406705
dword_42AA08	dd 19930522h, 1		; DATA XREF: .text:0041C339o
		dd offset dword_42AA2C
		dd 5 dup(0)
		dd 1
dword_42AA2C	dd 0FFFFFFFFh		; DATA XREF: .rdata:0042AA10o
		dd offset sub_41C320
dword_42AA34	dd 19930522h, 3		; DATA XREF: .text:0041C373o
		dd offset dword_42AA58
		dd 5 dup(0)
		dd 1
dword_42AA58	dd 0FFFFFFFFh		; DATA XREF: .rdata:0042AA3Co
		dd offset sub_41C350
		dd 0FFFFFFFFh
		dd offset sub_406705
		dd 1
		dd offset sub_406705
dword_42AA70	dd 19930522h, 6		; DATA XREF: .text:0041C3A1o
		dd offset dword_42AA94
		dd 1
		dd offset dword_42AAC4
		align 10h
		dd 1
dword_42AA94	dd 0FFFFFFFFh		; DATA XREF: .rdata:0042AA78o
		dd offset sub_41C380
		dd 0FFFFFFFFh
		dd offset sub_41C388
		dd 1, 0
		dd 1, 0
		dd 0FFFFFFFFh
		dd offset sub_406705
		dd 4
		dd offset sub_406705
dword_42AAC4	dd 2 dup(2), 3,	1	; DATA XREF: .rdata:0042AA80o
		dd offset dword_42AAD8
dword_42AAD8	dd 40h,	2 dup(0)	; DATA XREF: .rdata:0042AAD4o
		dd offset loc_402B82
dword_42AAE8	dd 19930522h, 5		; DATA XREF: .text:0041C3E3o
		dd offset dword_42AB0C
		dd 5 dup(0)
		dd 1
dword_42AB0C	dd 0FFFFFFFFh		; DATA XREF: .rdata:0042AAF0o
		dd offset sub_406705
		dd 0FFFFFFFFh
		dd offset sub_41C3B0
		dd 1
		dd offset sub_41C3B8
		dd 2
		dd offset sub_41C3C0
		dd 0FFFFFFFFh
		dd offset sub_406705
dword_42AB34	dd 19930522h, 2		; DATA XREF: .text:0041C401o
		dd offset dword_42AB58
		dd 1
		dd offset dword_42AB68
		dd 3 dup(0)
		dd 1
dword_42AB58	dd 0FFFFFFFFh, 0	; DATA XREF: .rdata:0042AB3Co
		dd 0FFFFFFFFh, 0
dword_42AB68	dd 2 dup(0)		; DATA XREF: .rdata:0042AB44o
		dd 2 dup(1)
		dd offset dword_42AB7C
dword_42AB7C	dd 40h,	2 dup(0)	; DATA XREF: .rdata:0042AB78o
		dd offset sub_402E8B
dword_42AB8C	dd 0FFFFFFFFh		; DATA XREF: .rdata:0042AB9Co
		dd offset sub_41C449
dword_42AB94	dd 19930522h, 1		; DATA XREF: .text:0041C462o
		dd offset dword_42AB8C
		dd 5 dup(0)
dword_42ABB4	dd 1, 0FFFFFFFFh	; DATA XREF: .rdata:0042ABC8o
		dd offset sub_41C426
dword_42ABC0	dd 19930522h, 1		; DATA XREF: .text:0041C43Fo
		dd offset dword_42ABB4+4
		dd 5 dup(0)
dword_42ABE0	dd 1, 0FFFFFFFFh	; DATA XREF: .rdata:0042ABF4o
		dd offset sub_406705
dword_42ABEC	dd 19930522h, 1		; DATA XREF: .text:0041C4DFo
		dd offset dword_42ABE0+4
		dd 5 dup(0)
dword_42AC0C	dd 1, 0FFFFFFFFh	; DATA XREF: .rdata:0042AC20o
		dd offset sub_406705
dword_42AC18	dd 19930522h, 1		; DATA XREF: .text:0041C4FAo
					; .text:0041C515o
		dd offset dword_42AC0C+4
		dd 5 dup(0)
dword_42AC38	dd 5, 0FFFFFFFFh	; DATA XREF: .rdata:0042AC4Co
		dd offset sub_41C547
dword_42AC44	dd 19930522h, 1		; DATA XREF: .text:0041C56Ao
		dd offset dword_42AC38+4
		dd 5 dup(0)
dword_42AC64	dd 1, 0FFFFFFFFh	; DATA XREF: .rdata:0042AC78o
		dd offset sub_41C497
dword_42AC70	dd 19930522h, 1		; DATA XREF: .text:0041C4C4o
		dd offset dword_42AC64+4
		dd 5 dup(0)
dword_42AC90	dd 1, 0FFFFFFFFh	; DATA XREF: .rdata:0042ACACo
		dd offset sub_41C46C
		align 10h
		dd offset sub_41C474
dword_42ACA4	dd 19930522h, 2		; DATA XREF: .text:0041C48Do
		dd offset dword_42AC90+4
		dd 5 dup(0)
dword_42ACC4	dd 1, 0FFFFFFFFh	; DATA XREF: .rdata:0042ACD8o
		dd offset sub_41C51F
dword_42ACD0	dd 19930522h, 1		; DATA XREF: .text:0041C53Do
		dd offset dword_42ACC4+4
		dd 5 dup(0)
		dd 1
dword_42ACF4	dd 0			; DATA XREF: sub_405C8B+Eo
		dd offset sub_4011F0
		align 10h
		dd offset dword_42AD04
dword_42AD04	dd 2			; DATA XREF: .rdata:0042AD00o
		dd offset dword_42AD10
		dd offset dword_42B59C
dword_42AD10	dd 10h			; DATA XREF: .rdata:0042AD08o
					; .rdata:0042AE14o
		dd offset off_42CB64
		dd 0
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_4048A4
unk_42AD2C	db    0			; DATA XREF: .rdata:0042AD60o
					; .rdata:0042AD9Co
		db    0
		db    0
		db    0
		dd offset off_42CB80
		align 8
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_404911
dword_42AD48	dd 0			; DATA XREF: sub_404993+11o
		dd offset sub_4011F0
		dd 0
		dd offset dword_42AD58
dword_42AD58	dd 3			; DATA XREF: .rdata:0042AD54o
		dd offset dword_42AD68
		dd offset unk_42AD2C
		dd offset dword_42B59C
dword_42AD68	dd 0			; DATA XREF: .rdata:0042AD5Co
		dd offset off_42CBA0
		dd 0
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_4048D7
dword_42AD84	dd 0			; DATA XREF: sub_4049B3+11o
		dd offset sub_4011F0
		align 10h
		dd offset dword_42AD94
dword_42AD94	dd 3			; DATA XREF: .rdata:0042AD90o
		dd offset dword_42ADA4
		dd offset unk_42AD2C
		dd offset dword_42B59C
dword_42ADA4	dd 0			; DATA XREF: .rdata:0042AD98o
		dd offset off_42CBC0
		align 10h
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_40492C
dword_42ADC0	dd 0FFFFFFFEh, 0	; DATA XREF: start-180o
		dd 0FFFFFFCCh, 0
		dd 0FFFFFFFEh
		dd offset sub_4055B0
		dd offset sub_4055C4
		align 10h
dword_42ADE0	dd 0FFFFFFFEh, 0	; DATA XREF: sub_405786+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh
		dd offset loc_4057EB
		dd offset loc_4057FE
dword_42ADFC	dd 0			; DATA XREF: sub_405CA8+Eo
		dd offset sub_4011F0
		align 8
		dd offset dword_42AE0C
dword_42AE0C	dd 3			; DATA XREF: .rdata:0042AE08o
		dd offset dword_42AE1C
		dd offset dword_42AD10
		dd offset dword_42B59C
dword_42AE1C	dd 0			; DATA XREF: .rdata:0042AE10o
		dd offset off_42CBF8
		align 8
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_405C58
dword_42AE38	dd 0FFFFFFFEh, 0	; DATA XREF: sub_4065C8+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh
		dd offset loc_406628
		dd offset sub_40665F
		align 8
dword_42AE58	dd 0FFFFFFFEh, 0	; DATA XREF: sub_409395+2o
		dd 0FFFFFFD0h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_409460
		align 8
		dd offset loc_409417
		dd offset loc_409421
dword_42AE80	dd 0FFFFFFFEh, 0	; DATA XREF: sub_409135+2o
		dd 0FFFFFFA4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_409277
		align 10h
		dd offset loc_4091C1
		dd offset loc_4091CB
dword_42AEA8	dd 40h,	2 dup(0)	; DATA XREF: .rdata:0042AED8o
		dd offset loc_409319
dword_42AEB8	dd 0FFFFFFFFh, 0	; DATA XREF: .rdata:0042AEE4o
dword_42AEC0	dd 0FFFFFFFFh, 3 dup(0)	; DATA XREF: .rdata:0042AEECo
		dd 2 dup(1)
		dd offset dword_42AEA8
dword_42AEDC	dd 19930522h, 2		; DATA XREF: .text:0041C585o
		dd offset dword_42AEB8
		dd 1
		dd offset dword_42AEC0+8
		dd 3 dup(0)
		dd 1
dword_42AF00	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40885C+2o
		dd 0FFFFFFD0h, 0
		dd 0FFFFFFFEh
		dd offset loc_40897A
		dd offset loc_40897E
		align 10h
dword_42AF20	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40899B+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh
		dd offset sub_408A27
		dd offset sub_408A2B
dword_42AF3C	dd 0			; DATA XREF: sub_408AB4+33Bo
		dd offset sub_4011F0
		align 8
		dd offset dword_42AF4C
dword_42AF4C	dd 2			; DATA XREF: .rdata:0042AF48o
		dd offset dword_42AF58
		dd offset dword_42B59C
dword_42AF58	dd 0			; DATA XREF: .rdata:0042AF50o
		dd offset off_42CC20
		dd 0
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_4090E3
		align 8
dword_42AF78	dd 0FFFFFFFEh, 0	; DATA XREF: sub_409C4B+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh
		dd offset loc_409C73
		dd offset loc_409C77
		align 8
dword_42AF98	dd 0FFFFFFFEh, 0	; DATA XREF: sub_409F58+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_409F9A
		align 8
dword_42AFB8	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40AAEE+2o
		dd 0FFFFFFD0h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40AB5B
		align 8
dword_42AFD8	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40AB68+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40ABDE
		align 8
dword_42AFF8	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40ABEA+2o
		dd 0FFFFFFB4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40AC80
		align 8
dword_42B018	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40AC8C+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40ACD3
		align 8
dword_42B038	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40AED2+2o
		dd 0FFFFFFD0h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40AFC3
		align 8
dword_42B058	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40B054+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40B146
		align 8
dword_42B078	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40B359+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40B3DE
		align 8
dword_42B098	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40B522+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40B596
		align 8
dword_42B0B8	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40B775+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40B7B7
		align 8
dword_42B0D8	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40B9F3+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40BA35
		align 8
dword_42B0F8	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40BC8F+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40BCEA
		align 8
dword_42B118	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40C61A+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40C660
		align 8
dword_42B138	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40CEE2+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh
		dd offset sub_40CF99
		dd offset sub_40CFA9
		align 8
dword_42B158	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40CE9F+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40CED6
		align 8
dword_42B178	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40D221+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40D279
		align 8
dword_42B198	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40D1DE+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40D215
		align 8
dword_42B1B8	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40D1A3+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40D1CF
		align 8
dword_42B1D8	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40E465+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40E4A7
		align 8
dword_42B1F8	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40E414+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40E456
		align 8
dword_42B218	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40F0E2+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40F11E
		align 8
dword_42B238	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40F1D6+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40F21A
		align 8
dword_42B258	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40F12A+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40F17F
		align 8
dword_42B278	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40F18B+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40F1CA
		align 8
dword_42B298	dd 0FFFFFFFEh, 0	; DATA XREF: sub_40F65B+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_40F6BE
dword_42B2B4	dd 0FFFFFFFFh		; DATA XREF: .rdata:0042B2C4o
		dd offset sub_41C58F
dword_42B2BC	dd 19930522h, 1		; DATA XREF: .text:0041C5B2o
		dd offset dword_42B2B4
		dd 5 dup(0)
		dd 1
dword_42B2E0	dd 0FFFFFFFEh, 0	; DATA XREF: sub_410BAB+2o
		dd 0FFFFFFD0h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_410C43
		align 10h
dword_42B300	dd 0FFFFFFFEh, 0	; DATA XREF: sub_410DF8+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_410E42
		align 10h
dword_42B320	dd 0FFFFFFFEh, 0	; DATA XREF: sub_410E7A+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_410EED
		align 10h
dword_42B340	dd 0FFFFFFFEh, 0	; DATA XREF: sub_411089+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_411112
		align 10h
dword_42B360	dd 0FFFFFFFEh, 0	; DATA XREF: sub_411925+2o
		dd 0FFFFFFD0h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_4119DE
		align 10h
dword_42B380	dd 0FFFFFFFEh, 0	; DATA XREF: sub_41235F-5D7o
		dd 0FFFFFFD0h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_411DEC
		align 10h
dword_42B3A0	dd 0FFFFFFFEh, 0	; DATA XREF: sub_412AE0+2o
		dd 0FFFFFFD0h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_412BBB
		align 10h
dword_42B3C0	dd 0FFFFFFFEh, 0	; DATA XREF: sub_412F9C+2o
		dd 0FFFFFFC8h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_413068
		align 10h
dword_42B3E0	dd 0FFFFFFFEh, 0	; DATA XREF: sub_413BB0+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh
		dd offset loc_413BE6
		dd offset loc_413C02
		align 10h
dword_42B400	dd 0FFFFFFFEh, 0	; DATA XREF: sub_415315+2o
		dd 0FFFFFFBCh, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_415496
		align 10h
dword_42B420	dd 0FFFFFFFEh, 0	; DATA XREF: sub_415201+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_41524C
		align 10h
dword_42B440	dd 0FFFFFFFEh, 0	; DATA XREF: sub_416619+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_416695
		align 10h
dword_42B460	dd 0FFFFFFFEh, 0	; DATA XREF: sub_41619F+2o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_4161D6
		align 10h
dword_42B480	dd 0FFFFFFFEh, 0	; DATA XREF: sub_416E7E+2o
		dd 0FFFFFFD0h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_416F06
		align 10h
dword_42B4A0	dd 0FFFFFFFEh, 0	; DATA XREF: sub_417F0D+2o
		dd 0FFFFFFD4h, 0
		dd 0FFFFFFFEh, 0
		dd offset sub_417F6A
		align 10h
dword_42B4C0	dd 0FFFFFFFEh, 0	; DATA XREF: sub_41B990+5o
		dd 0FFFFFFD8h, 0
		dd 0FFFFFFFEh
		dd offset loc_41BA19
		dd offset loc_41BA2C
dword_42B4DC	dd 2			; DATA XREF: .rdata:0042B510o
		dd offset dword_42B4E8
		dd offset dword_42B59C
dword_42B4E8	dd 0			; DATA XREF: .rdata:0042B4E0o
		dd offset off_42CD5C
		dd 0
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_402820
dword_42B504	dd 0			; DATA XREF: .text:00402619o
					; .text:00402D72o ...
		dd offset sub_4011F0
		align 10h
		dd offset dword_42B4DC
dword_42B514	dd 5			; DATA XREF: .rdata:0042B58Co
		dd offset dword_42B564
		dd offset dword_42B548
		dd offset dword_42B52C
		dd offset dword_42B5B8
		dd offset dword_42B59C
dword_42B52C	dd 0			; DATA XREF: .rdata:0042B520o
		dd offset off_42CD78
		align 8
		dd 0FFFFFFFFh, 0
		dd 14h
		dd offset sub_401F50
dword_42B548	dd 0			; DATA XREF: .rdata:0042B51Co
		dd offset off_42CD98
		dd 0
		dd 0FFFFFFFFh, 0
		dd 14h
		dd offset sub_401F00
dword_42B564	dd 0			; DATA XREF: .rdata:0042B518o
		dd offset off_42CDB8
		align 10h
		dd 0FFFFFFFFh, 0
		dd 14h
		dd offset sub_401EB0
dword_42B580	dd 0			; DATA XREF: .text:00401E98o
		dd offset sub_4011F0
		dd 0
		dd offset dword_42B514
dword_42B590	dd 2			; DATA XREF: .rdata:0042B5E0o
		dd offset dword_42B5B8
		dd offset dword_42B59C
dword_42B59C	dd 0			; DATA XREF: .rdata:0042AD0Co
					; .rdata:0042AD64o ...
		dd offset off_42CDDC
		align 8
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_401120
dword_42B5B8	dd 0			; DATA XREF: .rdata:0042B524o
					; .rdata:0042B594o
		dd offset off_42CDF8
		dd 0
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_4013C0
dword_42B5D4	dd 0			; DATA XREF: .text:004012D5o
					; .text:00401724o
		dd offset sub_4011F0
		align 10h
		dd offset dword_42B590
		dd 2B60Ch, 2 dup(0)
		dd 2BC88h, 1D000h, 5 dup(0)
		dd 2B738h, 2B74Eh, 2B75Eh, 2B776h, 2B78Eh, 2B7A6h, 2B7B6h
		dd 2B7C6h, 2B7DCh, 2B7ECh, 2B814h, 2B826h, 2B832h, 2B840h
		dd 2B84Eh, 2B858h, 2B872h, 2B886h, 2B898h, 2B8AAh, 2B8BAh
		dd 2B8CCh, 2B8DEh, 2B8EAh, 2B906h, 2B924h, 2B938h, 2B94Ch
		dd 2B968h, 2B982h, 2B998h, 2B9AEh, 2B9C4h, 2B9D8h, 2B9EAh
		dd 2B9F6h, 2BA08h, 2BA16h, 2BA28h, 2BA38h, 2BA44h, 2BA5Ah
		dd 2BA68h, 2BA7Eh, 2BA90h, 2BAA2h, 2BAAEh, 2BABEh, 2BAD4h
		dd 2BAEAh, 2BAF6h, 2BB04h, 2BB12h, 2BB26h, 2BB36h, 2BB48h
		dd 2BB54h, 2BB64h, 2BB78h, 2BB88h, 2BB96h, 2BBA2h, 2BBB6h
		dd 2BBC6h, 2BBD8h, 2BBE2h, 2BBEEh, 2BC08h, 2BC22h, 2BC3Ch
		dd 2BC4Ch, 2BC5Eh, 2BC6Ah, 2BC78h, 0
		db 0FEh	; ў
		db 5, 57h, 69h
aDechartomultib	db 'deCharToMultiByte',0
		dw 261h
aGetlasterror	db 'GetLastError',0
		align 2
		dw 131h
aEntercriticals	db 'EnterCriticalSection',0
		align 2
		dw 3BDh
aLeavecriticals	db 'LeaveCriticalSection',0
		align 2
		dw 110h
aDeletecritical	db 'DeleteCriticalSection',0
		dw 12Dh
aEncodepointer	db 'EncodePointer',0
		dw 109h
aDecodepointer	db 'DecodePointer',0
		dw 3EFh
aMultibytetowid	db 'MultiByteToWideChar',0
		db  32h	; 2
		db 5, 53h, 65h
aTlasterror	db 'tLastError',0
		align 4
		db  5Fh	; _
		db 3, 49h, 6Eh
aItializecritic	db 'itializeCriticalSectionAndSpinCount',0
		db  87h	; 
		db 5, 53h, 77h
aItchtothread	db 'itchToThread',0
		align 2
		dw 59Eh
aTlsalloc	db 'TlsAlloc',0
		align 2
		dw 5A0h
aTlsgetvalue	db 'TlsGetValue',0
		db 0A1h	; Ё
		db 5, 54h, 6Ch
aSsetvalue	db 'sSetValue',0
		dw 59Fh
aTlsfree	db 'TlsFree',0
		db 0E9h	; щ
		db 2, 47h, 65h
aTsystemtimeasf	db 'tSystemTimeAsFileTime',0
		dw 278h
aGetmodulehandl	db 'GetModuleHandleW',0
		align 2
		dw 2AEh
aGetprocaddress	db 'GetProcAddress',0
		align 4
aI		db '',0
aComparestringw	db 'CompareStringW',0
		align 2
		dw 3B1h
aLcmapstringw	db 'LCMapStringW',0
		align 2
		dw 265h
aGetlocaleinfow	db 'GetLocaleInfoW',0
		align 4
		dd 654702D7h, 72745374h, 54676E69h, 57657079h, 1C10000h
		dd 43746547h, 666E4950h, 5AD006Fh
aUnhandledexcep	db 'UnhandledExceptionFilter',0
		align 2
		dw 56Dh
aSetunhandledex	db 'SetUnhandledExceptionFilter',0
		db  17h
		db 2, 47h, 65h
aTcurrentproces	db 'tCurrentProcess',0
		db  8Ch	; 
		db 5, 54h, 65h
aRminateprocess	db 'rminateProcess',0
		align 4
		db  86h	; 
		db 3, 49h, 73h
aProcessorfeatu	db 'ProcessorFeaturePresent',0
		db  4Dh	; M
		db 4, 51h, 75h
aEryperformance	db 'eryPerformanceCounter',0
		dw 218h
aGetcurrentpr_0	db 'GetCurrentProcessId',0
		db  1Ch
		db 2, 47h, 65h
aTcurrentthread	db 'tCurrentThreadId',0
		align 2
		dw 363h
aInitializeslis	db 'InitializeSListHead',0
		db  7Fh	; 
		db 3, 49h, 73h
aDebuggerpresen	db 'DebuggerPresent',0
		db 0D0h	; а
		db 2, 47h, 65h
aTstartupinfow	db 'tStartupInfoW',0
		dw 4D3h
aRtlunwind	db 'RtlUnwind',0
		dw 462h
aRaiseexception	db 'RaiseException',0
		align 4
		db 0ABh	; Ћ
		db 1, 46h, 72h
aEelibrary	db 'eeLibrary',0
		dw 3C3h
aLoadlibraryexw	db 'LoadLibraryExW',0
		align 4
		db 0D2h	; в
		db 2, 47h, 65h
aTstdhandle	db 'tStdHandle',0
		align 4
		db  12h
		db 6, 57h, 72h
aItefile	db 'iteFile',0
		db  74h	; t
		db 2, 47h, 65h
aTmodulefilenam	db 'tModuleFileNameW',0
		align 2
		dw 15Eh
aExitprocess	db 'ExitProcess',0
		db  77h	; w
		db 2, 47h, 65h
aTmodulehandlee	db 'tModuleHandleExW',0
		align 2
		dw 1D6h
aGetcommandline	db 'GetCommandLineA',0
		dd 654701D7h, 6D6F4374h, 646E616Dh, 656E694Ch, 3490057h
		dd 70616548h, 65657246h, 38D0000h, 61567349h, 4C64696Ch
		dd 6C61636Fh, 3120065h
aGetuserdefau_0	db 'GetUserDefaultLCID',0
		align 4
		db  54h	; T
		db 1, 45h, 6Eh
aUmsystemlocale	db 'umSystemLocalesW',0
		align 2
		dw 345h
aHeapalloc	db 'HeapAlloc',0
		dw 24Eh
aGetfiletype	db 'GetFileType',0
aJ		db '',0
aClosehandle	db 'CloseHandle',0
		dw 19Fh
aFlushfilebuffe	db 'FlushFileBuffers',0
		align 2
		dw 1EAh
aGetconsolecp	db 'GetConsoleCP',0
		align 2
		dw 1FCh
aGetconsolemode	db 'GetConsoleMode',0
		align 4
		dd 65520473h, 69466461h, 656Ch,	6547024Ch, 6C694674h, 7A695365h
		dd 784565h, 65530523h, 6C694674h, 696F5065h, 7265746Eh
		dd 7845h, 65520470h, 6F436461h,	6C6F736Eh, 5765h, 6548034Ch
		dd 65527061h, 6F6C6C41h, 1750063h, 646E6946h, 736F6C43h
		dd 17B0065h, 646E6946h,	73726946h, 6C694674h, 57784565h
		dd 18C0000h, 646E6946h,	7478654Eh, 656C6946h, 38B0057h
		dd 61567349h, 4364696Ch, 5065646Fh, 656761h, 654701B2h
		dd 50434174h, 2970000h,	4F746547h, 50434D45h, 2370000h
aGetenvironment	db 'GetEnvironmentStringsW',0
		align 4
		db 0AAh	; Њ
		db 1, 46h, 72h
aEeenvironments	db 'eeEnvironmentStringsW',0
		dw 514h
aSetenvironment	db 'SetEnvironmentVariableW',0
		dd 6553054Ah, 64745374h, 646E6148h, 656Ch, 654702B4h, 6F725074h
		dd 73736563h, 70616548h, 34E0000h, 70616548h, 657A6953h
		dd 0CB0000h, 61657243h,	69466574h, 57656Ch, 72570611h
		dd 43657469h, 6F736E6Fh, 57656Ch, 4E52454Bh, 32334C45h
		dd 6C6C642Eh, 5Bh dup(0)
_rdata		ends

; Section 3. (virtual address 0002C000)
; Virtual size			: 00001C94 (   7316.)
; Section size in file		: 00001000 (   4096.)
; Offset to raw	data for section: 0002AA00
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 42C000h
dword_42C000	dd 0FFFFFFFFh		; DATA XREF: sub_402EBC+6w
					; .text:00402F1Ew
		align 8
aCopyrightCByP_	db 'Copyright (c) by P.J. Plauger, licensed by Dinkumware, Ltd. ALL R'
		db 'IGHTS RESERVED.',0
		align 4
dword_42C05C	dd 0Ah			; DATA XREF: .text:00404A48w
					; .text:loc_404A64r ...
		dd 1, 0FFFFFFFFh
dword_42C068	dd 44BF19B1h		; DATA XREF: sub_405A80+E3r
					; sub_405D12+43w
dword_42C06C	dd 0BB40E64Eh		; DATA XREF: sub_4010D0+6r
					; sub_401190+6r ...
		dd 9875h, 3 dup(0)
dword_42C080	dd 1			; DATA XREF: sub_405DB3+2r
		align 10h
dword_42C090	dd 1			; DATA XREF: .text:0040605Cw
					; .text:00406077w ...
		align 10h
; DWORD	dwTlsIndex
dwTlsIndex	dd 0FFFFFFFFh		; DATA XREF: sub_408745r
					; sub_408745+14r ...
		align 10h
dword_42C0B0	dd 19930520h, 3	dup(0)	; DATA XREF: sub_409C00+2o
					; sub_409C0C+2o
off_42C0C0	dd offset asc_420D78	; DATA XREF: sub_40D2F1+D9w
					; "	    (((((		   H"
off_42C0C4	dd offset word_42127A	; DATA XREF: sub_413301+2Ar
dword_42C0C8	dd 3 dup(0)		; DATA XREF: sub_40A8E5+6Do
					; sub_40A9AD+9o
		dd 2001h, 0Dh dup(0)
		dd 2002h, 1, 0Ch dup(0)
		dd 2402h, 2, 9 dup(0)
dword_42C170	dd 0Ch			; DATA XREF: sub_40A8E5+BBo
					; sub_40BD71+9o
dword_42C174	dd 8, 2	dup(0)		; DATA XREF: sub_40BD5E+9o
off_42C180	dd offset dword_42C1D4	; DATA XREF: sub_417151+2Eo
					; sub_417151+314o ...
off_42C184	dd offset dword_42D6F8	; DATA XREF: sub_41750A+21r
					; sub_417573+1ECr
off_42C188	dd offset dword_42D6F8	; DATA XREF: sub_41750A+33r
					; sub_417573+1F4r
off_42C18C	dd offset dword_42D6F8	; DATA XREF: sub_417053+14r
off_42C190	dd offset dword_42D6F8	; DATA XREF: sub_417053+26r
off_42C194	dd offset dword_42D6F8	; DATA XREF: sub_417053+38r
off_42C198	dd offset dword_42D6F8	; DATA XREF: sub_417053+4Ar
off_42C19C	dd offset dword_42D6F8	; DATA XREF: sub_417053+5Cr
off_42C1A0	dd offset dword_42D6F8	; DATA XREF: sub_417053+6Er
off_42C1A4	dd offset dword_42D6F8	; DATA XREF: sub_417053+80r
		dd 2 dup(7F7F7F7Fh)
off_42C1B0	dd offset dword_42C1D8	; DATA XREF: sub_41750A+45r
					; sub_417573+1FCr
off_42C1B4	dd offset dword_42D6FC	; DATA XREF: sub_41750A+57r
					; sub_417573+204r
off_42C1B8	dd offset dword_42D6FC	; DATA XREF: sub_417053+92r
off_42C1BC	dd offset dword_42D6FC	; DATA XREF: sub_417053+A4r
off_42C1C0	dd offset dword_42D6FC	; DATA XREF: sub_417053+B6r
off_42C1C4	dd offset dword_42D6FC	; DATA XREF: sub_417053+C8r
off_42C1C8	dd offset dword_42D6FC	; DATA XREF: sub_417053+DAr
off_42C1CC	dd offset dword_42D6FC	; DATA XREF: sub_417053+ECr
off_42C1D0	dd offset off_42C180	; DATA XREF: sub_40D2F1+D1w
dword_42C1D4	dd 2Eh			; DATA XREF: .data:off_42C180o
dword_42C1D8	dd 2Eh,	0		; DATA XREF: .data:off_42C1B0o
byte_42C1E0	db 2			; DATA XREF: sub_40C069:loc_40C07Ar
		align 4
off_42C1E4	dd offset asc_42127C	; DATA XREF: sub_40E00F+28Cr
					; "	   (((((		  H"
		align 10h
dword_42C1F0	dd 0FFFFFFFFh		; DATA XREF: sub_40F3FC+Dr
					; sub_40F3FC:loc_40F42Ar ...
dword_42C1F4	dd 0FFFFFFFEh		; DATA XREF: sub_409FA9+FFr
					; sub_40D2F1+ADr ...
dword_42C1F8	dd 1			; DATA XREF: sub_40D2F1+E2w
		align 10h
off_42C200	dd offset asc_420D78	; DATA XREF: sub_40A397+21r
					; sub_40A3C8+21r ...
					; "	    (((((		   H"
		dd 1, 0
		dd 1, 2	dup(0)
		dd 1, 5	dup(0)
		dd offset dword_42C2C0
		align 10h
		dd offset dword_42C2C0
		align 10h
		dd offset dword_42C2C0
		align 10h
		dd offset dword_42C2C0
		align 10h
		dd offset dword_42C2C0
		dd 5 dup(0)
		dd offset off_42C180
		dd 2 dup(0)
		dd offset dword_420FF8
		dd offset dword_421178
		dd offset off_421FA8
		dd 6 dup(0)
off_42C2B8	dd offset off_42C200	; DATA XREF: sub_40A217+29r
off_42C2BC	dd offset dword_42C498	; DATA XREF: sub_40A217+30r
					; sub_4164FE+111w
dword_42C2C0	dd 43h,	0		; DATA XREF: sub_40D2F1+42o
					; sub_40E00F:loc_40E358o ...
dword_42C2C8	dd 6 dup(0)		; DATA XREF: sub_40AED2+71o
					; sub_40AED2:loc_40AF4Ao ...
		dd 0FFFFFFFFh, 3 dup(0)
		dd 0A0A0080h, 0Ah, 2 dup(0)
byte_42C300	db 0			; DATA XREF: sub_4111A0+D9r
					; sub_4111A0+176r ...
		align 4
		dd 2Fh dup(0)
		dd 8 dup(1010101h), 4 dup(2020202h), 2 dup(3030303h), 2	dup(0)
dword_42C400	dd 1			; DATA XREF: sub_413BB0+1Cr
					; sub_413BB0+55w
		align 10h
dword_42C410	dd 545350h, 0Fh	dup(0)	; DATA XREF: .data:off_42C490o
dword_42C450	dd 544450h, 0Fh	dup(0)	; DATA XREF: .data:0042C494o
off_42C490	dd offset dword_42C410	; DATA XREF: sub_415790+20o
		dd offset dword_42C450
dword_42C498	dd 16h dup(0)		; DATA XREF: sub_40E82F+15o
					; sub_40F12A+32o ...
		dd 10100000h, 6	dup(10101010h),	0
		dd 20200000h, 6	dup(20202020h),	31h dup(0)
		dd 62610000h, 66656463h, 6A696867h, 6E6D6C6Bh, 7271706Fh
		dd 76757473h, 7A797877h, 0
		db    0
		align 2
aAbcdefghijklmn	db 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',0
		align 10h
		dd 22h dup(0)
dword_42C6B8	dd 10h dup(0)		; DATA XREF: sub_4166AF+1Do
		dd 10100000h, 6	dup(10101010h),	0
		dd 20200000h, 6	dup(20202020h),	23h dup(0)
dword_42C7C0	dd 10h dup(0)		; DATA XREF: sub_4166AF+13o
		dd 63626100h, 67666564h, 6B6A6968h, 6F6E6D6Ch, 73727170h
		dd 77767574h, 7A7978h, 0
		db    0
aAbcdefghijkl_0	db 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',0
		dd 21h dup(0)
byte_42C8C0	db 1			; DATA XREF: sub_41670A+173r
		db 2, 4, 8
		align 8
dword_42C8C8	dd 3A4h			; DATA XREF: sub_41670A:loc_41673Er
dword_42C8CC	dd 82798260h		; DATA XREF: sub_41670A+1BEr
		dd 21h,	0
dword_42C8D8	dd 0DFA6h		; DATA XREF: sub_41670A+14Cr
		align 10h
		dd 0A5A1h, 0
		dd 0FCE09F81h, 0
		dd 0FC807E40h, 0
		dd 3A8h, 0A3DAA3C1h, 20h, 5 dup(0)
		dd 0FE81h, 0
		dd 0FE40h, 0
		dd 3B5h, 0A3DAA3C1h, 20h, 5 dup(0)
		dd 0FE81h, 0
		dd 0FE41h, 0
		dd 3B6h, 0A2E4A2CFh, 0A2E5001Ah, 5BA2E8h, 4 dup(0)
		dd 0FE81h, 0
		dd 0FEA17E40h, 0
		dd 551h, 0DA5EDA51h, 0DA5F0020h, 32DA6Ah, 4 dup(0)
		dd 0DED8D381h, 0F9E0h, 0FE817E31h, 3 dup(0)
; HANDLE hObject
hObject		dd 0FFFFFFFEh		; DATA XREF: sub_41AE5C+19w
					; sub_41AE7Br ...
		align 10h
off_42C9D0	dd offset off_420394	; DATA XREF: .rdata:00429A7Co
					; .rdata:off_429AA8o
		align 8
a_?av_locimp@lo	db '.?AV_Locimp@locale@std@@',0
		align 4
off_42C9F4	dd offset off_420394	; DATA XREF: .rdata:00429AD0o
					; .rdata:off_429AF4o ...
		dd 0
a_?avios_base@s	db '.?AVios_base@std@@',0
		align 10h
off_42CA10	dd offset off_420394	; DATA XREF: .rdata:off_429B10o
					; .rdata:off_429B44o ...
		align 8
a_?av?_iosb@h@s	db '.?AV?$_Iosb@H@std@@',0
off_42CA2C	dd offset off_420394	; DATA XREF: .rdata:00429B6Co
					; .rdata:off_429B94o ...
		dd 0
a_?av?Basic_ios	db '.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@',0
		align 4
off_42CA64	dd offset off_420394	; DATA XREF: .rdata:00429BBCo
					; .rdata:off_429BDCo
		dd 0
a_?av?Basic_str	db '.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@',0
off_42CAA0	dd offset off_420394	; DATA XREF: .rdata:00429C58o
					; .rdata:off_429C84o
		align 8
a_?av?Basic_ost	db '.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@',0
		align 4
off_42CADC	dd offset off_420394	; DATA XREF: .rdata:00429CACo
					; .rdata:off_429CD0o
		dd 0
a_?av?Basic_fil	db '.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@',0
		align 4
off_42CB18	dd offset off_420394	; DATA XREF: .rdata:off_429D10o
		align 10h
a_?avcodecvt_ba	db '.?AVcodecvt_base@std@@',0
		align 4
off_42CB38	dd offset off_420394	; DATA XREF: .rdata:00429D38o
					; .rdata:off_429D68o
		align 10h
a_?av?Codecvt@d	db '.?AV?$codecvt@DDU_Mbstatet@@@std@@',0
		align 4
off_42CB64	dd offset off_420394	; DATA XREF: .rdata:00429D90o
					; .rdata:off_429DB4o ...
		dd 0
a_?avbad_alloc@	db '.?AVbad_alloc@std@@',0
off_42CB80	dd offset off_420394	; DATA XREF: .rdata:00429DDCo
					; .rdata:off_429E00o ...
		align 8
a_?avlogic_erro	db '.?AVlogic_error@std@@',0
		align 10h
off_42CBA0	dd offset off_420394	; DATA XREF: .rdata:00429E28o
					; .rdata:off_429E50o ...
		align 8
a_?avlength_err	db '.?AVlength_error@std@@',0
		align 10h
off_42CBC0	dd offset off_420394	; DATA XREF: .rdata:00429E78o
					; .rdata:off_429EA0o ...
		align 8
a_?avout_of_ran	db '.?AVout_of_range@std@@',0
		align 10h
off_42CBE0	dd offset off_420394	; DATA XREF: .rdata:00429EC8o
					; .rdata:off_429EE8o
		align 8
a_?avtype_info@	db '.?AVtype_info@@',0
off_42CBF8	dd offset off_420394	; DATA XREF: .rdata:00429F10o
					; .rdata:off_429F38o ...
		align 10h
a_?avbad_array_	db '.?AVbad_array_new_length@std@@',0
		align 10h
off_42CC20	dd offset off_420394	; DATA XREF: sub_408AB4+117o
					; .rdata:00429F60o ...
		align 8
a_?avbad_except	db '.?AVbad_exception@std@@',0
off_42CC40	dd offset off_420394	; DATA XREF: .rdata:off_42A088o
					; .rdata:0042A310o
		align 8
a_?av_iostream_	db '.?AV_Iostream_error_category@std@@',0
		align 4
off_42CC6C	dd offset off_420394	; DATA XREF: .rdata:off_42A0A4o
		dd 0
a_?av_generic_e	db '.?AV_Generic_error_category@std@@',0
		align 4
off_42CC98	dd offset off_420394	; DATA XREF: .rdata:off_42A0F8o
		align 10h
a_?averror_cate	db '.?AVerror_category@std@@',0
		align 4
off_42CCBC	dd offset off_420394	; DATA XREF: .rdata:off_42A114o
					; .rdata:0042A34Co
		dd 0
a_?av?Ctype@d@s	db '.?AV?$ctype@D@std@@',0
off_42CCD8	dd offset off_420394	; DATA XREF: .rdata:off_42A130o
		align 10h
a_?auctype_base	db '.?AUctype_base@std@@',0
		align 4
off_42CCF8	dd offset off_420394	; DATA XREF: .rdata:off_42A168o
		align 10h
a_?avfacet@loca	db '.?AVfacet@locale@std@@',0
		align 4
off_42CD18	dd offset off_420394	; DATA XREF: .rdata:off_42A14Co
					; .rdata:off_42A184o
		align 10h
a_?au_crt_new_d	db '.?AU_Crt_new_delete@std@@',0
		align 4
off_42CD3C	dd offset off_420394	; DATA XREF: .rdata:off_42A1A0o
					; .rdata:0042A360o
		dd 0
a_?av_facet_bas	db '.?AV_Facet_base@std@@',0
		align 4
off_42CD5C	dd offset off_420394	; DATA XREF: .rdata:off_42A1BCo
					; .rdata:0042A374o ...
		dd 0
a_?avbad_cast@s	db '.?AVbad_cast@std@@',0
		align 4
off_42CD78	dd offset off_420394	; DATA XREF: .rdata:off_42A0DCo
					; .rdata:0042A338o ...
		align 10h
a_?av_system_er	db '.?AV_System_error@std@@',0
off_42CD98	dd offset off_420394	; DATA XREF: .rdata:off_42A0C0o
					; .rdata:0042A324o ...
		align 10h
a_?avsystem_err	db '.?AVsystem_error@std@@',0
		align 4
off_42CDB8	dd offset off_420394	; DATA XREF: .rdata:off_42A06Co
					; .rdata:0042A2FCo ...
		align 10h
a_?avfailure@io	db '.?AVfailure@ios_base@std@@',0
		align 4
off_42CDDC	dd offset off_420394	; DATA XREF: .rdata:off_42A1F4o
					; .rdata:0042A39Co ...
		dd 0
a_?avexception@	db '.?AVexception@std@@',0
off_42CDF8	dd offset off_420394	; DATA XREF: .rdata:off_42A1D8o
					; .rdata:0042A388o ...
		align 10h
a_?avruntime_er	db '.?AVruntime_error@std@@',0
dword_42CE18	dd 2 dup(0)		; DATA XREF: sub_401000o
					; .text:0041C5BDo
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <0> ; DATA XREF: sub_402EBC+11o
					; sub_402EE9+1Eo ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
dword_42CEE0	dd 0			; DATA XREF: sub_401430+27r
					; sub_401430+2Ew ...
dword_42CEE4	dd 0			; DATA XREF: sub_403128+48w
					; sub_403128+5Fr
		dd 4 dup(0)
dword_42CEF8	dd 0			; DATA XREF: .text:004024F8r
					; .text:00402511r ...
dword_42CEFC	dd 0			; DATA XREF: .text:loc_41C5D0o
dword_42CF00	dd 0			; DATA XREF: sub_403128+64w
dword_42CF04	dd 0			; DATA XREF: .text:loc_41C5C6o
dword_42CF08	dd 0			; DATA XREF: .text:00403007w
					; .text:loc_40301Br ...
dword_42CF0C	dd 0			; DATA XREF: sub_403122r
					; sub_403128+17r ...
byte_42CF10	db 0			; DATA XREF: sub_4032B7+3r
					; sub_4032B7+11w
		align 8
byte_42CF18	db 0			; DATA XREF: sub_401091o
					; .text:0041C5EFo
byte_42CF19	db 3 dup(0)		; DATA XREF: sub_401087o
		align 10h
dword_42CF20	dd 14h dup(0)		; DATA XREF: sub_40102E+9o
					; sub_401FA0+3Bo ...
dword_42CF70	dd 0			; DATA XREF: sub_40102E+4o
					; sub_40104D+Ao ...
		dd 15h dup(0)
dword_42CFC8	dd 0			; DATA XREF: sub_4036AB+1Co
dword_42CFCC	dd 0			; DATA XREF: sub_403BF3+62r
					; sub_403DE1+46r
dword_42CFD0	dd 0			; DATA XREF: sub_403BF3+6Ar
					; sub_403DE1+4Fr
dword_42CFD4	dd 0			; DATA XREF: sub_4036AB+16r
					; sub_4036AB+79w
dword_42CFD8	dd 5 dup(0)		; DATA XREF: sub_404A14o
dword_42CFEC	dd 0			; DATA XREF: sub_401087+27A1r
dword_42CFF0	dd 0			; DATA XREF: sub_401087+27ACw
					; sub_401087+27C2r ...
dword_42CFF4	dd 0			; DATA XREF: sub_401087:loc_40384Fr
dword_42CFF8	dd 0			; DATA XREF: sub_401087:loc_403868r
		dd 0
		dd 3 dup(?)
byte_42D00C	db ?			; DATA XREF: sub_4010B3o
					; .text:0041C603o
byte_42D00D	db 3 dup(?)		; DATA XREF: .text:loc_41C5F8o
dword_42D010	dd ?			; DATA XREF: .text:loc_404A3Fr
					; sub_404A7D+25w
		dd 0Ah dup(?)
dword_42D03C	dd ?			; DATA XREF: sub_404C9E:loc_404CB6r
					; sub_404C9E+3Aw
		dd 9 dup(?)
byte_42D064	db ?			; DATA XREF: sub_404C9E:loc_404CD2w
					; sub_404D1D+Ew ...
		align 10h
dword_42D070	dd ?			; DATA XREF: sub_404DA5+26w
dword_42D074	dd ?			; DATA XREF: sub_404DA5+3Dw
dword_42D078	dd ?			; DATA XREF: sub_404DA5+54w
dword_42D07C	dd ?			; DATA XREF: sub_404DA5+6Bw
dword_42D080	dd ?			; DATA XREF: sub_404DA5+82w
					; sub_4051DD+4r
dword_42D084	dd ?			; DATA XREF: sub_404DA5+99w
					; sub_40514F+4r
dword_42D088	dd ?			; DATA XREF: sub_404DA5+B0w
dword_42D08C	dd ?			; DATA XREF: sub_404DA5+C7w
dword_42D090	dd ?			; DATA XREF: sub_404DA5+DEw
dword_42D094	dd ?			; DATA XREF: sub_404DA5+F5w
dword_42D098	dd ?			; DATA XREF: sub_404DA5+10Cw
dword_42D09C	dd ?			; DATA XREF: sub_404DA5+123w
dword_42D0A0	dd ?			; DATA XREF: sub_404DA5+13Aw
dword_42D0A4	dd ?			; DATA XREF: sub_404DA5+151w
dword_42D0A8	dd ?			; DATA XREF: sub_404DA5+167w
dword_42D0AC	dd ?			; DATA XREF: sub_404DA5+17Fw
dword_42D0B0	dd ?			; DATA XREF: sub_404DA5+196w
dword_42D0B4	dd ?			; DATA XREF: sub_404DA5+1ADw
dword_42D0B8	dd ?			; DATA XREF: sub_404DA5+1C4w
dword_42D0BC	dd ?			; DATA XREF: sub_404DA5+1DBw
dword_42D0C0	dd ?			; DATA XREF: sub_404DA5+1F2w
dword_42D0C4	dd ?			; DATA XREF: sub_404DA5+209w
dword_42D0C8	dd ?			; DATA XREF: sub_404DA5+220w
dword_42D0CC	dd ?			; DATA XREF: sub_404DA5+237w
dword_42D0D0	dd ?			; DATA XREF: sub_404DA5+24Ew
dword_42D0D4	dd ?			; DATA XREF: sub_404DA5+265w
dword_42D0D8	dd ?			; DATA XREF: sub_404DA5+27Cw
dword_42D0DC	dd ?			; DATA XREF: sub_404DA5+293w
dword_42D0E0	dd ?			; DATA XREF: sub_404DA5+2AAw
dword_42D0E4	dd ?			; DATA XREF: sub_404DA5+2C1w
dword_42D0E8	dd ?			; DATA XREF: sub_404DA5+2D8w
dword_42D0EC	dd ?			; DATA XREF: sub_404DA5+2EFw
dword_42D0F0	dd ?			; DATA XREF: sub_404DA5+306w
dword_42D0F4	dd ?			; DATA XREF: sub_404DA5+31Dw
dword_42D0F8	dd ?			; DATA XREF: sub_404DA5+334w
dword_42D0FC	dd ?			; DATA XREF: sub_404DA5+34Bw
dword_42D100	dd ?			; DATA XREF: sub_404DA5+362w
dword_42D104	dd ?			; DATA XREF: sub_404DA5+379w
dword_42D108	dd ?			; DATA XREF: sub_404DA5+390w
dword_42D10C	dd ?			; DATA XREF: sub_404DA5+3A1w
					; sub_40528E+4r
		dd 1Eh dup(?)
dword_42D188	dd ?			; DATA XREF: start-155r start-141w ...
dword_42D18C	dd ?			; DATA XREF: sub_405676+10o
					; sub_40581A+14o
byte_42D190	db ?			; DATA XREF: sub_4056A8+9w
					; sub_405837+3r
byte_42D191	db ?			; DATA XREF: sub_4056E1+6r
					; sub_4056E1:loc_405772w
		align 4
dword_42D194	dd ?			; DATA XREF: sub_4056E1+2Do
					; sub_4056E1+5Bo ...
		align 10h
dword_42D1A0	dd 4 dup(?)		; DATA XREF: sub_4056E1+3Co
					; sub_4056E1+7Co
dword_42D1B0	dd ?			; DATA XREF: sub_405A80+9Fw
					; sub_405B85+95w ...
dword_42D1B4	dd ?			; DATA XREF: sub_405A80+A9w
					; sub_405B85+9Fw
		dd ?
dword_42D1BC	dd ?			; DATA XREF: sub_405A80+9Aw
					; sub_405B85+90w
dword_42D1C0	dd ?			; DATA XREF: sub_405A80+B3w
					; sub_405B85+A9w
dword_42D1C4	dd ?			; DATA XREF: sub_405A80+C3w
					; sub_405B85+BCw
		dd 0Eh dup(?)
dword_42D200	dd ?			; DATA XREF: sub_405A80+8Bw
					; .rdata:ExceptionInfoo
		dd 22h dup(?)
word_42D28C	dw ?			; DATA XREF: sub_405A80+5Fw
					; sub_405B85+5Fw
		align 10h
word_42D290	dw ?			; DATA XREF: sub_405A80+58w
					; sub_405B85+58w
		align 4
word_42D294	dw ?			; DATA XREF: sub_405A80+51w
					; sub_405B85+51w
		align 4
word_42D298	dw ?			; DATA XREF: sub_405A80+4Aw
					; sub_405B85+4Aw
		align 4
dword_42D29C	dd ?			; DATA XREF: sub_405A80+36w
					; sub_405B85+36w
dword_42D2A0	dd ?			; DATA XREF: sub_405A80+30w
					; sub_405B85+30w
dword_42D2A4	dd ?			; DATA XREF: sub_405A80+2Aw
					; sub_405B85+2Aw
dword_42D2A8	dd ?			; DATA XREF: sub_405A80+24w
					; sub_405B85+24w
dword_42D2AC	dd ?			; DATA XREF: sub_405A80+1Ew
					; sub_405B85+1Ew
dword_42D2B0	dd ?			; DATA XREF: sub_405A80:loc_405A99w
					; sub_405B85:loc_405B9Ew
dword_42D2B4	dd ?			; DATA XREF: sub_405A80+70w
					; sub_405B85+70w
dword_42D2B8	dd ?			; DATA XREF: sub_405A80+78w
					; sub_405A80+95r ...
word_42D2BC	dw ?			; DATA XREF: sub_405A80+43w
					; sub_405B85+43w
		align 10h
dword_42D2C0	dd ?			; DATA XREF: sub_405A80+67w
					; sub_405B85+67w
dword_42D2C4	dd ?			; DATA XREF: sub_405A80+80w
					; sub_405B85+80w
word_42D2C8	dw ?			; DATA XREF: sub_405A80+3Cw
					; sub_405B85+3Cw
		align 4
		dd 81h dup(?)
dword_42D4D0	dd 2 dup(?)		; DATA XREF: sub_405D63o
dword_42D4D8	dd 2 dup(?)		; DATA XREF: sub_405D90o
dword_42D4E0	dd ?			; DATA XREF: sub_405F7Aw
dword_42D4E4	dd ?			; DATA XREF: .text:0040604Ew
					; .text:00406082w ...
dword_42D4E8	dd ?			; DATA XREF: .text:loc_406116r
					; .text:0040611Fw ...
dword_42D4EC	dd ?			; DATA XREF: sub_40885C+51r
; void TlsValue
TlsValue	dd 5 dup(?)		; DATA XREF: sub_40871B+Ao
					; sub_40880E:loc_408826o
dword_42D504	dd ?			; DATA XREF: sub_4097B3+Fr
		dd 4 dup(?)
dword_42D518	dd ?			; DATA XREF: sub_4095F9+5w
; struct _RTL_CRITICAL_SECTION stru_42D51C
stru_42D51C	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_409777+2o
dword_42D534	dd ?			; DATA XREF: sub_409777+1Dw
					; sub_4097B3+1r ...
dword_42D538	dd 3 dup(?)		; DATA XREF: sub_4097E2+11o
					; sub_409A74+Ao
dword_42D544	dd 5 dup(?)		; DATA XREF: sub_4098A6+7o
					; sub_409A4B+5o ...
dword_42D558	dd 0Ah dup(?)		; DATA XREF: sub_409A4Bo
dword_42D580	dd ?			; DATA XREF: sub_409EEE+11r
		dd 4 dup(?)
dword_42D594	dd ?			; DATA XREF: .text:00409DCAw
					; sub_409DD1+46r
dword_42D598	dd 54h dup(?)		; DATA XREF: .text:00409E9Ao
					; sub_409ED7+9o ...
dword_42D6E8	dd ?			; DATA XREF: .text:00409EB2w
					; sub_409EEE+3r ...
dword_42D6EC	dd ?			; DATA XREF: sub_40A8E5r
					; sub_40A8E5:loc_40A8FFw ...
; LPVOID lpMem
lpMem		dd ?			; DATA XREF: sub_40A8E5+29w
					; sub_40A8E5+36r ...
dword_42D6F4	dd ?			; DATA XREF: sub_40BA44+6Ew
					; sub_413152:loc_413199w ...
dword_42D6F8	dd ?			; DATA XREF: .data:off_42C184o
					; .data:off_42C188o ...
dword_42D6FC	dd ?			; DATA XREF: .data:off_42C1B4o
					; .data:off_42C1B8o ...
dword_42D700	dd ?			; DATA XREF: .text:0040C5E6w
					; sub_40C61A+27r
dword_42D704	dd ?			; DATA XREF: sub_40C7C6r sub_40C7CC+8w
dword_42D708	dd ?			; DATA XREF: sub_40C7FA+7r
					; .text:0040C81Aw ...
		align 10h
dword_42D710	dd 42h dup(?)		; DATA XREF: sub_40CB68-2BDo
dword_42D818	dd ?			; DATA XREF: sub_40CB73r
					; sub_40CB73:loc_40CB96r ...
dword_42D81C	dd ?			; DATA XREF: sub_40CB73+9r
					; sub_40CCF3+5r ...
dword_42D820	dd ?			; DATA XREF: .text:0040CDC4r
					; .text:0040CE03r
dword_42D824	dd ?			; DATA XREF: sub_40CB9F:loc_40CBD2w
					; .text:0040CDA9r ...
dword_42D828	dd ?			; DATA XREF: sub_40CEE2+1Eo
dword_42D82C	dd ?			; DATA XREF: sub_40CEE2+3Dr
					; .text:0040D0CAw ...
byte_42D830	db ?			; DATA XREF: sub_40CEE2+Er
					; sub_40CEE2+A4w
		align 4
dword_42D834	dd ?			; DATA XREF: sub_40CB68-2A7w
dword_42D838	dd ?			; DATA XREF: sub_40CB68-234w
					; sub_40CB68-1F3w ...
; LPVOID dword_42D83C
dword_42D83C	dd ?			; DATA XREF: sub_40CB68-22Bw
					; sub_40CB68-1E8w ...
; LPVOID dword_42D840
dword_42D840	dd ?			; DATA XREF: sub_40E7DF+32r
					; sub_40E7DF+46w
dword_42D844	dd ?			; DATA XREF: sub_40CB68-2AFr
					; sub_40D17E+6w
dword_42D848	dd ?			; DATA XREF: sub_40D17E+11w
dword_42D84C	dd ?			; DATA XREF: sub_40A217:loc_40A237r
					; sub_40A397+5r ...
dword_42D850	dd ?			; DATA XREF: sub_40E3D8r
					; sub_40E3DF:loc_40E405o
dword_42D854	dd ?			; DATA XREF: sub_40E40Eo
dword_42D858	dd 3 dup(?)		; DATA XREF: sub_40CEE2:loc_40CF39o
					; sub_40E6BD+8o ...
dword_42D864	dd 3 dup(?)		; DATA XREF: sub_40CEE2+63o
					; sub_40E76D+Ao
dword_42D870	dd 14h dup(?)		; DATA XREF: sub_40F81A+13o
					; sub_40FDAF+Co
dword_42D8C0	dd 22h dup(?)		; DATA XREF: sub_40F8E3+Ao
					; sub_40FD84+5o ...
dword_42D948	dd ?			; DATA XREF: sub_40F65B+2Cw
					; sub_40F65B+45w ...
dword_42D94C	dd ?			; DATA XREF: sub_40D221+1Bo
					; sub_40D2F1+B9o ...
dword_42D950	dd ?			; DATA XREF: sub_40A8E5+97r
					; sub_40AED2+6Ar ...
		dd 7Fh dup(?)
dword_42DB50	dd ?			; DATA XREF: sub_410C8C+45r
					; sub_410EFC+2Ar ...
; LPVOID dword_42DB54
dword_42DB54	dd ?			; DATA XREF: sub_40E7DF+3r
					; sub_40E7DF+16w ...
; LPVOID dword_42DB58
dword_42DB58	dd ?			; DATA XREF: sub_40E7DF+Er
					; sub_40E7DF+27w ...
dword_42DB5C	dd ?			; DATA XREF: sub_413D76+52o
					; sub_413D76:loc_413EA4w
dword_42DB60	dd ?			; DATA XREF: sub_413D76+135w
dword_42DB64	dd ?			; DATA XREF: sub_40BE7D:loc_40BED8r
					; sub_40BE7D:loc_40BEF5r ...
dword_42DB68	dd ?			; DATA XREF: sub_41525B:loc_415296o
					; .text:004152F6w
dword_42DB6C	dd ?			; DATA XREF: sub_41525B:loc_415281o
					; .text:004152FBw
dword_42DB70	dd ?			; DATA XREF: sub_415201+2Ar
					; sub_41525B:loc_41528Fo ...
dword_42DB74	dd ?			; DATA XREF: sub_41525B:loc_415288o
					; .text:00415305w
dword_42DB78	dd ?			; DATA XREF: sub_415790w
dword_42DB7C	dd ?			; DATA XREF: sub_415790+Cw
dword_42DB80	dd ?			; DATA XREF: sub_415790+16w
dword_42DB84	dd ?			; DATA XREF: sub_415790+20w
		dd 2Dh dup(?)
dword_42DC3C	dd ?			; DATA XREF: .text:0040E7CCo
					; sub_4104DA+Br ...
dword_42DC40	dd ?			; DATA XREF: sub_4161E2+17r
					; sub_4166AF+1Dw
dword_42DC44	dd ?			; DATA XREF: sub_4161E2+36r
					; sub_4166AF+13w
dword_42DC48	dd ?			; DATA XREF: sub_4162A3+12w
					; sub_4162A3+21w ...
byte_42DC4C	db ?			; DATA XREF: sub_4166AFr
					; sub_4166AF+3Ew
		align 10h
dword_42DC50	dd ?			; DATA XREF: sub_40D141:loc_40D173o
; HANDLE hHeap
hHeap		dd ?			; DATA XREF: sub_40F0A8+10r
					; sub_40FDE5+2Cr ...
dword_42DC58	dd ?			; DATA XREF: sub_419DD8+8r
dword_42DC5C	dd 2 dup(?)		; DATA XREF: sub_41AC0C+27o
dword_42DC64	dd 2 dup(?)		; DATA XREF: sub_41ADC0+16o
dword_42DC6C	dd ?			; DATA XREF: sub_401990+Do
dword_42DC70	dd ?			; DATA XREF: .text:004024F3r
					; .text:0040259Ew ...
		align 8
dword_42DC78	dd 2 dup(?)		; DATA XREF: sub_401990+3o
					; sub_401990+2Ao
dword_42DC80	dd ?			; DATA XREF: sub_4061E2+2r
dword_42DC84	dd ?			; DATA XREF: sub_405DC5o
dword_42DC88	dd ?			; DATA XREF: sub_405DBFo
dword_42DC8C	dd ?			; DATA XREF: sub_419DD8+13r
dword_42DC90	dd ?			; DATA XREF: .text:0040BE20r
					; sub_413ED4+8w ...
_data		ends


		end start
